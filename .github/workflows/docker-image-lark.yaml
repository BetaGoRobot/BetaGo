name: LarkRobot

on:
  push:
    branches: [master]
    paths-ignore:
      - "neteaseapi/netease-api-service/*"
      - "qqmusicapi/qqmusic-api-service/*"
      - "README.md"
  pull_request:
    branches: [master]
    paths-ignore:
      - "neteaseapi/netease-api-service/*"
      - "qqmusicapi/qqmusic-api-service/*"
      - "README.md"
  workflow_dispatch:
    inputs:
      name:
        description: "触发用途"
        required: true
        default: "测试"

env:
  IMAGE_NAME: kevinmatt/larkbot
  ROBOT_NAME: LarkRobot
  NETEASE_PHONE: "${{ secrets.NETEASE_PHONE }}"
  NETEASE_PASSWORD: "${{ secrets.NETEASE_PASSWORD }}"
  TENCENT_HEADER: ccr.ccs.tencentyun.com
  # 定义 GHCR 镜像名称 (你的原版 PushToGHCR job 中硬编码了 'larkbot')
  GHCR_IMAGE_NAME: ghcr.io/${{ github.repository_owner }}/larkbot

jobs:
  # 新增一个 Job，专门用于生成所有其他 Job 需要的变量
  prepare:
    runs-on: ubuntu-latest
    outputs:
      timestamp: ${{ steps.timestamp.outputs.timestamp }}
    steps:
      - name: Calculate timestamp
        id: timestamp
        run: echo "timestamp=$(date +%s%3N)" >> $GITHUB_OUTPUT

  # 原来的 Build 和 PushToDockerHub job 合并
  PushToDockerHub:
    needs: prepare # 依赖 prepare job 获取时间戳
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4 # 升级 action 版本

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to DockerHub
        uses: docker/login-action@v3 # 升级 action 版本
        with:
          username: kevinmatt
          password: ${{ secrets.DOCKER_ACCESS_TOKEN }}

      - name: Build and push to DockerHub
        uses: docker/build-push-action@v5 # 升级 action 版本
        with:
          context: .
          file: scripts/larkrobot/Dockerfile # 使用我们优化后的 Dockerfile
          push: true
          tags: |
            ${{ env.IMAGE_NAME }}:latest
            ${{ env.IMAGE_NAME }}:latest-${{ needs.prepare.outputs.timestamp }}
          # 关键：启用 Docker 缓存
          # 它会拉取 :latest 镜像的元数据作为缓存，并把新构建的缓存推送到 registry
          cache-from: type=registry,ref=${{ env.IMAGE_NAME }}:latest
          cache-to: type=inline

  # PushToGHCR:
  #   needs: prepare
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4
  #     - name: Set up QEMU
  #       uses: docker/setup-qemu-action@v3
  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v3
  #     - name: Log in to GHCR
  #       uses: docker/login-action@v3
  #       with:
  #         registry: ghcr.io
  #         username: ${{ github.actor }}
  #         password: ${{ secrets.GITHUB_TOKEN }}
  #     - name: Build and push to GHCR
  #       uses: docker/build-push-action@v5
  #       with:
  #         context: .
  #         file: scripts/larkrobot/Dockerfile
  #         push: true
  #         tags: |
  #           ${{ env.GHCR_IMAGE_NAME }}:latest
  #           ${{ env.GHCR_IMAGE_NAME }}:latest-${{ needs.prepare.outputs.timestamp }}
  #         # 从 DockerHub 拉取缓存 (假设它是你的主要缓存)
  #         cache-from: type=registry,ref=${{ env.IMAGE_NAME }}:latest
  #         cache-to: type=inline

  # PushToTencentCloud:
  #   needs: prepare
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4
  #     - name: Set up QEMU
  #       uses: docker/setup-qemu-action@v3
  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v3
  #     - name: Log in to Tencent Cloud Registry
  #       uses: docker/login-action@v3
  #       with:
  #         registry: ${{ env.TENCENT_HEADER }}
  #         username: "100016072032"
  #         password: ${{ secrets.DOCKER_ACCESS_TOKEN }}
  #     - name: Build and push to Tencent
  #       uses: docker/build-push-action@v5
  #       with:
  #         context: .
  #         file: scripts/larkrobot/Dockerfile
  #         push: true
  #         tags: |
  #           ${{ env.TENCENT_HEADER }}/${{ env.IMAGE_NAME }}:latest
  #           ${{ env.TENCENT_HEADER }}/${{ env.IMAGE_NAME }}:latest-${{ needs.prepare.outputs.timestamp }}
  #         # 从 DockerHub 拉取缓存
  #         cache-from: type=registry,ref=${{ env.IMAGE_NAME }}:latest
  #         cache-to: type=inline

  Notify:
    if: github.event_name != 'pull_request'
    needs: [PushToDockerHub] # 保持不变，仍然依赖 DockerHub 推送
    runs-on: ubuntu-latest
    steps:
      - name: Gotify Notification
        uses: eikendev/gotify-action@master
        with:
          gotify_api_base: '${{ secrets.GOTIFY_URL }}'
          gotify_app_token: '${{ secrets.GOTIFY_APP_TOKEN }}'
          notification_title: '${{ env.ROBOT_NAME }} Build Complete'
          notification_message: 'Your build was completed.'