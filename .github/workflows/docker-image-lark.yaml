name: LarkRobot

on:
  push:
    branches: [master]
    paths-ignore:
      - "neteaseapi/netease-api-service/*"
      - "qqmusicapi/qqmusic-api-service/*"
      - "README.md"
  pull_request:
    branches: [master]
    paths-ignore:
      - "neteaseapi/netease-api-service/*"
      - "qqmusicapi/qqmusic-api-service/*"
      - "README.md"
  workflow_dispatch:
    inputs:
      name:
        description: "触发用途"
        required: true
        default: "测试"

env:
  IMAGE_NAME: kevinmatt/larkbot
  ROBOT_NAME: LarkRobot
  NETEASE_PHONE: "${{ secrets.NETEASE_PHONE }}"
  NETEASE_PASSWORD: "${{ secrets.NETEASE_PASSWORD }}"
  TENCENT_HEADER: ccr.ccs.tencentyun.com

jobs:
  Build:
    runs-on: ubuntu-latest
    outputs:
      timestamp: ${{ steps.timestamp.outputs.timestamp }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4 # <-- 版本更新

      - name: Calculate timestamp
        id: timestamp
        run: echo "timestamp=$(date +%s%3N)" >> $GITHUB_OUTPUT

      - name: Log in to DockerHub
        uses: docker/login-action@v3 # <-- 版本更新
        with:
          username: kevinmatt
          password: ${{ secrets.DOCKER_ACCESS_TOKEN }}

      - name: Log in to GHCR
        uses: docker/login-action@v3 # <-- 版本更新
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
        
      - name: Log in to Tencent Cloud Registry
        uses: docker/login-action@v3 # <-- 版本更新
        with:
          registry: ${{ env.TENCENT_HEADER }}
          username: "100016072032"
          password: ${{ secrets.DOCKER_ACCESS_TOKEN }}

      # --- 新增：设置 Buildx 和 QEMU ---
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3
      # --- 结束新增 ---
        
      - name: Zip source code # <-- 拆分：原 Build 步骤中的 zip 命令
        run: |
          zip -r -9 -q betago.zip . -x ".git/*" -x "dal/qqmusicapi/qqmusic-api-service/*" -x "dal/neteaseapi/netease-api-service/*"

      # --- 新增：使用 build-push-action 并启用缓存 ---
      - name: Build Docker image with cache
        uses: docker/build-push-action@v5
        with:
          context: .
          file: scripts/larkrobot/Dockerfile
          tags: |
            ${{ env.IMAGE_NAME }}:latest
            ${{ env.IMAGE_NAME }}:latest-${{ steps.timestamp.outputs.timestamp }}
          push: false
          load: true # <-- 关键：将镜像加载到本地 Docker 守护进程
          cache-from: type=gha # <-- 关键：从 GHA 缓存中读取
          cache-to: type=gha,mode=max # <-- 关键：写入 GHA 缓存
      # --- 结束新增 ---

      # --- 新增：拆分出来的 docker save ---
      - name: Save Docker images
        run: |
          docker save $IMAGE_NAME:latest | gzip > image_latest.tar.gz
          docker save $IMAGE_NAME:latest-${{ steps.timestamp.outputs.timestamp }} | gzip > image_timestamp.tar.gz
      # --- 结束新增 ---

      # <-- 原 'Build and Save Docker image' 步骤已被上述三个步骤取代 -->

      - name: Upload image artifacts
        uses: actions/upload-artifact@v4
        with:
          name: docker-images
          path: |
            image_latest.tar.gz
            image_timestamp.tar.gz

  PushToDockerHub:
    needs: Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: docker-images

      - name: Load Docker image
        run: |
          gunzip -c image_latest.tar.gz | docker load
          gunzip -c image_timestamp.tar.gz | docker load

      - name: Log in to DockerHub
        uses: docker/login-action@v3 # <-- 版本更新
        with:
          username: kevinmatt
          password: ${{ secrets.DOCKER_ACCESS_TOKEN }}

      - name: Push to DockerHub
        run: |
          docker push $IMAGE_NAME:latest
          docker push $IMAGE_NAME:latest-${{ needs.Build.outputs.timestamp }}

  # PushToGHCR:
  #   needs: Build
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/download-artifact@v4
  #       with:
  #         name: docker-images
  #     - name: Load Docker image
  #       run: |
  #         gunzip -c image_latest.tar.gz | docker load
  #         gunzip -c image_timestamp.tar.gz | docker load
  #     - name: Log in to GHCR
  #       uses: docker/login-action@v3 # <-- 版本更新
  #       with:
  #         registry: ghcr.io
  #         username: ${{ github.actor }}
  #         password: ${{ secrets.GITHUB_TOKEN }}
  #     - name: Push to GHCR
  #       run: |
  #         docker tag $IMAGE_NAME:latest ghcr.io/${{ github.repository_owner }}/larkbot:latest
  #         docker tag $IMAGE_NAME:latest-${{ needs.Build.outputs.timestamp }} ghcr.io/${{ github.repository_owner }}/larkbot:latest-${{ needs.Build.outputs.timestamp }}
  #         docker push ghcr.io/${{ github.repository_owner }}/larkbot:latest
  #         docker push ghcr.io/${{ github.repository_owner }}/larkbot:latest-${{ needs.Build.outputs.timestamp }}

  # PushToTencentCloud:
  #   needs: Build
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/download-artifact@v4
  #       with:
  #         name: docker-images
  #     - name: Load Docker image
  #       run: |
  #         gunzip -c image_latest.tar.gz | docker load
  #         gunzip -c image_timestamp.tar.gz | docker load
  #     - name: Log in to Tencent Cloud Registry
  #       uses: docker/login-action@v3 # <-- 版本更新
  #       with:
  #         registry: ${{ env.TENCENT_HEADER }}
  #         username: "100016072032"
  #         password: ${{ secrets.DOCKER_ACCESS_TOKEN }}
  #     - name: Push to Tencent
  #       run: |
  #         docker tag $IMAGE_NAME:latest $TENCENT_HEADER/$IMAGE_NAME:latest
  #         docker tag $IMAGE_NAME:latest-${{ needs.Build.outputs.timestamp }} $TENCENT_HEADER/$IMAGE_NAME:latest-${{ needs.Build.outputs.timestamp }}
  #         docker push $TENCENT_HEADER/$IMAGE_NAME:latest
  #         docker push $TENCENT_HEADER/$IMAGE_NAME:latest-${{ needs.Build.outputs.timestamp }}

  Notify:
    if: github.event_name != 'pull_request'
    needs: [PushToDockerHub]
    runs-on: ubuntu-latest
    steps:
      - name: Gotify Notification
        uses: eikendev/gotify-action@master
        with:
          gotify_api_base: '${{ secrets.GOTIFY_URL }}'
          gotify_app_token: '${{ secrets.GOTIFY_APP_TOKEN }}'
          notification_title: '${{ env.ROBOT_NAME }} Build Complete'
          notification_message: 'Your build was completed.'