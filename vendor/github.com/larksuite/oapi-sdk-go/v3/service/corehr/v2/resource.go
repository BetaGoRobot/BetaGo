// Code generated by Lark OpenAPI.

package larkcorehr

import (
	"context"
	"github.com/larksuite/oapi-sdk-go/v3/core"
	"net/http"
)

type V2 struct {
	BasicInfoBank                     *basicInfoBank                     // basic_info.bank
	BasicInfoBankBranch               *basicInfoBankBranch               // basic_info.bank_branch
	BasicInfoCity                     *basicInfoCity                     // basic_info.city
	BasicInfoCountryRegion            *basicInfoCountryRegion            // basic_info.country_region
	BasicInfoCountryRegionSubdivision *basicInfoCountryRegionSubdivision // basic_info.country_region_subdivision
	BasicInfoCurrency                 *basicInfoCurrency                 // basic_info.currency
	BasicInfoDistrict                 *basicInfoDistrict                 // basic_info.district
	BasicInfoNationality              *basicInfoNationality              // basic_info.nationality
	Bp                                *bp                                // bp
	Company                           *company                           // company
	Contract                          *contract                          // contract
	CostCenter                        *costCenter                        // cost_center
	CostCenterVersion                 *costCenterVersion                 // cost_center.version
	Department                        *department                        // department
	Employee                          *employee                          // employee
	EmployeesBp                       *employeesBp                       // employees.bp
	EmployeesJobData                  *employeesJobData                  // employees.job_data
	Job                               *job                               // job
	JobChange                         *jobChange                         // job_change
	JobFamily                         *jobFamily                         // job_family
	JobLevel                          *jobLevel                          // job_level
	Location                          *location                          // location
	Person                            *person                            // person
	PreHire                           *preHire                           // 待入职
	Probation                         *probation                         // probation
	ProbationAssessment               *probationAssessment               // probation.assessment
	Process                           *process                           // process
	ProcessApprover                   *processApprover                   // process.approver
	ProcessCc                         *processCc                         // process.cc
	ProcessNode                       *processNode                       // process.node
}

func New(config *larkcore.Config) *V2 {
	return &V2{
		BasicInfoBank:                     &basicInfoBank{config: config},
		BasicInfoBankBranch:               &basicInfoBankBranch{config: config},
		BasicInfoCity:                     &basicInfoCity{config: config},
		BasicInfoCountryRegion:            &basicInfoCountryRegion{config: config},
		BasicInfoCountryRegionSubdivision: &basicInfoCountryRegionSubdivision{config: config},
		BasicInfoCurrency:                 &basicInfoCurrency{config: config},
		BasicInfoDistrict:                 &basicInfoDistrict{config: config},
		BasicInfoNationality:              &basicInfoNationality{config: config},
		Bp:                                &bp{config: config},
		Company:                           &company{config: config},
		Contract:                          &contract{config: config},
		CostCenter:                        &costCenter{config: config},
		CostCenterVersion:                 &costCenterVersion{config: config},
		Department:                        &department{config: config},
		Employee:                          &employee{config: config},
		EmployeesBp:                       &employeesBp{config: config},
		EmployeesJobData:                  &employeesJobData{config: config},
		Job:                               &job{config: config},
		JobChange:                         &jobChange{config: config},
		JobFamily:                         &jobFamily{config: config},
		JobLevel:                          &jobLevel{config: config},
		Location:                          &location{config: config},
		Person:                            &person{config: config},
		PreHire:                           &preHire{config: config},
		Probation:                         &probation{config: config},
		ProbationAssessment:               &probationAssessment{config: config},
		Process:                           &process{config: config},
		ProcessApprover:                   &processApprover{config: config},
		ProcessCc:                         &processCc{config: config},
		ProcessNode:                       &processNode{config: config},
	}
}

type basicInfoBank struct {
	config *larkcore.Config
}
type basicInfoBankBranch struct {
	config *larkcore.Config
}
type basicInfoCity struct {
	config *larkcore.Config
}
type basicInfoCountryRegion struct {
	config *larkcore.Config
}
type basicInfoCountryRegionSubdivision struct {
	config *larkcore.Config
}
type basicInfoCurrency struct {
	config *larkcore.Config
}
type basicInfoDistrict struct {
	config *larkcore.Config
}
type basicInfoNationality struct {
	config *larkcore.Config
}
type bp struct {
	config *larkcore.Config
}
type company struct {
	config *larkcore.Config
}
type contract struct {
	config *larkcore.Config
}
type costCenter struct {
	config *larkcore.Config
}
type costCenterVersion struct {
	config *larkcore.Config
}
type department struct {
	config *larkcore.Config
}
type employee struct {
	config *larkcore.Config
}
type employeesBp struct {
	config *larkcore.Config
}
type employeesJobData struct {
	config *larkcore.Config
}
type job struct {
	config *larkcore.Config
}
type jobChange struct {
	config *larkcore.Config
}
type jobFamily struct {
	config *larkcore.Config
}
type jobLevel struct {
	config *larkcore.Config
}
type location struct {
	config *larkcore.Config
}
type person struct {
	config *larkcore.Config
}
type preHire struct {
	config *larkcore.Config
}
type probation struct {
	config *larkcore.Config
}
type probationAssessment struct {
	config *larkcore.Config
}
type process struct {
	config *larkcore.Config
}
type processApprover struct {
	config *larkcore.Config
}
type processCc struct {
	config *larkcore.Config
}
type processNode struct {
	config *larkcore.Config
}

// Search
//
// -
//
// - 官网API文档链接:https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=search&project=corehr&resource=basic_info.bank&version=v2
//
// - 使用Demo链接:https://github.com/larksuite/oapi-sdk-go/tree/v3_main/sample/apiall/corehrv2/search_basicInfoBank.go
func (b *basicInfoBank) Search(ctx context.Context, req *SearchBasicInfoBankReq, options ...larkcore.RequestOptionFunc) (*SearchBasicInfoBankResp, error) {
	// 发起请求
	apiReq := req.apiReq
	apiReq.ApiPath = "/open-apis/corehr/v2/basic_info/banks/search"
	apiReq.HttpMethod = http.MethodPost
	apiReq.SupportedAccessTokenTypes = []larkcore.AccessTokenType{larkcore.AccessTokenTypeTenant}
	apiResp, err := larkcore.Request(ctx, apiReq, b.config, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &SearchBasicInfoBankResp{ApiResp: apiResp}
	err = apiResp.JSONUnmarshalBody(resp, b.config)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (b *basicInfoBank) SearchByIterator(ctx context.Context, req *SearchBasicInfoBankReq, options ...larkcore.RequestOptionFunc) (*SearchBasicInfoBankIterator, error) {
	return &SearchBasicInfoBankIterator{
		ctx:      ctx,
		req:      req,
		listFunc: b.Search,
		options:  options,
		limit:    req.Limit}, nil
}

// Search
//
// -
//
// - 官网API文档链接:https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=search&project=corehr&resource=basic_info.bank_branch&version=v2
//
// - 使用Demo链接:https://github.com/larksuite/oapi-sdk-go/tree/v3_main/sample/apiall/corehrv2/search_basicInfoBankBranch.go
func (b *basicInfoBankBranch) Search(ctx context.Context, req *SearchBasicInfoBankBranchReq, options ...larkcore.RequestOptionFunc) (*SearchBasicInfoBankBranchResp, error) {
	// 发起请求
	apiReq := req.apiReq
	apiReq.ApiPath = "/open-apis/corehr/v2/basic_info/bank_branchs/search"
	apiReq.HttpMethod = http.MethodPost
	apiReq.SupportedAccessTokenTypes = []larkcore.AccessTokenType{larkcore.AccessTokenTypeTenant}
	apiResp, err := larkcore.Request(ctx, apiReq, b.config, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &SearchBasicInfoBankBranchResp{ApiResp: apiResp}
	err = apiResp.JSONUnmarshalBody(resp, b.config)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (b *basicInfoBankBranch) SearchByIterator(ctx context.Context, req *SearchBasicInfoBankBranchReq, options ...larkcore.RequestOptionFunc) (*SearchBasicInfoBankBranchIterator, error) {
	return &SearchBasicInfoBankBranchIterator{
		ctx:      ctx,
		req:      req,
		listFunc: b.Search,
		options:  options,
		limit:    req.Limit}, nil
}

// Search
//
// -
//
// - 官网API文档链接:https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=search&project=corehr&resource=basic_info.city&version=v2
//
// - 使用Demo链接:https://github.com/larksuite/oapi-sdk-go/tree/v3_main/sample/apiall/corehrv2/search_basicInfoCity.go
func (b *basicInfoCity) Search(ctx context.Context, req *SearchBasicInfoCityReq, options ...larkcore.RequestOptionFunc) (*SearchBasicInfoCityResp, error) {
	// 发起请求
	apiReq := req.apiReq
	apiReq.ApiPath = "/open-apis/corehr/v2/basic_info/cities/search"
	apiReq.HttpMethod = http.MethodPost
	apiReq.SupportedAccessTokenTypes = []larkcore.AccessTokenType{larkcore.AccessTokenTypeTenant}
	apiResp, err := larkcore.Request(ctx, apiReq, b.config, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &SearchBasicInfoCityResp{ApiResp: apiResp}
	err = apiResp.JSONUnmarshalBody(resp, b.config)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (b *basicInfoCity) SearchByIterator(ctx context.Context, req *SearchBasicInfoCityReq, options ...larkcore.RequestOptionFunc) (*SearchBasicInfoCityIterator, error) {
	return &SearchBasicInfoCityIterator{
		ctx:      ctx,
		req:      req,
		listFunc: b.Search,
		options:  options,
		limit:    req.Limit}, nil
}

// Search
//
// -
//
// - 官网API文档链接:https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=search&project=corehr&resource=basic_info.country_region&version=v2
//
// - 使用Demo链接:https://github.com/larksuite/oapi-sdk-go/tree/v3_main/sample/apiall/corehrv2/search_basicInfoCountryRegion.go
func (b *basicInfoCountryRegion) Search(ctx context.Context, req *SearchBasicInfoCountryRegionReq, options ...larkcore.RequestOptionFunc) (*SearchBasicInfoCountryRegionResp, error) {
	// 发起请求
	apiReq := req.apiReq
	apiReq.ApiPath = "/open-apis/corehr/v2/basic_info/country_regions/search"
	apiReq.HttpMethod = http.MethodPost
	apiReq.SupportedAccessTokenTypes = []larkcore.AccessTokenType{larkcore.AccessTokenTypeTenant}
	apiResp, err := larkcore.Request(ctx, apiReq, b.config, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &SearchBasicInfoCountryRegionResp{ApiResp: apiResp}
	err = apiResp.JSONUnmarshalBody(resp, b.config)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (b *basicInfoCountryRegion) SearchByIterator(ctx context.Context, req *SearchBasicInfoCountryRegionReq, options ...larkcore.RequestOptionFunc) (*SearchBasicInfoCountryRegionIterator, error) {
	return &SearchBasicInfoCountryRegionIterator{
		ctx:      ctx,
		req:      req,
		listFunc: b.Search,
		options:  options,
		limit:    req.Limit}, nil
}

// Search
//
// -
//
// - 官网API文档链接:https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=search&project=corehr&resource=basic_info.country_region_subdivision&version=v2
//
// - 使用Demo链接:https://github.com/larksuite/oapi-sdk-go/tree/v3_main/sample/apiall/corehrv2/search_basicInfoCountryRegionSubdivision.go
func (b *basicInfoCountryRegionSubdivision) Search(ctx context.Context, req *SearchBasicInfoCountryRegionSubdivisionReq, options ...larkcore.RequestOptionFunc) (*SearchBasicInfoCountryRegionSubdivisionResp, error) {
	// 发起请求
	apiReq := req.apiReq
	apiReq.ApiPath = "/open-apis/corehr/v2/basic_info/country_region_subdivisions/search"
	apiReq.HttpMethod = http.MethodPost
	apiReq.SupportedAccessTokenTypes = []larkcore.AccessTokenType{larkcore.AccessTokenTypeTenant}
	apiResp, err := larkcore.Request(ctx, apiReq, b.config, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &SearchBasicInfoCountryRegionSubdivisionResp{ApiResp: apiResp}
	err = apiResp.JSONUnmarshalBody(resp, b.config)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (b *basicInfoCountryRegionSubdivision) SearchByIterator(ctx context.Context, req *SearchBasicInfoCountryRegionSubdivisionReq, options ...larkcore.RequestOptionFunc) (*SearchBasicInfoCountryRegionSubdivisionIterator, error) {
	return &SearchBasicInfoCountryRegionSubdivisionIterator{
		ctx:      ctx,
		req:      req,
		listFunc: b.Search,
		options:  options,
		limit:    req.Limit}, nil
}

// Search
//
// -
//
// - 官网API文档链接:https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=search&project=corehr&resource=basic_info.currency&version=v2
//
// - 使用Demo链接:https://github.com/larksuite/oapi-sdk-go/tree/v3_main/sample/apiall/corehrv2/search_basicInfoCurrency.go
func (b *basicInfoCurrency) Search(ctx context.Context, req *SearchBasicInfoCurrencyReq, options ...larkcore.RequestOptionFunc) (*SearchBasicInfoCurrencyResp, error) {
	// 发起请求
	apiReq := req.apiReq
	apiReq.ApiPath = "/open-apis/corehr/v2/basic_info/currencies/search"
	apiReq.HttpMethod = http.MethodPost
	apiReq.SupportedAccessTokenTypes = []larkcore.AccessTokenType{larkcore.AccessTokenTypeTenant}
	apiResp, err := larkcore.Request(ctx, apiReq, b.config, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &SearchBasicInfoCurrencyResp{ApiResp: apiResp}
	err = apiResp.JSONUnmarshalBody(resp, b.config)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (b *basicInfoCurrency) SearchByIterator(ctx context.Context, req *SearchBasicInfoCurrencyReq, options ...larkcore.RequestOptionFunc) (*SearchBasicInfoCurrencyIterator, error) {
	return &SearchBasicInfoCurrencyIterator{
		ctx:      ctx,
		req:      req,
		listFunc: b.Search,
		options:  options,
		limit:    req.Limit}, nil
}

// Search
//
// -
//
// - 官网API文档链接:https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=search&project=corehr&resource=basic_info.district&version=v2
//
// - 使用Demo链接:https://github.com/larksuite/oapi-sdk-go/tree/v3_main/sample/apiall/corehrv2/search_basicInfoDistrict.go
func (b *basicInfoDistrict) Search(ctx context.Context, req *SearchBasicInfoDistrictReq, options ...larkcore.RequestOptionFunc) (*SearchBasicInfoDistrictResp, error) {
	// 发起请求
	apiReq := req.apiReq
	apiReq.ApiPath = "/open-apis/corehr/v2/basic_info/districts/search"
	apiReq.HttpMethod = http.MethodPost
	apiReq.SupportedAccessTokenTypes = []larkcore.AccessTokenType{larkcore.AccessTokenTypeTenant}
	apiResp, err := larkcore.Request(ctx, apiReq, b.config, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &SearchBasicInfoDistrictResp{ApiResp: apiResp}
	err = apiResp.JSONUnmarshalBody(resp, b.config)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (b *basicInfoDistrict) SearchByIterator(ctx context.Context, req *SearchBasicInfoDistrictReq, options ...larkcore.RequestOptionFunc) (*SearchBasicInfoDistrictIterator, error) {
	return &SearchBasicInfoDistrictIterator{
		ctx:      ctx,
		req:      req,
		listFunc: b.Search,
		options:  options,
		limit:    req.Limit}, nil
}

// Search
//
// -
//
// - 官网API文档链接:https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=search&project=corehr&resource=basic_info.nationality&version=v2
//
// - 使用Demo链接:https://github.com/larksuite/oapi-sdk-go/tree/v3_main/sample/apiall/corehrv2/search_basicInfoNationality.go
func (b *basicInfoNationality) Search(ctx context.Context, req *SearchBasicInfoNationalityReq, options ...larkcore.RequestOptionFunc) (*SearchBasicInfoNationalityResp, error) {
	// 发起请求
	apiReq := req.apiReq
	apiReq.ApiPath = "/open-apis/corehr/v2/basic_info/nationalities/search"
	apiReq.HttpMethod = http.MethodPost
	apiReq.SupportedAccessTokenTypes = []larkcore.AccessTokenType{larkcore.AccessTokenTypeTenant}
	apiResp, err := larkcore.Request(ctx, apiReq, b.config, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &SearchBasicInfoNationalityResp{ApiResp: apiResp}
	err = apiResp.JSONUnmarshalBody(resp, b.config)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (b *basicInfoNationality) SearchByIterator(ctx context.Context, req *SearchBasicInfoNationalityReq, options ...larkcore.RequestOptionFunc) (*SearchBasicInfoNationalityIterator, error) {
	return &SearchBasicInfoNationalityIterator{
		ctx:      ctx,
		req:      req,
		listFunc: b.Search,
		options:  options,
		limit:    req.Limit}, nil
}

// GetByDepartment
//
// -
//
// - 官网API文档链接:https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=get_by_department&project=corehr&resource=bp&version=v2
//
// - 使用Demo链接:https://github.com/larksuite/oapi-sdk-go/tree/v3_main/sample/apiall/corehrv2/getByDepartment_bp.go
func (b *bp) GetByDepartment(ctx context.Context, req *GetByDepartmentBpReq, options ...larkcore.RequestOptionFunc) (*GetByDepartmentBpResp, error) {
	// 发起请求
	apiReq := req.apiReq
	apiReq.ApiPath = "/open-apis/corehr/v2/bps/get_by_department"
	apiReq.HttpMethod = http.MethodPost
	apiReq.SupportedAccessTokenTypes = []larkcore.AccessTokenType{larkcore.AccessTokenTypeTenant}
	apiResp, err := larkcore.Request(ctx, apiReq, b.config, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &GetByDepartmentBpResp{ApiResp: apiResp}
	err = apiResp.JSONUnmarshalBody(resp, b.config)
	if err != nil {
		return nil, err
	}
	return resp, err
}

// List
//
// - 待补充
//
// - 官网API文档链接:https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=list&project=corehr&resource=bp&version=v2
//
// - 使用Demo链接:https://github.com/larksuite/oapi-sdk-go/tree/v3_main/sample/apiall/corehrv2/list_bp.go
func (b *bp) List(ctx context.Context, req *ListBpReq, options ...larkcore.RequestOptionFunc) (*ListBpResp, error) {
	// 发起请求
	apiReq := req.apiReq
	apiReq.ApiPath = "/open-apis/corehr/v2/bps"
	apiReq.HttpMethod = http.MethodGet
	apiReq.SupportedAccessTokenTypes = []larkcore.AccessTokenType{larkcore.AccessTokenTypeTenant}
	apiResp, err := larkcore.Request(ctx, apiReq, b.config, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &ListBpResp{ApiResp: apiResp}
	err = apiResp.JSONUnmarshalBody(resp, b.config)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (b *bp) ListByIterator(ctx context.Context, req *ListBpReq, options ...larkcore.RequestOptionFunc) (*ListBpIterator, error) {
	return &ListBpIterator{
		ctx:      ctx,
		req:      req,
		listFunc: b.List,
		options:  options,
		limit:    req.Limit}, nil
}

// BatchGet
//
// - 通过公司 ID 批量获取公司信息
//
// - 官网API文档链接:https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=batch_get&project=corehr&resource=company&version=v2
//
// - 使用Demo链接:https://github.com/larksuite/oapi-sdk-go/tree/v3_main/sample/apiall/corehrv2/batchGet_company.go
func (c *company) BatchGet(ctx context.Context, req *BatchGetCompanyReq, options ...larkcore.RequestOptionFunc) (*BatchGetCompanyResp, error) {
	// 发起请求
	apiReq := req.apiReq
	apiReq.ApiPath = "/open-apis/corehr/v2/companies/batch_get"
	apiReq.HttpMethod = http.MethodPost
	apiReq.SupportedAccessTokenTypes = []larkcore.AccessTokenType{larkcore.AccessTokenTypeTenant}
	apiResp, err := larkcore.Request(ctx, apiReq, c.config, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &BatchGetCompanyResp{ApiResp: apiResp}
	err = apiResp.JSONUnmarshalBody(resp, c.config)
	if err != nil {
		return nil, err
	}
	return resp, err
}

// Search
//
// - 根据合同 ID 、雇佣 ID 查询合同信息
//
// - 官网API文档链接:https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=search&project=corehr&resource=contract&version=v2
//
// - 使用Demo链接:https://github.com/larksuite/oapi-sdk-go/tree/v3_main/sample/apiall/corehrv2/search_contract.go
func (c *contract) Search(ctx context.Context, req *SearchContractReq, options ...larkcore.RequestOptionFunc) (*SearchContractResp, error) {
	// 发起请求
	apiReq := req.apiReq
	apiReq.ApiPath = "/open-apis/corehr/v2/contracts/search"
	apiReq.HttpMethod = http.MethodPost
	apiReq.SupportedAccessTokenTypes = []larkcore.AccessTokenType{larkcore.AccessTokenTypeTenant}
	apiResp, err := larkcore.Request(ctx, apiReq, c.config, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &SearchContractResp{ApiResp: apiResp}
	err = apiResp.JSONUnmarshalBody(resp, c.config)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (c *contract) SearchByIterator(ctx context.Context, req *SearchContractReq, options ...larkcore.RequestOptionFunc) (*SearchContractIterator, error) {
	return &SearchContractIterator{
		ctx:      ctx,
		req:      req,
		listFunc: c.Search,
		options:  options,
		limit:    req.Limit}, nil
}

// Create
//
// - 创建成本中心
//
// - 官网API文档链接:https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=create&project=corehr&resource=cost_center&version=v2
//
// - 使用Demo链接:https://github.com/larksuite/oapi-sdk-go/tree/v3_main/sample/apiall/corehrv2/create_costCenter.go
func (c *costCenter) Create(ctx context.Context, req *CreateCostCenterReq, options ...larkcore.RequestOptionFunc) (*CreateCostCenterResp, error) {
	// 发起请求
	apiReq := req.apiReq
	apiReq.ApiPath = "/open-apis/corehr/v2/cost_centers"
	apiReq.HttpMethod = http.MethodPost
	apiReq.SupportedAccessTokenTypes = []larkcore.AccessTokenType{larkcore.AccessTokenTypeTenant}
	apiResp, err := larkcore.Request(ctx, apiReq, c.config, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &CreateCostCenterResp{ApiResp: apiResp}
	err = apiResp.JSONUnmarshalBody(resp, c.config)
	if err != nil {
		return nil, err
	}
	return resp, err
}

// Delete
//
// -
//
// - 官网API文档链接:https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=delete&project=corehr&resource=cost_center&version=v2
//
// - 使用Demo链接:https://github.com/larksuite/oapi-sdk-go/tree/v3_main/sample/apiall/corehrv2/delete_costCenter.go
func (c *costCenter) Delete(ctx context.Context, req *DeleteCostCenterReq, options ...larkcore.RequestOptionFunc) (*DeleteCostCenterResp, error) {
	// 发起请求
	apiReq := req.apiReq
	apiReq.ApiPath = "/open-apis/corehr/v2/cost_centers/:cost_center_id"
	apiReq.HttpMethod = http.MethodDelete
	apiReq.SupportedAccessTokenTypes = []larkcore.AccessTokenType{larkcore.AccessTokenTypeTenant}
	apiResp, err := larkcore.Request(ctx, apiReq, c.config, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &DeleteCostCenterResp{ApiResp: apiResp}
	err = apiResp.JSONUnmarshalBody(resp, c.config)
	if err != nil {
		return nil, err
	}
	return resp, err
}

// Patch
//
// - 创建成本中心版本
//
// - 官网API文档链接:https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=patch&project=corehr&resource=cost_center&version=v2
//
// - 使用Demo链接:https://github.com/larksuite/oapi-sdk-go/tree/v3_main/sample/apiall/corehrv2/patch_costCenter.go
func (c *costCenter) Patch(ctx context.Context, req *PatchCostCenterReq, options ...larkcore.RequestOptionFunc) (*PatchCostCenterResp, error) {
	// 发起请求
	apiReq := req.apiReq
	apiReq.ApiPath = "/open-apis/corehr/v2/cost_centers/:cost_center_id"
	apiReq.HttpMethod = http.MethodPatch
	apiReq.SupportedAccessTokenTypes = []larkcore.AccessTokenType{larkcore.AccessTokenTypeTenant}
	apiResp, err := larkcore.Request(ctx, apiReq, c.config, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &PatchCostCenterResp{ApiResp: apiResp}
	err = apiResp.JSONUnmarshalBody(resp, c.config)
	if err != nil {
		return nil, err
	}
	return resp, err
}

// Search
//
// - 查询成本中心信息
//
// - 官网API文档链接:https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=search&project=corehr&resource=cost_center&version=v2
//
// - 使用Demo链接:https://github.com/larksuite/oapi-sdk-go/tree/v3_main/sample/apiall/corehrv2/search_costCenter.go
func (c *costCenter) Search(ctx context.Context, req *SearchCostCenterReq, options ...larkcore.RequestOptionFunc) (*SearchCostCenterResp, error) {
	// 发起请求
	apiReq := req.apiReq
	apiReq.ApiPath = "/open-apis/corehr/v2/cost_centers/search"
	apiReq.HttpMethod = http.MethodPost
	apiReq.SupportedAccessTokenTypes = []larkcore.AccessTokenType{larkcore.AccessTokenTypeTenant}
	apiResp, err := larkcore.Request(ctx, apiReq, c.config, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &SearchCostCenterResp{ApiResp: apiResp}
	err = apiResp.JSONUnmarshalBody(resp, c.config)
	if err != nil {
		return nil, err
	}
	return resp, err
}

// Create
//
// - 创建成本中心版本
//
// - 官网API文档链接:https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=create&project=corehr&resource=cost_center.version&version=v2
//
// - 使用Demo链接:https://github.com/larksuite/oapi-sdk-go/tree/v3_main/sample/apiall/corehrv2/create_costCenterVersion.go
func (c *costCenterVersion) Create(ctx context.Context, req *CreateCostCenterVersionReq, options ...larkcore.RequestOptionFunc) (*CreateCostCenterVersionResp, error) {
	// 发起请求
	apiReq := req.apiReq
	apiReq.ApiPath = "/open-apis/corehr/v2/cost_centers/:cost_center_id/versions"
	apiReq.HttpMethod = http.MethodPost
	apiReq.SupportedAccessTokenTypes = []larkcore.AccessTokenType{larkcore.AccessTokenTypeTenant}
	apiResp, err := larkcore.Request(ctx, apiReq, c.config, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &CreateCostCenterVersionResp{ApiResp: apiResp}
	err = apiResp.JSONUnmarshalBody(resp, c.config)
	if err != nil {
		return nil, err
	}
	return resp, err
}

// Delete
//
// - 撤销成本中心版本
//
// - 官网API文档链接:https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=delete&project=corehr&resource=cost_center.version&version=v2
//
// - 使用Demo链接:https://github.com/larksuite/oapi-sdk-go/tree/v3_main/sample/apiall/corehrv2/delete_costCenterVersion.go
func (c *costCenterVersion) Delete(ctx context.Context, req *DeleteCostCenterVersionReq, options ...larkcore.RequestOptionFunc) (*DeleteCostCenterVersionResp, error) {
	// 发起请求
	apiReq := req.apiReq
	apiReq.ApiPath = "/open-apis/corehr/v2/cost_centers/:cost_center_id/versions/:version_id"
	apiReq.HttpMethod = http.MethodDelete
	apiReq.SupportedAccessTokenTypes = []larkcore.AccessTokenType{larkcore.AccessTokenTypeTenant}
	apiResp, err := larkcore.Request(ctx, apiReq, c.config, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &DeleteCostCenterVersionResp{ApiResp: apiResp}
	err = apiResp.JSONUnmarshalBody(resp, c.config)
	if err != nil {
		return nil, err
	}
	return resp, err
}

// Patch
//
// - 创建成本中心版本
//
// - 官网API文档链接:https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=patch&project=corehr&resource=cost_center.version&version=v2
//
// - 使用Demo链接:https://github.com/larksuite/oapi-sdk-go/tree/v3_main/sample/apiall/corehrv2/patch_costCenterVersion.go
func (c *costCenterVersion) Patch(ctx context.Context, req *PatchCostCenterVersionReq, options ...larkcore.RequestOptionFunc) (*PatchCostCenterVersionResp, error) {
	// 发起请求
	apiReq := req.apiReq
	apiReq.ApiPath = "/open-apis/corehr/v2/cost_centers/:cost_center_id/versions/:version_id"
	apiReq.HttpMethod = http.MethodPatch
	apiReq.SupportedAccessTokenTypes = []larkcore.AccessTokenType{larkcore.AccessTokenTypeTenant}
	apiResp, err := larkcore.Request(ctx, apiReq, c.config, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &PatchCostCenterVersionResp{ApiResp: apiResp}
	err = apiResp.JSONUnmarshalBody(resp, c.config)
	if err != nil {
		return nil, err
	}
	return resp, err
}

// BatchGet
//
// -
//
// - 官网API文档链接:https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=batch_get&project=corehr&resource=department&version=v2
//
// - 使用Demo链接:https://github.com/larksuite/oapi-sdk-go/tree/v3_main/sample/apiall/corehrv2/batchGet_department.go
func (d *department) BatchGet(ctx context.Context, req *BatchGetDepartmentReq, options ...larkcore.RequestOptionFunc) (*BatchGetDepartmentResp, error) {
	// 发起请求
	apiReq := req.apiReq
	apiReq.ApiPath = "/open-apis/corehr/v2/departments/batch_get"
	apiReq.HttpMethod = http.MethodPost
	apiReq.SupportedAccessTokenTypes = []larkcore.AccessTokenType{larkcore.AccessTokenTypeTenant}
	apiResp, err := larkcore.Request(ctx, apiReq, d.config, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &BatchGetDepartmentResp{ApiResp: apiResp}
	err = apiResp.JSONUnmarshalBody(resp, d.config)
	if err != nil {
		return nil, err
	}
	return resp, err
}

// Parents
//
// -
//
// - 官网API文档链接:https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=parents&project=corehr&resource=department&version=v2
//
// - 使用Demo链接:https://github.com/larksuite/oapi-sdk-go/tree/v3_main/sample/apiall/corehrv2/parents_department.go
func (d *department) Parents(ctx context.Context, req *ParentsDepartmentReq, options ...larkcore.RequestOptionFunc) (*ParentsDepartmentResp, error) {
	// 发起请求
	apiReq := req.apiReq
	apiReq.ApiPath = "/open-apis/corehr/v2/departments/parents"
	apiReq.HttpMethod = http.MethodPost
	apiReq.SupportedAccessTokenTypes = []larkcore.AccessTokenType{larkcore.AccessTokenTypeTenant}
	apiResp, err := larkcore.Request(ctx, apiReq, d.config, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &ParentsDepartmentResp{ApiResp: apiResp}
	err = apiResp.JSONUnmarshalBody(resp, d.config)
	if err != nil {
		return nil, err
	}
	return resp, err
}

// Search
//
// - 根据部门 ID，上级部门查询部门列表
//
// - 官网API文档链接:https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=search&project=corehr&resource=department&version=v2
//
// - 使用Demo链接:https://github.com/larksuite/oapi-sdk-go/tree/v3_main/sample/apiall/corehrv2/search_department.go
func (d *department) Search(ctx context.Context, req *SearchDepartmentReq, options ...larkcore.RequestOptionFunc) (*SearchDepartmentResp, error) {
	// 发起请求
	apiReq := req.apiReq
	apiReq.ApiPath = "/open-apis/corehr/v2/departments/search"
	apiReq.HttpMethod = http.MethodPost
	apiReq.SupportedAccessTokenTypes = []larkcore.AccessTokenType{larkcore.AccessTokenTypeTenant}
	apiResp, err := larkcore.Request(ctx, apiReq, d.config, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &SearchDepartmentResp{ApiResp: apiResp}
	err = apiResp.JSONUnmarshalBody(resp, d.config)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (d *department) SearchByIterator(ctx context.Context, req *SearchDepartmentReq, options ...larkcore.RequestOptionFunc) (*SearchDepartmentIterator, error) {
	return &SearchDepartmentIterator{
		ctx:      ctx,
		req:      req,
		listFunc: d.Search,
		options:  options,
		limit:    req.Limit}, nil
}

// BatchGet
//
// - 通过员工 ID 批量获取员工信息
//
// - 官网API文档链接:https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=batch_get&project=corehr&resource=employee&version=v2
//
// - 使用Demo链接:https://github.com/larksuite/oapi-sdk-go/tree/v3_main/sample/apiall/corehrv2/batchGet_employee.go
func (e *employee) BatchGet(ctx context.Context, req *BatchGetEmployeeReq, options ...larkcore.RequestOptionFunc) (*BatchGetEmployeeResp, error) {
	// 发起请求
	apiReq := req.apiReq
	apiReq.ApiPath = "/open-apis/corehr/v2/employees/batch_get"
	apiReq.HttpMethod = http.MethodPost
	apiReq.SupportedAccessTokenTypes = []larkcore.AccessTokenType{larkcore.AccessTokenTypeTenant}
	apiResp, err := larkcore.Request(ctx, apiReq, e.config, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &BatchGetEmployeeResp{ApiResp: apiResp}
	err = apiResp.JSONUnmarshalBody(resp, e.config)
	if err != nil {
		return nil, err
	}
	return resp, err
}

// Search
//
// - 根据 email、工号、个人电话等条件查询员工雇佣信息以及个人基础信息
//
// - 官网API文档链接:https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=search&project=corehr&resource=employee&version=v2
//
// - 使用Demo链接:https://github.com/larksuite/oapi-sdk-go/tree/v3_main/sample/apiall/corehrv2/search_employee.go
func (e *employee) Search(ctx context.Context, req *SearchEmployeeReq, options ...larkcore.RequestOptionFunc) (*SearchEmployeeResp, error) {
	// 发起请求
	apiReq := req.apiReq
	apiReq.ApiPath = "/open-apis/corehr/v2/employees/search"
	apiReq.HttpMethod = http.MethodPost
	apiReq.SupportedAccessTokenTypes = []larkcore.AccessTokenType{larkcore.AccessTokenTypeTenant}
	apiResp, err := larkcore.Request(ctx, apiReq, e.config, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &SearchEmployeeResp{ApiResp: apiResp}
	err = apiResp.JSONUnmarshalBody(resp, e.config)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (e *employee) SearchByIterator(ctx context.Context, req *SearchEmployeeReq, options ...larkcore.RequestOptionFunc) (*SearchEmployeeIterator, error) {
	return &SearchEmployeeIterator{
		ctx:      ctx,
		req:      req,
		listFunc: e.Search,
		options:  options,
		limit:    req.Limit}, nil
}

// BatchGet
//
// -
//
// - 官网API文档链接:https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=batch_get&project=corehr&resource=employees.bp&version=v2
//
// - 使用Demo链接:https://github.com/larksuite/oapi-sdk-go/tree/v3_main/sample/apiall/corehrv2/batchGet_employeesBp.go
func (e *employeesBp) BatchGet(ctx context.Context, req *BatchGetEmployeesBpReq, options ...larkcore.RequestOptionFunc) (*BatchGetEmployeesBpResp, error) {
	// 发起请求
	apiReq := req.apiReq
	apiReq.ApiPath = "/open-apis/corehr/v2/employees/bps/batch_get"
	apiReq.HttpMethod = http.MethodPost
	apiReq.SupportedAccessTokenTypes = []larkcore.AccessTokenType{larkcore.AccessTokenTypeTenant}
	apiResp, err := larkcore.Request(ctx, apiReq, e.config, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &BatchGetEmployeesBpResp{ApiResp: apiResp}
	err = apiResp.JSONUnmarshalBody(resp, e.config)
	if err != nil {
		return nil, err
	}
	return resp, err
}

// BatchGet
//
// -
//
// - 官网API文档链接:https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=batch_get&project=corehr&resource=employees.job_data&version=v2
//
// - 使用Demo链接:https://github.com/larksuite/oapi-sdk-go/tree/v3_main/sample/apiall/corehrv2/batchGet_employeesJobData.go
func (e *employeesJobData) BatchGet(ctx context.Context, req *BatchGetEmployeesJobDataReq, options ...larkcore.RequestOptionFunc) (*BatchGetEmployeesJobDataResp, error) {
	// 发起请求
	apiReq := req.apiReq
	apiReq.ApiPath = "/open-apis/corehr/v2/employees/job_datas/batch_get"
	apiReq.HttpMethod = http.MethodPost
	apiReq.SupportedAccessTokenTypes = []larkcore.AccessTokenType{larkcore.AccessTokenTypeTenant}
	apiResp, err := larkcore.Request(ctx, apiReq, e.config, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &BatchGetEmployeesJobDataResp{ApiResp: apiResp}
	err = apiResp.JSONUnmarshalBody(resp, e.config)
	if err != nil {
		return nil, err
	}
	return resp, err
}

// Query
//
// -
//
// - 官网API文档链接:https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=query&project=corehr&resource=employees.job_data&version=v2
//
// - 使用Demo链接:https://github.com/larksuite/oapi-sdk-go/tree/v3_main/sample/apiall/corehrv2/query_employeesJobData.go
func (e *employeesJobData) Query(ctx context.Context, req *QueryEmployeesJobDataReq, options ...larkcore.RequestOptionFunc) (*QueryEmployeesJobDataResp, error) {
	// 发起请求
	apiReq := req.apiReq
	apiReq.ApiPath = "/open-apis/corehr/v2/employees/job_datas/query"
	apiReq.HttpMethod = http.MethodPost
	apiReq.SupportedAccessTokenTypes = []larkcore.AccessTokenType{larkcore.AccessTokenTypeTenant}
	apiResp, err := larkcore.Request(ctx, apiReq, e.config, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &QueryEmployeesJobDataResp{ApiResp: apiResp}
	err = apiResp.JSONUnmarshalBody(resp, e.config)
	if err != nil {
		return nil, err
	}
	return resp, err
}

// Get
//
// - 根据 ID 查询单个职务。
//
// - 官网API文档链接:https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=get&project=corehr&resource=job&version=v2
//
// - 使用Demo链接:https://github.com/larksuite/oapi-sdk-go/tree/v3_main/sample/apiall/corehrv2/get_job.go
func (j *job) Get(ctx context.Context, req *GetJobReq, options ...larkcore.RequestOptionFunc) (*GetJobResp, error) {
	// 发起请求
	apiReq := req.apiReq
	apiReq.ApiPath = "/open-apis/corehr/v2/jobs/:job_id"
	apiReq.HttpMethod = http.MethodGet
	apiReq.SupportedAccessTokenTypes = []larkcore.AccessTokenType{larkcore.AccessTokenTypeTenant}
	apiResp, err := larkcore.Request(ctx, apiReq, j.config, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &GetJobResp{ApiResp: apiResp}
	err = apiResp.JSONUnmarshalBody(resp, j.config)
	if err != nil {
		return nil, err
	}
	return resp, err
}

// List
//
// - 分页查询职务数据
//
// - 官网API文档链接:https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=list&project=corehr&resource=job&version=v2
//
// - 使用Demo链接:https://github.com/larksuite/oapi-sdk-go/tree/v3_main/sample/apiall/corehrv2/list_job.go
func (j *job) List(ctx context.Context, req *ListJobReq, options ...larkcore.RequestOptionFunc) (*ListJobResp, error) {
	// 发起请求
	apiReq := req.apiReq
	apiReq.ApiPath = "/open-apis/corehr/v2/jobs"
	apiReq.HttpMethod = http.MethodGet
	apiReq.SupportedAccessTokenTypes = []larkcore.AccessTokenType{larkcore.AccessTokenTypeTenant}
	apiResp, err := larkcore.Request(ctx, apiReq, j.config, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &ListJobResp{ApiResp: apiResp}
	err = apiResp.JSONUnmarshalBody(resp, j.config)
	if err != nil {
		return nil, err
	}
	return resp, err
}

// Search
//
// - 获取员工异动列表
//
// - 官网API文档链接:https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=search&project=corehr&resource=job_change&version=v2
//
// - 使用Demo链接:https://github.com/larksuite/oapi-sdk-go/tree/v3_main/sample/apiall/corehrv2/search_jobChange.go
func (j *jobChange) Search(ctx context.Context, req *SearchJobChangeReq, options ...larkcore.RequestOptionFunc) (*SearchJobChangeResp, error) {
	// 发起请求
	apiReq := req.apiReq
	apiReq.ApiPath = "/open-apis/corehr/v2/job_changes/search"
	apiReq.HttpMethod = http.MethodPost
	apiReq.SupportedAccessTokenTypes = []larkcore.AccessTokenType{larkcore.AccessTokenTypeTenant}
	apiResp, err := larkcore.Request(ctx, apiReq, j.config, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &SearchJobChangeResp{ApiResp: apiResp}
	err = apiResp.JSONUnmarshalBody(resp, j.config)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (j *jobChange) SearchByIterator(ctx context.Context, req *SearchJobChangeReq, options ...larkcore.RequestOptionFunc) (*SearchJobChangeIterator, error) {
	return &SearchJobChangeIterator{
		ctx:      ctx,
		req:      req,
		listFunc: j.Search,
		options:  options,
		limit:    req.Limit}, nil
}

// BatchGet
//
// - 通过序列 ID 批量获取序列信息
//
// - 官网API文档链接:https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=batch_get&project=corehr&resource=job_family&version=v2
//
// - 使用Demo链接:https://github.com/larksuite/oapi-sdk-go/tree/v3_main/sample/apiall/corehrv2/batchGet_jobFamily.go
func (j *jobFamily) BatchGet(ctx context.Context, req *BatchGetJobFamilyReq, options ...larkcore.RequestOptionFunc) (*BatchGetJobFamilyResp, error) {
	// 发起请求
	apiReq := req.apiReq
	apiReq.ApiPath = "/open-apis/corehr/v2/job_families/batch_get"
	apiReq.HttpMethod = http.MethodPost
	apiReq.SupportedAccessTokenTypes = []larkcore.AccessTokenType{larkcore.AccessTokenTypeTenant}
	apiResp, err := larkcore.Request(ctx, apiReq, j.config, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &BatchGetJobFamilyResp{ApiResp: apiResp}
	err = apiResp.JSONUnmarshalBody(resp, j.config)
	if err != nil {
		return nil, err
	}
	return resp, err
}

// BatchGet
//
// - 通过职级 ID 批量获取职级信息
//
// - 官网API文档链接:https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=batch_get&project=corehr&resource=job_level&version=v2
//
// - 使用Demo链接:https://github.com/larksuite/oapi-sdk-go/tree/v3_main/sample/apiall/corehrv2/batchGet_jobLevel.go
func (j *jobLevel) BatchGet(ctx context.Context, req *BatchGetJobLevelReq, options ...larkcore.RequestOptionFunc) (*BatchGetJobLevelResp, error) {
	// 发起请求
	apiReq := req.apiReq
	apiReq.ApiPath = "/open-apis/corehr/v2/job_levels/batch_get"
	apiReq.HttpMethod = http.MethodPost
	apiReq.SupportedAccessTokenTypes = []larkcore.AccessTokenType{larkcore.AccessTokenTypeTenant}
	apiResp, err := larkcore.Request(ctx, apiReq, j.config, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &BatchGetJobLevelResp{ApiResp: apiResp}
	err = apiResp.JSONUnmarshalBody(resp, j.config)
	if err != nil {
		return nil, err
	}
	return resp, err
}

// BatchGet
//
// - 通过地点 ID 批量获取地点信息
//
// - 官网API文档链接:https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=batch_get&project=corehr&resource=location&version=v2
//
// - 使用Demo链接:https://github.com/larksuite/oapi-sdk-go/tree/v3_main/sample/apiall/corehrv2/batchGet_location.go
func (l *location) BatchGet(ctx context.Context, req *BatchGetLocationReq, options ...larkcore.RequestOptionFunc) (*BatchGetLocationResp, error) {
	// 发起请求
	apiReq := req.apiReq
	apiReq.ApiPath = "/open-apis/corehr/v2/locations/batch_get"
	apiReq.HttpMethod = http.MethodPost
	apiReq.SupportedAccessTokenTypes = []larkcore.AccessTokenType{larkcore.AccessTokenTypeTenant}
	apiResp, err := larkcore.Request(ctx, apiReq, l.config, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &BatchGetLocationResp{ApiResp: apiResp}
	err = apiResp.JSONUnmarshalBody(resp, l.config)
	if err != nil {
		return nil, err
	}
	return resp, err
}

// Create
//
// - 创建个人信息数据
//
// - 官网API文档链接:https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=create&project=corehr&resource=person&version=v2
//
// - 使用Demo链接:https://github.com/larksuite/oapi-sdk-go/tree/v3_main/sample/apiall/corehrv2/create_person.go
func (p *person) Create(ctx context.Context, req *CreatePersonReq, options ...larkcore.RequestOptionFunc) (*CreatePersonResp, error) {
	// 发起请求
	apiReq := req.apiReq
	apiReq.ApiPath = "/open-apis/corehr/v2/persons"
	apiReq.HttpMethod = http.MethodPost
	apiReq.SupportedAccessTokenTypes = []larkcore.AccessTokenType{larkcore.AccessTokenTypeTenant}
	apiResp, err := larkcore.Request(ctx, apiReq, p.config, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &CreatePersonResp{ApiResp: apiResp}
	err = apiResp.JSONUnmarshalBody(resp, p.config)
	if err != nil {
		return nil, err
	}
	return resp, err
}

// Patch
//
// -
//
// - 官网API文档链接:https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=patch&project=corehr&resource=person&version=v2
//
// - 使用Demo链接:https://github.com/larksuite/oapi-sdk-go/tree/v3_main/sample/apiall/corehrv2/patch_person.go
func (p *person) Patch(ctx context.Context, req *PatchPersonReq, options ...larkcore.RequestOptionFunc) (*PatchPersonResp, error) {
	// 发起请求
	apiReq := req.apiReq
	apiReq.ApiPath = "/open-apis/corehr/v2/persons/:person_id"
	apiReq.HttpMethod = http.MethodPatch
	apiReq.SupportedAccessTokenTypes = []larkcore.AccessTokenType{larkcore.AccessTokenTypeTenant}
	apiResp, err := larkcore.Request(ctx, apiReq, p.config, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &PatchPersonResp{ApiResp: apiResp}
	err = apiResp.JSONUnmarshalBody(resp, p.config)
	if err != nil {
		return nil, err
	}
	return resp, err
}

// Create 创建待入职人员
//
// - 创建待入职人员
//
// - 官网API文档链接:https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/corehr-v2/pre_hire/create
//
// - 使用Demo链接:https://github.com/larksuite/oapi-sdk-go/tree/v3_main/sample/apiall/corehrv2/create_preHire.go
func (p *preHire) Create(ctx context.Context, req *CreatePreHireReq, options ...larkcore.RequestOptionFunc) (*CreatePreHireResp, error) {
	// 发起请求
	apiReq := req.apiReq
	apiReq.ApiPath = "/open-apis/corehr/v2/pre_hires"
	apiReq.HttpMethod = http.MethodPost
	apiReq.SupportedAccessTokenTypes = []larkcore.AccessTokenType{larkcore.AccessTokenTypeTenant}
	apiResp, err := larkcore.Request(ctx, apiReq, p.config, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &CreatePreHireResp{ApiResp: apiResp}
	err = apiResp.JSONUnmarshalBody(resp, p.config)
	if err != nil {
		return nil, err
	}
	return resp, err
}

// Search
//
// - 根据部门 ID，上级部门查询部门列表
//
// - 官网API文档链接:https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=search&project=corehr&resource=pre_hire&version=v2
//
// - 使用Demo链接:https://github.com/larksuite/oapi-sdk-go/tree/v3_main/sample/apiall/corehrv2/search_preHire.go
func (p *preHire) Search(ctx context.Context, req *SearchPreHireReq, options ...larkcore.RequestOptionFunc) (*SearchPreHireResp, error) {
	// 发起请求
	apiReq := req.apiReq
	apiReq.ApiPath = "/open-apis/corehr/v2/pre_hires/search"
	apiReq.HttpMethod = http.MethodPost
	apiReq.SupportedAccessTokenTypes = []larkcore.AccessTokenType{larkcore.AccessTokenTypeTenant}
	apiResp, err := larkcore.Request(ctx, apiReq, p.config, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &SearchPreHireResp{ApiResp: apiResp}
	err = apiResp.JSONUnmarshalBody(resp, p.config)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (p *preHire) SearchByIterator(ctx context.Context, req *SearchPreHireReq, options ...larkcore.RequestOptionFunc) (*SearchPreHireIterator, error) {
	return &SearchPreHireIterator{
		ctx:      ctx,
		req:      req,
		listFunc: p.Search,
		options:  options,
		limit:    req.Limit}, nil
}

// EnableDisableAssessment
//
// -
//
// - 官网API文档链接:https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=enable_disable_assessment&project=corehr&resource=probation&version=v2
//
// - 使用Demo链接:https://github.com/larksuite/oapi-sdk-go/tree/v3_main/sample/apiall/corehrv2/enableDisableAssessment_probation.go
func (p *probation) EnableDisableAssessment(ctx context.Context, req *EnableDisableAssessmentProbationReq, options ...larkcore.RequestOptionFunc) (*EnableDisableAssessmentProbationResp, error) {
	// 发起请求
	apiReq := req.apiReq
	apiReq.ApiPath = "/open-apis/corehr/v2/probation/enable_disable_assessment"
	apiReq.HttpMethod = http.MethodPost
	apiReq.SupportedAccessTokenTypes = []larkcore.AccessTokenType{larkcore.AccessTokenTypeTenant}
	apiResp, err := larkcore.Request(ctx, apiReq, p.config, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &EnableDisableAssessmentProbationResp{ApiResp: apiResp}
	err = apiResp.JSONUnmarshalBody(resp, p.config)
	if err != nil {
		return nil, err
	}
	return resp, err
}

// Search
//
// -
//
// - 官网API文档链接:https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=search&project=corehr&resource=probation&version=v2
//
// - 使用Demo链接:https://github.com/larksuite/oapi-sdk-go/tree/v3_main/sample/apiall/corehrv2/search_probation.go
func (p *probation) Search(ctx context.Context, req *SearchProbationReq, options ...larkcore.RequestOptionFunc) (*SearchProbationResp, error) {
	// 发起请求
	apiReq := req.apiReq
	apiReq.ApiPath = "/open-apis/corehr/v2/probation/search"
	apiReq.HttpMethod = http.MethodPost
	apiReq.SupportedAccessTokenTypes = []larkcore.AccessTokenType{larkcore.AccessTokenTypeTenant}
	apiResp, err := larkcore.Request(ctx, apiReq, p.config, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &SearchProbationResp{ApiResp: apiResp}
	err = apiResp.JSONUnmarshalBody(resp, p.config)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (p *probation) SearchByIterator(ctx context.Context, req *SearchProbationReq, options ...larkcore.RequestOptionFunc) (*SearchProbationIterator, error) {
	return &SearchProbationIterator{
		ctx:      ctx,
		req:      req,
		listFunc: p.Search,
		options:  options,
		limit:    req.Limit}, nil
}

// Create
//
// -
//
// - 官网API文档链接:https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=create&project=corehr&resource=probation.assessment&version=v2
//
// - 使用Demo链接:https://github.com/larksuite/oapi-sdk-go/tree/v3_main/sample/apiall/corehrv2/create_probationAssessment.go
func (p *probationAssessment) Create(ctx context.Context, req *CreateProbationAssessmentReq, options ...larkcore.RequestOptionFunc) (*CreateProbationAssessmentResp, error) {
	// 发起请求
	apiReq := req.apiReq
	apiReq.ApiPath = "/open-apis/corehr/v2/probation/assessments"
	apiReq.HttpMethod = http.MethodPost
	apiReq.SupportedAccessTokenTypes = []larkcore.AccessTokenType{larkcore.AccessTokenTypeTenant}
	apiResp, err := larkcore.Request(ctx, apiReq, p.config, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &CreateProbationAssessmentResp{ApiResp: apiResp}
	err = apiResp.JSONUnmarshalBody(resp, p.config)
	if err != nil {
		return nil, err
	}
	return resp, err
}

// Delete
//
// -
//
// - 官网API文档链接:https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=delete&project=corehr&resource=probation.assessment&version=v2
//
// - 使用Demo链接:https://github.com/larksuite/oapi-sdk-go/tree/v3_main/sample/apiall/corehrv2/delete_probationAssessment.go
func (p *probationAssessment) Delete(ctx context.Context, req *DeleteProbationAssessmentReq, options ...larkcore.RequestOptionFunc) (*DeleteProbationAssessmentResp, error) {
	// 发起请求
	apiReq := req.apiReq
	apiReq.ApiPath = "/open-apis/corehr/v2/probation/assessments/:assessment_id"
	apiReq.HttpMethod = http.MethodDelete
	apiReq.SupportedAccessTokenTypes = []larkcore.AccessTokenType{larkcore.AccessTokenTypeTenant}
	apiResp, err := larkcore.Request(ctx, apiReq, p.config, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &DeleteProbationAssessmentResp{ApiResp: apiResp}
	err = apiResp.JSONUnmarshalBody(resp, p.config)
	if err != nil {
		return nil, err
	}
	return resp, err
}

// Patch
//
// -
//
// - 官网API文档链接:https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=patch&project=corehr&resource=probation.assessment&version=v2
//
// - 使用Demo链接:https://github.com/larksuite/oapi-sdk-go/tree/v3_main/sample/apiall/corehrv2/patch_probationAssessment.go
func (p *probationAssessment) Patch(ctx context.Context, req *PatchProbationAssessmentReq, options ...larkcore.RequestOptionFunc) (*PatchProbationAssessmentResp, error) {
	// 发起请求
	apiReq := req.apiReq
	apiReq.ApiPath = "/open-apis/corehr/v2/probation/assessments/:assessment_id"
	apiReq.HttpMethod = http.MethodPatch
	apiReq.SupportedAccessTokenTypes = []larkcore.AccessTokenType{larkcore.AccessTokenTypeTenant}
	apiResp, err := larkcore.Request(ctx, apiReq, p.config, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &PatchProbationAssessmentResp{ApiResp: apiResp}
	err = apiResp.JSONUnmarshalBody(resp, p.config)
	if err != nil {
		return nil, err
	}
	return resp, err
}

// Get
//
// -
//
// - 官网API文档链接:https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=get&project=corehr&resource=process&version=v2
//
// - 使用Demo链接:https://github.com/larksuite/oapi-sdk-go/tree/v3_main/sample/apiall/corehrv2/get_process.go
func (p *process) Get(ctx context.Context, req *GetProcessReq, options ...larkcore.RequestOptionFunc) (*GetProcessResp, error) {
	// 发起请求
	apiReq := req.apiReq
	apiReq.ApiPath = "/open-apis/corehr/v2/processes/:process_id"
	apiReq.HttpMethod = http.MethodGet
	apiReq.SupportedAccessTokenTypes = []larkcore.AccessTokenType{larkcore.AccessTokenTypeTenant}
	apiResp, err := larkcore.Request(ctx, apiReq, p.config, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &GetProcessResp{ApiResp: apiResp}
	err = apiResp.JSONUnmarshalBody(resp, p.config)
	if err != nil {
		return nil, err
	}
	return resp, err
}

// List
//
// -
//
// - 官网API文档链接:https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=list&project=corehr&resource=process&version=v2
//
// - 使用Demo链接:https://github.com/larksuite/oapi-sdk-go/tree/v3_main/sample/apiall/corehrv2/list_process.go
func (p *process) List(ctx context.Context, req *ListProcessReq, options ...larkcore.RequestOptionFunc) (*ListProcessResp, error) {
	// 发起请求
	apiReq := req.apiReq
	apiReq.ApiPath = "/open-apis/corehr/v2/processes"
	apiReq.HttpMethod = http.MethodGet
	apiReq.SupportedAccessTokenTypes = []larkcore.AccessTokenType{larkcore.AccessTokenTypeTenant}
	apiResp, err := larkcore.Request(ctx, apiReq, p.config, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &ListProcessResp{ApiResp: apiResp}
	err = apiResp.JSONUnmarshalBody(resp, p.config)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (p *process) ListByIterator(ctx context.Context, req *ListProcessReq, options ...larkcore.RequestOptionFunc) (*ListProcessIterator, error) {
	return &ListProcessIterator{
		ctx:      ctx,
		req:      req,
		listFunc: p.List,
		options:  options,
		limit:    req.Limit}, nil
}
