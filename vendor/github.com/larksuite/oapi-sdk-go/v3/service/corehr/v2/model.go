// Package corehr code generated by oapi sdk gen
/*
 * MIT License
 *
 * Copyright (c) 2022 Lark Technologies Pte. Ltd.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice, shall be included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

package larkcorehr

import (
	"fmt"

	"context"
	"errors"

	"github.com/larksuite/oapi-sdk-go/v3/event"

	"github.com/larksuite/oapi-sdk-go/v3/core"
)

const (
	UserIdTypeUserId         = "user_id"          // 以 user_id 来识别用户
	UserIdTypeUnionId        = "union_id"         // 以 union_id 来识别用户
	UserIdTypeOpenId         = "open_id"          // 以 open_id 来识别用户
	UserIdTypePeopleCorehrId = "people_corehr_id" // 以飞书人事的 ID 来识别用户
)

const (
	DepartmentIdTypeOpenDepartmentId         = "open_department_id"          // 以 open_department_id 来标识部门
	DepartmentIdTypeDepartmentId             = "department_id"               // 以 department_id 来标识部门
	DepartmentIdTypePeopleCorehrDepartmentId = "people_corehr_department_id" // 以 people_corehr_department_id 来标识部门
)

const (
	UserIdTypeListBpUserId         = "user_id"          // 以 user_id 来识别用户
	UserIdTypeListBpUnionId        = "union_id"         // 以 union_id 来识别用户
	UserIdTypeListBpOpenId         = "open_id"          // 以 open_id 来识别用户
	UserIdTypeListBpPeopleCorehrId = "people_corehr_id" // 以飞书人事的 ID 来识别用户
)

const (
	DepartmentIdTypeListBpOpenDepartmentId         = "open_department_id"          // 以 open_department_id 来标识部门
	DepartmentIdTypeListBpDepartmentId             = "department_id"               // 以 department_id 来标识部门
	DepartmentIdTypeListBpPeopleCorehrDepartmentId = "people_corehr_department_id" // 以 people_corehr_department_id 来标识部门
)

const (
	UserIdTypeSearchContractUserId         = "user_id"          // 以 user_id 来识别用户
	UserIdTypeSearchContractUnionId        = "union_id"         // 以 union_id 来识别用户
	UserIdTypeSearchContractOpenId         = "open_id"          // 以 open_id 来识别用户
	UserIdTypeSearchContractPeopleCorehrId = "people_corehr_id" // 以飞书人事的 ID 来识别用户
)

const (
	UserIdTypeCreateCostCenterUserId         = "user_id"          // 以 user_id 来识别用户
	UserIdTypeCreateCostCenterUnionId        = "union_id"         // 以 union_id 来识别用户
	UserIdTypeCreateCostCenterOpenId         = "open_id"          // 以 open_id 来识别用户
	UserIdTypeCreateCostCenterPeopleCorehrId = "people_corehr_id" // 以飞书人事的 ID 来识别用户
)

const (
	UserIdTypePatchCostCenterUserId         = "user_id"          // 以 user_id 来识别用户
	UserIdTypePatchCostCenterUnionId        = "union_id"         // 以 union_id 来识别用户
	UserIdTypePatchCostCenterOpenId         = "open_id"          // 以 open_id 来识别用户
	UserIdTypePatchCostCenterPeopleCorehrId = "people_corehr_id" // 以飞书人事的 ID 来识别用户
)

const (
	UserIdTypeSearchCostCenterUserId         = "user_id"          // 以 user_id 来识别用户
	UserIdTypeSearchCostCenterUnionId        = "union_id"         // 以 union_id 来识别用户
	UserIdTypeSearchCostCenterOpenId         = "open_id"          // 以 open_id 来识别用户
	UserIdTypeSearchCostCenterPeopleCorehrId = "people_corehr_id" // 以飞书人事的 ID 来识别用户
)

const (
	UserIdTypeCreateCostCenterVersionUserId         = "user_id"          // 以 user_id 来识别用户
	UserIdTypeCreateCostCenterVersionUnionId        = "union_id"         // 以 union_id 来识别用户
	UserIdTypeCreateCostCenterVersionOpenId         = "open_id"          // 以 open_id 来识别用户
	UserIdTypeCreateCostCenterVersionPeopleCorehrId = "people_corehr_id" // 以飞书人事的 ID 来识别用户
)

const (
	UserIdTypePatchCostCenterVersionUserId         = "user_id"          // 以 user_id 来识别用户
	UserIdTypePatchCostCenterVersionUnionId        = "union_id"         // 以 union_id 来识别用户
	UserIdTypePatchCostCenterVersionOpenId         = "open_id"          // 以 open_id 来识别用户
	UserIdTypePatchCostCenterVersionPeopleCorehrId = "people_corehr_id" // 以飞书人事的 ID 来识别用户
)

const (
	UserIdTypeBatchGetDepartmentUserId         = "user_id"          // 以 user_id 来识别用户
	UserIdTypeBatchGetDepartmentUnionId        = "union_id"         // 以 union_id 来识别用户
	UserIdTypeBatchGetDepartmentOpenId         = "open_id"          // 以 open_id 来识别用户
	UserIdTypeBatchGetDepartmentPeopleCorehrId = "people_corehr_id" // 以飞书人事的 ID 来识别用户
)

const (
	DepartmentIdTypeBatchGetDepartmentOpenDepartmentId         = "open_department_id"          // 以 open_department_id 来标识部门
	DepartmentIdTypeBatchGetDepartmentDepartmentId             = "department_id"               // 以 department_id 来标识部门
	DepartmentIdTypeBatchGetDepartmentPeopleCorehrDepartmentId = "people_corehr_department_id" // 以 people_corehr_department_id 来标识部门
)

const (
	DepartmentIdTypeParentsDepartmentOpenDepartmentId         = "open_department_id"          // 以 open_department_id 来标识部门
	DepartmentIdTypeParentsDepartmentDepartmentId             = "department_id"               // 以 department_id 来标识部门
	DepartmentIdTypeParentsDepartmentPeopleCorehrDepartmentId = "people_corehr_department_id" // 以 people_corehr_department_id 来标识部门
)

const (
	UserIdTypeSearchDepartmentUserId         = "user_id"          // 以 user_id 来识别用户
	UserIdTypeSearchDepartmentUnionId        = "union_id"         // 以 union_id 来识别用户
	UserIdTypeSearchDepartmentOpenId         = "open_id"          // 以 open_id 来识别用户
	UserIdTypeSearchDepartmentPeopleCorehrId = "people_corehr_id" // 以飞书人事的 ID 来识别用户
)

const (
	DepartmentIdTypeSearchDepartmentOpenDepartmentId         = "open_department_id"          // 以 open_department_id 来标识部门
	DepartmentIdTypeSearchDepartmentDepartmentId             = "department_id"               // 以 department_id 来标识部门
	DepartmentIdTypeSearchDepartmentPeopleCorehrDepartmentId = "people_corehr_department_id" // 以 people_corehr_department_id 来标识部门
)

const (
	UserIdTypeBatchGetEmployeeUserId         = "user_id"          // 以 user_id 来识别用户
	UserIdTypeBatchGetEmployeeUnionId        = "union_id"         // 以 union_id 来识别用户
	UserIdTypeBatchGetEmployeeOpenId         = "open_id"          // 以 open_id 来识别用户
	UserIdTypeBatchGetEmployeePeopleCorehrId = "people_corehr_id" // 以飞书人事的 ID 来识别用户
)

const (
	DepartmentIdTypeBatchGetEmployeeOpenDepartmentId         = "open_department_id"          // 以 open_department_id 来标识部门
	DepartmentIdTypeBatchGetEmployeeDepartmentId             = "department_id"               // 以 department_id 来标识部门
	DepartmentIdTypeBatchGetEmployeePeopleCorehrDepartmentId = "people_corehr_department_id" // 以 people_corehr_department_id 来标识部门
)

const (
	EmploymentStatusHired      = "hired"      // 在职
	EmploymentStatusTerminated = "terminated" // 离职
)

const (
	UserIdTypeSearchEmployeeUserId         = "user_id"          // 以 user_id 来识别用户
	UserIdTypeSearchEmployeeUnionId        = "union_id"         // 以 union_id 来识别用户
	UserIdTypeSearchEmployeeOpenId         = "open_id"          // 以 open_id 来识别用户
	UserIdTypeSearchEmployeePeopleCorehrId = "people_corehr_id" // 以飞书人事的 ID 来识别用户
)

const (
	DepartmentIdTypeSearchEmployeeOpenDepartmentId         = "open_department_id"          // 以 open_department_id 来标识部门
	DepartmentIdTypeSearchEmployeeDepartmentId             = "department_id"               // 以 department_id 来标识部门
	DepartmentIdTypeSearchEmployeePeopleCorehrDepartmentId = "people_corehr_department_id" // 以 people_corehr_department_id 来标识部门
)

const (
	UserIdTypeBatchGetEmployeesBpUserId         = "user_id"          // 以 user_id 来识别用户
	UserIdTypeBatchGetEmployeesBpUnionId        = "union_id"         // 以 union_id 来识别用户
	UserIdTypeBatchGetEmployeesBpOpenId         = "open_id"          // 以 open_id 来识别用户
	UserIdTypeBatchGetEmployeesBpPeopleCorehrId = "people_corehr_id" // 以飞书人事的 ID 来识别用户
)

const (
	UserIdTypeBatchGetEmployeesJobDataUserId         = "user_id"          // 以 user_id 来识别用户
	UserIdTypeBatchGetEmployeesJobDataUnionId        = "union_id"         // 以 union_id 来识别用户
	UserIdTypeBatchGetEmployeesJobDataOpenId         = "open_id"          // 以 open_id 来识别用户
	UserIdTypeBatchGetEmployeesJobDataPeopleCorehrId = "people_corehr_id" // 以飞书人事的 ID 来识别用户
)

const (
	DepartmentIdTypeBatchGetEmployeesJobDataOpenDepartmentId         = "open_department_id"          // 以 open_department_id 来标识部门
	DepartmentIdTypeBatchGetEmployeesJobDataDepartmentId             = "department_id"               // 以 department_id 来标识部门
	DepartmentIdTypeBatchGetEmployeesJobDataPeopleCorehrDepartmentId = "people_corehr_department_id" // 以 people_corehr_department_id 来标识部门
)

const (
	UserIdTypeQueryEmployeesJobDataUserId         = "user_id"          // 以 user_id 来识别用户
	UserIdTypeQueryEmployeesJobDataUnionId        = "union_id"         // 以 union_id 来识别用户
	UserIdTypeQueryEmployeesJobDataOpenId         = "open_id"          // 以 open_id 来识别用户
	UserIdTypeQueryEmployeesJobDataPeopleCorehrId = "people_corehr_id" // 以飞书人事的 ID 来识别用户
)

const (
	DepartmentIdTypeQueryEmployeesJobDataOpenDepartmentId         = "open_department_id"          // 以 open_department_id 来标识部门
	DepartmentIdTypeQueryEmployeesJobDataDepartmentId             = "department_id"               // 以 department_id 来标识部门
	DepartmentIdTypeQueryEmployeesJobDataPeopleCorehrDepartmentId = "people_corehr_department_id" // 以 people_corehr_department_id 来标识部门
)

const (
	UserIdTypeSearchJobChangeUserId         = "user_id"          // 以 user_id 来识别用户
	UserIdTypeSearchJobChangeUnionId        = "union_id"         // 以 union_id 来识别用户
	UserIdTypeSearchJobChangeOpenId         = "open_id"          // 以 open_id 来识别用户
	UserIdTypeSearchJobChangePeopleCorehrId = "people_corehr_id" // 以飞书人事的 ID 来识别用户
)

const (
	DepartmentIdTypeSearchJobChangeOpenDepartmentId         = "open_department_id"          // 以 open_department_id 来标识部门
	DepartmentIdTypeSearchJobChangeDepartmentId             = "department_id"               // 以 department_id 来标识部门
	DepartmentIdTypeSearchJobChangePeopleCorehrDepartmentId = "people_corehr_department_id" // 以 people_corehr_department_id 来标识部门
)

const (
	OnboardingStatusPreboarding = "preboarding" // 待入职
	OnboardingStatusDeleted     = "deleted"     // 已删除
	OnboardingStatusDayOne      = "day_one"     // 准备就绪
	OnboardingStatusWithdrawn   = "withdrawn"   // 已撤销
	OnboardingStatusCompleted   = "completed"   // 已完成
)

const (
	RehireToBeConfirmed = "to_be_confirmed" // 待确认，系统会判断该员工是否存在历史雇佣记录，如果存在且需要二次确认时会调用失败，并返回历史雇佣记录
	RehireNo            = "no"              // 否，系统直接标为非离职重聘人员，不再做重复判断
	RehireYes           = "yes"             // 是，要求历史雇佣信息 ID 必填
)

const (
	UserIdTypeSearchPreHireUserId         = "user_id"          // 以 user_id 来识别用户
	UserIdTypeSearchPreHireUnionId        = "union_id"         // 以 union_id 来识别用户
	UserIdTypeSearchPreHireOpenId         = "open_id"          // 以 open_id 来识别用户
	UserIdTypeSearchPreHirePeopleCorehrId = "people_corehr_id" // 以飞书人事的 ID 来识别用户
)

const (
	DepartmentIdTypeSearchPreHireOpenDepartmentId         = "open_department_id"          // 以 open_department_id 来标识部门
	DepartmentIdTypeSearchPreHireDepartmentId             = "department_id"               // 以 department_id 来标识部门
	DepartmentIdTypeSearchPreHirePeopleCorehrDepartmentId = "people_corehr_department_id" // 以 people_corehr_department_id 来标识部门
)

const (
	ProbationStatusPending    = "pending"    // 审批中
	ProbationStatusRejected   = "rejected"   // 已拒绝
	ProbationStatusWaiting    = "waiting"    // 待发起转正
	ProbationStatusApproved   = "approved"   // 审批通过
	ProbationStatusConverted  = "converted"  // 已转正
	ProbationStatusOffboarded = "offboarded" // 已离职
)

const (
	FinalAssessmentResultApproved = "approved" // 通过
	FinalAssessmentResultRejected = "rejected" // 不通过
)

const (
	UserIdTypeSearchProbationUserId         = "user_id"          // 以 user_id 来识别用户
	UserIdTypeSearchProbationUnionId        = "union_id"         // 以 union_id 来识别用户
	UserIdTypeSearchProbationOpenId         = "open_id"          // 以 open_id 来识别用户
	UserIdTypeSearchProbationPeopleCorehrId = "people_corehr_id" // 以飞书人事的 ID 来识别用户
)

const (
	DepartmentIdTypeSearchProbationOpenDepartmentId         = "open_department_id"          // 以 open_department_id 来标识部门
	DepartmentIdTypeSearchProbationDepartmentId             = "department_id"               // 以 department_id 来标识部门
	DepartmentIdTypeSearchProbationPeopleCorehrDepartmentId = "people_corehr_department_id" // 以 people_corehr_department_id 来标识部门
)

const (
	UserIdTypeCreateProbationAssessmentUserId         = "user_id"          // 以 user_id 来识别用户
	UserIdTypeCreateProbationAssessmentUnionId        = "union_id"         // 以 union_id 来识别用户
	UserIdTypeCreateProbationAssessmentOpenId         = "open_id"          // 以 open_id 来识别用户
	UserIdTypeCreateProbationAssessmentPeopleCorehrId = "people_corehr_id" // 以飞书人事的 ID 来识别用户
)

const (
	AssessmentStatusNotStarted = "not_started" // 未开始
	AssessmentStatusInProcess  = "in_process"  // 进行中
	AssessmentStatusCompleted  = "completed"   // 已完成
	AssessmentStatusNoNeed     = "no_need"     // 无需考核
)

const (
	AssessmentResultApproved = "approved" // 通过
	AssessmentResultRejected = "rejected" // 不通过
)

const (
	UserIdTypeGetProcessUserId  = "user_id"  // 以 user_id 来识别用户
	UserIdTypeGetProcessUnionId = "union_id" // 以 union_id 来识别用户
	UserIdTypeGetProcessOpenId  = "open_id"  // 以 open_id 来识别用户
)

type AbnormalReason struct {
	Id           *string                      `json:"id,omitempty"`            // 异常原因ID
	Type         *int                         `json:"type,omitempty"`          // 异常原因类型，1-系统异常，2-用户自定义异常;
	I18nElements []*AbnormalReasonI18nElement `json:"i18n_elements,omitempty"` // 异常原因列表
}

type AbnormalReasonBuilder struct {
	id               string // 异常原因ID
	idFlag           bool
	type_            int // 异常原因类型，1-系统异常，2-用户自定义异常;
	typeFlag         bool
	i18nElements     []*AbnormalReasonI18nElement // 异常原因列表
	i18nElementsFlag bool
}

func NewAbnormalReasonBuilder() *AbnormalReasonBuilder {
	builder := &AbnormalReasonBuilder{}
	return builder
}

// 异常原因ID
//
// 示例值：6893014062142064135
func (builder *AbnormalReasonBuilder) Id(id string) *AbnormalReasonBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

// 异常原因类型，1-系统异常，2-用户自定义异常;
//
// 示例值：1
func (builder *AbnormalReasonBuilder) Type(type_ int) *AbnormalReasonBuilder {
	builder.type_ = type_
	builder.typeFlag = true
	return builder
}

// 异常原因列表
//
// 示例值：
func (builder *AbnormalReasonBuilder) I18nElements(i18nElements []*AbnormalReasonI18nElement) *AbnormalReasonBuilder {
	builder.i18nElements = i18nElements
	builder.i18nElementsFlag = true
	return builder
}

func (builder *AbnormalReasonBuilder) Build() *AbnormalReason {
	req := &AbnormalReason{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.typeFlag {
		req.Type = &builder.type_

	}
	if builder.i18nElementsFlag {
		req.I18nElements = builder.i18nElements
	}
	return req
}

type AbnormalReasonElement struct {
	Tag  *string `json:"tag,omitempty"`  // 组件类型
	Text *string `json:"text,omitempty"` // 文本
	Href *string `json:"href,omitempty"` // 超链接
}

type AbnormalReasonElementBuilder struct {
	tag      string // 组件类型
	tagFlag  bool
	text     string // 文本
	textFlag bool
	href     string // 超链接
	hrefFlag bool
}

func NewAbnormalReasonElementBuilder() *AbnormalReasonElementBuilder {
	builder := &AbnormalReasonElementBuilder{}
	return builder
}

// 组件类型
//
// 示例值：a,text
func (builder *AbnormalReasonElementBuilder) Tag(tag string) *AbnormalReasonElementBuilder {
	builder.tag = tag
	builder.tagFlag = true
	return builder
}

// 文本
//
// 示例值：这个是一个文本字段
func (builder *AbnormalReasonElementBuilder) Text(text string) *AbnormalReasonElementBuilder {
	builder.text = text
	builder.textFlag = true
	return builder
}

// 超链接
//
// 示例值：https://open.feishu.cn/
func (builder *AbnormalReasonElementBuilder) Href(href string) *AbnormalReasonElementBuilder {
	builder.href = href
	builder.hrefFlag = true
	return builder
}

func (builder *AbnormalReasonElementBuilder) Build() *AbnormalReasonElement {
	req := &AbnormalReasonElement{}
	if builder.tagFlag {
		req.Tag = &builder.tag

	}
	if builder.textFlag {
		req.Text = &builder.text

	}
	if builder.hrefFlag {
		req.Href = &builder.href

	}
	return req
}

type AbnormalReasonI18nElement struct {
	Lang     *string                  `json:"lang,omitempty"`     // 语言
	Elements []*AbnormalReasonElement `json:"elements,omitempty"` // 异常原因列表
}

type AbnormalReasonI18nElementBuilder struct {
	lang         string // 语言
	langFlag     bool
	elements     []*AbnormalReasonElement // 异常原因列表
	elementsFlag bool
}

func NewAbnormalReasonI18nElementBuilder() *AbnormalReasonI18nElementBuilder {
	builder := &AbnormalReasonI18nElementBuilder{}
	return builder
}

// 语言
//
// 示例值：zh-CN,en-US
func (builder *AbnormalReasonI18nElementBuilder) Lang(lang string) *AbnormalReasonI18nElementBuilder {
	builder.lang = lang
	builder.langFlag = true
	return builder
}

// 异常原因列表
//
// 示例值：
func (builder *AbnormalReasonI18nElementBuilder) Elements(elements []*AbnormalReasonElement) *AbnormalReasonI18nElementBuilder {
	builder.elements = elements
	builder.elementsFlag = true
	return builder
}

func (builder *AbnormalReasonI18nElementBuilder) Build() *AbnormalReasonI18nElement {
	req := &AbnormalReasonI18nElement{}
	if builder.langFlag {
		req.Lang = &builder.lang

	}
	if builder.elementsFlag {
		req.Elements = builder.elements
	}
	return req
}

type Address struct {
	FullAddressLocalScript   *string `json:"full_address_local_script,omitempty"`   // 完整地址（本地文字）
	FullAddressWesternScript *string `json:"full_address_western_script,omitempty"` // 完整地址（西方文字）
	AddressId                *string `json:"address_id,omitempty"`                  // 地址 ID
	CountryRegionId          *string `json:"country_region_id,omitempty"`           // 国家 / 地区
	RegionId                 *string `json:"region_id,omitempty"`                   // 主要行政区

	CityIdV2          *string            `json:"city_id_v2,omitempty"`          // 城市
	DistrictIdV2      *string            `json:"district_id_v2,omitempty"`      // 区/县
	LocalAddressLine1 *string            `json:"local_address_line1,omitempty"` // 地址行 1（非拉丁语系的本地文字）
	LocalAddressLine2 *string            `json:"local_address_line2,omitempty"` // 地址行 2（非拉丁语系的本地文字）
	LocalAddressLine3 *string            `json:"local_address_line3,omitempty"` // 地址行 3（非拉丁语系的本地文字）
	LocalAddressLine4 *string            `json:"local_address_line4,omitempty"` // 地址行 4（非拉丁语系的本地文字）
	LocalAddressLine5 *string            `json:"local_address_line5,omitempty"` // 地址行 5（非拉丁语系的本地文字）
	LocalAddressLine6 *string            `json:"local_address_line6,omitempty"` // 地址行 6（非拉丁语系的本地文字）
	LocalAddressLine7 *string            `json:"local_address_line7,omitempty"` // 地址行 7（非拉丁语系的本地文字）
	LocalAddressLine8 *string            `json:"local_address_line8,omitempty"` // 地址行 8（非拉丁语系的本地文字）
	LocalAddressLine9 *string            `json:"local_address_line9,omitempty"` // 地址行 9（非拉丁语系的本地文字）
	PostalCode        *string            `json:"postal_code,omitempty"`         // 邮政编码
	AddressTypeList   []*Enum            `json:"address_type_list,omitempty"`   // 地址类型
	IsPrimary         *bool              `json:"is_primary,omitempty"`          // 主要地址
	IsPublic          *bool              `json:"is_public,omitempty"`           // 公开地址
	CustomFields      []*CustomFieldData `json:"custom_fields,omitempty"`       // 自定义字段
}

type AddressBuilder struct {
	fullAddressLocalScript       string // 完整地址（本地文字）
	fullAddressLocalScriptFlag   bool
	fullAddressWesternScript     string // 完整地址（西方文字）
	fullAddressWesternScriptFlag bool
	addressId                    string // 地址 ID
	addressIdFlag                bool
	countryRegionId              string // 国家 / 地区
	countryRegionIdFlag          bool
	regionId                     string // 主要行政区
	regionIdFlag                 bool

	cityIdV2              string // 城市
	cityIdV2Flag          bool
	districtIdV2          string // 区/县
	districtIdV2Flag      bool
	localAddressLine1     string // 地址行 1（非拉丁语系的本地文字）
	localAddressLine1Flag bool
	localAddressLine2     string // 地址行 2（非拉丁语系的本地文字）
	localAddressLine2Flag bool
	localAddressLine3     string // 地址行 3（非拉丁语系的本地文字）
	localAddressLine3Flag bool
	localAddressLine4     string // 地址行 4（非拉丁语系的本地文字）
	localAddressLine4Flag bool
	localAddressLine5     string // 地址行 5（非拉丁语系的本地文字）
	localAddressLine5Flag bool
	localAddressLine6     string // 地址行 6（非拉丁语系的本地文字）
	localAddressLine6Flag bool
	localAddressLine7     string // 地址行 7（非拉丁语系的本地文字）
	localAddressLine7Flag bool
	localAddressLine8     string // 地址行 8（非拉丁语系的本地文字）
	localAddressLine8Flag bool
	localAddressLine9     string // 地址行 9（非拉丁语系的本地文字）
	localAddressLine9Flag bool
	postalCode            string // 邮政编码
	postalCodeFlag        bool
	addressTypeList       []*Enum // 地址类型
	addressTypeListFlag   bool
	isPrimary             bool // 主要地址
	isPrimaryFlag         bool
	isPublic              bool // 公开地址
	isPublicFlag          bool
	customFields          []*CustomFieldData // 自定义字段
	customFieldsFlag      bool
}

func NewAddressBuilder() *AddressBuilder {
	builder := &AddressBuilder{}
	return builder
}

// 完整地址（本地文字）
//
// 示例值：中国北京北京
func (builder *AddressBuilder) FullAddressLocalScript(fullAddressLocalScript string) *AddressBuilder {
	builder.fullAddressLocalScript = fullAddressLocalScript
	builder.fullAddressLocalScriptFlag = true
	return builder
}

// 完整地址（西方文字）
//
// 示例值：Beijing, Beijing, China,
func (builder *AddressBuilder) FullAddressWesternScript(fullAddressWesternScript string) *AddressBuilder {
	builder.fullAddressWesternScript = fullAddressWesternScript
	builder.fullAddressWesternScriptFlag = true
	return builder
}

// 地址 ID
//
// 示例值：6989822217869624863
func (builder *AddressBuilder) AddressId(addressId string) *AddressBuilder {
	builder.addressId = addressId
	builder.addressIdFlag = true
	return builder
}

// 国家 / 地区
//
// 示例值：6862995757234914824
func (builder *AddressBuilder) CountryRegionId(countryRegionId string) *AddressBuilder {
	builder.countryRegionId = countryRegionId
	builder.countryRegionIdFlag = true
	return builder
}

// 主要行政区
//
// 示例值：6863326815667095047
func (builder *AddressBuilder) RegionId(regionId string) *AddressBuilder {
	builder.regionId = regionId
	builder.regionIdFlag = true
	return builder
}

// 城市
//
// 示例值：6863333254578046471
func (builder *AddressBuilder) CityIdV2(cityIdV2 string) *AddressBuilder {
	builder.cityIdV2 = cityIdV2
	builder.cityIdV2Flag = true
	return builder
}

// 区/县
//
// 示例值：6863333516579440141
func (builder *AddressBuilder) DistrictIdV2(districtIdV2 string) *AddressBuilder {
	builder.districtIdV2 = districtIdV2
	builder.districtIdV2Flag = true
	return builder
}

// 地址行 1（非拉丁语系的本地文字）
//
// 示例值：丹佛测试地址-纽埃时区
func (builder *AddressBuilder) LocalAddressLine1(localAddressLine1 string) *AddressBuilder {
	builder.localAddressLine1 = localAddressLine1
	builder.localAddressLine1Flag = true
	return builder
}

// 地址行 2（非拉丁语系的本地文字）
//
// 示例值：PoewH
func (builder *AddressBuilder) LocalAddressLine2(localAddressLine2 string) *AddressBuilder {
	builder.localAddressLine2 = localAddressLine2
	builder.localAddressLine2Flag = true
	return builder
}

// 地址行 3（非拉丁语系的本地文字）
//
// 示例值：PoewH
func (builder *AddressBuilder) LocalAddressLine3(localAddressLine3 string) *AddressBuilder {
	builder.localAddressLine3 = localAddressLine3
	builder.localAddressLine3Flag = true
	return builder
}

// 地址行 4（非拉丁语系的本地文字）
//
// 示例值：jmwJc
func (builder *AddressBuilder) LocalAddressLine4(localAddressLine4 string) *AddressBuilder {
	builder.localAddressLine4 = localAddressLine4
	builder.localAddressLine4Flag = true
	return builder
}

// 地址行 5（非拉丁语系的本地文字）
//
// 示例值：jmwJc
func (builder *AddressBuilder) LocalAddressLine5(localAddressLine5 string) *AddressBuilder {
	builder.localAddressLine5 = localAddressLine5
	builder.localAddressLine5Flag = true
	return builder
}

// 地址行 6（非拉丁语系的本地文字）
//
// 示例值：jmwJc
func (builder *AddressBuilder) LocalAddressLine6(localAddressLine6 string) *AddressBuilder {
	builder.localAddressLine6 = localAddressLine6
	builder.localAddressLine6Flag = true
	return builder
}

// 地址行 7（非拉丁语系的本地文字）
//
// 示例值：jmwJc
func (builder *AddressBuilder) LocalAddressLine7(localAddressLine7 string) *AddressBuilder {
	builder.localAddressLine7 = localAddressLine7
	builder.localAddressLine7Flag = true
	return builder
}

// 地址行 8（非拉丁语系的本地文字）
//
// 示例值：rafSu
func (builder *AddressBuilder) LocalAddressLine8(localAddressLine8 string) *AddressBuilder {
	builder.localAddressLine8 = localAddressLine8
	builder.localAddressLine8Flag = true
	return builder
}

// 地址行 9（非拉丁语系的本地文字）
//
// 示例值：McPRG
func (builder *AddressBuilder) LocalAddressLine9(localAddressLine9 string) *AddressBuilder {
	builder.localAddressLine9 = localAddressLine9
	builder.localAddressLine9Flag = true
	return builder
}

// 邮政编码
//
// 示例值：611530
func (builder *AddressBuilder) PostalCode(postalCode string) *AddressBuilder {
	builder.postalCode = postalCode
	builder.postalCodeFlag = true
	return builder
}

// 地址类型
//
// 示例值：
func (builder *AddressBuilder) AddressTypeList(addressTypeList []*Enum) *AddressBuilder {
	builder.addressTypeList = addressTypeList
	builder.addressTypeListFlag = true
	return builder
}

// 主要地址
//
// 示例值：true
func (builder *AddressBuilder) IsPrimary(isPrimary bool) *AddressBuilder {
	builder.isPrimary = isPrimary
	builder.isPrimaryFlag = true
	return builder
}

// 公开地址
//
// 示例值：true
func (builder *AddressBuilder) IsPublic(isPublic bool) *AddressBuilder {
	builder.isPublic = isPublic
	builder.isPublicFlag = true
	return builder
}

// 自定义字段
//
// 示例值：
func (builder *AddressBuilder) CustomFields(customFields []*CustomFieldData) *AddressBuilder {
	builder.customFields = customFields
	builder.customFieldsFlag = true
	return builder
}

func (builder *AddressBuilder) Build() *Address {
	req := &Address{}
	if builder.fullAddressLocalScriptFlag {
		req.FullAddressLocalScript = &builder.fullAddressLocalScript

	}
	if builder.fullAddressWesternScriptFlag {
		req.FullAddressWesternScript = &builder.fullAddressWesternScript

	}
	if builder.addressIdFlag {
		req.AddressId = &builder.addressId

	}
	if builder.countryRegionIdFlag {
		req.CountryRegionId = &builder.countryRegionId

	}
	if builder.regionIdFlag {
		req.RegionId = &builder.regionId

	}

	if builder.cityIdV2Flag {
		req.CityIdV2 = &builder.cityIdV2

	}
	if builder.districtIdV2Flag {
		req.DistrictIdV2 = &builder.districtIdV2

	}
	if builder.localAddressLine1Flag {
		req.LocalAddressLine1 = &builder.localAddressLine1

	}
	if builder.localAddressLine2Flag {
		req.LocalAddressLine2 = &builder.localAddressLine2

	}
	if builder.localAddressLine3Flag {
		req.LocalAddressLine3 = &builder.localAddressLine3

	}
	if builder.localAddressLine4Flag {
		req.LocalAddressLine4 = &builder.localAddressLine4

	}
	if builder.localAddressLine5Flag {
		req.LocalAddressLine5 = &builder.localAddressLine5

	}
	if builder.localAddressLine6Flag {
		req.LocalAddressLine6 = &builder.localAddressLine6

	}
	if builder.localAddressLine7Flag {
		req.LocalAddressLine7 = &builder.localAddressLine7

	}
	if builder.localAddressLine8Flag {
		req.LocalAddressLine8 = &builder.localAddressLine8

	}
	if builder.localAddressLine9Flag {
		req.LocalAddressLine9 = &builder.localAddressLine9

	}
	if builder.postalCodeFlag {
		req.PostalCode = &builder.postalCode

	}
	if builder.addressTypeListFlag {
		req.AddressTypeList = builder.addressTypeList
	}
	if builder.isPrimaryFlag {
		req.IsPrimary = &builder.isPrimary

	}
	if builder.isPublicFlag {
		req.IsPublic = &builder.isPublic

	}
	if builder.customFieldsFlag {
		req.CustomFields = builder.customFields
	}
	return req
}

type ApprovalGroup struct {
	ApprovalGroupId     *string  `json:"approval_group_id,omitempty"`     // 组织架构调整审批组 ID
	ProcessId           *string  `json:"process_id,omitempty"`            // 组织架构调整流程 ID
	ApprovalGroupStatus *string  `json:"approval_group_status,omitempty"` // 组织架构调整流程状态
	Topic               *string  `json:"topic,omitempty"`                 // 调整主题
	AdjustReason        *string  `json:"adjust_reason,omitempty"`         // 调整原因
	EffectiveDate       *string  `json:"effective_date,omitempty"`        // 生效日期
	CreatedBy           *string  `json:"created_by,omitempty"`            // 发起人
	DraftId             *string  `json:"draft_id,omitempty"`              // 组织架构调整任务 ID
	DraftStatus         *string  `json:"draft_status,omitempty"`          // 组织架构调整任务状态
	DepartmentChanges   []string `json:"department_changes,omitempty"`    // 关联的部门调整记录 ID 列表
	JobChanges          []string `json:"job_changes,omitempty"`           // 关联的人员调整记录 ID 列表
}

type ApprovalGroupBuilder struct {
	approvalGroupId         string // 组织架构调整审批组 ID
	approvalGroupIdFlag     bool
	processId               string // 组织架构调整流程 ID
	processIdFlag           bool
	approvalGroupStatus     string // 组织架构调整流程状态
	approvalGroupStatusFlag bool
	topic                   string // 调整主题
	topicFlag               bool
	adjustReason            string // 调整原因
	adjustReasonFlag        bool
	effectiveDate           string // 生效日期
	effectiveDateFlag       bool
	createdBy               string // 发起人
	createdByFlag           bool
	draftId                 string // 组织架构调整任务 ID
	draftIdFlag             bool
	draftStatus             string // 组织架构调整任务状态
	draftStatusFlag         bool
	departmentChanges       []string // 关联的部门调整记录 ID 列表
	departmentChangesFlag   bool
	jobChanges              []string // 关联的人员调整记录 ID 列表
	jobChangesFlag          bool
}

func NewApprovalGroupBuilder() *ApprovalGroupBuilder {
	builder := &ApprovalGroupBuilder{}
	return builder
}

// 组织架构调整审批组 ID
//
// 示例值：6991776076699549697
func (builder *ApprovalGroupBuilder) ApprovalGroupId(approvalGroupId string) *ApprovalGroupBuilder {
	builder.approvalGroupId = approvalGroupId
	builder.approvalGroupIdFlag = true
	return builder
}

// 组织架构调整流程 ID
//
// 示例值：6991776076699549697
func (builder *ApprovalGroupBuilder) ProcessId(processId string) *ApprovalGroupBuilder {
	builder.processId = processId
	builder.processIdFlag = true
	return builder
}

// 组织架构调整流程状态
//
// 示例值：
func (builder *ApprovalGroupBuilder) ApprovalGroupStatus(approvalGroupStatus string) *ApprovalGroupBuilder {
	builder.approvalGroupStatus = approvalGroupStatus
	builder.approvalGroupStatusFlag = true
	return builder
}

// 调整主题
//
// 示例值：测试组织架构调整
func (builder *ApprovalGroupBuilder) Topic(topic string) *ApprovalGroupBuilder {
	builder.topic = topic
	builder.topicFlag = true
	return builder
}

// 调整原因
//
// 示例值：测试
func (builder *ApprovalGroupBuilder) AdjustReason(adjustReason string) *ApprovalGroupBuilder {
	builder.adjustReason = adjustReason
	builder.adjustReasonFlag = true
	return builder
}

// 生效日期
//
// 示例值：2022-03-01
func (builder *ApprovalGroupBuilder) EffectiveDate(effectiveDate string) *ApprovalGroupBuilder {
	builder.effectiveDate = effectiveDate
	builder.effectiveDateFlag = true
	return builder
}

// 发起人
//
// 示例值：6974641477444060708
func (builder *ApprovalGroupBuilder) CreatedBy(createdBy string) *ApprovalGroupBuilder {
	builder.createdBy = createdBy
	builder.createdByFlag = true
	return builder
}

// 组织架构调整任务 ID
//
// 示例值：6991776076699549697
func (builder *ApprovalGroupBuilder) DraftId(draftId string) *ApprovalGroupBuilder {
	builder.draftId = draftId
	builder.draftIdFlag = true
	return builder
}

// 组织架构调整任务状态
//
// 示例值：
func (builder *ApprovalGroupBuilder) DraftStatus(draftStatus string) *ApprovalGroupBuilder {
	builder.draftStatus = draftStatus
	builder.draftStatusFlag = true
	return builder
}

// 关联的部门调整记录 ID 列表
//
// 示例值：
func (builder *ApprovalGroupBuilder) DepartmentChanges(departmentChanges []string) *ApprovalGroupBuilder {
	builder.departmentChanges = departmentChanges
	builder.departmentChangesFlag = true
	return builder
}

// 关联的人员调整记录 ID 列表
//
// 示例值：
func (builder *ApprovalGroupBuilder) JobChanges(jobChanges []string) *ApprovalGroupBuilder {
	builder.jobChanges = jobChanges
	builder.jobChangesFlag = true
	return builder
}

func (builder *ApprovalGroupBuilder) Build() *ApprovalGroup {
	req := &ApprovalGroup{}
	if builder.approvalGroupIdFlag {
		req.ApprovalGroupId = &builder.approvalGroupId

	}
	if builder.processIdFlag {
		req.ProcessId = &builder.processId

	}
	if builder.approvalGroupStatusFlag {
		req.ApprovalGroupStatus = &builder.approvalGroupStatus

	}
	if builder.topicFlag {
		req.Topic = &builder.topic

	}
	if builder.adjustReasonFlag {
		req.AdjustReason = &builder.adjustReason

	}
	if builder.effectiveDateFlag {
		req.EffectiveDate = &builder.effectiveDate

	}
	if builder.createdByFlag {
		req.CreatedBy = &builder.createdBy

	}
	if builder.draftIdFlag {
		req.DraftId = &builder.draftId

	}
	if builder.draftStatusFlag {
		req.DraftStatus = &builder.draftStatus

	}
	if builder.departmentChangesFlag {
		req.DepartmentChanges = builder.departmentChanges
	}
	if builder.jobChangesFlag {
		req.JobChanges = builder.jobChanges
	}
	return req
}

type Assessment struct {
	AssessmentId       *string  `json:"assessment_id,omitempty"`        // 考核结果 ID
	AssessmentStatus   *Enum    `json:"assessment_status,omitempty"`    // 考核状态
	AssessmentResult   *Enum    `json:"assessment_result,omitempty"`    // 试用期考核结果
	AssessmentScore    *float64 `json:"assessment_score,omitempty"`     // 考核得分
	AssessmentGrade    *Enum    `json:"assessment_grade,omitempty"`     // 试用期考核等级
	AssessmentComment  *string  `json:"assessment_comment,omitempty"`   // 考核评语
	AssessmentDetail   *string  `json:"assessment_detail,omitempty"`    // 考核结果页面超链接
	IsFinalAsssessment *bool    `json:"is_final_asssessment,omitempty"` // 是否为最终考核结果
}

type AssessmentBuilder struct {
	assessmentId           string // 考核结果 ID
	assessmentIdFlag       bool
	assessmentStatus       *Enum // 考核状态
	assessmentStatusFlag   bool
	assessmentResult       *Enum // 试用期考核结果
	assessmentResultFlag   bool
	assessmentScore        float64 // 考核得分
	assessmentScoreFlag    bool
	assessmentGrade        *Enum // 试用期考核等级
	assessmentGradeFlag    bool
	assessmentComment      string // 考核评语
	assessmentCommentFlag  bool
	assessmentDetail       string // 考核结果页面超链接
	assessmentDetailFlag   bool
	isFinalAsssessment     bool // 是否为最终考核结果
	isFinalAsssessmentFlag bool
}

func NewAssessmentBuilder() *AssessmentBuilder {
	builder := &AssessmentBuilder{}
	return builder
}

// 考核结果 ID
//
// 示例值：6893014061142064135
func (builder *AssessmentBuilder) AssessmentId(assessmentId string) *AssessmentBuilder {
	builder.assessmentId = assessmentId
	builder.assessmentIdFlag = true
	return builder
}

// 考核状态
//
// 示例值：
func (builder *AssessmentBuilder) AssessmentStatus(assessmentStatus *Enum) *AssessmentBuilder {
	builder.assessmentStatus = assessmentStatus
	builder.assessmentStatusFlag = true
	return builder
}

// 试用期考核结果
//
// 示例值：
func (builder *AssessmentBuilder) AssessmentResult(assessmentResult *Enum) *AssessmentBuilder {
	builder.assessmentResult = assessmentResult
	builder.assessmentResultFlag = true
	return builder
}

// 考核得分
//
// 示例值：99.9
func (builder *AssessmentBuilder) AssessmentScore(assessmentScore float64) *AssessmentBuilder {
	builder.assessmentScore = assessmentScore
	builder.assessmentScoreFlag = true
	return builder
}

// 试用期考核等级
//
// 示例值：
func (builder *AssessmentBuilder) AssessmentGrade(assessmentGrade *Enum) *AssessmentBuilder {
	builder.assessmentGrade = assessmentGrade
	builder.assessmentGradeFlag = true
	return builder
}

// 考核评语
//
// 示例值：超出预期
func (builder *AssessmentBuilder) AssessmentComment(assessmentComment string) *AssessmentBuilder {
	builder.assessmentComment = assessmentComment
	builder.assessmentCommentFlag = true
	return builder
}

// 考核结果页面超链接
//
// 示例值：https://qwe1123433.feishuapp.bytedance.net/ae/ui/apps//122265871113330/recordPages/2/records/17611111112?objectId=17663333322543&recordPageId=171128122312
func (builder *AssessmentBuilder) AssessmentDetail(assessmentDetail string) *AssessmentBuilder {
	builder.assessmentDetail = assessmentDetail
	builder.assessmentDetailFlag = true
	return builder
}

// 是否为最终考核结果
//
// 示例值：false
func (builder *AssessmentBuilder) IsFinalAsssessment(isFinalAsssessment bool) *AssessmentBuilder {
	builder.isFinalAsssessment = isFinalAsssessment
	builder.isFinalAsssessmentFlag = true
	return builder
}

func (builder *AssessmentBuilder) Build() *Assessment {
	req := &Assessment{}
	if builder.assessmentIdFlag {
		req.AssessmentId = &builder.assessmentId

	}
	if builder.assessmentStatusFlag {
		req.AssessmentStatus = builder.assessmentStatus
	}
	if builder.assessmentResultFlag {
		req.AssessmentResult = builder.assessmentResult
	}
	if builder.assessmentScoreFlag {
		req.AssessmentScore = &builder.assessmentScore

	}
	if builder.assessmentGradeFlag {
		req.AssessmentGrade = builder.assessmentGrade
	}
	if builder.assessmentCommentFlag {
		req.AssessmentComment = &builder.assessmentComment

	}
	if builder.assessmentDetailFlag {
		req.AssessmentDetail = &builder.assessmentDetail

	}
	if builder.isFinalAsssessmentFlag {
		req.IsFinalAsssessment = &builder.isFinalAsssessment

	}
	return req
}

type AssessmentForCreate struct {
	AssessmentStatus   *string  `json:"assessment_status,omitempty"`    // 考核状态
	AssessmentResult   *string  `json:"assessment_result,omitempty"`    // 试用期考核结果
	AssessmentScore    *float64 `json:"assessment_score,omitempty"`     // 考核得分
	AssessmentGrade    *string  `json:"assessment_grade,omitempty"`     // 试用期考核等级
	AssessmentComment  *string  `json:"assessment_comment,omitempty"`   // 考核评语
	AssessmentDetail   *string  `json:"assessment_detail,omitempty"`    // 考核结果页面超链接
	IsFinalAsssessment *bool    `json:"is_final_asssessment,omitempty"` // 是否为最终考核结果
}

type AssessmentForCreateBuilder struct {
	assessmentStatus       string // 考核状态
	assessmentStatusFlag   bool
	assessmentResult       string // 试用期考核结果
	assessmentResultFlag   bool
	assessmentScore        float64 // 考核得分
	assessmentScoreFlag    bool
	assessmentGrade        string // 试用期考核等级
	assessmentGradeFlag    bool
	assessmentComment      string // 考核评语
	assessmentCommentFlag  bool
	assessmentDetail       string // 考核结果页面超链接
	assessmentDetailFlag   bool
	isFinalAsssessment     bool // 是否为最终考核结果
	isFinalAsssessmentFlag bool
}

func NewAssessmentForCreateBuilder() *AssessmentForCreateBuilder {
	builder := &AssessmentForCreateBuilder{}
	return builder
}

// 考核状态
//
// 示例值：completed
func (builder *AssessmentForCreateBuilder) AssessmentStatus(assessmentStatus string) *AssessmentForCreateBuilder {
	builder.assessmentStatus = assessmentStatus
	builder.assessmentStatusFlag = true
	return builder
}

// 试用期考核结果
//
// 示例值：approved
func (builder *AssessmentForCreateBuilder) AssessmentResult(assessmentResult string) *AssessmentForCreateBuilder {
	builder.assessmentResult = assessmentResult
	builder.assessmentResultFlag = true
	return builder
}

// 考核得分
//
// 示例值：99.9
func (builder *AssessmentForCreateBuilder) AssessmentScore(assessmentScore float64) *AssessmentForCreateBuilder {
	builder.assessmentScore = assessmentScore
	builder.assessmentScoreFlag = true
	return builder
}

// 试用期考核等级
//
// 示例值：grade_a
func (builder *AssessmentForCreateBuilder) AssessmentGrade(assessmentGrade string) *AssessmentForCreateBuilder {
	builder.assessmentGrade = assessmentGrade
	builder.assessmentGradeFlag = true
	return builder
}

// 考核评语
//
// 示例值：超出预期
func (builder *AssessmentForCreateBuilder) AssessmentComment(assessmentComment string) *AssessmentForCreateBuilder {
	builder.assessmentComment = assessmentComment
	builder.assessmentCommentFlag = true
	return builder
}

// 考核结果页面超链接
//
// 示例值：暂无示例
func (builder *AssessmentForCreateBuilder) AssessmentDetail(assessmentDetail string) *AssessmentForCreateBuilder {
	builder.assessmentDetail = assessmentDetail
	builder.assessmentDetailFlag = true
	return builder
}

// 是否为最终考核结果
//
// 示例值：false
func (builder *AssessmentForCreateBuilder) IsFinalAsssessment(isFinalAsssessment bool) *AssessmentForCreateBuilder {
	builder.isFinalAsssessment = isFinalAsssessment
	builder.isFinalAsssessmentFlag = true
	return builder
}

func (builder *AssessmentForCreateBuilder) Build() *AssessmentForCreate {
	req := &AssessmentForCreate{}
	if builder.assessmentStatusFlag {
		req.AssessmentStatus = &builder.assessmentStatus

	}
	if builder.assessmentResultFlag {
		req.AssessmentResult = &builder.assessmentResult

	}
	if builder.assessmentScoreFlag {
		req.AssessmentScore = &builder.assessmentScore

	}
	if builder.assessmentGradeFlag {
		req.AssessmentGrade = &builder.assessmentGrade

	}
	if builder.assessmentCommentFlag {
		req.AssessmentComment = &builder.assessmentComment

	}
	if builder.assessmentDetailFlag {
		req.AssessmentDetail = &builder.assessmentDetail

	}
	if builder.isFinalAsssessmentFlag {
		req.IsFinalAsssessment = &builder.isFinalAsssessment

	}
	return req
}

type Bank struct {
	BankId          *string `json:"bank_id,omitempty"`           // 银行 ID
	BankName        []*I18n `json:"bank_name,omitempty"`         // 银行名称
	BankCode        *string `json:"bank_code,omitempty"`         // 总行代码
	CountryRegionId *string `json:"country_region_id,omitempty"` // 国家 / 地区 ID ，可通过【查询单条国家/地区信息】 接口查询
	Status          *int    `json:"status,omitempty"`            // 状态
	CreateTime      *string `json:"create_time,omitempty"`       // 创建时间
	UpdateTime      *string `json:"update_time,omitempty"`       // 更新时间
}

type BankBuilder struct {
	bankId              string // 银行 ID
	bankIdFlag          bool
	bankName            []*I18n // 银行名称
	bankNameFlag        bool
	bankCode            string // 总行代码
	bankCodeFlag        bool
	countryRegionId     string // 国家 / 地区 ID ，可通过【查询单条国家/地区信息】 接口查询
	countryRegionIdFlag bool
	status              int // 状态
	statusFlag          bool
	createTime          string // 创建时间
	createTimeFlag      bool
	updateTime          string // 更新时间
	updateTimeFlag      bool
}

func NewBankBuilder() *BankBuilder {
	builder := &BankBuilder{}
	return builder
}

// 银行 ID
//
// 示例值：6893014062142064135
func (builder *BankBuilder) BankId(bankId string) *BankBuilder {
	builder.bankId = bankId
	builder.bankIdFlag = true
	return builder
}

// 银行名称
//
// 示例值：
func (builder *BankBuilder) BankName(bankName []*I18n) *BankBuilder {
	builder.bankName = bankName
	builder.bankNameFlag = true
	return builder
}

// 总行代码
//
// 示例值：BKCH
func (builder *BankBuilder) BankCode(bankCode string) *BankBuilder {
	builder.bankCode = bankCode
	builder.bankCodeFlag = true
	return builder
}

// 国家 / 地区 ID ，可通过【查询单条国家/地区信息】 接口查询
//
// 示例值：6893014062142064133
func (builder *BankBuilder) CountryRegionId(countryRegionId string) *BankBuilder {
	builder.countryRegionId = countryRegionId
	builder.countryRegionIdFlag = true
	return builder
}

// 状态
//
// 示例值：1
func (builder *BankBuilder) Status(status int) *BankBuilder {
	builder.status = status
	builder.statusFlag = true
	return builder
}

// 创建时间
//
// 示例值：2024-01-01 00:00:00
func (builder *BankBuilder) CreateTime(createTime string) *BankBuilder {
	builder.createTime = createTime
	builder.createTimeFlag = true
	return builder
}

// 更新时间
//
// 示例值：2024-01-01 00:00:00
func (builder *BankBuilder) UpdateTime(updateTime string) *BankBuilder {
	builder.updateTime = updateTime
	builder.updateTimeFlag = true
	return builder
}

func (builder *BankBuilder) Build() *Bank {
	req := &Bank{}
	if builder.bankIdFlag {
		req.BankId = &builder.bankId

	}
	if builder.bankNameFlag {
		req.BankName = builder.bankName
	}
	if builder.bankCodeFlag {
		req.BankCode = &builder.bankCode

	}
	if builder.countryRegionIdFlag {
		req.CountryRegionId = &builder.countryRegionId

	}
	if builder.statusFlag {
		req.Status = &builder.status

	}
	if builder.createTimeFlag {
		req.CreateTime = &builder.createTime

	}
	if builder.updateTimeFlag {
		req.UpdateTime = &builder.updateTime

	}
	return req
}

type BankAccount struct {
	BankName          *string `json:"bank_name,omitempty"`           // 银行名称
	BankAccountNumber *string `json:"bank_account_number,omitempty"` // 银行账号
	AccountHolder     *string `json:"account_holder,omitempty"`      // 开户人姓名

	BranchName *string `json:"branch_name,omitempty"` // 支行名称

	BankIdV2         *string            `json:"bank_id_v2,omitempty"`         // 银行 ID，详细信息可通过【查询银行信息】接口查询获得
	BranchIdV2       *string            `json:"branch_id_v2,omitempty"`       // 支行 ID，要求必须为填入银行的支行，详细信息可通过【查询支行信息】接口查询获得
	CountryRegionId  *string            `json:"country_region_id,omitempty"`  // 国家/地区 ID，详细信息可通过【查询国家/地区信息】接口查询获得
	BankAccountUsage []*Enum            `json:"bank_account_usage,omitempty"` // 银行卡用途，枚举值可通过文档【飞书人事枚举常量】银行卡用途（Bank Account Usage）枚举定义部分获得
	BankAccountType  *Enum              `json:"bank_account_type,omitempty"`  // 银行卡类型，枚举值可通过文档【飞书人事枚举常量】银行卡类型（Bank Account Type）枚举定义部分获得
	CurrencyId       *string            `json:"currency_id,omitempty"`        // 货币id
	IBAN             *string            `json:"IBAN,omitempty"`               // 国际银行账号
	CustomFields     []*CustomFieldData `json:"custom_fields,omitempty"`      // 自定义字段
}

type BankAccountBuilder struct {
	bankName              string // 银行名称
	bankNameFlag          bool
	bankAccountNumber     string // 银行账号
	bankAccountNumberFlag bool
	accountHolder         string // 开户人姓名
	accountHolderFlag     bool

	branchName     string // 支行名称
	branchNameFlag bool

	bankIdV2             string // 银行 ID，详细信息可通过【查询银行信息】接口查询获得
	bankIdV2Flag         bool
	branchIdV2           string // 支行 ID，要求必须为填入银行的支行，详细信息可通过【查询支行信息】接口查询获得
	branchIdV2Flag       bool
	countryRegionId      string // 国家/地区 ID，详细信息可通过【查询国家/地区信息】接口查询获得
	countryRegionIdFlag  bool
	bankAccountUsage     []*Enum // 银行卡用途，枚举值可通过文档【飞书人事枚举常量】银行卡用途（Bank Account Usage）枚举定义部分获得
	bankAccountUsageFlag bool
	bankAccountType      *Enum // 银行卡类型，枚举值可通过文档【飞书人事枚举常量】银行卡类型（Bank Account Type）枚举定义部分获得
	bankAccountTypeFlag  bool
	currencyId           string // 货币id
	currencyIdFlag       bool
	iBAN                 string // 国际银行账号
	iBANFlag             bool
	customFields         []*CustomFieldData // 自定义字段
	customFieldsFlag     bool
}

func NewBankAccountBuilder() *BankAccountBuilder {
	builder := &BankAccountBuilder{}
	return builder
}

// 银行名称
//
// 示例值：中国农业银行
func (builder *BankAccountBuilder) BankName(bankName string) *BankAccountBuilder {
	builder.bankName = bankName
	builder.bankNameFlag = true
	return builder
}

// 银行账号
//
// 示例值：6231200000001223
func (builder *BankAccountBuilder) BankAccountNumber(bankAccountNumber string) *BankAccountBuilder {
	builder.bankAccountNumber = bankAccountNumber
	builder.bankAccountNumberFlag = true
	return builder
}

// 开户人姓名
//
// 示例值：孟十五
func (builder *BankAccountBuilder) AccountHolder(accountHolder string) *BankAccountBuilder {
	builder.accountHolder = accountHolder
	builder.accountHolderFlag = true
	return builder
}

// 支行名称
//
// 示例值：中国农业银行支行
func (builder *BankAccountBuilder) BranchName(branchName string) *BankAccountBuilder {
	builder.branchName = branchName
	builder.branchNameFlag = true
	return builder
}

// 银行 ID，详细信息可通过【查询银行信息】接口查询获得
//
// 示例值：MDBH00000001
func (builder *BankAccountBuilder) BankIdV2(bankIdV2 string) *BankAccountBuilder {
	builder.bankIdV2 = bankIdV2
	builder.bankIdV2Flag = true
	return builder
}

// 支行 ID，要求必须为填入银行的支行，详细信息可通过【查询支行信息】接口查询获得
//
// 示例值：MDBK00000017
func (builder *BankAccountBuilder) BranchIdV2(branchIdV2 string) *BankAccountBuilder {
	builder.branchIdV2 = branchIdV2
	builder.branchIdV2Flag = true
	return builder
}

// 国家/地区 ID，详细信息可通过【查询国家/地区信息】接口查询获得
//
// 示例值：12
func (builder *BankAccountBuilder) CountryRegionId(countryRegionId string) *BankAccountBuilder {
	builder.countryRegionId = countryRegionId
	builder.countryRegionIdFlag = true
	return builder
}

// 银行卡用途，枚举值可通过文档【飞书人事枚举常量】银行卡用途（Bank Account Usage）枚举定义部分获得
//
// 示例值：
func (builder *BankAccountBuilder) BankAccountUsage(bankAccountUsage []*Enum) *BankAccountBuilder {
	builder.bankAccountUsage = bankAccountUsage
	builder.bankAccountUsageFlag = true
	return builder
}

// 银行卡类型，枚举值可通过文档【飞书人事枚举常量】银行卡类型（Bank Account Type）枚举定义部分获得
//
// 示例值：
func (builder *BankAccountBuilder) BankAccountType(bankAccountType *Enum) *BankAccountBuilder {
	builder.bankAccountType = bankAccountType
	builder.bankAccountTypeFlag = true
	return builder
}

// 货币id
//
// 示例值：12QueryCountryRegionSubdivisionDataReq
func (builder *BankAccountBuilder) CurrencyId(currencyId string) *BankAccountBuilder {
	builder.currencyId = currencyId
	builder.currencyIdFlag = true
	return builder
}

// 国际银行账号
//
// 示例值：CH56 0483 5012 3456 7800 9
func (builder *BankAccountBuilder) IBAN(iBAN string) *BankAccountBuilder {
	builder.iBAN = iBAN
	builder.iBANFlag = true
	return builder
}

// 自定义字段
//
// 示例值：
func (builder *BankAccountBuilder) CustomFields(customFields []*CustomFieldData) *BankAccountBuilder {
	builder.customFields = customFields
	builder.customFieldsFlag = true
	return builder
}

func (builder *BankAccountBuilder) Build() *BankAccount {
	req := &BankAccount{}
	if builder.bankNameFlag {
		req.BankName = &builder.bankName

	}
	if builder.bankAccountNumberFlag {
		req.BankAccountNumber = &builder.bankAccountNumber

	}
	if builder.accountHolderFlag {
		req.AccountHolder = &builder.accountHolder

	}

	if builder.branchNameFlag {
		req.BranchName = &builder.branchName

	}

	if builder.bankIdV2Flag {
		req.BankIdV2 = &builder.bankIdV2

	}
	if builder.branchIdV2Flag {
		req.BranchIdV2 = &builder.branchIdV2

	}
	if builder.countryRegionIdFlag {
		req.CountryRegionId = &builder.countryRegionId

	}
	if builder.bankAccountUsageFlag {
		req.BankAccountUsage = builder.bankAccountUsage
	}
	if builder.bankAccountTypeFlag {
		req.BankAccountType = builder.bankAccountType
	}
	if builder.currencyIdFlag {
		req.CurrencyId = &builder.currencyId

	}
	if builder.iBANFlag {
		req.IBAN = &builder.iBAN

	}
	if builder.customFieldsFlag {
		req.CustomFields = builder.customFields
	}
	return req
}

type BankBranch struct {
	BankBranchId   *string `json:"bank_branch_id,omitempty"`   // 支行 ID
	BankBranchName []*I18n `json:"bank_branch_name,omitempty"` // 支行名称
	BankId         *string `json:"bank_id,omitempty"`          // 所属银行 ID，可通过【查询银行信息】接口查询
	Code           *string `json:"code,omitempty"`             // 金融分支机构编码
	SwiftCode      *string `json:"swift_code,omitempty"`       // 银行代码
	Status         *int    `json:"status,omitempty"`           // 状态
	BankBranchCode *string `json:"bank_branch_code,omitempty"` // Bank Branch Code（特定国家地区汇款使用的编码，如美国银行的 ABA Number、澳大利亚银行的 BSB Code、英国银行的 Sort Code）
	RegisterPlace  *string `json:"register_place,omitempty"`   // 注册地址
	BankAddress    *string `json:"bank_address,omitempty"`     // 银行地址
	CreateTime     *string `json:"create_time,omitempty"`      // 创建时间
	UpdateTime     *string `json:"update_time,omitempty"`      // 更新时间
}

type BankBranchBuilder struct {
	bankBranchId       string // 支行 ID
	bankBranchIdFlag   bool
	bankBranchName     []*I18n // 支行名称
	bankBranchNameFlag bool
	bankId             string // 所属银行 ID，可通过【查询银行信息】接口查询
	bankIdFlag         bool
	code               string // 金融分支机构编码
	codeFlag           bool
	swiftCode          string // 银行代码
	swiftCodeFlag      bool
	status             int // 状态
	statusFlag         bool
	bankBranchCode     string // Bank Branch Code（特定国家地区汇款使用的编码，如美国银行的 ABA Number、澳大利亚银行的 BSB Code、英国银行的 Sort Code）
	bankBranchCodeFlag bool
	registerPlace      string // 注册地址
	registerPlaceFlag  bool
	bankAddress        string // 银行地址
	bankAddressFlag    bool
	createTime         string // 创建时间
	createTimeFlag     bool
	updateTime         string // 更新时间
	updateTimeFlag     bool
}

func NewBankBranchBuilder() *BankBranchBuilder {
	builder := &BankBranchBuilder{}
	return builder
}

// 支行 ID
//
// 示例值：6893014062142064111
func (builder *BankBranchBuilder) BankBranchId(bankBranchId string) *BankBranchBuilder {
	builder.bankBranchId = bankBranchId
	builder.bankBranchIdFlag = true
	return builder
}

// 支行名称
//
// 示例值：
func (builder *BankBranchBuilder) BankBranchName(bankBranchName []*I18n) *BankBranchBuilder {
	builder.bankBranchName = bankBranchName
	builder.bankBranchNameFlag = true
	return builder
}

// 所属银行 ID，可通过【查询银行信息】接口查询
//
// 示例值：6893011062142064111
func (builder *BankBranchBuilder) BankId(bankId string) *BankBranchBuilder {
	builder.bankId = bankId
	builder.bankIdFlag = true
	return builder
}

// 金融分支机构编码
//
// 示例值：201
func (builder *BankBranchBuilder) Code(code string) *BankBranchBuilder {
	builder.code = code
	builder.codeFlag = true
	return builder
}

// 银行代码
//
// 示例值：PBOCCNBJ
func (builder *BankBranchBuilder) SwiftCode(swiftCode string) *BankBranchBuilder {
	builder.swiftCode = swiftCode
	builder.swiftCodeFlag = true
	return builder
}

// 状态
//
// 示例值：1
func (builder *BankBranchBuilder) Status(status int) *BankBranchBuilder {
	builder.status = status
	builder.statusFlag = true
	return builder
}

// Bank Branch Code（特定国家地区汇款使用的编码，如美国银行的 ABA Number、澳大利亚银行的 BSB Code、英国银行的 Sort Code）
//
// 示例值：123456
func (builder *BankBranchBuilder) BankBranchCode(bankBranchCode string) *BankBranchBuilder {
	builder.bankBranchCode = bankBranchCode
	builder.bankBranchCodeFlag = true
	return builder
}

// 注册地址
//
// 示例值：北京市朝阳区
func (builder *BankBranchBuilder) RegisterPlace(registerPlace string) *BankBranchBuilder {
	builder.registerPlace = registerPlace
	builder.registerPlaceFlag = true
	return builder
}

// 银行地址
//
// 示例值：北京市朝阳区
func (builder *BankBranchBuilder) BankAddress(bankAddress string) *BankBranchBuilder {
	builder.bankAddress = bankAddress
	builder.bankAddressFlag = true
	return builder
}

// 创建时间
//
// 示例值：2024-01-01 00:00:00
func (builder *BankBranchBuilder) CreateTime(createTime string) *BankBranchBuilder {
	builder.createTime = createTime
	builder.createTimeFlag = true
	return builder
}

// 更新时间
//
// 示例值：2024-01-01 00:00:00
func (builder *BankBranchBuilder) UpdateTime(updateTime string) *BankBranchBuilder {
	builder.updateTime = updateTime
	builder.updateTimeFlag = true
	return builder
}

func (builder *BankBranchBuilder) Build() *BankBranch {
	req := &BankBranch{}
	if builder.bankBranchIdFlag {
		req.BankBranchId = &builder.bankBranchId

	}
	if builder.bankBranchNameFlag {
		req.BankBranchName = builder.bankBranchName
	}
	if builder.bankIdFlag {
		req.BankId = &builder.bankId

	}
	if builder.codeFlag {
		req.Code = &builder.code

	}
	if builder.swiftCodeFlag {
		req.SwiftCode = &builder.swiftCode

	}
	if builder.statusFlag {
		req.Status = &builder.status

	}
	if builder.bankBranchCodeFlag {
		req.BankBranchCode = &builder.bankBranchCode

	}
	if builder.registerPlaceFlag {
		req.RegisterPlace = &builder.registerPlace

	}
	if builder.bankAddressFlag {
		req.BankAddress = &builder.bankAddress

	}
	if builder.createTimeFlag {
		req.CreateTime = &builder.createTime

	}
	if builder.updateTimeFlag {
		req.UpdateTime = &builder.updateTime

	}
	return req
}

type BasicDepartment struct {
	Id             *string `json:"id,omitempty"`              // 部门 ID
	DepartmentName []*I18n `json:"department_name,omitempty"` // 部门名称
}

type BasicDepartmentBuilder struct {
	id                 string // 部门 ID
	idFlag             bool
	departmentName     []*I18n // 部门名称
	departmentNameFlag bool
}

func NewBasicDepartmentBuilder() *BasicDepartmentBuilder {
	builder := &BasicDepartmentBuilder{}
	return builder
}

// 部门 ID
//
// 示例值：4719456877659520852
func (builder *BasicDepartmentBuilder) Id(id string) *BasicDepartmentBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

// 部门名称
//
// 示例值：
func (builder *BasicDepartmentBuilder) DepartmentName(departmentName []*I18n) *BasicDepartmentBuilder {
	builder.departmentName = departmentName
	builder.departmentNameFlag = true
	return builder
}

func (builder *BasicDepartmentBuilder) Build() *BasicDepartment {
	req := &BasicDepartment{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.departmentNameFlag {
		req.DepartmentName = builder.departmentName
	}
	return req
}

type BasicEmployee struct {
	EmploymentId   *string          `json:"employment_id,omitempty"`   // 雇佣 ID
	EmployeeNumber *string          `json:"employee_number,omitempty"` // 工号
	EmailAddress   *string          `json:"email_address,omitempty"`   // 邮箱地址
	PersonInfo     *BasicPersonInfo `json:"person_info,omitempty"`     // 基本个人信息
}

type BasicEmployeeBuilder struct {
	employmentId       string // 雇佣 ID
	employmentIdFlag   bool
	employeeNumber     string // 工号
	employeeNumberFlag bool
	emailAddress       string // 邮箱地址
	emailAddressFlag   bool
	personInfo         *BasicPersonInfo // 基本个人信息
	personInfoFlag     bool
}

func NewBasicEmployeeBuilder() *BasicEmployeeBuilder {
	builder := &BasicEmployeeBuilder{}
	return builder
}

// 雇佣 ID
//
// 示例值：6893014062142064135
func (builder *BasicEmployeeBuilder) EmploymentId(employmentId string) *BasicEmployeeBuilder {
	builder.employmentId = employmentId
	builder.employmentIdFlag = true
	return builder
}

// 工号
//
// 示例值：1000000
func (builder *BasicEmployeeBuilder) EmployeeNumber(employeeNumber string) *BasicEmployeeBuilder {
	builder.employeeNumber = employeeNumber
	builder.employeeNumberFlag = true
	return builder
}

// 邮箱地址
//
// 示例值：test@163.com
func (builder *BasicEmployeeBuilder) EmailAddress(emailAddress string) *BasicEmployeeBuilder {
	builder.emailAddress = emailAddress
	builder.emailAddressFlag = true
	return builder
}

// 基本个人信息
//
// 示例值：
func (builder *BasicEmployeeBuilder) PersonInfo(personInfo *BasicPersonInfo) *BasicEmployeeBuilder {
	builder.personInfo = personInfo
	builder.personInfoFlag = true
	return builder
}

func (builder *BasicEmployeeBuilder) Build() *BasicEmployee {
	req := &BasicEmployee{}
	if builder.employmentIdFlag {
		req.EmploymentId = &builder.employmentId

	}
	if builder.employeeNumberFlag {
		req.EmployeeNumber = &builder.employeeNumber

	}
	if builder.emailAddressFlag {
		req.EmailAddress = &builder.emailAddress

	}
	if builder.personInfoFlag {
		req.PersonInfo = builder.personInfo
	}
	return req
}

type BasicInfo struct {
	Name                        *Name    `json:"name,omitempty"`                           // 描述
	PhoneNumber                 *string  `json:"phone_number,omitempty"`                   // 手机号
	InternationalAreaCode       *string  `json:"international_area_code,omitempty"`        // 区号
	Email                       *string  `json:"email,omitempty"`                          // 个人邮箱
	DateOfBirth                 *string  `json:"date_of_birth,omitempty"`                  // 生日
	PersonalIdNumber            *string  `json:"personal_id_number,omitempty"`             // 证件号
	PersonalIdType              *string  `json:"personal_id_type,omitempty"`               // 证件类型
	DateEnteredWorkforce        *string  `json:"date_entered_workforce,omitempty"`         // 参加工作日期
	GenderId                    *string  `json:"gender_id,omitempty"`                      // 性别
	NationalityId               *string  `json:"nationality_id,omitempty"`                 // 国籍
	AdditionalNationalityIdList []string `json:"additional_nationality_id_list,omitempty"` // 其他国籍
	CitizenshipStatusIdList     []string `json:"citizenship_status_id_list,omitempty"`     // 公民身份
	HomeAddress                 *string  `json:"home_address,omitempty"`                   // 家庭地址
	WorkerId                    *string  `json:"worker_id,omitempty"`                      // 人员编号
	UserGeo                     *string  `json:"user_geo,omitempty"`                       // 数据驻留地
	LegalName                   *Name    `json:"legal_name,omitempty"`                     // 法定姓名
}

type BasicInfoBuilder struct {
	name                            *Name // 描述
	nameFlag                        bool
	phoneNumber                     string // 手机号
	phoneNumberFlag                 bool
	internationalAreaCode           string // 区号
	internationalAreaCodeFlag       bool
	email                           string // 个人邮箱
	emailFlag                       bool
	dateOfBirth                     string // 生日
	dateOfBirthFlag                 bool
	personalIdNumber                string // 证件号
	personalIdNumberFlag            bool
	personalIdType                  string // 证件类型
	personalIdTypeFlag              bool
	dateEnteredWorkforce            string // 参加工作日期
	dateEnteredWorkforceFlag        bool
	genderId                        string // 性别
	genderIdFlag                    bool
	nationalityId                   string // 国籍
	nationalityIdFlag               bool
	additionalNationalityIdList     []string // 其他国籍
	additionalNationalityIdListFlag bool
	citizenshipStatusIdList         []string // 公民身份
	citizenshipStatusIdListFlag     bool
	homeAddress                     string // 家庭地址
	homeAddressFlag                 bool
	workerId                        string // 人员编号
	workerIdFlag                    bool
	userGeo                         string // 数据驻留地
	userGeoFlag                     bool
	legalName                       *Name // 法定姓名
	legalNameFlag                   bool
}

func NewBasicInfoBuilder() *BasicInfoBuilder {
	builder := &BasicInfoBuilder{}
	return builder
}

// 描述
//
// 示例值：
func (builder *BasicInfoBuilder) Name(name *Name) *BasicInfoBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}

// 手机号
//
// 示例值：31123127
func (builder *BasicInfoBuilder) PhoneNumber(phoneNumber string) *BasicInfoBuilder {
	builder.phoneNumber = phoneNumber
	builder.phoneNumberFlag = true
	return builder
}

// 区号
//
// 示例值：86_china
func (builder *BasicInfoBuilder) InternationalAreaCode(internationalAreaCode string) *BasicInfoBuilder {
	builder.internationalAreaCode = internationalAreaCode
	builder.internationalAreaCodeFlag = true
	return builder
}

// 个人邮箱
//
// 示例值：xx@xx.com
func (builder *BasicInfoBuilder) Email(email string) *BasicInfoBuilder {
	builder.email = email
	builder.emailFlag = true
	return builder
}

// 生日
//
// 示例值：2011-99-99
func (builder *BasicInfoBuilder) DateOfBirth(dateOfBirth string) *BasicInfoBuilder {
	builder.dateOfBirth = dateOfBirth
	builder.dateOfBirthFlag = true
	return builder
}

// 证件号
//
// 示例值：31123127
func (builder *BasicInfoBuilder) PersonalIdNumber(personalIdNumber string) *BasicInfoBuilder {
	builder.personalIdNumber = personalIdNumber
	builder.personalIdNumberFlag = true
	return builder
}

// 证件类型
//
// 示例值：6862995757234914823
func (builder *BasicInfoBuilder) PersonalIdType(personalIdType string) *BasicInfoBuilder {
	builder.personalIdType = personalIdType
	builder.personalIdTypeFlag = true
	return builder
}

// 参加工作日期
//
// 示例值：2100-09-09
func (builder *BasicInfoBuilder) DateEnteredWorkforce(dateEnteredWorkforce string) *BasicInfoBuilder {
	builder.dateEnteredWorkforce = dateEnteredWorkforce
	builder.dateEnteredWorkforceFlag = true
	return builder
}

// 性别
//
// 示例值：male
func (builder *BasicInfoBuilder) GenderId(genderId string) *BasicInfoBuilder {
	builder.genderId = genderId
	builder.genderIdFlag = true
	return builder
}

// 国籍
//
// 示例值：6862995757234914824
func (builder *BasicInfoBuilder) NationalityId(nationalityId string) *BasicInfoBuilder {
	builder.nationalityId = nationalityId
	builder.nationalityIdFlag = true
	return builder
}

// 其他国籍
//
// 示例值：[6862995757234914824]
func (builder *BasicInfoBuilder) AdditionalNationalityIdList(additionalNationalityIdList []string) *BasicInfoBuilder {
	builder.additionalNationalityIdList = additionalNationalityIdList
	builder.additionalNationalityIdListFlag = true
	return builder
}

// 公民身份
//
// 示例值：[6862995757234914824]
func (builder *BasicInfoBuilder) CitizenshipStatusIdList(citizenshipStatusIdList []string) *BasicInfoBuilder {
	builder.citizenshipStatusIdList = citizenshipStatusIdList
	builder.citizenshipStatusIdListFlag = true
	return builder
}

// 家庭地址
//
// 示例值：home addr
func (builder *BasicInfoBuilder) HomeAddress(homeAddress string) *BasicInfoBuilder {
	builder.homeAddress = homeAddress
	builder.homeAddressFlag = true
	return builder
}

// 人员编号
//
// 示例值：6862995757234914824
func (builder *BasicInfoBuilder) WorkerId(workerId string) *BasicInfoBuilder {
	builder.workerId = workerId
	builder.workerIdFlag = true
	return builder
}

// 数据驻留地
//
// 示例值：cn
func (builder *BasicInfoBuilder) UserGeo(userGeo string) *BasicInfoBuilder {
	builder.userGeo = userGeo
	builder.userGeoFlag = true
	return builder
}

// 法定姓名
//
// 示例值：
func (builder *BasicInfoBuilder) LegalName(legalName *Name) *BasicInfoBuilder {
	builder.legalName = legalName
	builder.legalNameFlag = true
	return builder
}

func (builder *BasicInfoBuilder) Build() *BasicInfo {
	req := &BasicInfo{}
	if builder.nameFlag {
		req.Name = builder.name
	}
	if builder.phoneNumberFlag {
		req.PhoneNumber = &builder.phoneNumber

	}
	if builder.internationalAreaCodeFlag {
		req.InternationalAreaCode = &builder.internationalAreaCode

	}
	if builder.emailFlag {
		req.Email = &builder.email

	}
	if builder.dateOfBirthFlag {
		req.DateOfBirth = &builder.dateOfBirth

	}
	if builder.personalIdNumberFlag {
		req.PersonalIdNumber = &builder.personalIdNumber

	}
	if builder.personalIdTypeFlag {
		req.PersonalIdType = &builder.personalIdType

	}
	if builder.dateEnteredWorkforceFlag {
		req.DateEnteredWorkforce = &builder.dateEnteredWorkforce

	}
	if builder.genderIdFlag {
		req.GenderId = &builder.genderId

	}
	if builder.nationalityIdFlag {
		req.NationalityId = &builder.nationalityId

	}
	if builder.additionalNationalityIdListFlag {
		req.AdditionalNationalityIdList = builder.additionalNationalityIdList
	}
	if builder.citizenshipStatusIdListFlag {
		req.CitizenshipStatusIdList = builder.citizenshipStatusIdList
	}
	if builder.homeAddressFlag {
		req.HomeAddress = &builder.homeAddress

	}
	if builder.workerIdFlag {
		req.WorkerId = &builder.workerId

	}
	if builder.userGeoFlag {
		req.UserGeo = &builder.userGeo

	}
	if builder.legalNameFlag {
		req.LegalName = builder.legalName
	}
	return req
}

type BasicInfoUpdate struct {
	Names  []*NameForUpdate  `json:"names,omitempty"`  // 姓名,该值是一个list，会全量更新
	Phones []*PhoneForUpdate `json:"phones,omitempty"` // 电话,该值是一个list，会全量更新
	Emails []*EmailForUpdate `json:"emails,omitempty"` // 邮箱,该值是一个list，会全量更新
}

type BasicInfoUpdateBuilder struct {
	names      []*NameForUpdate // 姓名,该值是一个list，会全量更新
	namesFlag  bool
	phones     []*PhoneForUpdate // 电话,该值是一个list，会全量更新
	phonesFlag bool
	emails     []*EmailForUpdate // 邮箱,该值是一个list，会全量更新
	emailsFlag bool
}

func NewBasicInfoUpdateBuilder() *BasicInfoUpdateBuilder {
	builder := &BasicInfoUpdateBuilder{}
	return builder
}

// 姓名,该值是一个list，会全量更新
//
// 示例值：
func (builder *BasicInfoUpdateBuilder) Names(names []*NameForUpdate) *BasicInfoUpdateBuilder {
	builder.names = names
	builder.namesFlag = true
	return builder
}

// 电话,该值是一个list，会全量更新
//
// 示例值：
func (builder *BasicInfoUpdateBuilder) Phones(phones []*PhoneForUpdate) *BasicInfoUpdateBuilder {
	builder.phones = phones
	builder.phonesFlag = true
	return builder
}

// 邮箱,该值是一个list，会全量更新
//
// 示例值：
func (builder *BasicInfoUpdateBuilder) Emails(emails []*EmailForUpdate) *BasicInfoUpdateBuilder {
	builder.emails = emails
	builder.emailsFlag = true
	return builder
}

func (builder *BasicInfoUpdateBuilder) Build() *BasicInfoUpdate {
	req := &BasicInfoUpdate{}
	if builder.namesFlag {
		req.Names = builder.names
	}
	if builder.phonesFlag {
		req.Phones = builder.phones
	}
	if builder.emailsFlag {
		req.Emails = builder.emails
	}
	return req
}

type BasicJobData struct {
	JobDataId    *string `json:"job_data_id,omitempty"`   // 任职信息 ID
	EmploymentId *string `json:"employment_id,omitempty"` // 雇佣 ID
}

type BasicJobDataBuilder struct {
	jobDataId        string // 任职信息 ID
	jobDataIdFlag    bool
	employmentId     string // 雇佣 ID
	employmentIdFlag bool
}

func NewBasicJobDataBuilder() *BasicJobDataBuilder {
	builder := &BasicJobDataBuilder{}
	return builder
}

// 任职信息 ID
//
// 示例值：1000000
func (builder *BasicJobDataBuilder) JobDataId(jobDataId string) *BasicJobDataBuilder {
	builder.jobDataId = jobDataId
	builder.jobDataIdFlag = true
	return builder
}

// 雇佣 ID
//
// 示例值：6893014062142064135
func (builder *BasicJobDataBuilder) EmploymentId(employmentId string) *BasicJobDataBuilder {
	builder.employmentId = employmentId
	builder.employmentIdFlag = true
	return builder
}

func (builder *BasicJobDataBuilder) Build() *BasicJobData {
	req := &BasicJobData{}
	if builder.jobDataIdFlag {
		req.JobDataId = &builder.jobDataId

	}
	if builder.employmentIdFlag {
		req.EmploymentId = &builder.employmentId

	}
	return req
}

type BasicPersonInfo struct {
	PersonId                 *string `json:"person_id,omitempty"`                   // 个人信息 ID
	PreferredName            *string `json:"preferred_name,omitempty"`              // 常用名
	PreferredLocalFullName   *string `json:"preferred_local_full_name,omitempty"`   // 常用本地全名
	PreferredEnglishFullName *string `json:"preferred_english_full_name,omitempty"` // 常用英文全名
}

type BasicPersonInfoBuilder struct {
	personId                     string // 个人信息 ID
	personIdFlag                 bool
	preferredName                string // 常用名
	preferredNameFlag            bool
	preferredLocalFullName       string // 常用本地全名
	preferredLocalFullNameFlag   bool
	preferredEnglishFullName     string // 常用英文全名
	preferredEnglishFullNameFlag bool
}

func NewBasicPersonInfoBuilder() *BasicPersonInfoBuilder {
	builder := &BasicPersonInfoBuilder{}
	return builder
}

// 个人信息 ID
//
// 示例值：6919733936050406926
func (builder *BasicPersonInfoBuilder) PersonId(personId string) *BasicPersonInfoBuilder {
	builder.personId = personId
	builder.personIdFlag = true
	return builder
}

// 常用名
//
// 示例值：刘梓新
func (builder *BasicPersonInfoBuilder) PreferredName(preferredName string) *BasicPersonInfoBuilder {
	builder.preferredName = preferredName
	builder.preferredNameFlag = true
	return builder
}

// 常用本地全名
//
// 示例值：刘梓新
func (builder *BasicPersonInfoBuilder) PreferredLocalFullName(preferredLocalFullName string) *BasicPersonInfoBuilder {
	builder.preferredLocalFullName = preferredLocalFullName
	builder.preferredLocalFullNameFlag = true
	return builder
}

// 常用英文全名
//
// 示例值：Henry
func (builder *BasicPersonInfoBuilder) PreferredEnglishFullName(preferredEnglishFullName string) *BasicPersonInfoBuilder {
	builder.preferredEnglishFullName = preferredEnglishFullName
	builder.preferredEnglishFullNameFlag = true
	return builder
}

func (builder *BasicPersonInfoBuilder) Build() *BasicPersonInfo {
	req := &BasicPersonInfo{}
	if builder.personIdFlag {
		req.PersonId = &builder.personId

	}
	if builder.preferredNameFlag {
		req.PreferredName = &builder.preferredName

	}
	if builder.preferredLocalFullNameFlag {
		req.PreferredLocalFullName = &builder.preferredLocalFullName

	}
	if builder.preferredEnglishFullNameFlag {
		req.PreferredEnglishFullName = &builder.preferredEnglishFullName

	}
	return req
}

type Bp struct {
	DepartmentId *string `json:"department_id,omitempty"` // 部门 ID
	HrbpId       *string `json:"hrbp_id,omitempty"`       // BP 的雇佣 ID
}

type BpBuilder struct {
	departmentId     string // 部门 ID
	departmentIdFlag bool
	hrbpId           string // BP 的雇佣 ID
	hrbpIdFlag       bool
}

func NewBpBuilder() *BpBuilder {
	builder := &BpBuilder{}
	return builder
}

// 部门 ID
//
// 示例值：4719456877659520852
func (builder *BpBuilder) DepartmentId(departmentId string) *BpBuilder {
	builder.departmentId = departmentId
	builder.departmentIdFlag = true
	return builder
}

// BP 的雇佣 ID
//
// 示例值：4719456877659520852
func (builder *BpBuilder) HrbpId(hrbpId string) *BpBuilder {
	builder.hrbpId = hrbpId
	builder.hrbpIdFlag = true
	return builder
}

func (builder *BpBuilder) Build() *Bp {
	req := &Bp{}
	if builder.departmentIdFlag {
		req.DepartmentId = &builder.departmentId

	}
	if builder.hrbpIdFlag {
		req.HrbpId = &builder.hrbpId

	}
	return req
}

type BpmDataengineI18n struct {
	ZhCn *string `json:"zh_cn,omitempty"` // （注json key是zh-CN，不是zh_cn）i18n类型字段，中文值
	EnUs *string `json:"en_us,omitempty"` // （注json key是en-US，不是en_us）i18n类型字段，英文值
}

type BpmDataengineI18nBuilder struct {
	zhCn     string // （注json key是zh-CN，不是zh_cn）i18n类型字段，中文值
	zhCnFlag bool
	enUs     string // （注json key是en-US，不是en_us）i18n类型字段，英文值
	enUsFlag bool
}

func NewBpmDataengineI18nBuilder() *BpmDataengineI18nBuilder {
	builder := &BpmDataengineI18nBuilder{}
	return builder
}

// （注json key是zh-CN，不是zh_cn）i18n类型字段，中文值
//
// 示例值：北京
func (builder *BpmDataengineI18nBuilder) ZhCn(zhCn string) *BpmDataengineI18nBuilder {
	builder.zhCn = zhCn
	builder.zhCnFlag = true
	return builder
}

// （注json key是en-US，不是en_us）i18n类型字段，英文值
//
// 示例值：Beijing
func (builder *BpmDataengineI18nBuilder) EnUs(enUs string) *BpmDataengineI18nBuilder {
	builder.enUs = enUs
	builder.enUsFlag = true
	return builder
}

func (builder *BpmDataengineI18nBuilder) Build() *BpmDataengineI18n {
	req := &BpmDataengineI18n{}
	if builder.zhCnFlag {
		req.ZhCn = &builder.zhCn

	}
	if builder.enUsFlag {
		req.EnUs = &builder.enUs

	}
	return req
}

type CalculateParam struct {
	DepartmentId          *string           `json:"department_id,omitempty"`           // 部门 ID
	EmployeeTypeId        *string           `json:"employee_type_id,omitempty"`        // 人员类型 ID
	WorkLocationId        *string           `json:"work_location_id,omitempty"`        // 工作地点 ID
	SocialSecurityCityId  *string           `json:"social_security_city_id,omitempty"` // 社保公积金缴纳地 ID
	JobFamilyId           *string           `json:"job_family_id,omitempty"`           // 序列 ID
	JobLevelId            *string           `json:"job_level_id,omitempty"`            // 职级 ID
	JobId                 *string           `json:"job_id,omitempty"`                  // 职务 ID
	MatchingRuleDimension []*DimensionValue `json:"matching_rule_dimension,omitempty"` // 人员自定义字段
}

type CalculateParamBuilder struct {
	departmentId              string // 部门 ID
	departmentIdFlag          bool
	employeeTypeId            string // 人员类型 ID
	employeeTypeIdFlag        bool
	workLocationId            string // 工作地点 ID
	workLocationIdFlag        bool
	socialSecurityCityId      string // 社保公积金缴纳地 ID
	socialSecurityCityIdFlag  bool
	jobFamilyId               string // 序列 ID
	jobFamilyIdFlag           bool
	jobLevelId                string // 职级 ID
	jobLevelIdFlag            bool
	jobId                     string // 职务 ID
	jobIdFlag                 bool
	matchingRuleDimension     []*DimensionValue // 人员自定义字段
	matchingRuleDimensionFlag bool
}

func NewCalculateParamBuilder() *CalculateParamBuilder {
	builder := &CalculateParamBuilder{}
	return builder
}

// 部门 ID
//
// 示例值：slnkdnaklsnda
func (builder *CalculateParamBuilder) DepartmentId(departmentId string) *CalculateParamBuilder {
	builder.departmentId = departmentId
	builder.departmentIdFlag = true
	return builder
}

// 人员类型 ID
//
// 示例值：kajsdnjasdn
func (builder *CalculateParamBuilder) EmployeeTypeId(employeeTypeId string) *CalculateParamBuilder {
	builder.employeeTypeId = employeeTypeId
	builder.employeeTypeIdFlag = true
	return builder
}

// 工作地点 ID
//
// 示例值：asbjldasnjdlwa
func (builder *CalculateParamBuilder) WorkLocationId(workLocationId string) *CalculateParamBuilder {
	builder.workLocationId = workLocationId
	builder.workLocationIdFlag = true
	return builder
}

// 社保公积金缴纳地 ID
//
// 示例值：dsalndlnasl
func (builder *CalculateParamBuilder) SocialSecurityCityId(socialSecurityCityId string) *CalculateParamBuilder {
	builder.socialSecurityCityId = socialSecurityCityId
	builder.socialSecurityCityIdFlag = true
	return builder
}

// 序列 ID
//
// 示例值：bjlsadnas
func (builder *CalculateParamBuilder) JobFamilyId(jobFamilyId string) *CalculateParamBuilder {
	builder.jobFamilyId = jobFamilyId
	builder.jobFamilyIdFlag = true
	return builder
}

// 职级 ID
//
// 示例值：dsadamkdq
func (builder *CalculateParamBuilder) JobLevelId(jobLevelId string) *CalculateParamBuilder {
	builder.jobLevelId = jobLevelId
	builder.jobLevelIdFlag = true
	return builder
}

// 职务 ID
//
// 示例值：dsandkjanjnda
func (builder *CalculateParamBuilder) JobId(jobId string) *CalculateParamBuilder {
	builder.jobId = jobId
	builder.jobIdFlag = true
	return builder
}

// 人员自定义字段
//
// 示例值：
func (builder *CalculateParamBuilder) MatchingRuleDimension(matchingRuleDimension []*DimensionValue) *CalculateParamBuilder {
	builder.matchingRuleDimension = matchingRuleDimension
	builder.matchingRuleDimensionFlag = true
	return builder
}

func (builder *CalculateParamBuilder) Build() *CalculateParam {
	req := &CalculateParam{}
	if builder.departmentIdFlag {
		req.DepartmentId = &builder.departmentId

	}
	if builder.employeeTypeIdFlag {
		req.EmployeeTypeId = &builder.employeeTypeId

	}
	if builder.workLocationIdFlag {
		req.WorkLocationId = &builder.workLocationId

	}
	if builder.socialSecurityCityIdFlag {
		req.SocialSecurityCityId = &builder.socialSecurityCityId

	}
	if builder.jobFamilyIdFlag {
		req.JobFamilyId = &builder.jobFamilyId

	}
	if builder.jobLevelIdFlag {
		req.JobLevelId = &builder.jobLevelId

	}
	if builder.jobIdFlag {
		req.JobId = &builder.jobId

	}
	if builder.matchingRuleDimensionFlag {
		req.MatchingRuleDimension = builder.matchingRuleDimension
	}
	return req
}

type ChangeFieldPair struct {
	OriginValue *CustomFieldData `json:"origin_value,omitempty"` // 调整前
	TargetValue *CustomFieldData `json:"target_value,omitempty"` // 调整后
}

type ChangeFieldPairBuilder struct {
	originValue     *CustomFieldData // 调整前
	originValueFlag bool
	targetValue     *CustomFieldData // 调整后
	targetValueFlag bool
}

func NewChangeFieldPairBuilder() *ChangeFieldPairBuilder {
	builder := &ChangeFieldPairBuilder{}
	return builder
}

// 调整前
//
// 示例值：
func (builder *ChangeFieldPairBuilder) OriginValue(originValue *CustomFieldData) *ChangeFieldPairBuilder {
	builder.originValue = originValue
	builder.originValueFlag = true
	return builder
}

// 调整后
//
// 示例值：
func (builder *ChangeFieldPairBuilder) TargetValue(targetValue *CustomFieldData) *ChangeFieldPairBuilder {
	builder.targetValue = targetValue
	builder.targetValueFlag = true
	return builder
}

func (builder *ChangeFieldPairBuilder) Build() *ChangeFieldPair {
	req := &ChangeFieldPair{}
	if builder.originValueFlag {
		req.OriginValue = builder.originValue
	}
	if builder.targetValueFlag {
		req.TargetValue = builder.targetValue
	}
	return req
}

type CitizenshipStatus struct {
	Id                *string `json:"id,omitempty"`                 // 公民身份id
	CountryRegionId   *string `json:"country_region_id,omitempty"`  // 国家/地区id
	Active            *bool   `json:"active,omitempty"`             // 是否启用
	Name              []*I18n `json:"name,omitempty"`               // 名称
	CitizenshipStatus []*I18n `json:"citizenship_status,omitempty"` // 公民身份
	ViewOrder         *string `json:"view_order,omitempty"`         // 排序
}

type CitizenshipStatusBuilder struct {
	id                    string // 公民身份id
	idFlag                bool
	countryRegionId       string // 国家/地区id
	countryRegionIdFlag   bool
	active                bool // 是否启用
	activeFlag            bool
	name                  []*I18n // 名称
	nameFlag              bool
	citizenshipStatus     []*I18n // 公民身份
	citizenshipStatusFlag bool
	viewOrder             string // 排序
	viewOrderFlag         bool
}

func NewCitizenshipStatusBuilder() *CitizenshipStatusBuilder {
	builder := &CitizenshipStatusBuilder{}
	return builder
}

// 公民身份id
//
// 示例值：6891251722631890445
func (builder *CitizenshipStatusBuilder) Id(id string) *CitizenshipStatusBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

// 国家/地区id
//
// 示例值：6891251722631890445
func (builder *CitizenshipStatusBuilder) CountryRegionId(countryRegionId string) *CitizenshipStatusBuilder {
	builder.countryRegionId = countryRegionId
	builder.countryRegionIdFlag = true
	return builder
}

// 是否启用
//
// 示例值：true
func (builder *CitizenshipStatusBuilder) Active(active bool) *CitizenshipStatusBuilder {
	builder.active = active
	builder.activeFlag = true
	return builder
}

// 名称
//
// 示例值：
func (builder *CitizenshipStatusBuilder) Name(name []*I18n) *CitizenshipStatusBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}

// 公民身份
//
// 示例值：
func (builder *CitizenshipStatusBuilder) CitizenshipStatus(citizenshipStatus []*I18n) *CitizenshipStatusBuilder {
	builder.citizenshipStatus = citizenshipStatus
	builder.citizenshipStatusFlag = true
	return builder
}

// 排序
//
// 示例值：1
func (builder *CitizenshipStatusBuilder) ViewOrder(viewOrder string) *CitizenshipStatusBuilder {
	builder.viewOrder = viewOrder
	builder.viewOrderFlag = true
	return builder
}

func (builder *CitizenshipStatusBuilder) Build() *CitizenshipStatus {
	req := &CitizenshipStatus{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.countryRegionIdFlag {
		req.CountryRegionId = &builder.countryRegionId

	}
	if builder.activeFlag {
		req.Active = &builder.active

	}
	if builder.nameFlag {
		req.Name = builder.name
	}
	if builder.citizenshipStatusFlag {
		req.CitizenshipStatus = builder.citizenshipStatus
	}
	if builder.viewOrderFlag {
		req.ViewOrder = &builder.viewOrder

	}
	return req
}

type City struct {
	CityId                     *string `json:"city_id,omitempty"`                       // 城市 ID
	Name                       []*I18n `json:"name,omitempty"`                          // 城市名称
	CountryRegionSubdivisionId *string `json:"country_region_subdivision_id,omitempty"` // 所属国家/地区 ID，详细信息可通过【查询国家/地区信息】接口查询获得
	Code                       *string `json:"code,omitempty"`                          // 城市三字码
	Status                     *int    `json:"status,omitempty"`                        // 状态
}

type CityBuilder struct {
	cityId                         string // 城市 ID
	cityIdFlag                     bool
	name                           []*I18n // 城市名称
	nameFlag                       bool
	countryRegionSubdivisionId     string // 所属国家/地区 ID，详细信息可通过【查询国家/地区信息】接口查询获得
	countryRegionSubdivisionIdFlag bool
	code                           string // 城市三字码
	codeFlag                       bool
	status                         int // 状态
	statusFlag                     bool
}

func NewCityBuilder() *CityBuilder {
	builder := &CityBuilder{}
	return builder
}

// 城市 ID
//
// 示例值：6822114662122064111
func (builder *CityBuilder) CityId(cityId string) *CityBuilder {
	builder.cityId = cityId
	builder.cityIdFlag = true
	return builder
}

// 城市名称
//
// 示例值：
func (builder *CityBuilder) Name(name []*I18n) *CityBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}

// 所属国家/地区 ID，详细信息可通过【查询国家/地区信息】接口查询获得
//
// 示例值：6822114062133062211
func (builder *CityBuilder) CountryRegionSubdivisionId(countryRegionSubdivisionId string) *CityBuilder {
	builder.countryRegionSubdivisionId = countryRegionSubdivisionId
	builder.countryRegionSubdivisionIdFlag = true
	return builder
}

// 城市三字码
//
// 示例值：PEK
func (builder *CityBuilder) Code(code string) *CityBuilder {
	builder.code = code
	builder.codeFlag = true
	return builder
}

// 状态
//
// 示例值：1
func (builder *CityBuilder) Status(status int) *CityBuilder {
	builder.status = status
	builder.statusFlag = true
	return builder
}

func (builder *CityBuilder) Build() *City {
	req := &City{}
	if builder.cityIdFlag {
		req.CityId = &builder.cityId

	}
	if builder.nameFlag {
		req.Name = builder.name
	}
	if builder.countryRegionSubdivisionIdFlag {
		req.CountryRegionSubdivisionId = &builder.countryRegionSubdivisionId

	}
	if builder.codeFlag {
		req.Code = &builder.code

	}
	if builder.statusFlag {
		req.Status = &builder.status

	}
	return req
}

type Company struct {
	CompanyId                   *string                 `json:"company_id,omitempty"`                     // 公司 ID
	HiberarchyCommon            *HiberarchyCommon       `json:"hiberarchy_common,omitempty"`              // 公司基本信息
	Type                        *Enum                   `json:"type,omitempty"`                           // 性质
	IndustryList                []*Enum                 `json:"industry_list,omitempty"`                  // 行业
	LegalRepresentative         []*I18n                 `json:"legal_representative,omitempty"`           // 法定代表人
	PostCode                    *string                 `json:"post_code,omitempty"`                      // 邮编
	TaxPayerId                  *string                 `json:"tax_payer_id,omitempty"`                   // 纳税人识别号
	Confidential                *bool                   `json:"confidential,omitempty"`                   // confidential
	SubTypeList                 []*Enum                 `json:"sub_type_list,omitempty"`                  // 主体类型
	BranchCompany               *bool                   `json:"branch_company,omitempty"`                 // 是否为分公司
	PrimaryManager              []*I18n                 `json:"primary_manager,omitempty"`                // 主要负责人
	Currency                    *Currency               `json:"currency,omitempty"`                       // 默认币种
	Phone                       *PhoneNumberAndAreaCode `json:"phone,omitempty"`                          // 电话
	Fax                         *PhoneNumberAndAreaCode `json:"fax,omitempty"`                            // 传真
	RegisteredOfficeAddress     []*I18n                 `json:"registered_office_address,omitempty"`      // 完整注册地址
	OfficeAddress               []*I18n                 `json:"office_address,omitempty"`                 // 完整办公地址
	RegisteredOfficeAddressInfo *Address                `json:"registered_office_address_info,omitempty"` // 注册地址
	OfficeAddressInfo           *Address                `json:"office_address_info,omitempty"`            // 办公地址
	CustomFields                []*CustomFieldData      `json:"custom_fields,omitempty"`                  // 自定义字段
}

type CompanyBuilder struct {
	companyId                       string // 公司 ID
	companyIdFlag                   bool
	hiberarchyCommon                *HiberarchyCommon // 公司基本信息
	hiberarchyCommonFlag            bool
	type_                           *Enum // 性质
	typeFlag                        bool
	industryList                    []*Enum // 行业
	industryListFlag                bool
	legalRepresentative             []*I18n // 法定代表人
	legalRepresentativeFlag         bool
	postCode                        string // 邮编
	postCodeFlag                    bool
	taxPayerId                      string // 纳税人识别号
	taxPayerIdFlag                  bool
	confidential                    bool // confidential
	confidentialFlag                bool
	subTypeList                     []*Enum // 主体类型
	subTypeListFlag                 bool
	branchCompany                   bool // 是否为分公司
	branchCompanyFlag               bool
	primaryManager                  []*I18n // 主要负责人
	primaryManagerFlag              bool
	currency                        *Currency // 默认币种
	currencyFlag                    bool
	phone                           *PhoneNumberAndAreaCode // 电话
	phoneFlag                       bool
	fax                             *PhoneNumberAndAreaCode // 传真
	faxFlag                         bool
	registeredOfficeAddress         []*I18n // 完整注册地址
	registeredOfficeAddressFlag     bool
	officeAddress                   []*I18n // 完整办公地址
	officeAddressFlag               bool
	registeredOfficeAddressInfo     *Address // 注册地址
	registeredOfficeAddressInfoFlag bool
	officeAddressInfo               *Address // 办公地址
	officeAddressInfoFlag           bool
	customFields                    []*CustomFieldData // 自定义字段
	customFieldsFlag                bool
}

func NewCompanyBuilder() *CompanyBuilder {
	builder := &CompanyBuilder{}
	return builder
}

// 公司 ID
//
// 示例值：4692472714243080020
func (builder *CompanyBuilder) CompanyId(companyId string) *CompanyBuilder {
	builder.companyId = companyId
	builder.companyIdFlag = true
	return builder
}

// 公司基本信息
//
// 示例值：
func (builder *CompanyBuilder) HiberarchyCommon(hiberarchyCommon *HiberarchyCommon) *CompanyBuilder {
	builder.hiberarchyCommon = hiberarchyCommon
	builder.hiberarchyCommonFlag = true
	return builder
}

// 性质
//
// 示例值：
func (builder *CompanyBuilder) Type(type_ *Enum) *CompanyBuilder {
	builder.type_ = type_
	builder.typeFlag = true
	return builder
}

// 行业
//
// 示例值：
func (builder *CompanyBuilder) IndustryList(industryList []*Enum) *CompanyBuilder {
	builder.industryList = industryList
	builder.industryListFlag = true
	return builder
}

// 法定代表人
//
// 示例值：
func (builder *CompanyBuilder) LegalRepresentative(legalRepresentative []*I18n) *CompanyBuilder {
	builder.legalRepresentative = legalRepresentative
	builder.legalRepresentativeFlag = true
	return builder
}

// 邮编
//
// 示例值：邮编
func (builder *CompanyBuilder) PostCode(postCode string) *CompanyBuilder {
	builder.postCode = postCode
	builder.postCodeFlag = true
	return builder
}

// 纳税人识别号
//
// 示例值：123456840
func (builder *CompanyBuilder) TaxPayerId(taxPayerId string) *CompanyBuilder {
	builder.taxPayerId = taxPayerId
	builder.taxPayerIdFlag = true
	return builder
}

// confidential
//
// 示例值：true
func (builder *CompanyBuilder) Confidential(confidential bool) *CompanyBuilder {
	builder.confidential = confidential
	builder.confidentialFlag = true
	return builder
}

// 主体类型
//
// 示例值：
func (builder *CompanyBuilder) SubTypeList(subTypeList []*Enum) *CompanyBuilder {
	builder.subTypeList = subTypeList
	builder.subTypeListFlag = true
	return builder
}

// 是否为分公司
//
// 示例值：true
func (builder *CompanyBuilder) BranchCompany(branchCompany bool) *CompanyBuilder {
	builder.branchCompany = branchCompany
	builder.branchCompanyFlag = true
	return builder
}

// 主要负责人
//
// 示例值：
func (builder *CompanyBuilder) PrimaryManager(primaryManager []*I18n) *CompanyBuilder {
	builder.primaryManager = primaryManager
	builder.primaryManagerFlag = true
	return builder
}

// 默认币种
//
// 示例值：
func (builder *CompanyBuilder) Currency(currency *Currency) *CompanyBuilder {
	builder.currency = currency
	builder.currencyFlag = true
	return builder
}

// 电话
//
// 示例值：
func (builder *CompanyBuilder) Phone(phone *PhoneNumberAndAreaCode) *CompanyBuilder {
	builder.phone = phone
	builder.phoneFlag = true
	return builder
}

// 传真
//
// 示例值：
func (builder *CompanyBuilder) Fax(fax *PhoneNumberAndAreaCode) *CompanyBuilder {
	builder.fax = fax
	builder.faxFlag = true
	return builder
}

// 完整注册地址
//
// 示例值：
func (builder *CompanyBuilder) RegisteredOfficeAddress(registeredOfficeAddress []*I18n) *CompanyBuilder {
	builder.registeredOfficeAddress = registeredOfficeAddress
	builder.registeredOfficeAddressFlag = true
	return builder
}

// 完整办公地址
//
// 示例值：
func (builder *CompanyBuilder) OfficeAddress(officeAddress []*I18n) *CompanyBuilder {
	builder.officeAddress = officeAddress
	builder.officeAddressFlag = true
	return builder
}

// 注册地址
//
// 示例值：
func (builder *CompanyBuilder) RegisteredOfficeAddressInfo(registeredOfficeAddressInfo *Address) *CompanyBuilder {
	builder.registeredOfficeAddressInfo = registeredOfficeAddressInfo
	builder.registeredOfficeAddressInfoFlag = true
	return builder
}

// 办公地址
//
// 示例值：
func (builder *CompanyBuilder) OfficeAddressInfo(officeAddressInfo *Address) *CompanyBuilder {
	builder.officeAddressInfo = officeAddressInfo
	builder.officeAddressInfoFlag = true
	return builder
}

// 自定义字段
//
// 示例值：
func (builder *CompanyBuilder) CustomFields(customFields []*CustomFieldData) *CompanyBuilder {
	builder.customFields = customFields
	builder.customFieldsFlag = true
	return builder
}

func (builder *CompanyBuilder) Build() *Company {
	req := &Company{}
	if builder.companyIdFlag {
		req.CompanyId = &builder.companyId

	}
	if builder.hiberarchyCommonFlag {
		req.HiberarchyCommon = builder.hiberarchyCommon
	}
	if builder.typeFlag {
		req.Type = builder.type_
	}
	if builder.industryListFlag {
		req.IndustryList = builder.industryList
	}
	if builder.legalRepresentativeFlag {
		req.LegalRepresentative = builder.legalRepresentative
	}
	if builder.postCodeFlag {
		req.PostCode = &builder.postCode

	}
	if builder.taxPayerIdFlag {
		req.TaxPayerId = &builder.taxPayerId

	}
	if builder.confidentialFlag {
		req.Confidential = &builder.confidential

	}
	if builder.subTypeListFlag {
		req.SubTypeList = builder.subTypeList
	}
	if builder.branchCompanyFlag {
		req.BranchCompany = &builder.branchCompany

	}
	if builder.primaryManagerFlag {
		req.PrimaryManager = builder.primaryManager
	}
	if builder.currencyFlag {
		req.Currency = builder.currency
	}
	if builder.phoneFlag {
		req.Phone = builder.phone
	}
	if builder.faxFlag {
		req.Fax = builder.fax
	}
	if builder.registeredOfficeAddressFlag {
		req.RegisteredOfficeAddress = builder.registeredOfficeAddress
	}
	if builder.officeAddressFlag {
		req.OfficeAddress = builder.officeAddress
	}
	if builder.registeredOfficeAddressInfoFlag {
		req.RegisteredOfficeAddressInfo = builder.registeredOfficeAddressInfo
	}
	if builder.officeAddressInfoFlag {
		req.OfficeAddressInfo = builder.officeAddressInfo
	}
	if builder.customFieldsFlag {
		req.CustomFields = builder.customFields
	}
	return req
}

type CompanyIdAndName struct {
	CompanyId   *string `json:"company_id,omitempty"`   // 所属公司的 ID
	CompanyName []*I18n `json:"company_name,omitempty"` // 所属公司的名称
}

type CompanyIdAndNameBuilder struct {
	companyId       string // 所属公司的 ID
	companyIdFlag   bool
	companyName     []*I18n // 所属公司的名称
	companyNameFlag bool
}

func NewCompanyIdAndNameBuilder() *CompanyIdAndNameBuilder {
	builder := &CompanyIdAndNameBuilder{}
	return builder
}

// 所属公司的 ID
//
// 示例值：sadasdasda
func (builder *CompanyIdAndNameBuilder) CompanyId(companyId string) *CompanyIdAndNameBuilder {
	builder.companyId = companyId
	builder.companyIdFlag = true
	return builder
}

// 所属公司的名称
//
// 示例值：
func (builder *CompanyIdAndNameBuilder) CompanyName(companyName []*I18n) *CompanyIdAndNameBuilder {
	builder.companyName = companyName
	builder.companyNameFlag = true
	return builder
}

func (builder *CompanyIdAndNameBuilder) Build() *CompanyIdAndName {
	req := &CompanyIdAndName{}
	if builder.companyIdFlag {
		req.CompanyId = &builder.companyId

	}
	if builder.companyNameFlag {
		req.CompanyName = builder.companyName
	}
	return req
}

type Contract struct {
	Id                  *string `json:"id,omitempty"`                     // 合同ID
	EffectiveTime       *string `json:"effective_time,omitempty"`         // 合同开始日期
	ContractEndDate     *string `json:"contract_end_date,omitempty"`      // 合同结束日期
	ExpirationTime      *string `json:"expiration_time,omitempty"`        // 实际结束日期
	EmploymentId        *string `json:"employment_id,omitempty"`          // 雇佣 ID
	ContractType        *Enum   `json:"contract_type,omitempty"`          // 合同类型，枚举值可通过文档【飞书人事枚举常量】合同类型（contract_type）枚举定义部分获得
	FirstPartyCompanyId *string `json:"first_party_company_id,omitempty"` // 合同主体, 引用Company的ID，枚举值及详细信息可通过【批量查询公司】接口查询获得
	PersonId            *string `json:"person_id,omitempty"`              // Person ID，枚举值及详细信息可通过【批量查询个人信息】接口查询获得
	DurationType        *Enum   `json:"duration_type,omitempty"`          // 期限类型，枚举值可通过文档【飞书人事枚举常量】合同期限类型（duration_type）枚举定义部分获得
	ContractNumber      *string `json:"contract_number,omitempty"`        // 合同编号
	SigningType         *Enum   `json:"signing_type,omitempty"`           // 签订类型，枚举值可通过文档【飞书人事枚举常量】签订类型（signing_type）枚举定义部分获得
}

type ContractBuilder struct {
	id                      string // 合同ID
	idFlag                  bool
	effectiveTime           string // 合同开始日期
	effectiveTimeFlag       bool
	contractEndDate         string // 合同结束日期
	contractEndDateFlag     bool
	expirationTime          string // 实际结束日期
	expirationTimeFlag      bool
	employmentId            string // 雇佣 ID
	employmentIdFlag        bool
	contractType            *Enum // 合同类型，枚举值可通过文档【飞书人事枚举常量】合同类型（contract_type）枚举定义部分获得
	contractTypeFlag        bool
	firstPartyCompanyId     string // 合同主体, 引用Company的ID，枚举值及详细信息可通过【批量查询公司】接口查询获得
	firstPartyCompanyIdFlag bool
	personId                string // Person ID，枚举值及详细信息可通过【批量查询个人信息】接口查询获得
	personIdFlag            bool
	durationType            *Enum // 期限类型，枚举值可通过文档【飞书人事枚举常量】合同期限类型（duration_type）枚举定义部分获得
	durationTypeFlag        bool
	contractNumber          string // 合同编号
	contractNumberFlag      bool
	signingType             *Enum // 签订类型，枚举值可通过文档【飞书人事枚举常量】签订类型（signing_type）枚举定义部分获得
	signingTypeFlag         bool
}

func NewContractBuilder() *ContractBuilder {
	builder := &ContractBuilder{}
	return builder
}

// 合同ID
//
// 示例值：7147527056140813828
func (builder *ContractBuilder) Id(id string) *ContractBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

// 合同开始日期
//
// 示例值：2023-01-01 00:00:00
func (builder *ContractBuilder) EffectiveTime(effectiveTime string) *ContractBuilder {
	builder.effectiveTime = effectiveTime
	builder.effectiveTimeFlag = true
	return builder
}

// 合同结束日期
//
// 示例值：2024-01-01
func (builder *ContractBuilder) ContractEndDate(contractEndDate string) *ContractBuilder {
	builder.contractEndDate = contractEndDate
	builder.contractEndDateFlag = true
	return builder
}

// 实际结束日期
//
// 示例值：2023-11-01 00:00:00
func (builder *ContractBuilder) ExpirationTime(expirationTime string) *ContractBuilder {
	builder.expirationTime = expirationTime
	builder.expirationTimeFlag = true
	return builder
}

// 雇佣 ID
//
// 示例值：6893014062142064135
func (builder *ContractBuilder) EmploymentId(employmentId string) *ContractBuilder {
	builder.employmentId = employmentId
	builder.employmentIdFlag = true
	return builder
}

// 合同类型，枚举值可通过文档【飞书人事枚举常量】合同类型（contract_type）枚举定义部分获得
//
// 示例值：
func (builder *ContractBuilder) ContractType(contractType *Enum) *ContractBuilder {
	builder.contractType = contractType
	builder.contractTypeFlag = true
	return builder
}

// 合同主体, 引用Company的ID，枚举值及详细信息可通过【批量查询公司】接口查询获得
//
// 示例值：7091599096804394540
func (builder *ContractBuilder) FirstPartyCompanyId(firstPartyCompanyId string) *ContractBuilder {
	builder.firstPartyCompanyId = firstPartyCompanyId
	builder.firstPartyCompanyIdFlag = true
	return builder
}

// Person ID，枚举值及详细信息可通过【批量查询个人信息】接口查询获得
//
// 示例值：7088589447189022252
func (builder *ContractBuilder) PersonId(personId string) *ContractBuilder {
	builder.personId = personId
	builder.personIdFlag = true
	return builder
}

// 期限类型，枚举值可通过文档【飞书人事枚举常量】合同期限类型（duration_type）枚举定义部分获得
//
// 示例值：
func (builder *ContractBuilder) DurationType(durationType *Enum) *ContractBuilder {
	builder.durationType = durationType
	builder.durationTypeFlag = true
	return builder
}

// 合同编号
//
// 示例值：0000011
func (builder *ContractBuilder) ContractNumber(contractNumber string) *ContractBuilder {
	builder.contractNumber = contractNumber
	builder.contractNumberFlag = true
	return builder
}

// 签订类型，枚举值可通过文档【飞书人事枚举常量】签订类型（signing_type）枚举定义部分获得
//
// 示例值：
func (builder *ContractBuilder) SigningType(signingType *Enum) *ContractBuilder {
	builder.signingType = signingType
	builder.signingTypeFlag = true
	return builder
}

func (builder *ContractBuilder) Build() *Contract {
	req := &Contract{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.effectiveTimeFlag {
		req.EffectiveTime = &builder.effectiveTime

	}
	if builder.contractEndDateFlag {
		req.ContractEndDate = &builder.contractEndDate

	}
	if builder.expirationTimeFlag {
		req.ExpirationTime = &builder.expirationTime

	}
	if builder.employmentIdFlag {
		req.EmploymentId = &builder.employmentId

	}
	if builder.contractTypeFlag {
		req.ContractType = builder.contractType
	}
	if builder.firstPartyCompanyIdFlag {
		req.FirstPartyCompanyId = &builder.firstPartyCompanyId

	}
	if builder.personIdFlag {
		req.PersonId = &builder.personId

	}
	if builder.durationTypeFlag {
		req.DurationType = builder.durationType
	}
	if builder.contractNumberFlag {
		req.ContractNumber = &builder.contractNumber

	}
	if builder.signingTypeFlag {
		req.SigningType = builder.signingType
	}
	return req
}

type CostCenter struct {
	CostCenterId       *string  `json:"cost_center_id,omitempty"`        // 成本中心ID
	Name               []*I18n  `json:"name,omitempty"`                  // 成本中心名称
	Code               *string  `json:"code,omitempty"`                  // 编码
	ParentCostCenterId *string  `json:"parent_cost_center_id,omitempty"` // 上级成本中心ID
	Managers           []string `json:"managers,omitempty"`              // 成本中心负责人ID 列表，可通过雇佣信息接口查询获得
	Description        []*I18n  `json:"description,omitempty"`           // 成本中心描述
	EffectiveTime      *string  `json:"effective_time,omitempty"`        // 生效时间
	ExpirationTime     *string  `json:"expiration_time,omitempty"`       // 过期时间
	Active             *bool    `json:"active,omitempty"`                // 当前实体是否启用
	OperationReason    *string  `json:"operation_reason,omitempty"`      // 操作原因
}

type CostCenterBuilder struct {
	costCenterId           string // 成本中心ID
	costCenterIdFlag       bool
	name                   []*I18n // 成本中心名称
	nameFlag               bool
	code                   string // 编码
	codeFlag               bool
	parentCostCenterId     string // 上级成本中心ID
	parentCostCenterIdFlag bool
	managers               []string // 成本中心负责人ID 列表，可通过雇佣信息接口查询获得
	managersFlag           bool
	description            []*I18n // 成本中心描述
	descriptionFlag        bool
	effectiveTime          string // 生效时间
	effectiveTimeFlag      bool
	expirationTime         string // 过期时间
	expirationTimeFlag     bool
	active                 bool // 当前实体是否启用
	activeFlag             bool
	operationReason        string // 操作原因
	operationReasonFlag    bool
}

func NewCostCenterBuilder() *CostCenterBuilder {
	builder := &CostCenterBuilder{}
	return builder
}

// 成本中心ID
//
// 示例值：6969828847121885087
func (builder *CostCenterBuilder) CostCenterId(costCenterId string) *CostCenterBuilder {
	builder.costCenterId = costCenterId
	builder.costCenterIdFlag = true
	return builder
}

// 成本中心名称
//
// 示例值：
func (builder *CostCenterBuilder) Name(name []*I18n) *CostCenterBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}

// 编码
//
// 示例值：MDPD00000023
func (builder *CostCenterBuilder) Code(code string) *CostCenterBuilder {
	builder.code = code
	builder.codeFlag = true
	return builder
}

// 上级成本中心ID
//
// 示例值：6862995757234914824
func (builder *CostCenterBuilder) ParentCostCenterId(parentCostCenterId string) *CostCenterBuilder {
	builder.parentCostCenterId = parentCostCenterId
	builder.parentCostCenterIdFlag = true
	return builder
}

// 成本中心负责人ID 列表，可通过雇佣信息接口查询获得
//
// 示例值：
func (builder *CostCenterBuilder) Managers(managers []string) *CostCenterBuilder {
	builder.managers = managers
	builder.managersFlag = true
	return builder
}

// 成本中心描述
//
// 示例值：
func (builder *CostCenterBuilder) Description(description []*I18n) *CostCenterBuilder {
	builder.description = description
	builder.descriptionFlag = true
	return builder
}

// 生效时间
//
// 示例值：2020-01-01
func (builder *CostCenterBuilder) EffectiveTime(effectiveTime string) *CostCenterBuilder {
	builder.effectiveTime = effectiveTime
	builder.effectiveTimeFlag = true
	return builder
}

// 过期时间
//
// 示例值：2020-01-01
func (builder *CostCenterBuilder) ExpirationTime(expirationTime string) *CostCenterBuilder {
	builder.expirationTime = expirationTime
	builder.expirationTimeFlag = true
	return builder
}

// 当前实体是否启用
//
// 示例值：2020-01-01
func (builder *CostCenterBuilder) Active(active bool) *CostCenterBuilder {
	builder.active = active
	builder.activeFlag = true
	return builder
}

// 操作原因
//
// 示例值：过期作废
func (builder *CostCenterBuilder) OperationReason(operationReason string) *CostCenterBuilder {
	builder.operationReason = operationReason
	builder.operationReasonFlag = true
	return builder
}

func (builder *CostCenterBuilder) Build() *CostCenter {
	req := &CostCenter{}
	if builder.costCenterIdFlag {
		req.CostCenterId = &builder.costCenterId

	}
	if builder.nameFlag {
		req.Name = builder.name
	}
	if builder.codeFlag {
		req.Code = &builder.code

	}
	if builder.parentCostCenterIdFlag {
		req.ParentCostCenterId = &builder.parentCostCenterId

	}
	if builder.managersFlag {
		req.Managers = builder.managers
	}
	if builder.descriptionFlag {
		req.Description = builder.description
	}
	if builder.effectiveTimeFlag {
		req.EffectiveTime = &builder.effectiveTime

	}
	if builder.expirationTimeFlag {
		req.ExpirationTime = &builder.expirationTime

	}
	if builder.activeFlag {
		req.Active = &builder.active

	}
	if builder.operationReasonFlag {
		req.OperationReason = &builder.operationReason

	}
	return req
}

type CostCenterVersion struct {
	CostCenterId       *string  `json:"cost_center_id,omitempty"`        // 成本中心ID
	VersionId          *string  `json:"version_id,omitempty"`            // 成本中心版本ID
	Name               []*I18n  `json:"name,omitempty"`                  // 成本中心名称
	Code               *string  `json:"code,omitempty"`                  // 编码
	ParentCostCenterId *string  `json:"parent_cost_center_id,omitempty"` // 上级成本中心ID
	Managers           []string `json:"managers,omitempty"`              // 成本中心负责人ID 列表，可通过雇佣信息接口查询获得
	Description        []*I18n  `json:"description,omitempty"`           // 成本中心描述
	EffectiveTime      *string  `json:"effective_time,omitempty"`        // 生效时间
	ExpirationTime     *string  `json:"expiration_time,omitempty"`       // 过期时间
	Active             *bool    `json:"active,omitempty"`                // 当前实体是否启用
	OperationReason    *string  `json:"operation_reason,omitempty"`      // 操作原因
}

type CostCenterVersionBuilder struct {
	costCenterId           string // 成本中心ID
	costCenterIdFlag       bool
	versionId              string // 成本中心版本ID
	versionIdFlag          bool
	name                   []*I18n // 成本中心名称
	nameFlag               bool
	code                   string // 编码
	codeFlag               bool
	parentCostCenterId     string // 上级成本中心ID
	parentCostCenterIdFlag bool
	managers               []string // 成本中心负责人ID 列表，可通过雇佣信息接口查询获得
	managersFlag           bool
	description            []*I18n // 成本中心描述
	descriptionFlag        bool
	effectiveTime          string // 生效时间
	effectiveTimeFlag      bool
	expirationTime         string // 过期时间
	expirationTimeFlag     bool
	active                 bool // 当前实体是否启用
	activeFlag             bool
	operationReason        string // 操作原因
	operationReasonFlag    bool
}

func NewCostCenterVersionBuilder() *CostCenterVersionBuilder {
	builder := &CostCenterVersionBuilder{}
	return builder
}

// 成本中心ID
//
// 示例值：6969828847121885087
func (builder *CostCenterVersionBuilder) CostCenterId(costCenterId string) *CostCenterVersionBuilder {
	builder.costCenterId = costCenterId
	builder.costCenterIdFlag = true
	return builder
}

// 成本中心版本ID
//
// 示例值：6969828847121885087
func (builder *CostCenterVersionBuilder) VersionId(versionId string) *CostCenterVersionBuilder {
	builder.versionId = versionId
	builder.versionIdFlag = true
	return builder
}

// 成本中心名称
//
// 示例值：
func (builder *CostCenterVersionBuilder) Name(name []*I18n) *CostCenterVersionBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}

// 编码
//
// 示例值：MDPD00000023
func (builder *CostCenterVersionBuilder) Code(code string) *CostCenterVersionBuilder {
	builder.code = code
	builder.codeFlag = true
	return builder
}

// 上级成本中心ID
//
// 示例值：6862995757234914824
func (builder *CostCenterVersionBuilder) ParentCostCenterId(parentCostCenterId string) *CostCenterVersionBuilder {
	builder.parentCostCenterId = parentCostCenterId
	builder.parentCostCenterIdFlag = true
	return builder
}

// 成本中心负责人ID 列表，可通过雇佣信息接口查询获得
//
// 示例值：
func (builder *CostCenterVersionBuilder) Managers(managers []string) *CostCenterVersionBuilder {
	builder.managers = managers
	builder.managersFlag = true
	return builder
}

// 成本中心描述
//
// 示例值：
func (builder *CostCenterVersionBuilder) Description(description []*I18n) *CostCenterVersionBuilder {
	builder.description = description
	builder.descriptionFlag = true
	return builder
}

// 生效时间
//
// 示例值：2020-01-01
func (builder *CostCenterVersionBuilder) EffectiveTime(effectiveTime string) *CostCenterVersionBuilder {
	builder.effectiveTime = effectiveTime
	builder.effectiveTimeFlag = true
	return builder
}

// 过期时间
//
// 示例值：2020-01-01
func (builder *CostCenterVersionBuilder) ExpirationTime(expirationTime string) *CostCenterVersionBuilder {
	builder.expirationTime = expirationTime
	builder.expirationTimeFlag = true
	return builder
}

// 当前实体是否启用
//
// 示例值：2020-01-01
func (builder *CostCenterVersionBuilder) Active(active bool) *CostCenterVersionBuilder {
	builder.active = active
	builder.activeFlag = true
	return builder
}

// 操作原因
//
// 示例值：过期作废
func (builder *CostCenterVersionBuilder) OperationReason(operationReason string) *CostCenterVersionBuilder {
	builder.operationReason = operationReason
	builder.operationReasonFlag = true
	return builder
}

func (builder *CostCenterVersionBuilder) Build() *CostCenterVersion {
	req := &CostCenterVersion{}
	if builder.costCenterIdFlag {
		req.CostCenterId = &builder.costCenterId

	}
	if builder.versionIdFlag {
		req.VersionId = &builder.versionId

	}
	if builder.nameFlag {
		req.Name = builder.name
	}
	if builder.codeFlag {
		req.Code = &builder.code

	}
	if builder.parentCostCenterIdFlag {
		req.ParentCostCenterId = &builder.parentCostCenterId

	}
	if builder.managersFlag {
		req.Managers = builder.managers
	}
	if builder.descriptionFlag {
		req.Description = builder.description
	}
	if builder.effectiveTimeFlag {
		req.EffectiveTime = &builder.effectiveTime

	}
	if builder.expirationTimeFlag {
		req.ExpirationTime = &builder.expirationTime

	}
	if builder.activeFlag {
		req.Active = &builder.active

	}
	if builder.operationReasonFlag {
		req.OperationReason = &builder.operationReason

	}
	return req
}

type CountryRegion struct {
	CountryRegionId *string `json:"country_region_id,omitempty"` // 国家/地区 ID
	Name            []*I18n `json:"name,omitempty"`              // 国家/地区名称
	FullName        []*I18n `json:"full_name,omitempty"`         // 国家/地区全称
	Alpha2Code      *string `json:"alpha_2_code,omitempty"`      // 国家地区二字码
	Alpha3Code      *string `json:"alpha_3_code,omitempty"`      // 国家地区三字码
	GlobalCode      *string `json:"global_code,omitempty"`       // 国际电话区号
	Status          *int    `json:"status,omitempty"`            // 状态
}

type CountryRegionBuilder struct {
	countryRegionId     string // 国家/地区 ID
	countryRegionIdFlag bool
	name                []*I18n // 国家/地区名称
	nameFlag            bool
	fullName            []*I18n // 国家/地区全称
	fullNameFlag        bool
	alpha2Code          string // 国家地区二字码
	alpha2CodeFlag      bool
	alpha3Code          string // 国家地区三字码
	alpha3CodeFlag      bool
	globalCode          string // 国际电话区号
	globalCodeFlag      bool
	status              int // 状态
	statusFlag          bool
}

func NewCountryRegionBuilder() *CountryRegionBuilder {
	builder := &CountryRegionBuilder{}
	return builder
}

// 国家/地区 ID
//
// 示例值：6893114062122064111
func (builder *CountryRegionBuilder) CountryRegionId(countryRegionId string) *CountryRegionBuilder {
	builder.countryRegionId = countryRegionId
	builder.countryRegionIdFlag = true
	return builder
}

// 国家/地区名称
//
// 示例值：
func (builder *CountryRegionBuilder) Name(name []*I18n) *CountryRegionBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}

// 国家/地区全称
//
// 示例值：
func (builder *CountryRegionBuilder) FullName(fullName []*I18n) *CountryRegionBuilder {
	builder.fullName = fullName
	builder.fullNameFlag = true
	return builder
}

// 国家地区二字码
//
// 示例值：CN
func (builder *CountryRegionBuilder) Alpha2Code(alpha2Code string) *CountryRegionBuilder {
	builder.alpha2Code = alpha2Code
	builder.alpha2CodeFlag = true
	return builder
}

// 国家地区三字码
//
// 示例值：CHN
func (builder *CountryRegionBuilder) Alpha3Code(alpha3Code string) *CountryRegionBuilder {
	builder.alpha3Code = alpha3Code
	builder.alpha3CodeFlag = true
	return builder
}

// 国际电话区号
//
// 示例值：+86
func (builder *CountryRegionBuilder) GlobalCode(globalCode string) *CountryRegionBuilder {
	builder.globalCode = globalCode
	builder.globalCodeFlag = true
	return builder
}

// 状态
//
// 示例值：1
func (builder *CountryRegionBuilder) Status(status int) *CountryRegionBuilder {
	builder.status = status
	builder.statusFlag = true
	return builder
}

func (builder *CountryRegionBuilder) Build() *CountryRegion {
	req := &CountryRegion{}
	if builder.countryRegionIdFlag {
		req.CountryRegionId = &builder.countryRegionId

	}
	if builder.nameFlag {
		req.Name = builder.name
	}
	if builder.fullNameFlag {
		req.FullName = builder.fullName
	}
	if builder.alpha2CodeFlag {
		req.Alpha2Code = &builder.alpha2Code

	}
	if builder.alpha3CodeFlag {
		req.Alpha3Code = &builder.alpha3Code

	}
	if builder.globalCodeFlag {
		req.GlobalCode = &builder.globalCode

	}
	if builder.statusFlag {
		req.Status = &builder.status

	}
	return req
}

type CountryRegionSubdivision struct {
	CountryRegionSubdivisionId *string `json:"country_region_subdivision_id,omitempty"` // 省份/行政区 ID
	Name                       []*I18n `json:"name,omitempty"`                          // 省份/行政区名称
	CountryRegionId            *string `json:"country_region_id,omitempty"`             // 所属国家/地区 ID，详细信息可通过【查询国家/地区信息】接口查询获得
	SubdivisionType            *Enum   `json:"subdivision_type,omitempty"`              // 行政区类型，枚举值可通过文档【飞书人事枚举常量】行政区类型（subdivision_type）枚举定义部分获得
	IsoCode                    *string `json:"iso_code,omitempty"`                      // 省份/行政区三字码
	Status                     *int    `json:"status,omitempty"`                        // 状态
}

type CountryRegionSubdivisionBuilder struct {
	countryRegionSubdivisionId     string // 省份/行政区 ID
	countryRegionSubdivisionIdFlag bool
	name                           []*I18n // 省份/行政区名称
	nameFlag                       bool
	countryRegionId                string // 所属国家/地区 ID，详细信息可通过【查询国家/地区信息】接口查询获得
	countryRegionIdFlag            bool
	subdivisionType                *Enum // 行政区类型，枚举值可通过文档【飞书人事枚举常量】行政区类型（subdivision_type）枚举定义部分获得
	subdivisionTypeFlag            bool
	isoCode                        string // 省份/行政区三字码
	isoCodeFlag                    bool
	status                         int // 状态
	statusFlag                     bool
}

func NewCountryRegionSubdivisionBuilder() *CountryRegionSubdivisionBuilder {
	builder := &CountryRegionSubdivisionBuilder{}
	return builder
}

// 省份/行政区 ID
//
// 示例值：6822114062122064111
func (builder *CountryRegionSubdivisionBuilder) CountryRegionSubdivisionId(countryRegionSubdivisionId string) *CountryRegionSubdivisionBuilder {
	builder.countryRegionSubdivisionId = countryRegionSubdivisionId
	builder.countryRegionSubdivisionIdFlag = true
	return builder
}

// 省份/行政区名称
//
// 示例值：
func (builder *CountryRegionSubdivisionBuilder) Name(name []*I18n) *CountryRegionSubdivisionBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}

// 所属国家/地区 ID，详细信息可通过【查询国家/地区信息】接口查询获得
//
// 示例值：6822114062122062211
func (builder *CountryRegionSubdivisionBuilder) CountryRegionId(countryRegionId string) *CountryRegionSubdivisionBuilder {
	builder.countryRegionId = countryRegionId
	builder.countryRegionIdFlag = true
	return builder
}

// 行政区类型，枚举值可通过文档【飞书人事枚举常量】行政区类型（subdivision_type）枚举定义部分获得
//
// 示例值：
func (builder *CountryRegionSubdivisionBuilder) SubdivisionType(subdivisionType *Enum) *CountryRegionSubdivisionBuilder {
	builder.subdivisionType = subdivisionType
	builder.subdivisionTypeFlag = true
	return builder
}

// 省份/行政区三字码
//
// 示例值：PEK
func (builder *CountryRegionSubdivisionBuilder) IsoCode(isoCode string) *CountryRegionSubdivisionBuilder {
	builder.isoCode = isoCode
	builder.isoCodeFlag = true
	return builder
}

// 状态
//
// 示例值：1
func (builder *CountryRegionSubdivisionBuilder) Status(status int) *CountryRegionSubdivisionBuilder {
	builder.status = status
	builder.statusFlag = true
	return builder
}

func (builder *CountryRegionSubdivisionBuilder) Build() *CountryRegionSubdivision {
	req := &CountryRegionSubdivision{}
	if builder.countryRegionSubdivisionIdFlag {
		req.CountryRegionSubdivisionId = &builder.countryRegionSubdivisionId

	}
	if builder.nameFlag {
		req.Name = builder.name
	}
	if builder.countryRegionIdFlag {
		req.CountryRegionId = &builder.countryRegionId

	}
	if builder.subdivisionTypeFlag {
		req.SubdivisionType = builder.subdivisionType
	}
	if builder.isoCodeFlag {
		req.IsoCode = &builder.isoCode

	}
	if builder.statusFlag {
		req.Status = &builder.status

	}
	return req
}

type Currency struct {
	CurrencyId         *string `json:"currency_id,omitempty"`           // 货币 ID
	CountryRegionId    *string `json:"country_region_id,omitempty"`     // 货币所属国家/地区 ID，详细信息可通过【查询国家/地区信息】接口查询获得
	CurrencyName       []*I18n `json:"currency_name,omitempty"`         // 货币名称
	NumericCode        *int    `json:"numeric_code,omitempty"`          // 数字代码
	CurrencyAlpha3Code *string `json:"currency_alpha_3_code,omitempty"` // 三位字母代码
	Status             *int    `json:"status,omitempty"`                // 状态
}

type CurrencyBuilder struct {
	currencyId             string // 货币 ID
	currencyIdFlag         bool
	countryRegionId        string // 货币所属国家/地区 ID，详细信息可通过【查询国家/地区信息】接口查询获得
	countryRegionIdFlag    bool
	currencyName           []*I18n // 货币名称
	currencyNameFlag       bool
	numericCode            int // 数字代码
	numericCodeFlag        bool
	currencyAlpha3Code     string // 三位字母代码
	currencyAlpha3CodeFlag bool
	status                 int // 状态
	statusFlag             bool
}

func NewCurrencyBuilder() *CurrencyBuilder {
	builder := &CurrencyBuilder{}
	return builder
}

// 货币 ID
//
// 示例值：6893114062142064111
func (builder *CurrencyBuilder) CurrencyId(currencyId string) *CurrencyBuilder {
	builder.currencyId = currencyId
	builder.currencyIdFlag = true
	return builder
}

// 货币所属国家/地区 ID，详细信息可通过【查询国家/地区信息】接口查询获得
//
// 示例值：6893114162142064111
func (builder *CurrencyBuilder) CountryRegionId(countryRegionId string) *CurrencyBuilder {
	builder.countryRegionId = countryRegionId
	builder.countryRegionIdFlag = true
	return builder
}

// 货币名称
//
// 示例值：
func (builder *CurrencyBuilder) CurrencyName(currencyName []*I18n) *CurrencyBuilder {
	builder.currencyName = currencyName
	builder.currencyNameFlag = true
	return builder
}

// 数字代码
//
// 示例值：156
func (builder *CurrencyBuilder) NumericCode(numericCode int) *CurrencyBuilder {
	builder.numericCode = numericCode
	builder.numericCodeFlag = true
	return builder
}

// 三位字母代码
//
// 示例值：CNY
func (builder *CurrencyBuilder) CurrencyAlpha3Code(currencyAlpha3Code string) *CurrencyBuilder {
	builder.currencyAlpha3Code = currencyAlpha3Code
	builder.currencyAlpha3CodeFlag = true
	return builder
}

// 状态
//
// 示例值：1
func (builder *CurrencyBuilder) Status(status int) *CurrencyBuilder {
	builder.status = status
	builder.statusFlag = true
	return builder
}

func (builder *CurrencyBuilder) Build() *Currency {
	req := &Currency{}
	if builder.currencyIdFlag {
		req.CurrencyId = &builder.currencyId

	}
	if builder.countryRegionIdFlag {
		req.CountryRegionId = &builder.countryRegionId

	}
	if builder.currencyNameFlag {
		req.CurrencyName = builder.currencyName
	}
	if builder.numericCodeFlag {
		req.NumericCode = &builder.numericCode

	}
	if builder.currencyAlpha3CodeFlag {
		req.CurrencyAlpha3Code = &builder.currencyAlpha3Code

	}
	if builder.statusFlag {
		req.Status = &builder.status

	}
	return req
}

type CustomFieldData struct {
	CustomApiName *string     `json:"custom_api_name,omitempty"` // 自定义字段 apiname，即自定义字段的唯一标识
	Name          *CustomName `json:"name,omitempty"`            // 自定义字段名称
	Type          *int        `json:"type,omitempty"`            // 自定义字段类型
	Value         *string     `json:"value,omitempty"`           // 字段值，是 json 转义后的字符串，根据元数据定义不同，字段格式不同（如 123, 123.23, "true", ["id1","id2"], "2006-01-02 15:04:05"）
}

type CustomFieldDataBuilder struct {
	customApiName     string // 自定义字段 apiname，即自定义字段的唯一标识
	customApiNameFlag bool
	name              *CustomName // 自定义字段名称
	nameFlag          bool
	type_             int // 自定义字段类型
	typeFlag          bool
	value             string // 字段值，是 json 转义后的字符串，根据元数据定义不同，字段格式不同（如 123, 123.23, "true", ["id1","id2"], "2006-01-02 15:04:05"）
	valueFlag         bool
}

func NewCustomFieldDataBuilder() *CustomFieldDataBuilder {
	builder := &CustomFieldDataBuilder{}
	return builder
}

// 自定义字段 apiname，即自定义字段的唯一标识
//
// 示例值：name
func (builder *CustomFieldDataBuilder) CustomApiName(customApiName string) *CustomFieldDataBuilder {
	builder.customApiName = customApiName
	builder.customApiNameFlag = true
	return builder
}

// 自定义字段名称
//
// 示例值：
func (builder *CustomFieldDataBuilder) Name(name *CustomName) *CustomFieldDataBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}

// 自定义字段类型
//
// 示例值：1
func (builder *CustomFieldDataBuilder) Type(type_ int) *CustomFieldDataBuilder {
	builder.type_ = type_
	builder.typeFlag = true
	return builder
}

// 字段值，是 json 转义后的字符串，根据元数据定义不同，字段格式不同（如 123, 123.23, "true", ["id1","id2"], "2006-01-02 15:04:05"）
//
// 示例值：\"231\"
func (builder *CustomFieldDataBuilder) Value(value string) *CustomFieldDataBuilder {
	builder.value = value
	builder.valueFlag = true
	return builder
}

func (builder *CustomFieldDataBuilder) Build() *CustomFieldData {
	req := &CustomFieldData{}
	if builder.customApiNameFlag {
		req.CustomApiName = &builder.customApiName

	}
	if builder.nameFlag {
		req.Name = builder.name
	}
	if builder.typeFlag {
		req.Type = &builder.type_

	}
	if builder.valueFlag {
		req.Value = &builder.value

	}
	return req
}

type CustomName struct {
	ZhCn *string `json:"zh_cn,omitempty"` // 中文
	EnUs *string `json:"en_us,omitempty"` // 英文
}

type CustomNameBuilder struct {
	zhCn     string // 中文
	zhCnFlag bool
	enUs     string // 英文
	enUsFlag bool
}

func NewCustomNameBuilder() *CustomNameBuilder {
	builder := &CustomNameBuilder{}
	return builder
}

// 中文
//
// 示例值：自定义姓名
func (builder *CustomNameBuilder) ZhCn(zhCn string) *CustomNameBuilder {
	builder.zhCn = zhCn
	builder.zhCnFlag = true
	return builder
}

// 英文
//
// 示例值：Custom Name
func (builder *CustomNameBuilder) EnUs(enUs string) *CustomNameBuilder {
	builder.enUs = enUs
	builder.enUsFlag = true
	return builder
}

func (builder *CustomNameBuilder) Build() *CustomName {
	req := &CustomName{}
	if builder.zhCnFlag {
		req.ZhCn = &builder.zhCn

	}
	if builder.enUsFlag {
		req.EnUs = &builder.enUs

	}
	return req
}

type CustomOrg struct {
	ObjectApiName   *string       `json:"object_api_name,omitempty"`   // 组织类型编码
	Names           []*I18n       `json:"names,omitempty"`             // 组织名称
	Code            *string       `json:"code,omitempty"`              // 编码
	ParentId        *string       `json:"parent_id,omitempty"`         // 上级组织 ID
	ManagerIds      []string      `json:"manager_ids,omitempty"`       // 负责人ID 列表
	Description     []*I18n       `json:"description,omitempty"`       // 描述
	EffectiveTime   *string       `json:"effective_time,omitempty"`    // 生效时间
	OrgRoles        []*OrgRole    `json:"org_roles,omitempty"`         // 组织角色
	MatchRuleGroups []*MatchRules `json:"match_rule_groups,omitempty"` // 匹配规则组，组间并集
	Active          *bool         `json:"active,omitempty"`            // 是否启用
	OrgId           *string       `json:"org_id,omitempty"`            // 组织ID
}

type CustomOrgBuilder struct {
	objectApiName       string // 组织类型编码
	objectApiNameFlag   bool
	names               []*I18n // 组织名称
	namesFlag           bool
	code                string // 编码
	codeFlag            bool
	parentId            string // 上级组织 ID
	parentIdFlag        bool
	managerIds          []string // 负责人ID 列表
	managerIdsFlag      bool
	description         []*I18n // 描述
	descriptionFlag     bool
	effectiveTime       string // 生效时间
	effectiveTimeFlag   bool
	orgRoles            []*OrgRole // 组织角色
	orgRolesFlag        bool
	matchRuleGroups     []*MatchRules // 匹配规则组，组间并集
	matchRuleGroupsFlag bool
	active              bool // 是否启用
	activeFlag          bool
	orgId               string // 组织ID
	orgIdFlag           bool
}

func NewCustomOrgBuilder() *CustomOrgBuilder {
	builder := &CustomOrgBuilder{}
	return builder
}

// 组织类型编码
//
// 示例值：apiname__c
func (builder *CustomOrgBuilder) ObjectApiName(objectApiName string) *CustomOrgBuilder {
	builder.objectApiName = objectApiName
	builder.objectApiNameFlag = true
	return builder
}

// 组织名称
//
// 示例值：
func (builder *CustomOrgBuilder) Names(names []*I18n) *CustomOrgBuilder {
	builder.names = names
	builder.namesFlag = true
	return builder
}

// 编码
//
// 示例值：MDPD00000023
func (builder *CustomOrgBuilder) Code(code string) *CustomOrgBuilder {
	builder.code = code
	builder.codeFlag = true
	return builder
}

// 上级组织 ID
//
// 示例值：6862995757234914824
func (builder *CustomOrgBuilder) ParentId(parentId string) *CustomOrgBuilder {
	builder.parentId = parentId
	builder.parentIdFlag = true
	return builder
}

// 负责人ID 列表
//
// 示例值：
func (builder *CustomOrgBuilder) ManagerIds(managerIds []string) *CustomOrgBuilder {
	builder.managerIds = managerIds
	builder.managerIdsFlag = true
	return builder
}

// 描述
//
// 示例值：
func (builder *CustomOrgBuilder) Description(description []*I18n) *CustomOrgBuilder {
	builder.description = description
	builder.descriptionFlag = true
	return builder
}

// 生效时间
//
// 示例值：2020-01-01
func (builder *CustomOrgBuilder) EffectiveTime(effectiveTime string) *CustomOrgBuilder {
	builder.effectiveTime = effectiveTime
	builder.effectiveTimeFlag = true
	return builder
}

// 组织角色
//
// 示例值：
func (builder *CustomOrgBuilder) OrgRoles(orgRoles []*OrgRole) *CustomOrgBuilder {
	builder.orgRoles = orgRoles
	builder.orgRolesFlag = true
	return builder
}

// 匹配规则组，组间并集
//
// 示例值：
func (builder *CustomOrgBuilder) MatchRuleGroups(matchRuleGroups []*MatchRules) *CustomOrgBuilder {
	builder.matchRuleGroups = matchRuleGroups
	builder.matchRuleGroupsFlag = true
	return builder
}

// 是否启用
//
// 示例值：true
func (builder *CustomOrgBuilder) Active(active bool) *CustomOrgBuilder {
	builder.active = active
	builder.activeFlag = true
	return builder
}

// 组织ID
//
// 示例值：6862995757234914824
func (builder *CustomOrgBuilder) OrgId(orgId string) *CustomOrgBuilder {
	builder.orgId = orgId
	builder.orgIdFlag = true
	return builder
}

func (builder *CustomOrgBuilder) Build() *CustomOrg {
	req := &CustomOrg{}
	if builder.objectApiNameFlag {
		req.ObjectApiName = &builder.objectApiName

	}
	if builder.namesFlag {
		req.Names = builder.names
	}
	if builder.codeFlag {
		req.Code = &builder.code

	}
	if builder.parentIdFlag {
		req.ParentId = &builder.parentId

	}
	if builder.managerIdsFlag {
		req.ManagerIds = builder.managerIds
	}
	if builder.descriptionFlag {
		req.Description = builder.description
	}
	if builder.effectiveTimeFlag {
		req.EffectiveTime = &builder.effectiveTime

	}
	if builder.orgRolesFlag {
		req.OrgRoles = builder.orgRoles
	}
	if builder.matchRuleGroupsFlag {
		req.MatchRuleGroups = builder.matchRuleGroups
	}
	if builder.activeFlag {
		req.Active = &builder.active

	}
	if builder.orgIdFlag {
		req.OrgId = &builder.orgId

	}
	return req
}

type CustomOrgCreate struct {
	ObjectApiName   *string          `json:"object_api_name,omitempty"`   // 组织类型编码
	Names           []*I18n          `json:"names,omitempty"`             // 组织名称
	Code            *string          `json:"code,omitempty"`              // 编码
	ParentId        *string          `json:"parent_id,omitempty"`         // 上级组织 ID
	ManagerIds      []string         `json:"manager_ids,omitempty"`       // 负责人ID 列表
	Description     []*I18n          `json:"description,omitempty"`       // 描述
	EffectiveTime   *string          `json:"effective_time,omitempty"`    // 生效时间
	OrgRoles        []*OrgRoleUpdate `json:"org_roles,omitempty"`         // 组织角色
	MatchRuleGroups []*MatchRules    `json:"match_rule_groups,omitempty"` // 匹配规则组，组间并集
}

type CustomOrgCreateBuilder struct {
	objectApiName       string // 组织类型编码
	objectApiNameFlag   bool
	names               []*I18n // 组织名称
	namesFlag           bool
	code                string // 编码
	codeFlag            bool
	parentId            string // 上级组织 ID
	parentIdFlag        bool
	managerIds          []string // 负责人ID 列表
	managerIdsFlag      bool
	description         []*I18n // 描述
	descriptionFlag     bool
	effectiveTime       string // 生效时间
	effectiveTimeFlag   bool
	orgRoles            []*OrgRoleUpdate // 组织角色
	orgRolesFlag        bool
	matchRuleGroups     []*MatchRules // 匹配规则组，组间并集
	matchRuleGroupsFlag bool
}

func NewCustomOrgCreateBuilder() *CustomOrgCreateBuilder {
	builder := &CustomOrgCreateBuilder{}
	return builder
}

// 组织类型编码
//
// 示例值：apiname__c
func (builder *CustomOrgCreateBuilder) ObjectApiName(objectApiName string) *CustomOrgCreateBuilder {
	builder.objectApiName = objectApiName
	builder.objectApiNameFlag = true
	return builder
}

// 组织名称
//
// 示例值：
func (builder *CustomOrgCreateBuilder) Names(names []*I18n) *CustomOrgCreateBuilder {
	builder.names = names
	builder.namesFlag = true
	return builder
}

// 编码
//
// 示例值：MDPD00000023
func (builder *CustomOrgCreateBuilder) Code(code string) *CustomOrgCreateBuilder {
	builder.code = code
	builder.codeFlag = true
	return builder
}

// 上级组织 ID
//
// 示例值：6862995757234914824
func (builder *CustomOrgCreateBuilder) ParentId(parentId string) *CustomOrgCreateBuilder {
	builder.parentId = parentId
	builder.parentIdFlag = true
	return builder
}

// 负责人ID 列表
//
// 示例值：
func (builder *CustomOrgCreateBuilder) ManagerIds(managerIds []string) *CustomOrgCreateBuilder {
	builder.managerIds = managerIds
	builder.managerIdsFlag = true
	return builder
}

// 描述
//
// 示例值：
func (builder *CustomOrgCreateBuilder) Description(description []*I18n) *CustomOrgCreateBuilder {
	builder.description = description
	builder.descriptionFlag = true
	return builder
}

// 生效时间
//
// 示例值：2020-01-01
func (builder *CustomOrgCreateBuilder) EffectiveTime(effectiveTime string) *CustomOrgCreateBuilder {
	builder.effectiveTime = effectiveTime
	builder.effectiveTimeFlag = true
	return builder
}

// 组织角色
//
// 示例值：
func (builder *CustomOrgCreateBuilder) OrgRoles(orgRoles []*OrgRoleUpdate) *CustomOrgCreateBuilder {
	builder.orgRoles = orgRoles
	builder.orgRolesFlag = true
	return builder
}

// 匹配规则组，组间并集
//
// 示例值：
func (builder *CustomOrgCreateBuilder) MatchRuleGroups(matchRuleGroups []*MatchRules) *CustomOrgCreateBuilder {
	builder.matchRuleGroups = matchRuleGroups
	builder.matchRuleGroupsFlag = true
	return builder
}

func (builder *CustomOrgCreateBuilder) Build() *CustomOrgCreate {
	req := &CustomOrgCreate{}
	if builder.objectApiNameFlag {
		req.ObjectApiName = &builder.objectApiName

	}
	if builder.namesFlag {
		req.Names = builder.names
	}
	if builder.codeFlag {
		req.Code = &builder.code

	}
	if builder.parentIdFlag {
		req.ParentId = &builder.parentId

	}
	if builder.managerIdsFlag {
		req.ManagerIds = builder.managerIds
	}
	if builder.descriptionFlag {
		req.Description = builder.description
	}
	if builder.effectiveTimeFlag {
		req.EffectiveTime = &builder.effectiveTime

	}
	if builder.orgRolesFlag {
		req.OrgRoles = builder.orgRoles
	}
	if builder.matchRuleGroupsFlag {
		req.MatchRuleGroups = builder.matchRuleGroups
	}
	return req
}

type CustomOrgUpdate struct {
	ObjectApiName *string          `json:"object_api_name,omitempty"` // 组织类型编码
	Names         []*I18n          `json:"names,omitempty"`           // 组织名称
	Code          *string          `json:"code,omitempty"`            // 组织编码
	ParentId      *string          `json:"parent_id,omitempty"`       // 上级组织 ID
	ManagerIds    []string         `json:"manager_ids,omitempty"`     // 负责人ID 列表
	Description   []*I18n          `json:"description,omitempty"`     // 描述
	EffectiveTime *string          `json:"effective_time,omitempty"`  // 生效时间
	OrgRoles      []*OrgRoleUpdate `json:"org_roles,omitempty"`       // 组织角色
}

type CustomOrgUpdateBuilder struct {
	objectApiName     string // 组织类型编码
	objectApiNameFlag bool
	names             []*I18n // 组织名称
	namesFlag         bool
	code              string // 组织编码
	codeFlag          bool
	parentId          string // 上级组织 ID
	parentIdFlag      bool
	managerIds        []string // 负责人ID 列表
	managerIdsFlag    bool
	description       []*I18n // 描述
	descriptionFlag   bool
	effectiveTime     string // 生效时间
	effectiveTimeFlag bool
	orgRoles          []*OrgRoleUpdate // 组织角色
	orgRolesFlag      bool
}

func NewCustomOrgUpdateBuilder() *CustomOrgUpdateBuilder {
	builder := &CustomOrgUpdateBuilder{}
	return builder
}

// 组织类型编码
//
// 示例值：apiname__c
func (builder *CustomOrgUpdateBuilder) ObjectApiName(objectApiName string) *CustomOrgUpdateBuilder {
	builder.objectApiName = objectApiName
	builder.objectApiNameFlag = true
	return builder
}

// 组织名称
//
// 示例值：
func (builder *CustomOrgUpdateBuilder) Names(names []*I18n) *CustomOrgUpdateBuilder {
	builder.names = names
	builder.namesFlag = true
	return builder
}

// 组织编码
//
// 示例值：MDPD00000023
func (builder *CustomOrgUpdateBuilder) Code(code string) *CustomOrgUpdateBuilder {
	builder.code = code
	builder.codeFlag = true
	return builder
}

// 上级组织 ID
//
// 示例值：6862995757234914824
func (builder *CustomOrgUpdateBuilder) ParentId(parentId string) *CustomOrgUpdateBuilder {
	builder.parentId = parentId
	builder.parentIdFlag = true
	return builder
}

// 负责人ID 列表
//
// 示例值：
func (builder *CustomOrgUpdateBuilder) ManagerIds(managerIds []string) *CustomOrgUpdateBuilder {
	builder.managerIds = managerIds
	builder.managerIdsFlag = true
	return builder
}

// 描述
//
// 示例值：
func (builder *CustomOrgUpdateBuilder) Description(description []*I18n) *CustomOrgUpdateBuilder {
	builder.description = description
	builder.descriptionFlag = true
	return builder
}

// 生效时间
//
// 示例值：2020-01-01
func (builder *CustomOrgUpdateBuilder) EffectiveTime(effectiveTime string) *CustomOrgUpdateBuilder {
	builder.effectiveTime = effectiveTime
	builder.effectiveTimeFlag = true
	return builder
}

// 组织角色
//
// 示例值：
func (builder *CustomOrgUpdateBuilder) OrgRoles(orgRoles []*OrgRoleUpdate) *CustomOrgUpdateBuilder {
	builder.orgRoles = orgRoles
	builder.orgRolesFlag = true
	return builder
}

func (builder *CustomOrgUpdateBuilder) Build() *CustomOrgUpdate {
	req := &CustomOrgUpdate{}
	if builder.objectApiNameFlag {
		req.ObjectApiName = &builder.objectApiName

	}
	if builder.namesFlag {
		req.Names = builder.names
	}
	if builder.codeFlag {
		req.Code = &builder.code

	}
	if builder.parentIdFlag {
		req.ParentId = &builder.parentId

	}
	if builder.managerIdsFlag {
		req.ManagerIds = builder.managerIds
	}
	if builder.descriptionFlag {
		req.Description = builder.description
	}
	if builder.effectiveTimeFlag {
		req.EffectiveTime = &builder.effectiveTime

	}
	if builder.orgRolesFlag {
		req.OrgRoles = builder.orgRoles
	}
	return req
}

type CustomValue struct {
	ValueBoolean *bool   `json:"value_boolean,omitempty"` // 布尔类型的字段值
	ValueEnumId  *string `json:"value_enum_id,omitempty"` // 枚举类型的字段的枚举值 ID
}

type CustomValueBuilder struct {
	valueBoolean     bool // 布尔类型的字段值
	valueBooleanFlag bool
	valueEnumId      string // 枚举类型的字段的枚举值 ID
	valueEnumIdFlag  bool
}

func NewCustomValueBuilder() *CustomValueBuilder {
	builder := &CustomValueBuilder{}
	return builder
}

// 布尔类型的字段值
//
// 示例值：false
func (builder *CustomValueBuilder) ValueBoolean(valueBoolean bool) *CustomValueBuilder {
	builder.valueBoolean = valueBoolean
	builder.valueBooleanFlag = true
	return builder
}

// 枚举类型的字段的枚举值 ID
//
// 示例值：sadasdas
func (builder *CustomValueBuilder) ValueEnumId(valueEnumId string) *CustomValueBuilder {
	builder.valueEnumId = valueEnumId
	builder.valueEnumIdFlag = true
	return builder
}

func (builder *CustomValueBuilder) Build() *CustomValue {
	req := &CustomValue{}
	if builder.valueBooleanFlag {
		req.ValueBoolean = &builder.valueBoolean

	}
	if builder.valueEnumIdFlag {
		req.ValueEnumId = &builder.valueEnumId

	}
	return req
}

type DataengineI18n struct {
	ZhCn *string `json:"zh_cn,omitempty"` // 中文值
	EnUs *string `json:"en_us,omitempty"` // 英文值
}

type DataengineI18nBuilder struct {
	zhCn     string // 中文值
	zhCnFlag bool
	enUs     string // 英文值
	enUsFlag bool
}

func NewDataengineI18nBuilder() *DataengineI18nBuilder {
	builder := &DataengineI18nBuilder{}
	return builder
}

// 中文值
//
// 示例值：中文
func (builder *DataengineI18nBuilder) ZhCn(zhCn string) *DataengineI18nBuilder {
	builder.zhCn = zhCn
	builder.zhCnFlag = true
	return builder
}

// 英文值
//
// 示例值：English
func (builder *DataengineI18nBuilder) EnUs(enUs string) *DataengineI18nBuilder {
	builder.enUs = enUs
	builder.enUsFlag = true
	return builder
}

func (builder *DataengineI18nBuilder) Build() *DataengineI18n {
	req := &DataengineI18n{}
	if builder.zhCnFlag {
		req.ZhCn = &builder.zhCn

	}
	if builder.enUsFlag {
		req.EnUs = &builder.enUs

	}
	return req
}

type Department struct {
	Id                 *string            `json:"id,omitempty"`                   // 部门 ID
	VersionId          *string            `json:"version_id,omitempty"`           // 部门记录版本 ID
	DepartmentName     []*I18n            `json:"department_name,omitempty"`      // 部门名称
	SubType            *Enum              `json:"sub_type,omitempty"`             // 部门类型，枚举值可通过文档【飞书人事枚举常量】部门子类型（department_sub_type）枚举定义部分获得
	ParentDepartmentId *string            `json:"parent_department_id,omitempty"` // 上级部门 ID
	Manager            *string            `json:"manager,omitempty"`              // 部门负责人雇佣 ID，枚举值及详细信息可通过【查询员工信息】接口查询获得
	TreeOrder          *string            `json:"tree_order,omitempty"`           // 树形排序，代表同层级的部门排序序号
	ListOrder          *string            `json:"list_order,omitempty"`           // 列表排序，代表所有部门的混排序号
	Code               *string            `json:"code,omitempty"`                 // 编码
	IsRoot             *bool              `json:"is_root,omitempty"`              // 是否根部门
	IsConfidential     *bool              `json:"is_confidential,omitempty"`      // 是否保密
	EffectiveDate      *string            `json:"effective_date,omitempty"`       // 生效日期
	ExpirationDate     *string            `json:"expiration_date,omitempty"`      // 失效日期
	Active             *bool              `json:"active,omitempty"`               // 是否启用
	Description        []*I18n            `json:"description,omitempty"`          // 描述
	CustomFields       []*CustomFieldData `json:"custom_fields,omitempty"`        // 自定义字段
	StaffingModel      *Enum              `json:"staffing_model,omitempty"`       // 是否使用职务
}

type DepartmentBuilder struct {
	id                     string // 部门 ID
	idFlag                 bool
	versionId              string // 部门记录版本 ID
	versionIdFlag          bool
	departmentName         []*I18n // 部门名称
	departmentNameFlag     bool
	subType                *Enum // 部门类型，枚举值可通过文档【飞书人事枚举常量】部门子类型（department_sub_type）枚举定义部分获得
	subTypeFlag            bool
	parentDepartmentId     string // 上级部门 ID
	parentDepartmentIdFlag bool
	manager                string // 部门负责人雇佣 ID，枚举值及详细信息可通过【查询员工信息】接口查询获得
	managerFlag            bool
	treeOrder              string // 树形排序，代表同层级的部门排序序号
	treeOrderFlag          bool
	listOrder              string // 列表排序，代表所有部门的混排序号
	listOrderFlag          bool
	code                   string // 编码
	codeFlag               bool
	isRoot                 bool // 是否根部门
	isRootFlag             bool
	isConfidential         bool // 是否保密
	isConfidentialFlag     bool
	effectiveDate          string // 生效日期
	effectiveDateFlag      bool
	expirationDate         string // 失效日期
	expirationDateFlag     bool
	active                 bool // 是否启用
	activeFlag             bool
	description            []*I18n // 描述
	descriptionFlag        bool
	customFields           []*CustomFieldData // 自定义字段
	customFieldsFlag       bool
	staffingModel          *Enum // 是否使用职务
	staffingModelFlag      bool
}

func NewDepartmentBuilder() *DepartmentBuilder {
	builder := &DepartmentBuilder{}
	return builder
}

// 部门 ID
//
// 示例值：4719456877659520852
func (builder *DepartmentBuilder) Id(id string) *DepartmentBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

// 部门记录版本 ID
//
// 示例值：6890452208593372611
func (builder *DepartmentBuilder) VersionId(versionId string) *DepartmentBuilder {
	builder.versionId = versionId
	builder.versionIdFlag = true
	return builder
}

// 部门名称
//
// 示例值：
func (builder *DepartmentBuilder) DepartmentName(departmentName []*I18n) *DepartmentBuilder {
	builder.departmentName = departmentName
	builder.departmentNameFlag = true
	return builder
}

// 部门类型，枚举值可通过文档【飞书人事枚举常量】部门子类型（department_sub_type）枚举定义部分获得
//
// 示例值：
func (builder *DepartmentBuilder) SubType(subType *Enum) *DepartmentBuilder {
	builder.subType = subType
	builder.subTypeFlag = true
	return builder
}

// 上级部门 ID
//
// 示例值：4719456877659520111
func (builder *DepartmentBuilder) ParentDepartmentId(parentDepartmentId string) *DepartmentBuilder {
	builder.parentDepartmentId = parentDepartmentId
	builder.parentDepartmentIdFlag = true
	return builder
}

// 部门负责人雇佣 ID，枚举值及详细信息可通过【查询员工信息】接口查询获得
//
// 示例值：6893013238632416777
func (builder *DepartmentBuilder) Manager(manager string) *DepartmentBuilder {
	builder.manager = manager
	builder.managerFlag = true
	return builder
}

// 树形排序，代表同层级的部门排序序号
//
// 示例值：001000
func (builder *DepartmentBuilder) TreeOrder(treeOrder string) *DepartmentBuilder {
	builder.treeOrder = treeOrder
	builder.treeOrderFlag = true
	return builder
}

// 列表排序，代表所有部门的混排序号
//
// 示例值：001000-001000
func (builder *DepartmentBuilder) ListOrder(listOrder string) *DepartmentBuilder {
	builder.listOrder = listOrder
	builder.listOrderFlag = true
	return builder
}

// 编码
//
// 示例值：D00000456
func (builder *DepartmentBuilder) Code(code string) *DepartmentBuilder {
	builder.code = code
	builder.codeFlag = true
	return builder
}

// 是否根部门
//
// 示例值：false
func (builder *DepartmentBuilder) IsRoot(isRoot bool) *DepartmentBuilder {
	builder.isRoot = isRoot
	builder.isRootFlag = true
	return builder
}

// 是否保密
//
// 示例值：false
func (builder *DepartmentBuilder) IsConfidential(isConfidential bool) *DepartmentBuilder {
	builder.isConfidential = isConfidential
	builder.isConfidentialFlag = true
	return builder
}

// 生效日期
//
// 示例值：2020-05-01
func (builder *DepartmentBuilder) EffectiveDate(effectiveDate string) *DepartmentBuilder {
	builder.effectiveDate = effectiveDate
	builder.effectiveDateFlag = true
	return builder
}

// 失效日期
//
// 示例值：2020-05-02
func (builder *DepartmentBuilder) ExpirationDate(expirationDate string) *DepartmentBuilder {
	builder.expirationDate = expirationDate
	builder.expirationDateFlag = true
	return builder
}

// 是否启用
//
// 示例值：true
func (builder *DepartmentBuilder) Active(active bool) *DepartmentBuilder {
	builder.active = active
	builder.activeFlag = true
	return builder
}

// 描述
//
// 示例值：
func (builder *DepartmentBuilder) Description(description []*I18n) *DepartmentBuilder {
	builder.description = description
	builder.descriptionFlag = true
	return builder
}

// 自定义字段
//
// 示例值：
func (builder *DepartmentBuilder) CustomFields(customFields []*CustomFieldData) *DepartmentBuilder {
	builder.customFields = customFields
	builder.customFieldsFlag = true
	return builder
}

// 是否使用职务
//
// 示例值：
func (builder *DepartmentBuilder) StaffingModel(staffingModel *Enum) *DepartmentBuilder {
	builder.staffingModel = staffingModel
	builder.staffingModelFlag = true
	return builder
}

func (builder *DepartmentBuilder) Build() *Department {
	req := &Department{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.versionIdFlag {
		req.VersionId = &builder.versionId

	}
	if builder.departmentNameFlag {
		req.DepartmentName = builder.departmentName
	}
	if builder.subTypeFlag {
		req.SubType = builder.subType
	}
	if builder.parentDepartmentIdFlag {
		req.ParentDepartmentId = &builder.parentDepartmentId

	}
	if builder.managerFlag {
		req.Manager = &builder.manager

	}
	if builder.treeOrderFlag {
		req.TreeOrder = &builder.treeOrder

	}
	if builder.listOrderFlag {
		req.ListOrder = &builder.listOrder

	}
	if builder.codeFlag {
		req.Code = &builder.code

	}
	if builder.isRootFlag {
		req.IsRoot = &builder.isRoot

	}
	if builder.isConfidentialFlag {
		req.IsConfidential = &builder.isConfidential

	}
	if builder.effectiveDateFlag {
		req.EffectiveDate = &builder.effectiveDate

	}
	if builder.expirationDateFlag {
		req.ExpirationDate = &builder.expirationDate

	}
	if builder.activeFlag {
		req.Active = &builder.active

	}
	if builder.descriptionFlag {
		req.Description = builder.description
	}
	if builder.customFieldsFlag {
		req.CustomFields = builder.customFields
	}
	if builder.staffingModelFlag {
		req.StaffingModel = builder.staffingModel
	}
	return req
}

type DepartmentChange struct {
	DepartmentChangeId   *string             `json:"department_change_id,omitempty"`   // 部门调整记录 ID
	DepartmentId         *string             `json:"department_id,omitempty"`          // 部门 ID
	DraftDepartmentId    *string             `json:"draft_department_id,omitempty"`    // 调整部门 ID ，调整审批未生效前会返回格式为 td_xxx 的临时 ID
	DepartmentChangeType *string             `json:"department_change_type,omitempty"` // 调整类型
	ReorganizationInfo   *ReorganizationInfo `json:"reorganization_info,omitempty"`    // 调整详细信息
}

type DepartmentChangeBuilder struct {
	departmentChangeId       string // 部门调整记录 ID
	departmentChangeIdFlag   bool
	departmentId             string // 部门 ID
	departmentIdFlag         bool
	draftDepartmentId        string // 调整部门 ID ，调整审批未生效前会返回格式为 td_xxx 的临时 ID
	draftDepartmentIdFlag    bool
	departmentChangeType     string // 调整类型
	departmentChangeTypeFlag bool
	reorganizationInfo       *ReorganizationInfo // 调整详细信息
	reorganizationInfoFlag   bool
}

func NewDepartmentChangeBuilder() *DepartmentChangeBuilder {
	builder := &DepartmentChangeBuilder{}
	return builder
}

// 部门调整记录 ID
//
// 示例值：6991776076699549697
func (builder *DepartmentChangeBuilder) DepartmentChangeId(departmentChangeId string) *DepartmentChangeBuilder {
	builder.departmentChangeId = departmentChangeId
	builder.departmentChangeIdFlag = true
	return builder
}

// 部门 ID
//
// 示例值：6966236933198579208
func (builder *DepartmentChangeBuilder) DepartmentId(departmentId string) *DepartmentChangeBuilder {
	builder.departmentId = departmentId
	builder.departmentIdFlag = true
	return builder
}

// 调整部门 ID ，调整审批未生效前会返回格式为 td_xxx 的临时 ID
//
// 示例值：6966236933198579208
func (builder *DepartmentChangeBuilder) DraftDepartmentId(draftDepartmentId string) *DepartmentChangeBuilder {
	builder.draftDepartmentId = draftDepartmentId
	builder.draftDepartmentIdFlag = true
	return builder
}

// 调整类型
//
// 示例值：Create
func (builder *DepartmentChangeBuilder) DepartmentChangeType(departmentChangeType string) *DepartmentChangeBuilder {
	builder.departmentChangeType = departmentChangeType
	builder.departmentChangeTypeFlag = true
	return builder
}

// 调整详细信息
//
// 示例值：
func (builder *DepartmentChangeBuilder) ReorganizationInfo(reorganizationInfo *ReorganizationInfo) *DepartmentChangeBuilder {
	builder.reorganizationInfo = reorganizationInfo
	builder.reorganizationInfoFlag = true
	return builder
}

func (builder *DepartmentChangeBuilder) Build() *DepartmentChange {
	req := &DepartmentChange{}
	if builder.departmentChangeIdFlag {
		req.DepartmentChangeId = &builder.departmentChangeId

	}
	if builder.departmentIdFlag {
		req.DepartmentId = &builder.departmentId

	}
	if builder.draftDepartmentIdFlag {
		req.DraftDepartmentId = &builder.draftDepartmentId

	}
	if builder.departmentChangeTypeFlag {
		req.DepartmentChangeType = &builder.departmentChangeType

	}
	if builder.reorganizationInfoFlag {
		req.ReorganizationInfo = builder.reorganizationInfo
	}
	return req
}

type DepartmentForPatch struct {
	Id               *string            `json:"id,omitempty"`                // 实体在CoreHR内部的唯一键
	SubType          *Enum              `json:"sub_type,omitempty"`          // 子类型
	Manager          *string            `json:"manager,omitempty"`           // 部门负责人
	IsConfidential   *bool              `json:"is_confidential,omitempty"`   // 是否保密
	HiberarchyCommon *HiberarchyCommon  `json:"hiberarchy_common,omitempty"` // 层级关系，内层字段见实体
	EffectiveTime    *string            `json:"effective_time,omitempty"`    // 生效时间
	CustomFields     []*ObjectFieldData `json:"custom_fields,omitempty"`     // 自定义字段
	CostCenterId     *string            `json:"cost_center_id,omitempty"`    // 成本中心id
	StaffingModel    *Enum              `json:"staffing_model,omitempty"`    // 是否使用职务
}

type DepartmentForPatchBuilder struct {
	id                   string // 实体在CoreHR内部的唯一键
	idFlag               bool
	subType              *Enum // 子类型
	subTypeFlag          bool
	manager              string // 部门负责人
	managerFlag          bool
	isConfidential       bool // 是否保密
	isConfidentialFlag   bool
	hiberarchyCommon     *HiberarchyCommon // 层级关系，内层字段见实体
	hiberarchyCommonFlag bool
	effectiveTime        string // 生效时间
	effectiveTimeFlag    bool
	customFields         []*ObjectFieldData // 自定义字段
	customFieldsFlag     bool
	costCenterId         string // 成本中心id
	costCenterIdFlag     bool
	staffingModel        *Enum // 是否使用职务
	staffingModelFlag    bool
}

func NewDepartmentForPatchBuilder() *DepartmentForPatchBuilder {
	builder := &DepartmentForPatchBuilder{}
	return builder
}

// 实体在CoreHR内部的唯一键
//
// 示例值：4719456877659520852
func (builder *DepartmentForPatchBuilder) Id(id string) *DepartmentForPatchBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

// 子类型
//
// 示例值：
func (builder *DepartmentForPatchBuilder) SubType(subType *Enum) *DepartmentForPatchBuilder {
	builder.subType = subType
	builder.subTypeFlag = true
	return builder
}

// 部门负责人
//
// 示例值：6893013238632416776
func (builder *DepartmentForPatchBuilder) Manager(manager string) *DepartmentForPatchBuilder {
	builder.manager = manager
	builder.managerFlag = true
	return builder
}

// 是否保密
//
// 示例值：true
func (builder *DepartmentForPatchBuilder) IsConfidential(isConfidential bool) *DepartmentForPatchBuilder {
	builder.isConfidential = isConfidential
	builder.isConfidentialFlag = true
	return builder
}

// 层级关系，内层字段见实体
//
// 示例值：
func (builder *DepartmentForPatchBuilder) HiberarchyCommon(hiberarchyCommon *HiberarchyCommon) *DepartmentForPatchBuilder {
	builder.hiberarchyCommon = hiberarchyCommon
	builder.hiberarchyCommonFlag = true
	return builder
}

// 生效时间
//
// 示例值：2020-05-01 00:00:00
func (builder *DepartmentForPatchBuilder) EffectiveTime(effectiveTime string) *DepartmentForPatchBuilder {
	builder.effectiveTime = effectiveTime
	builder.effectiveTimeFlag = true
	return builder
}

// 自定义字段
//
// 示例值：
func (builder *DepartmentForPatchBuilder) CustomFields(customFields []*ObjectFieldData) *DepartmentForPatchBuilder {
	builder.customFields = customFields
	builder.customFieldsFlag = true
	return builder
}

// 成本中心id
//
// 示例值：7142384817131652652
func (builder *DepartmentForPatchBuilder) CostCenterId(costCenterId string) *DepartmentForPatchBuilder {
	builder.costCenterId = costCenterId
	builder.costCenterIdFlag = true
	return builder
}

// 是否使用职务
//
// 示例值：
func (builder *DepartmentForPatchBuilder) StaffingModel(staffingModel *Enum) *DepartmentForPatchBuilder {
	builder.staffingModel = staffingModel
	builder.staffingModelFlag = true
	return builder
}

func (builder *DepartmentForPatchBuilder) Build() *DepartmentForPatch {
	req := &DepartmentForPatch{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.subTypeFlag {
		req.SubType = builder.subType
	}
	if builder.managerFlag {
		req.Manager = &builder.manager

	}
	if builder.isConfidentialFlag {
		req.IsConfidential = &builder.isConfidential

	}
	if builder.hiberarchyCommonFlag {
		req.HiberarchyCommon = builder.hiberarchyCommon
	}
	if builder.effectiveTimeFlag {
		req.EffectiveTime = &builder.effectiveTime

	}
	if builder.customFieldsFlag {
		req.CustomFields = builder.customFields
	}
	if builder.costCenterIdFlag {
		req.CostCenterId = &builder.costCenterId

	}
	if builder.staffingModelFlag {
		req.StaffingModel = builder.staffingModel
	}
	return req
}

type DepartmentHrbp struct {
	DepartmentId *string  `json:"department_id,omitempty"` // 部门 ID
	HrbpIds      []string `json:"hrbp_ids,omitempty"`      // 部门 HRBP 雇佣 ID
}

type DepartmentHrbpBuilder struct {
	departmentId     string // 部门 ID
	departmentIdFlag bool
	hrbpIds          []string // 部门 HRBP 雇佣 ID
	hrbpIdsFlag      bool
}

func NewDepartmentHrbpBuilder() *DepartmentHrbpBuilder {
	builder := &DepartmentHrbpBuilder{}
	return builder
}

// 部门 ID
//
// 示例值：4719456877659520852
func (builder *DepartmentHrbpBuilder) DepartmentId(departmentId string) *DepartmentHrbpBuilder {
	builder.departmentId = departmentId
	builder.departmentIdFlag = true
	return builder
}

// 部门 HRBP 雇佣 ID
//
// 示例值：
func (builder *DepartmentHrbpBuilder) HrbpIds(hrbpIds []string) *DepartmentHrbpBuilder {
	builder.hrbpIds = hrbpIds
	builder.hrbpIdsFlag = true
	return builder
}

func (builder *DepartmentHrbpBuilder) Build() *DepartmentHrbp {
	req := &DepartmentHrbp{}
	if builder.departmentIdFlag {
		req.DepartmentId = &builder.departmentId

	}
	if builder.hrbpIdsFlag {
		req.HrbpIds = builder.hrbpIds
	}
	return req
}

type DepartmentId struct {
	DepartmentId     *string `json:"department_id,omitempty"`      //
	OpenDepartmentId *string `json:"open_department_id,omitempty"` //
}

type DepartmentIdBuilder struct {
	departmentId         string //
	departmentIdFlag     bool
	openDepartmentId     string //
	openDepartmentIdFlag bool
}

func NewDepartmentIdBuilder() *DepartmentIdBuilder {
	builder := &DepartmentIdBuilder{}
	return builder
}

// 示例值：
func (builder *DepartmentIdBuilder) DepartmentId(departmentId string) *DepartmentIdBuilder {
	builder.departmentId = departmentId
	builder.departmentIdFlag = true
	return builder
}

// 示例值：
func (builder *DepartmentIdBuilder) OpenDepartmentId(openDepartmentId string) *DepartmentIdBuilder {
	builder.openDepartmentId = openDepartmentId
	builder.openDepartmentIdFlag = true
	return builder
}

func (builder *DepartmentIdBuilder) Build() *DepartmentId {
	req := &DepartmentId{}
	if builder.departmentIdFlag {
		req.DepartmentId = &builder.departmentId

	}
	if builder.openDepartmentIdFlag {
		req.OpenDepartmentId = &builder.openDepartmentId

	}
	return req
}

type DepartmentParentInfo struct {
	DepartmentId       *string `json:"department_id,omitempty"`        // 部门 ID
	DepartmentName     []*I18n `json:"department_name,omitempty"`      // 部门名称
	ParentDepartmentId *string `json:"parent_department_id,omitempty"` // 上级部门 ID
	Active             *bool   `json:"active,omitempty"`               // 是否启用
	IsRoot             *bool   `json:"is_root,omitempty"`              // 是否根部门
}

type DepartmentParentInfoBuilder struct {
	departmentId           string // 部门 ID
	departmentIdFlag       bool
	departmentName         []*I18n // 部门名称
	departmentNameFlag     bool
	parentDepartmentId     string // 上级部门 ID
	parentDepartmentIdFlag bool
	active                 bool // 是否启用
	activeFlag             bool
	isRoot                 bool // 是否根部门
	isRootFlag             bool
}

func NewDepartmentParentInfoBuilder() *DepartmentParentInfoBuilder {
	builder := &DepartmentParentInfoBuilder{}
	return builder
}

// 部门 ID
//
// 示例值：4719456877659520852
func (builder *DepartmentParentInfoBuilder) DepartmentId(departmentId string) *DepartmentParentInfoBuilder {
	builder.departmentId = departmentId
	builder.departmentIdFlag = true
	return builder
}

// 部门名称
//
// 示例值：
func (builder *DepartmentParentInfoBuilder) DepartmentName(departmentName []*I18n) *DepartmentParentInfoBuilder {
	builder.departmentName = departmentName
	builder.departmentNameFlag = true
	return builder
}

// 上级部门 ID
//
// 示例值：4719456877659520111
func (builder *DepartmentParentInfoBuilder) ParentDepartmentId(parentDepartmentId string) *DepartmentParentInfoBuilder {
	builder.parentDepartmentId = parentDepartmentId
	builder.parentDepartmentIdFlag = true
	return builder
}

// 是否启用
//
// 示例值：true
func (builder *DepartmentParentInfoBuilder) Active(active bool) *DepartmentParentInfoBuilder {
	builder.active = active
	builder.activeFlag = true
	return builder
}

// 是否根部门
//
// 示例值：true
func (builder *DepartmentParentInfoBuilder) IsRoot(isRoot bool) *DepartmentParentInfoBuilder {
	builder.isRoot = isRoot
	builder.isRootFlag = true
	return builder
}

func (builder *DepartmentParentInfoBuilder) Build() *DepartmentParentInfo {
	req := &DepartmentParentInfo{}
	if builder.departmentIdFlag {
		req.DepartmentId = &builder.departmentId

	}
	if builder.departmentNameFlag {
		req.DepartmentName = builder.departmentName
	}
	if builder.parentDepartmentIdFlag {
		req.ParentDepartmentId = &builder.parentDepartmentId

	}
	if builder.activeFlag {
		req.Active = &builder.active

	}
	if builder.isRootFlag {
		req.IsRoot = &builder.isRoot

	}
	return req
}

type DepartmentParents struct {
	DepartmentId         *string                 `json:"department_id,omitempty"`          // 部门 ID
	ParentDepartmentList []*DepartmentParentInfo `json:"parent_department_list,omitempty"` // 父部门列表，部门按照至底向上的顺序返回
}

type DepartmentParentsBuilder struct {
	departmentId             string // 部门 ID
	departmentIdFlag         bool
	parentDepartmentList     []*DepartmentParentInfo // 父部门列表，部门按照至底向上的顺序返回
	parentDepartmentListFlag bool
}

func NewDepartmentParentsBuilder() *DepartmentParentsBuilder {
	builder := &DepartmentParentsBuilder{}
	return builder
}

// 部门 ID
//
// 示例值：6893014062142064111
func (builder *DepartmentParentsBuilder) DepartmentId(departmentId string) *DepartmentParentsBuilder {
	builder.departmentId = departmentId
	builder.departmentIdFlag = true
	return builder
}

// 父部门列表，部门按照至底向上的顺序返回
//
// 示例值：
func (builder *DepartmentParentsBuilder) ParentDepartmentList(parentDepartmentList []*DepartmentParentInfo) *DepartmentParentsBuilder {
	builder.parentDepartmentList = parentDepartmentList
	builder.parentDepartmentListFlag = true
	return builder
}

func (builder *DepartmentParentsBuilder) Build() *DepartmentParents {
	req := &DepartmentParents{}
	if builder.departmentIdFlag {
		req.DepartmentId = &builder.departmentId

	}
	if builder.parentDepartmentListFlag {
		req.ParentDepartmentList = builder.parentDepartmentList
	}
	return req
}

type DepartmentTimeline struct {
	Id                 *string `json:"id,omitempty"`                   // 部门 ID
	Names              []*I18n `json:"names,omitempty"`                // 部门名称
	ParentDepartmentId *string `json:"parent_department_id,omitempty"` // 上级部门 ID
	Manager            *string `json:"manager,omitempty"`              // 部门负责人雇佣 ID，枚举值及详细信息可通过【查询员工信息】接口查询获得
	Code               *string `json:"code,omitempty"`                 // 编码
	EffectiveDate      *string `json:"effective_date,omitempty"`       // 生效日期
	Active             *bool   `json:"active,omitempty"`               // 是否启用
	Descriptions       []*I18n `json:"descriptions,omitempty"`         // 描述
}

type DepartmentTimelineBuilder struct {
	id                     string // 部门 ID
	idFlag                 bool
	names                  []*I18n // 部门名称
	namesFlag              bool
	parentDepartmentId     string // 上级部门 ID
	parentDepartmentIdFlag bool
	manager                string // 部门负责人雇佣 ID，枚举值及详细信息可通过【查询员工信息】接口查询获得
	managerFlag            bool
	code                   string // 编码
	codeFlag               bool
	effectiveDate          string // 生效日期
	effectiveDateFlag      bool
	active                 bool // 是否启用
	activeFlag             bool
	descriptions           []*I18n // 描述
	descriptionsFlag       bool
}

func NewDepartmentTimelineBuilder() *DepartmentTimelineBuilder {
	builder := &DepartmentTimelineBuilder{}
	return builder
}

// 部门 ID
//
// 示例值：4719456877659520852
func (builder *DepartmentTimelineBuilder) Id(id string) *DepartmentTimelineBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

// 部门名称
//
// 示例值：
func (builder *DepartmentTimelineBuilder) Names(names []*I18n) *DepartmentTimelineBuilder {
	builder.names = names
	builder.namesFlag = true
	return builder
}

// 上级部门 ID
//
// 示例值：4719456877659520111
func (builder *DepartmentTimelineBuilder) ParentDepartmentId(parentDepartmentId string) *DepartmentTimelineBuilder {
	builder.parentDepartmentId = parentDepartmentId
	builder.parentDepartmentIdFlag = true
	return builder
}

// 部门负责人雇佣 ID，枚举值及详细信息可通过【查询员工信息】接口查询获得
//
// 示例值：6893013238632416777
func (builder *DepartmentTimelineBuilder) Manager(manager string) *DepartmentTimelineBuilder {
	builder.manager = manager
	builder.managerFlag = true
	return builder
}

// 编码
//
// 示例值：D00000456
func (builder *DepartmentTimelineBuilder) Code(code string) *DepartmentTimelineBuilder {
	builder.code = code
	builder.codeFlag = true
	return builder
}

// 生效日期
//
// 示例值：2020-05-01
func (builder *DepartmentTimelineBuilder) EffectiveDate(effectiveDate string) *DepartmentTimelineBuilder {
	builder.effectiveDate = effectiveDate
	builder.effectiveDateFlag = true
	return builder
}

// 是否启用
//
// 示例值：true
func (builder *DepartmentTimelineBuilder) Active(active bool) *DepartmentTimelineBuilder {
	builder.active = active
	builder.activeFlag = true
	return builder
}

// 描述
//
// 示例值：
func (builder *DepartmentTimelineBuilder) Descriptions(descriptions []*I18n) *DepartmentTimelineBuilder {
	builder.descriptions = descriptions
	builder.descriptionsFlag = true
	return builder
}

func (builder *DepartmentTimelineBuilder) Build() *DepartmentTimeline {
	req := &DepartmentTimeline{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.namesFlag {
		req.Names = builder.names
	}
	if builder.parentDepartmentIdFlag {
		req.ParentDepartmentId = &builder.parentDepartmentId

	}
	if builder.managerFlag {
		req.Manager = &builder.manager

	}
	if builder.codeFlag {
		req.Code = &builder.code

	}
	if builder.effectiveDateFlag {
		req.EffectiveDate = &builder.effectiveDate

	}
	if builder.activeFlag {
		req.Active = &builder.active

	}
	if builder.descriptionsFlag {
		req.Descriptions = builder.descriptions
	}
	return req
}

type Dependent struct {
	Name         *PersonName `json:"name,omitempty"`          // 姓名
	Relationship *Enum       `json:"relationship,omitempty"`  // 关系
	Gender       *Enum       `json:"gender,omitempty"`        // 性别
	DateOfBirth  *string     `json:"date_of_birth,omitempty"` // 生日

	NationalityIdV2                      *string            `json:"nationality_id_v2,omitempty"`                          // 国籍 ID，可通过【查询国籍信息】接口查询
	NationalIdList                       []*NationalId      `json:"national_id_list,omitempty"`                           // 证件号码
	SpousesWorkingStatus                 *Enum              `json:"spouses_working_status,omitempty"`                     // 配偶工作状态
	IsThisPersonCoveredByHealthInsurance *bool              `json:"is_this_person_covered_by_health_insurance,omitempty"` // 包含家属医疗保险
	IsThisPersonAllowedForTaxDeduction   *bool              `json:"is_this_person_allowed_for_tax_deduction,omitempty"`   // 允许家属抵扣税款
	CustomFields                         []*CustomFieldData `json:"custom_fields,omitempty"`                              // 自定义字段
	DependentName                        *string            `json:"dependent_name,omitempty"`                             // 家庭成员姓名
	Employer                             *string            `json:"employer,omitempty"`                                   // 工作单位
	Job                                  *string            `json:"job,omitempty"`                                        // 岗位
	Phone                                *Phone             `json:"phone,omitempty"`                                      // 电话
	Address                              *Address           `json:"address,omitempty"`                                    // 联系地址
	BirthCertificateOfChild              []*File            `json:"birth_certificate_of_child,omitempty"`                 // 出生证明
}

type DependentBuilder struct {
	name             *PersonName // 姓名
	nameFlag         bool
	relationship     *Enum // 关系
	relationshipFlag bool
	gender           *Enum // 性别
	genderFlag       bool
	dateOfBirth      string // 生日
	dateOfBirthFlag  bool

	nationalityIdV2                          string // 国籍 ID，可通过【查询国籍信息】接口查询
	nationalityIdV2Flag                      bool
	nationalIdList                           []*NationalId // 证件号码
	nationalIdListFlag                       bool
	spousesWorkingStatus                     *Enum // 配偶工作状态
	spousesWorkingStatusFlag                 bool
	isThisPersonCoveredByHealthInsurance     bool // 包含家属医疗保险
	isThisPersonCoveredByHealthInsuranceFlag bool
	isThisPersonAllowedForTaxDeduction       bool // 允许家属抵扣税款
	isThisPersonAllowedForTaxDeductionFlag   bool
	customFields                             []*CustomFieldData // 自定义字段
	customFieldsFlag                         bool
	dependentName                            string // 家庭成员姓名
	dependentNameFlag                        bool
	employer                                 string // 工作单位
	employerFlag                             bool
	job                                      string // 岗位
	jobFlag                                  bool
	phone                                    *Phone // 电话
	phoneFlag                                bool
	address                                  *Address // 联系地址
	addressFlag                              bool
	birthCertificateOfChild                  []*File // 出生证明
	birthCertificateOfChildFlag              bool
}

func NewDependentBuilder() *DependentBuilder {
	builder := &DependentBuilder{}
	return builder
}

// 姓名
//
// 示例值：
func (builder *DependentBuilder) Name(name *PersonName) *DependentBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}

// 关系
//
// 示例值：
func (builder *DependentBuilder) Relationship(relationship *Enum) *DependentBuilder {
	builder.relationship = relationship
	builder.relationshipFlag = true
	return builder
}

// 性别
//
// 示例值：
func (builder *DependentBuilder) Gender(gender *Enum) *DependentBuilder {
	builder.gender = gender
	builder.genderFlag = true
	return builder
}

// 生日
//
// 示例值：2020-01-01
func (builder *DependentBuilder) DateOfBirth(dateOfBirth string) *DependentBuilder {
	builder.dateOfBirth = dateOfBirth
	builder.dateOfBirthFlag = true
	return builder
}

// 国籍 ID，可通过【查询国籍信息】接口查询
//
// 示例值：6862995745046267401
func (builder *DependentBuilder) NationalityIdV2(nationalityIdV2 string) *DependentBuilder {
	builder.nationalityIdV2 = nationalityIdV2
	builder.nationalityIdV2Flag = true
	return builder
}

// 证件号码
//
// 示例值：
func (builder *DependentBuilder) NationalIdList(nationalIdList []*NationalId) *DependentBuilder {
	builder.nationalIdList = nationalIdList
	builder.nationalIdListFlag = true
	return builder
}

// 配偶工作状态
//
// 示例值：
func (builder *DependentBuilder) SpousesWorkingStatus(spousesWorkingStatus *Enum) *DependentBuilder {
	builder.spousesWorkingStatus = spousesWorkingStatus
	builder.spousesWorkingStatusFlag = true
	return builder
}

// 包含家属医疗保险
//
// 示例值：true
func (builder *DependentBuilder) IsThisPersonCoveredByHealthInsurance(isThisPersonCoveredByHealthInsurance bool) *DependentBuilder {
	builder.isThisPersonCoveredByHealthInsurance = isThisPersonCoveredByHealthInsurance
	builder.isThisPersonCoveredByHealthInsuranceFlag = true
	return builder
}

// 允许家属抵扣税款
//
// 示例值：false
func (builder *DependentBuilder) IsThisPersonAllowedForTaxDeduction(isThisPersonAllowedForTaxDeduction bool) *DependentBuilder {
	builder.isThisPersonAllowedForTaxDeduction = isThisPersonAllowedForTaxDeduction
	builder.isThisPersonAllowedForTaxDeductionFlag = true
	return builder
}

// 自定义字段
//
// 示例值：
func (builder *DependentBuilder) CustomFields(customFields []*CustomFieldData) *DependentBuilder {
	builder.customFields = customFields
	builder.customFieldsFlag = true
	return builder
}

// 家庭成员姓名
//
// 示例值：张三
func (builder *DependentBuilder) DependentName(dependentName string) *DependentBuilder {
	builder.dependentName = dependentName
	builder.dependentNameFlag = true
	return builder
}

// 工作单位
//
// 示例值：海淀区交警大队
func (builder *DependentBuilder) Employer(employer string) *DependentBuilder {
	builder.employer = employer
	builder.employerFlag = true
	return builder
}

// 岗位
//
// 示例值：保安
func (builder *DependentBuilder) Job(job string) *DependentBuilder {
	builder.job = job
	builder.jobFlag = true
	return builder
}

// 电话
//
// 示例值：
func (builder *DependentBuilder) Phone(phone *Phone) *DependentBuilder {
	builder.phone = phone
	builder.phoneFlag = true
	return builder
}

// 联系地址
//
// 示例值：
func (builder *DependentBuilder) Address(address *Address) *DependentBuilder {
	builder.address = address
	builder.addressFlag = true
	return builder
}

// 出生证明
//
// 示例值：
func (builder *DependentBuilder) BirthCertificateOfChild(birthCertificateOfChild []*File) *DependentBuilder {
	builder.birthCertificateOfChild = birthCertificateOfChild
	builder.birthCertificateOfChildFlag = true
	return builder
}

func (builder *DependentBuilder) Build() *Dependent {
	req := &Dependent{}
	if builder.nameFlag {
		req.Name = builder.name
	}
	if builder.relationshipFlag {
		req.Relationship = builder.relationship
	}
	if builder.genderFlag {
		req.Gender = builder.gender
	}
	if builder.dateOfBirthFlag {
		req.DateOfBirth = &builder.dateOfBirth

	}

	if builder.nationalityIdV2Flag {
		req.NationalityIdV2 = &builder.nationalityIdV2

	}
	if builder.nationalIdListFlag {
		req.NationalIdList = builder.nationalIdList
	}
	if builder.spousesWorkingStatusFlag {
		req.SpousesWorkingStatus = builder.spousesWorkingStatus
	}
	if builder.isThisPersonCoveredByHealthInsuranceFlag {
		req.IsThisPersonCoveredByHealthInsurance = &builder.isThisPersonCoveredByHealthInsurance

	}
	if builder.isThisPersonAllowedForTaxDeductionFlag {
		req.IsThisPersonAllowedForTaxDeduction = &builder.isThisPersonAllowedForTaxDeduction

	}
	if builder.customFieldsFlag {
		req.CustomFields = builder.customFields
	}
	if builder.dependentNameFlag {
		req.DependentName = &builder.dependentName

	}
	if builder.employerFlag {
		req.Employer = &builder.employer

	}
	if builder.jobFlag {
		req.Job = &builder.job

	}
	if builder.phoneFlag {
		req.Phone = builder.phone
	}
	if builder.addressFlag {
		req.Address = builder.address
	}
	if builder.birthCertificateOfChildFlag {
		req.BirthCertificateOfChild = builder.birthCertificateOfChild
	}
	return req
}

type Dimension struct {
	Name      []*I18n `json:"name,omitempty"`       // 维度的名称
	ApiName   *string `json:"api_name,omitempty"`   // 维度的 api name
	FieldType *string `json:"field_type,omitempty"` // 维度的字段类型。enum 代表字段为枚举类型，lookup 代表字段为 lookup 类型，bool 代表字段为布尔类型
	Required  *bool   `json:"required,omitempty"`   // 维度是否为必填
	EnumValue []*Enum `json:"enum_value,omitempty"` // 枚举类型的维度对应的枚举值列表
}

type DimensionBuilder struct {
	name          []*I18n // 维度的名称
	nameFlag      bool
	apiName       string // 维度的 api name
	apiNameFlag   bool
	fieldType     string // 维度的字段类型。enum 代表字段为枚举类型，lookup 代表字段为 lookup 类型，bool 代表字段为布尔类型
	fieldTypeFlag bool
	required      bool // 维度是否为必填
	requiredFlag  bool
	enumValue     []*Enum // 枚举类型的维度对应的枚举值列表
	enumValueFlag bool
}

func NewDimensionBuilder() *DimensionBuilder {
	builder := &DimensionBuilder{}
	return builder
}

// 维度的名称
//
// 示例值：
func (builder *DimensionBuilder) Name(name []*I18n) *DimensionBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}

// 维度的 api name
//
// 示例值：department
func (builder *DimensionBuilder) ApiName(apiName string) *DimensionBuilder {
	builder.apiName = apiName
	builder.apiNameFlag = true
	return builder
}

// 维度的字段类型。enum 代表字段为枚举类型，lookup 代表字段为 lookup 类型，bool 代表字段为布尔类型
//
// 示例值：enum
func (builder *DimensionBuilder) FieldType(fieldType string) *DimensionBuilder {
	builder.fieldType = fieldType
	builder.fieldTypeFlag = true
	return builder
}

// 维度是否为必填
//
// 示例值：true
func (builder *DimensionBuilder) Required(required bool) *DimensionBuilder {
	builder.required = required
	builder.requiredFlag = true
	return builder
}

// 枚举类型的维度对应的枚举值列表
//
// 示例值：
func (builder *DimensionBuilder) EnumValue(enumValue []*Enum) *DimensionBuilder {
	builder.enumValue = enumValue
	builder.enumValueFlag = true
	return builder
}

func (builder *DimensionBuilder) Build() *Dimension {
	req := &Dimension{}
	if builder.nameFlag {
		req.Name = builder.name
	}
	if builder.apiNameFlag {
		req.ApiName = &builder.apiName

	}
	if builder.fieldTypeFlag {
		req.FieldType = &builder.fieldType

	}
	if builder.requiredFlag {
		req.Required = &builder.required

	}
	if builder.enumValueFlag {
		req.EnumValue = builder.enumValue
	}
	return req
}

type DimensionIdInData struct {
	DimensionKey *string  `json:"dimension_key,omitempty"` // 维度 key
	DimensionIds []string `json:"dimension_ids,omitempty"` // 维度 ids
}

type DimensionIdInDataBuilder struct {
	dimensionKey     string // 维度 key
	dimensionKeyFlag bool
	dimensionIds     []string // 维度 ids
	dimensionIdsFlag bool
}

func NewDimensionIdInDataBuilder() *DimensionIdInDataBuilder {
	builder := &DimensionIdInDataBuilder{}
	return builder
}

// 维度 key
//
// 示例值：department
func (builder *DimensionIdInDataBuilder) DimensionKey(dimensionKey string) *DimensionIdInDataBuilder {
	builder.dimensionKey = dimensionKey
	builder.dimensionKeyFlag = true
	return builder
}

// 维度 ids
//
// 示例值：["id1","id2"]
func (builder *DimensionIdInDataBuilder) DimensionIds(dimensionIds []string) *DimensionIdInDataBuilder {
	builder.dimensionIds = dimensionIds
	builder.dimensionIdsFlag = true
	return builder
}

func (builder *DimensionIdInDataBuilder) Build() *DimensionIdInData {
	req := &DimensionIdInData{}
	if builder.dimensionKeyFlag {
		req.DimensionKey = &builder.dimensionKey

	}
	if builder.dimensionIdsFlag {
		req.DimensionIds = builder.dimensionIds
	}
	return req
}

type DimensionInfo struct {
	Id   *string `json:"id,omitempty"`   // 维度id
	Name []*I18n `json:"name,omitempty"` // 维度名称
}

type DimensionInfoBuilder struct {
	id       string // 维度id
	idFlag   bool
	name     []*I18n // 维度名称
	nameFlag bool
}

func NewDimensionInfoBuilder() *DimensionInfoBuilder {
	builder := &DimensionInfoBuilder{}
	return builder
}

// 维度id
//
// 示例值：“123456”
func (builder *DimensionInfoBuilder) Id(id string) *DimensionInfoBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

// 维度名称
//
// 示例值：
func (builder *DimensionInfoBuilder) Name(name []*I18n) *DimensionInfoBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}

func (builder *DimensionInfoBuilder) Build() *DimensionInfo {
	req := &DimensionInfo{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.nameFlag {
		req.Name = builder.name
	}
	return req
}

type DimensionInfoData struct {
	DimensionKey  *string        `json:"dimension_key,omitempty"`  // 维度 key
	DimensionInfo *DimensionInfo `json:"dimension_info,omitempty"` // 维度信息
}

type DimensionInfoDataBuilder struct {
	dimensionKey      string // 维度 key
	dimensionKeyFlag  bool
	dimensionInfo     *DimensionInfo // 维度信息
	dimensionInfoFlag bool
}

func NewDimensionInfoDataBuilder() *DimensionInfoDataBuilder {
	builder := &DimensionInfoDataBuilder{}
	return builder
}

// 维度 key
//
// 示例值："department"
func (builder *DimensionInfoDataBuilder) DimensionKey(dimensionKey string) *DimensionInfoDataBuilder {
	builder.dimensionKey = dimensionKey
	builder.dimensionKeyFlag = true
	return builder
}

// 维度信息
//
// 示例值：
func (builder *DimensionInfoDataBuilder) DimensionInfo(dimensionInfo *DimensionInfo) *DimensionInfoDataBuilder {
	builder.dimensionInfo = dimensionInfo
	builder.dimensionInfoFlag = true
	return builder
}

func (builder *DimensionInfoDataBuilder) Build() *DimensionInfoData {
	req := &DimensionInfoData{}
	if builder.dimensionKeyFlag {
		req.DimensionKey = &builder.dimensionKey

	}
	if builder.dimensionInfoFlag {
		req.DimensionInfo = builder.dimensionInfo
	}
	return req
}

type DimensionValue struct {
	DimensionApiName *string      `json:"dimension_api_name,omitempty"` // API name
	DimensionValue   *CustomValue `json:"dimension_value,omitempty"`    // 查询的维度值信息
}

type DimensionValueBuilder struct {
	dimensionApiName     string // API name
	dimensionApiNameFlag bool
	dimensionValue       *CustomValue // 查询的维度值信息
	dimensionValueFlag   bool
}

func NewDimensionValueBuilder() *DimensionValueBuilder {
	builder := &DimensionValueBuilder{}
	return builder
}

// API name
//
// 示例值：asdasdsa
func (builder *DimensionValueBuilder) DimensionApiName(dimensionApiName string) *DimensionValueBuilder {
	builder.dimensionApiName = dimensionApiName
	builder.dimensionApiNameFlag = true
	return builder
}

// 查询的维度值信息
//
// 示例值：
func (builder *DimensionValueBuilder) DimensionValue(dimensionValue *CustomValue) *DimensionValueBuilder {
	builder.dimensionValue = dimensionValue
	builder.dimensionValueFlag = true
	return builder
}

func (builder *DimensionValueBuilder) Build() *DimensionValue {
	req := &DimensionValue{}
	if builder.dimensionApiNameFlag {
		req.DimensionApiName = &builder.dimensionApiName

	}
	if builder.dimensionValueFlag {
		req.DimensionValue = builder.dimensionValue
	}
	return req
}

type District struct {
	DistrictId *string `json:"district_id,omitempty"` // 区/县 ID
	Name       []*I18n `json:"name,omitempty"`        // 名称
	CityId     *string `json:"city_id,omitempty"`     // 所属城市 ID
	Status     *int    `json:"status,omitempty"`      // 状态
}

type DistrictBuilder struct {
	districtId     string // 区/县 ID
	districtIdFlag bool
	name           []*I18n // 名称
	nameFlag       bool
	cityId         string // 所属城市 ID
	cityIdFlag     bool
	status         int // 状态
	statusFlag     bool
}

func NewDistrictBuilder() *DistrictBuilder {
	builder := &DistrictBuilder{}
	return builder
}

// 区/县 ID
//
// 示例值：6822114462122064111
func (builder *DistrictBuilder) DistrictId(districtId string) *DistrictBuilder {
	builder.districtId = districtId
	builder.districtIdFlag = true
	return builder
}

// 名称
//
// 示例值：
func (builder *DistrictBuilder) Name(name []*I18n) *DistrictBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}

// 所属城市 ID
//
// 示例值：6822114062155062211
func (builder *DistrictBuilder) CityId(cityId string) *DistrictBuilder {
	builder.cityId = cityId
	builder.cityIdFlag = true
	return builder
}

// 状态
//
// 示例值：1
func (builder *DistrictBuilder) Status(status int) *DistrictBuilder {
	builder.status = status
	builder.statusFlag = true
	return builder
}

func (builder *DistrictBuilder) Build() *District {
	req := &District{}
	if builder.districtIdFlag {
		req.DistrictId = &builder.districtId

	}
	if builder.nameFlag {
		req.Name = builder.name
	}
	if builder.cityIdFlag {
		req.CityId = &builder.cityId

	}
	if builder.statusFlag {
		req.Status = &builder.status

	}
	return req
}

type Education struct {
	School           []*I18n            `json:"school,omitempty"`              // 学校
	LevelOfEducation *Enum              `json:"level_of_education,omitempty"`  // 学历
	StartDate        *string            `json:"start_date,omitempty"`          // 开始日期
	EndDate          *string            `json:"end_date,omitempty"`            // 结束日期
	FieldOfStudy     []*I18n            `json:"field_of_study,omitempty"`      // 专业
	Degree           *Enum              `json:"degree,omitempty"`              // 学位
	SchoolName       *Enum              `json:"school_name,omitempty"`         // 学校名称
	FieldOfStudyName *Enum              `json:"field_of_study_name,omitempty"` // 专业名称
	CountryRegionId  *string            `json:"country_region_id,omitempty"`   // 国家地区ID
	ExpectedEndDate  *string            `json:"expected_end_date,omitempty"`   // 预期结束日期
	CustomFields     []*CustomFieldData `json:"custom_fields,omitempty"`       // 自定义字段
}

type EducationBuilder struct {
	school               []*I18n // 学校
	schoolFlag           bool
	levelOfEducation     *Enum // 学历
	levelOfEducationFlag bool
	startDate            string // 开始日期
	startDateFlag        bool
	endDate              string // 结束日期
	endDateFlag          bool
	fieldOfStudy         []*I18n // 专业
	fieldOfStudyFlag     bool
	degree               *Enum // 学位
	degreeFlag           bool
	schoolName           *Enum // 学校名称
	schoolNameFlag       bool
	fieldOfStudyName     *Enum // 专业名称
	fieldOfStudyNameFlag bool
	countryRegionId      string // 国家地区ID
	countryRegionIdFlag  bool
	expectedEndDate      string // 预期结束日期
	expectedEndDateFlag  bool
	customFields         []*CustomFieldData // 自定义字段
	customFieldsFlag     bool
}

func NewEducationBuilder() *EducationBuilder {
	builder := &EducationBuilder{}
	return builder
}

// 学校
//
// 示例值：
func (builder *EducationBuilder) School(school []*I18n) *EducationBuilder {
	builder.school = school
	builder.schoolFlag = true
	return builder
}

// 学历
//
// 示例值：
func (builder *EducationBuilder) LevelOfEducation(levelOfEducation *Enum) *EducationBuilder {
	builder.levelOfEducation = levelOfEducation
	builder.levelOfEducationFlag = true
	return builder
}

// 开始日期
//
// 示例值：2011-09-01
func (builder *EducationBuilder) StartDate(startDate string) *EducationBuilder {
	builder.startDate = startDate
	builder.startDateFlag = true
	return builder
}

// 结束日期
//
// 示例值：2015-06-30
func (builder *EducationBuilder) EndDate(endDate string) *EducationBuilder {
	builder.endDate = endDate
	builder.endDateFlag = true
	return builder
}

// 专业
//
// 示例值：
func (builder *EducationBuilder) FieldOfStudy(fieldOfStudy []*I18n) *EducationBuilder {
	builder.fieldOfStudy = fieldOfStudy
	builder.fieldOfStudyFlag = true
	return builder
}

// 学位
//
// 示例值：
func (builder *EducationBuilder) Degree(degree *Enum) *EducationBuilder {
	builder.degree = degree
	builder.degreeFlag = true
	return builder
}

// 学校名称
//
// 示例值：
func (builder *EducationBuilder) SchoolName(schoolName *Enum) *EducationBuilder {
	builder.schoolName = schoolName
	builder.schoolNameFlag = true
	return builder
}

// 专业名称
//
// 示例值：
func (builder *EducationBuilder) FieldOfStudyName(fieldOfStudyName *Enum) *EducationBuilder {
	builder.fieldOfStudyName = fieldOfStudyName
	builder.fieldOfStudyNameFlag = true
	return builder
}

// 国家地区ID
//
// 示例值：1
func (builder *EducationBuilder) CountryRegionId(countryRegionId string) *EducationBuilder {
	builder.countryRegionId = countryRegionId
	builder.countryRegionIdFlag = true
	return builder
}

// 预期结束日期
//
// 示例值：2011-09-01
func (builder *EducationBuilder) ExpectedEndDate(expectedEndDate string) *EducationBuilder {
	builder.expectedEndDate = expectedEndDate
	builder.expectedEndDateFlag = true
	return builder
}

// 自定义字段
//
// 示例值：
func (builder *EducationBuilder) CustomFields(customFields []*CustomFieldData) *EducationBuilder {
	builder.customFields = customFields
	builder.customFieldsFlag = true
	return builder
}

func (builder *EducationBuilder) Build() *Education {
	req := &Education{}
	if builder.schoolFlag {
		req.School = builder.school
	}
	if builder.levelOfEducationFlag {
		req.LevelOfEducation = builder.levelOfEducation
	}
	if builder.startDateFlag {
		req.StartDate = &builder.startDate

	}
	if builder.endDateFlag {
		req.EndDate = &builder.endDate

	}
	if builder.fieldOfStudyFlag {
		req.FieldOfStudy = builder.fieldOfStudy
	}
	if builder.degreeFlag {
		req.Degree = builder.degree
	}
	if builder.schoolNameFlag {
		req.SchoolName = builder.schoolName
	}
	if builder.fieldOfStudyNameFlag {
		req.FieldOfStudyName = builder.fieldOfStudyName
	}
	if builder.countryRegionIdFlag {
		req.CountryRegionId = &builder.countryRegionId

	}
	if builder.expectedEndDateFlag {
		req.ExpectedEndDate = &builder.expectedEndDate

	}
	if builder.customFieldsFlag {
		req.CustomFields = builder.customFields
	}
	return req
}

type EducationInfo struct {
	SchoolName   *string `json:"school_name,omitempty"`    // 学校名称
	Education    *string `json:"education,omitempty"`      // 学历
	StartTime    *string `json:"start_time,omitempty"`     // 开始时间
	EndTime      *string `json:"end_time,omitempty"`       // 结束时间
	FieldOfStudy *string `json:"field_of_study,omitempty"` // 专业
}

type EducationInfoBuilder struct {
	schoolName       string // 学校名称
	schoolNameFlag   bool
	education        string // 学历
	educationFlag    bool
	startTime        string // 开始时间
	startTimeFlag    bool
	endTime          string // 结束时间
	endTimeFlag      bool
	fieldOfStudy     string // 专业
	fieldOfStudyFlag bool
}

func NewEducationInfoBuilder() *EducationInfoBuilder {
	builder := &EducationInfoBuilder{}
	return builder
}

// 学校名称
//
// 示例值：长安大学
func (builder *EducationInfoBuilder) SchoolName(schoolName string) *EducationInfoBuilder {
	builder.schoolName = schoolName
	builder.schoolNameFlag = true
	return builder
}

// 学历
//
// 示例值：phd
func (builder *EducationInfoBuilder) Education(education string) *EducationInfoBuilder {
	builder.education = education
	builder.educationFlag = true
	return builder
}

// 开始时间
//
// 示例值：2017-04-01
func (builder *EducationInfoBuilder) StartTime(startTime string) *EducationInfoBuilder {
	builder.startTime = startTime
	builder.startTimeFlag = true
	return builder
}

// 结束时间
//
// 示例值：2018-04-01
func (builder *EducationInfoBuilder) EndTime(endTime string) *EducationInfoBuilder {
	builder.endTime = endTime
	builder.endTimeFlag = true
	return builder
}

// 专业
//
// 示例值：医学影像技术
func (builder *EducationInfoBuilder) FieldOfStudy(fieldOfStudy string) *EducationInfoBuilder {
	builder.fieldOfStudy = fieldOfStudy
	builder.fieldOfStudyFlag = true
	return builder
}

func (builder *EducationInfoBuilder) Build() *EducationInfo {
	req := &EducationInfo{}
	if builder.schoolNameFlag {
		req.SchoolName = &builder.schoolName

	}
	if builder.educationFlag {
		req.Education = &builder.education

	}
	if builder.startTimeFlag {
		req.StartTime = &builder.startTime

	}
	if builder.endTimeFlag {
		req.EndTime = &builder.endTime

	}
	if builder.fieldOfStudyFlag {
		req.FieldOfStudy = &builder.fieldOfStudy

	}
	return req
}

type Email struct {
	Email      *string `json:"email,omitempty"`       // 邮箱地址
	IsPrimary  *bool   `json:"is_primary,omitempty"`  // 是否为主要邮箱
	IsPublic   *bool   `json:"is_public,omitempty"`   // 是否为公开邮箱
	EmailUsage *Enum   `json:"email_usage,omitempty"` // 邮箱用途，枚举值可通过文档【飞书人事枚举常量】邮箱用途（email_usage）枚举定义获得
}

type EmailBuilder struct {
	email          string // 邮箱地址
	emailFlag      bool
	isPrimary      bool // 是否为主要邮箱
	isPrimaryFlag  bool
	isPublic       bool // 是否为公开邮箱
	isPublicFlag   bool
	emailUsage     *Enum // 邮箱用途，枚举值可通过文档【飞书人事枚举常量】邮箱用途（email_usage）枚举定义获得
	emailUsageFlag bool
}

func NewEmailBuilder() *EmailBuilder {
	builder := &EmailBuilder{}
	return builder
}

// 邮箱地址
//
// 示例值：1234567@bytedance.com
func (builder *EmailBuilder) Email(email string) *EmailBuilder {
	builder.email = email
	builder.emailFlag = true
	return builder
}

// 是否为主要邮箱
//
// 示例值：true
func (builder *EmailBuilder) IsPrimary(isPrimary bool) *EmailBuilder {
	builder.isPrimary = isPrimary
	builder.isPrimaryFlag = true
	return builder
}

// 是否为公开邮箱
//
// 示例值：true
func (builder *EmailBuilder) IsPublic(isPublic bool) *EmailBuilder {
	builder.isPublic = isPublic
	builder.isPublicFlag = true
	return builder
}

// 邮箱用途，枚举值可通过文档【飞书人事枚举常量】邮箱用途（email_usage）枚举定义获得
//
// 示例值：
func (builder *EmailBuilder) EmailUsage(emailUsage *Enum) *EmailBuilder {
	builder.emailUsage = emailUsage
	builder.emailUsageFlag = true
	return builder
}

func (builder *EmailBuilder) Build() *Email {
	req := &Email{}
	if builder.emailFlag {
		req.Email = &builder.email

	}
	if builder.isPrimaryFlag {
		req.IsPrimary = &builder.isPrimary

	}
	if builder.isPublicFlag {
		req.IsPublic = &builder.isPublic

	}
	if builder.emailUsageFlag {
		req.EmailUsage = builder.emailUsage
	}
	return req
}

type EmailForUpdate struct {
	Email      *string `json:"email,omitempty"`       // 邮箱地址
	IsPrimary  *bool   `json:"is_primary,omitempty"`  // 是否为主要邮箱,若有多个邮箱，只能有一个邮箱的「is_primary」为true
	IsPublic   *bool   `json:"is_public,omitempty"`   // 是否为公开邮箱
	EmailUsage *string `json:"email_usage,omitempty"` // 邮箱用途，枚举值可通过文档【飞书人事枚举常量】邮箱用途（email_usage）枚举定义获得
}

type EmailForUpdateBuilder struct {
	email          string // 邮箱地址
	emailFlag      bool
	isPrimary      bool // 是否为主要邮箱,若有多个邮箱，只能有一个邮箱的「is_primary」为true
	isPrimaryFlag  bool
	isPublic       bool // 是否为公开邮箱
	isPublicFlag   bool
	emailUsage     string // 邮箱用途，枚举值可通过文档【飞书人事枚举常量】邮箱用途（email_usage）枚举定义获得
	emailUsageFlag bool
}

func NewEmailForUpdateBuilder() *EmailForUpdateBuilder {
	builder := &EmailForUpdateBuilder{}
	return builder
}

// 邮箱地址
//
// 示例值：1234567@bytedance.com
func (builder *EmailForUpdateBuilder) Email(email string) *EmailForUpdateBuilder {
	builder.email = email
	builder.emailFlag = true
	return builder
}

// 是否为主要邮箱,若有多个邮箱，只能有一个邮箱的「is_primary」为true
//
// 示例值：true
func (builder *EmailForUpdateBuilder) IsPrimary(isPrimary bool) *EmailForUpdateBuilder {
	builder.isPrimary = isPrimary
	builder.isPrimaryFlag = true
	return builder
}

// 是否为公开邮箱
//
// 示例值：true
func (builder *EmailForUpdateBuilder) IsPublic(isPublic bool) *EmailForUpdateBuilder {
	builder.isPublic = isPublic
	builder.isPublicFlag = true
	return builder
}

// 邮箱用途，枚举值可通过文档【飞书人事枚举常量】邮箱用途（email_usage）枚举定义获得
//
// 示例值：work
func (builder *EmailForUpdateBuilder) EmailUsage(emailUsage string) *EmailForUpdateBuilder {
	builder.emailUsage = emailUsage
	builder.emailUsageFlag = true
	return builder
}

func (builder *EmailForUpdateBuilder) Build() *EmailForUpdate {
	req := &EmailForUpdate{}
	if builder.emailFlag {
		req.Email = &builder.email

	}
	if builder.isPrimaryFlag {
		req.IsPrimary = &builder.isPrimary

	}
	if builder.isPublicFlag {
		req.IsPublic = &builder.isPublic

	}
	if builder.emailUsageFlag {
		req.EmailUsage = &builder.emailUsage

	}
	return req
}

type EmergencyContact struct {
	Name         *PersonName        `json:"name,omitempty"`          // 姓名
	Relationship *Enum              `json:"relationship,omitempty"`  // 关系
	PhoneIst     []*Phone           `json:"phone_ist,omitempty"`     // 电话
	PhoneList    []*Phone           `json:"phone_list,omitempty"`    // 电话
	LegalName    *string            `json:"legal_name,omitempty"`    // 法定姓名
	CustomFields []*CustomFieldData `json:"custom_fields,omitempty"` // 自定义字段
	Address      *Address           `json:"address,omitempty"`       // 联系地址
	Email        *Email             `json:"email,omitempty"`         // 邮箱
}

type EmergencyContactBuilder struct {
	name             *PersonName // 姓名
	nameFlag         bool
	relationship     *Enum // 关系
	relationshipFlag bool
	phoneIst         []*Phone // 电话
	phoneIstFlag     bool
	phoneList        []*Phone // 电话
	phoneListFlag    bool
	legalName        string // 法定姓名
	legalNameFlag    bool
	customFields     []*CustomFieldData // 自定义字段
	customFieldsFlag bool
	address          *Address // 联系地址
	addressFlag      bool
	email            *Email // 邮箱
	emailFlag        bool
}

func NewEmergencyContactBuilder() *EmergencyContactBuilder {
	builder := &EmergencyContactBuilder{}
	return builder
}

// 姓名
//
// 示例值：
func (builder *EmergencyContactBuilder) Name(name *PersonName) *EmergencyContactBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}

// 关系
//
// 示例值：
func (builder *EmergencyContactBuilder) Relationship(relationship *Enum) *EmergencyContactBuilder {
	builder.relationship = relationship
	builder.relationshipFlag = true
	return builder
}

// 电话
//
// 示例值：
func (builder *EmergencyContactBuilder) PhoneIst(phoneIst []*Phone) *EmergencyContactBuilder {
	builder.phoneIst = phoneIst
	builder.phoneIstFlag = true
	return builder
}

// 电话
//
// 示例值：
func (builder *EmergencyContactBuilder) PhoneList(phoneList []*Phone) *EmergencyContactBuilder {
	builder.phoneList = phoneList
	builder.phoneListFlag = true
	return builder
}

// 法定姓名
//
// 示例值：张三
func (builder *EmergencyContactBuilder) LegalName(legalName string) *EmergencyContactBuilder {
	builder.legalName = legalName
	builder.legalNameFlag = true
	return builder
}

// 自定义字段
//
// 示例值：
func (builder *EmergencyContactBuilder) CustomFields(customFields []*CustomFieldData) *EmergencyContactBuilder {
	builder.customFields = customFields
	builder.customFieldsFlag = true
	return builder
}

// 联系地址
//
// 示例值：
func (builder *EmergencyContactBuilder) Address(address *Address) *EmergencyContactBuilder {
	builder.address = address
	builder.addressFlag = true
	return builder
}

// 邮箱
//
// 示例值：
func (builder *EmergencyContactBuilder) Email(email *Email) *EmergencyContactBuilder {
	builder.email = email
	builder.emailFlag = true
	return builder
}

func (builder *EmergencyContactBuilder) Build() *EmergencyContact {
	req := &EmergencyContact{}
	if builder.nameFlag {
		req.Name = builder.name
	}
	if builder.relationshipFlag {
		req.Relationship = builder.relationship
	}
	if builder.phoneIstFlag {
		req.PhoneIst = builder.phoneIst
	}
	if builder.phoneListFlag {
		req.PhoneList = builder.phoneList
	}
	if builder.legalNameFlag {
		req.LegalName = &builder.legalName

	}
	if builder.customFieldsFlag {
		req.CustomFields = builder.customFields
	}
	if builder.addressFlag {
		req.Address = builder.address
	}
	if builder.emailFlag {
		req.Email = builder.email
	}
	return req
}

type Employee struct {
	EmploymentId         *string    `json:"employment_id,omitempty"`          // 雇佣 ID
	AtsApplicationId     *string    `json:"ats_application_id,omitempty"`     // 招聘投递 ID ，详细信息可以通过【获取投递信息】接口查询获得
	PrehireId            *string    `json:"prehire_id,omitempty"`             // 待入职 ID
	EmployeeNumber       *string    `json:"employee_number,omitempty"`        // 工号
	EmployeeTypeId       *string    `json:"employee_type_id,omitempty"`       // 人员类型 ID，详细信息可通过【查询单个人员类型】接口获得
	DepartmentId         *string    `json:"department_id,omitempty"`          // 部门 ID，详细信息可通过【查询单个部门】接口获得
	JobLevelId           *string    `json:"job_level_id,omitempty"`           // 职级 ID，详细信息可通过【查询单个职务级别】接口获得
	JobLevel             *JobLevel  `json:"job_level,omitempty"`              // 职级
	JobGradeId           *string    `json:"job_grade_id,omitempty"`           // 职等 ID
	WorkLocationId       *string    `json:"work_location_id,omitempty"`       // 工作地点 ID，详细信息可通过【查询单个地点】接口获得
	JobFamilyId          *string    `json:"job_family_id,omitempty"`          // 序列 ID，详细信息可通过【查询单个职务序列】接口获得
	JobFamily            *JobFamily `json:"job_family,omitempty"`             // 序列
	JobId                *string    `json:"job_id,omitempty"`                 // 职务 ID，详细信息可通过【查询单个职务】接口获得
	Job                  *Job       `json:"job,omitempty"`                    // 职务
	CompanyId            *string    `json:"company_id,omitempty"`             // 所属公司 ID，详细信息可通过【查询单个公司】接口获得
	WorkingHoursTypeId   *string    `json:"working_hours_type_id,omitempty"`  // 工时制度 ID，详细信息可通过【查询单个工时制度】接口获得
	Tenure               *string    `json:"tenure,omitempty"`                 // 司龄
	SeniorityDate        *string    `json:"seniority_date,omitempty"`         // 资历起算日期
	EffectiveDate        *string    `json:"effective_date,omitempty"`         // 当前雇佣记录的入职日期
	PrimaryEmployment    *bool      `json:"primary_employment,omitempty"`     // 是否是主雇佣信息
	ProbationPeriod      *int       `json:"probation_period,omitempty"`       // 试用期时长（月）
	OnProbation          *bool      `json:"on_probation,omitempty"`           // 是否在试用期中
	ProbationEndDate     *string    `json:"probation_end_date,omitempty"`     // 试用期结束日期（实际结束日期）
	DirectManagerId      *string    `json:"direct_manager_id,omitempty"`      // 直接上级的雇佣 ID
	DottedLineManagerId  *string    `json:"dotted_line_manager_id,omitempty"` // 虚线上级的雇佣 ID
	EmploymentType       *Enum      `json:"employment_type,omitempty"`        // 雇佣类型，枚举值可通过文档【飞书人事枚举常量】雇佣类型（employment_type）枚举定义获得
	EmploymentStatus     *Enum      `json:"employment_status,omitempty"`      // 雇佣状态，枚举值可通过文档【飞书人事枚举常量】雇员状态（employment_status）枚举定义获得
	ExpirationDate       *string    `json:"expiration_date,omitempty"`        // 离职日期，即员工的最后一个工作日，最后一个工作日时员工的雇佣状态仍为“在职”，次日凌晨将更改为“离职”
	ReasonForOffboarding *Enum      `json:"reason_for_offboarding,omitempty"` // 离职原因，枚举值可通过文档【飞书人事枚举常量】离职原因（reason_for_offboarding）枚举定义部分获得
	EmailAddress         *string    `json:"email_address,omitempty"`          // 邮箱地址

	WorkEmailList            []*WorkEmail         `json:"work_email_list,omitempty"`             // 工作邮箱列表，只有当邮箱满足下面所有条件时，才在个人信息页面可见
	CostCenterList           []*JobDataCostCenter `json:"cost_center_list,omitempty"`            // 成本中心列表
	Rehire                   *Enum                `json:"rehire,omitempty"`                      // 是否离职重聘
	RehireEmploymentId       *string              `json:"rehire_employment_id,omitempty"`        // 历史雇佣信息 ID，可以通过【查询单个雇佣信息】查询详细信息
	PersonInfo               *PersonInfo          `json:"person_info,omitempty"`                 // 基本个人信息
	CustomFields             []*CustomFieldData   `json:"custom_fields,omitempty"`               // 自定义字段
	NoncompeteStatus         *Enum                `json:"noncompete_status,omitempty"`           // 竞业状态，枚举值包括:1.竞业中；2.未竞业
	PastOffboarding          *bool                `json:"past_offboarding,omitempty"`            // 是否历史离职人员
	RegularEmployeeStartDate *string              `json:"regular_employee_start_date,omitempty"` // 转正式日期
	ExternalId               *string              `json:"external_id,omitempty"`                 // 外部系统 ID , 可存储租户系统中的员工 ID
	TimesEmployed            *int                 `json:"times_employed,omitempty"`              // 入职次数
	RecruitmentType          *Enum                `json:"recruitment_type,omitempty"`            // 招聘来源，枚举值 api_name 可通过【获取自定义字段详情】接口查询
	AvatarUrl                *string              `json:"avatar_url,omitempty"`                  // 员工头像
	PrimaryContractId        *string              `json:"primary_contract_id,omitempty"`         // 主合同 ID
	ContractStartDate        *string              `json:"contract_start_date,omitempty"`         // 主合同开始日期
	ContractEndDate          *string              `json:"contract_end_date,omitempty"`           // 主合同到期日期
	ContractExpectedEndDate  *string              `json:"contract_expected_end_date,omitempty"`  // 主合同预计到期日期
	PayGroupId               *string              `json:"pay_group_id,omitempty"`                // 所属薪资组 ID
	InternationalAssignment  *bool                `json:"international_assignment,omitempty"`    // 是否外派
	WorkCalendarId           *string              `json:"work_calendar_id,omitempty"`            // 工作日历 ID
	Department               *BasicDepartment     `json:"department,omitempty"`                  // 部门基本信息
	DirectManager            *BasicEmployee       `json:"direct_manager,omitempty"`              // 直接上级基本信息
	DottedLineManager        *BasicEmployee       `json:"dotted_line_manager,omitempty"`         // 虚线上级基本信息
	TimeZone                 *string              `json:"time_zone,omitempty"`                   // 时区

	ServiceCompany   *string `json:"service_company,omitempty"`   // 任职公司
	CompensationType *Enum   `json:"compensation_type,omitempty"` // 薪资类型
	WorkShift        *Enum   `json:"work_shift,omitempty"`        // 排班类型
}

type EmployeeBuilder struct {
	employmentId             string // 雇佣 ID
	employmentIdFlag         bool
	atsApplicationId         string // 招聘投递 ID ，详细信息可以通过【获取投递信息】接口查询获得
	atsApplicationIdFlag     bool
	prehireId                string // 待入职 ID
	prehireIdFlag            bool
	employeeNumber           string // 工号
	employeeNumberFlag       bool
	employeeTypeId           string // 人员类型 ID，详细信息可通过【查询单个人员类型】接口获得
	employeeTypeIdFlag       bool
	departmentId             string // 部门 ID，详细信息可通过【查询单个部门】接口获得
	departmentIdFlag         bool
	jobLevelId               string // 职级 ID，详细信息可通过【查询单个职务级别】接口获得
	jobLevelIdFlag           bool
	jobLevel                 *JobLevel // 职级
	jobLevelFlag             bool
	jobGradeId               string // 职等 ID
	jobGradeIdFlag           bool
	workLocationId           string // 工作地点 ID，详细信息可通过【查询单个地点】接口获得
	workLocationIdFlag       bool
	jobFamilyId              string // 序列 ID，详细信息可通过【查询单个职务序列】接口获得
	jobFamilyIdFlag          bool
	jobFamily                *JobFamily // 序列
	jobFamilyFlag            bool
	jobId                    string // 职务 ID，详细信息可通过【查询单个职务】接口获得
	jobIdFlag                bool
	job                      *Job // 职务
	jobFlag                  bool
	companyId                string // 所属公司 ID，详细信息可通过【查询单个公司】接口获得
	companyIdFlag            bool
	workingHoursTypeId       string // 工时制度 ID，详细信息可通过【查询单个工时制度】接口获得
	workingHoursTypeIdFlag   bool
	tenure                   string // 司龄
	tenureFlag               bool
	seniorityDate            string // 资历起算日期
	seniorityDateFlag        bool
	effectiveDate            string // 当前雇佣记录的入职日期
	effectiveDateFlag        bool
	primaryEmployment        bool // 是否是主雇佣信息
	primaryEmploymentFlag    bool
	probationPeriod          int // 试用期时长（月）
	probationPeriodFlag      bool
	onProbation              bool // 是否在试用期中
	onProbationFlag          bool
	probationEndDate         string // 试用期结束日期（实际结束日期）
	probationEndDateFlag     bool
	directManagerId          string // 直接上级的雇佣 ID
	directManagerIdFlag      bool
	dottedLineManagerId      string // 虚线上级的雇佣 ID
	dottedLineManagerIdFlag  bool
	employmentType           *Enum // 雇佣类型，枚举值可通过文档【飞书人事枚举常量】雇佣类型（employment_type）枚举定义获得
	employmentTypeFlag       bool
	employmentStatus         *Enum // 雇佣状态，枚举值可通过文档【飞书人事枚举常量】雇员状态（employment_status）枚举定义获得
	employmentStatusFlag     bool
	expirationDate           string // 离职日期，即员工的最后一个工作日，最后一个工作日时员工的雇佣状态仍为“在职”，次日凌晨将更改为“离职”
	expirationDateFlag       bool
	reasonForOffboarding     *Enum // 离职原因，枚举值可通过文档【飞书人事枚举常量】离职原因（reason_for_offboarding）枚举定义部分获得
	reasonForOffboardingFlag bool
	emailAddress             string // 邮箱地址
	emailAddressFlag         bool

	workEmailList                []*WorkEmail // 工作邮箱列表，只有当邮箱满足下面所有条件时，才在个人信息页面可见
	workEmailListFlag            bool
	costCenterList               []*JobDataCostCenter // 成本中心列表
	costCenterListFlag           bool
	rehire                       *Enum // 是否离职重聘
	rehireFlag                   bool
	rehireEmploymentId           string // 历史雇佣信息 ID，可以通过【查询单个雇佣信息】查询详细信息
	rehireEmploymentIdFlag       bool
	personInfo                   *PersonInfo // 基本个人信息
	personInfoFlag               bool
	customFields                 []*CustomFieldData // 自定义字段
	customFieldsFlag             bool
	noncompeteStatus             *Enum // 竞业状态，枚举值包括:1.竞业中；2.未竞业
	noncompeteStatusFlag         bool
	pastOffboarding              bool // 是否历史离职人员
	pastOffboardingFlag          bool
	regularEmployeeStartDate     string // 转正式日期
	regularEmployeeStartDateFlag bool
	externalId                   string // 外部系统 ID , 可存储租户系统中的员工 ID
	externalIdFlag               bool
	timesEmployed                int // 入职次数
	timesEmployedFlag            bool
	recruitmentType              *Enum // 招聘来源，枚举值 api_name 可通过【获取自定义字段详情】接口查询
	recruitmentTypeFlag          bool
	avatarUrl                    string // 员工头像
	avatarUrlFlag                bool
	primaryContractId            string // 主合同 ID
	primaryContractIdFlag        bool
	contractStartDate            string // 主合同开始日期
	contractStartDateFlag        bool
	contractEndDate              string // 主合同到期日期
	contractEndDateFlag          bool
	contractExpectedEndDate      string // 主合同预计到期日期
	contractExpectedEndDateFlag  bool
	payGroupId                   string // 所属薪资组 ID
	payGroupIdFlag               bool
	internationalAssignment      bool // 是否外派
	internationalAssignmentFlag  bool
	workCalendarId               string // 工作日历 ID
	workCalendarIdFlag           bool
	department                   *BasicDepartment // 部门基本信息
	departmentFlag               bool
	directManager                *BasicEmployee // 直接上级基本信息
	directManagerFlag            bool
	dottedLineManager            *BasicEmployee // 虚线上级基本信息
	dottedLineManagerFlag        bool
	timeZone                     string // 时区
	timeZoneFlag                 bool

	serviceCompany       string // 任职公司
	serviceCompanyFlag   bool
	compensationType     *Enum // 薪资类型
	compensationTypeFlag bool
	workShift            *Enum // 排班类型
	workShiftFlag        bool
}

func NewEmployeeBuilder() *EmployeeBuilder {
	builder := &EmployeeBuilder{}
	return builder
}

// 雇佣 ID
//
// 示例值：6893014062142064135
func (builder *EmployeeBuilder) EmploymentId(employmentId string) *EmployeeBuilder {
	builder.employmentId = employmentId
	builder.employmentIdFlag = true
	return builder
}

// 招聘投递 ID ，详细信息可以通过【获取投递信息】接口查询获得
//
// 示例值：6838119494196871234
func (builder *EmployeeBuilder) AtsApplicationId(atsApplicationId string) *EmployeeBuilder {
	builder.atsApplicationId = atsApplicationId
	builder.atsApplicationIdFlag = true
	return builder
}

// 待入职 ID
//
// 示例值：7023239238976141133
func (builder *EmployeeBuilder) PrehireId(prehireId string) *EmployeeBuilder {
	builder.prehireId = prehireId
	builder.prehireIdFlag = true
	return builder
}

// 工号
//
// 示例值：1000000
func (builder *EmployeeBuilder) EmployeeNumber(employeeNumber string) *EmployeeBuilder {
	builder.employeeNumber = employeeNumber
	builder.employeeNumberFlag = true
	return builder
}

// 人员类型 ID，详细信息可通过【查询单个人员类型】接口获得
//
// 示例值：6971090097697521314
func (builder *EmployeeBuilder) EmployeeTypeId(employeeTypeId string) *EmployeeBuilder {
	builder.employeeTypeId = employeeTypeId
	builder.employeeTypeIdFlag = true
	return builder
}

// 部门 ID，详细信息可通过【查询单个部门】接口获得
//
// 示例值：6893014062142064135
func (builder *EmployeeBuilder) DepartmentId(departmentId string) *EmployeeBuilder {
	builder.departmentId = departmentId
	builder.departmentIdFlag = true
	return builder
}

// 职级 ID，详细信息可通过【查询单个职务级别】接口获得
//
// 示例值：6893014062142064135
func (builder *EmployeeBuilder) JobLevelId(jobLevelId string) *EmployeeBuilder {
	builder.jobLevelId = jobLevelId
	builder.jobLevelIdFlag = true
	return builder
}

// 职级
//
// 示例值：
func (builder *EmployeeBuilder) JobLevel(jobLevel *JobLevel) *EmployeeBuilder {
	builder.jobLevel = jobLevel
	builder.jobLevelFlag = true
	return builder
}

// 职等 ID
//
// 示例值：6893014062142064135
func (builder *EmployeeBuilder) JobGradeId(jobGradeId string) *EmployeeBuilder {
	builder.jobGradeId = jobGradeId
	builder.jobGradeIdFlag = true
	return builder
}

// 工作地点 ID，详细信息可通过【查询单个地点】接口获得
//
// 示例值：6893014062142064135
func (builder *EmployeeBuilder) WorkLocationId(workLocationId string) *EmployeeBuilder {
	builder.workLocationId = workLocationId
	builder.workLocationIdFlag = true
	return builder
}

// 序列 ID，详细信息可通过【查询单个职务序列】接口获得
//
// 示例值：6893014062142064135
func (builder *EmployeeBuilder) JobFamilyId(jobFamilyId string) *EmployeeBuilder {
	builder.jobFamilyId = jobFamilyId
	builder.jobFamilyIdFlag = true
	return builder
}

// 序列
//
// 示例值：
func (builder *EmployeeBuilder) JobFamily(jobFamily *JobFamily) *EmployeeBuilder {
	builder.jobFamily = jobFamily
	builder.jobFamilyFlag = true
	return builder
}

// 职务 ID，详细信息可通过【查询单个职务】接口获得
//
// 示例值：6893014062142064135
func (builder *EmployeeBuilder) JobId(jobId string) *EmployeeBuilder {
	builder.jobId = jobId
	builder.jobIdFlag = true
	return builder
}

// 职务
//
// 示例值：
func (builder *EmployeeBuilder) Job(job *Job) *EmployeeBuilder {
	builder.job = job
	builder.jobFlag = true
	return builder
}

// 所属公司 ID，详细信息可通过【查询单个公司】接口获得
//
// 示例值：6893014062142064135
func (builder *EmployeeBuilder) CompanyId(companyId string) *EmployeeBuilder {
	builder.companyId = companyId
	builder.companyIdFlag = true
	return builder
}

// 工时制度 ID，详细信息可通过【查询单个工时制度】接口获得
//
// 示例值：6893014062142064135
func (builder *EmployeeBuilder) WorkingHoursTypeId(workingHoursTypeId string) *EmployeeBuilder {
	builder.workingHoursTypeId = workingHoursTypeId
	builder.workingHoursTypeIdFlag = true
	return builder
}

// 司龄
//
// 示例值：0.01
func (builder *EmployeeBuilder) Tenure(tenure string) *EmployeeBuilder {
	builder.tenure = tenure
	builder.tenureFlag = true
	return builder
}

// 资历起算日期
//
// 示例值：2021-03-16
func (builder *EmployeeBuilder) SeniorityDate(seniorityDate string) *EmployeeBuilder {
	builder.seniorityDate = seniorityDate
	builder.seniorityDateFlag = true
	return builder
}

// 当前雇佣记录的入职日期
//
// 示例值：2021-03-16
func (builder *EmployeeBuilder) EffectiveDate(effectiveDate string) *EmployeeBuilder {
	builder.effectiveDate = effectiveDate
	builder.effectiveDateFlag = true
	return builder
}

// 是否是主雇佣信息
//
// 示例值：true
func (builder *EmployeeBuilder) PrimaryEmployment(primaryEmployment bool) *EmployeeBuilder {
	builder.primaryEmployment = primaryEmployment
	builder.primaryEmploymentFlag = true
	return builder
}

// 试用期时长（月）
//
// 示例值：16
func (builder *EmployeeBuilder) ProbationPeriod(probationPeriod int) *EmployeeBuilder {
	builder.probationPeriod = probationPeriod
	builder.probationPeriodFlag = true
	return builder
}

// 是否在试用期中
//
// 示例值：true
func (builder *EmployeeBuilder) OnProbation(onProbation bool) *EmployeeBuilder {
	builder.onProbation = onProbation
	builder.onProbationFlag = true
	return builder
}

// 试用期结束日期（实际结束日期）
//
// 示例值：2022-08-01
func (builder *EmployeeBuilder) ProbationEndDate(probationEndDate string) *EmployeeBuilder {
	builder.probationEndDate = probationEndDate
	builder.probationEndDateFlag = true
	return builder
}

// 直接上级的雇佣 ID
//
// 示例值：7027024823985411287
func (builder *EmployeeBuilder) DirectManagerId(directManagerId string) *EmployeeBuilder {
	builder.directManagerId = directManagerId
	builder.directManagerIdFlag = true
	return builder
}

// 虚线上级的雇佣 ID
//
// 示例值：7027024823985411782
func (builder *EmployeeBuilder) DottedLineManagerId(dottedLineManagerId string) *EmployeeBuilder {
	builder.dottedLineManagerId = dottedLineManagerId
	builder.dottedLineManagerIdFlag = true
	return builder
}

// 雇佣类型，枚举值可通过文档【飞书人事枚举常量】雇佣类型（employment_type）枚举定义获得
//
// 示例值：
func (builder *EmployeeBuilder) EmploymentType(employmentType *Enum) *EmployeeBuilder {
	builder.employmentType = employmentType
	builder.employmentTypeFlag = true
	return builder
}

// 雇佣状态，枚举值可通过文档【飞书人事枚举常量】雇员状态（employment_status）枚举定义获得
//
// 示例值：
func (builder *EmployeeBuilder) EmploymentStatus(employmentStatus *Enum) *EmployeeBuilder {
	builder.employmentStatus = employmentStatus
	builder.employmentStatusFlag = true
	return builder
}

// 离职日期，即员工的最后一个工作日，最后一个工作日时员工的雇佣状态仍为“在职”，次日凌晨将更改为“离职”
//
// 示例值：2022-08-16
func (builder *EmployeeBuilder) ExpirationDate(expirationDate string) *EmployeeBuilder {
	builder.expirationDate = expirationDate
	builder.expirationDateFlag = true
	return builder
}

// 离职原因，枚举值可通过文档【飞书人事枚举常量】离职原因（reason_for_offboarding）枚举定义部分获得
//
// 示例值：
func (builder *EmployeeBuilder) ReasonForOffboarding(reasonForOffboarding *Enum) *EmployeeBuilder {
	builder.reasonForOffboarding = reasonForOffboarding
	builder.reasonForOffboardingFlag = true
	return builder
}

// 邮箱地址
//
// 示例值：test@163.com
func (builder *EmployeeBuilder) EmailAddress(emailAddress string) *EmployeeBuilder {
	builder.emailAddress = emailAddress
	builder.emailAddressFlag = true
	return builder
}

// 工作邮箱列表，只有当邮箱满足下面所有条件时，才在个人信息页面可见
//
// 示例值：
func (builder *EmployeeBuilder) WorkEmailList(workEmailList []*WorkEmail) *EmployeeBuilder {
	builder.workEmailList = workEmailList
	builder.workEmailListFlag = true
	return builder
}

// 成本中心列表
//
// 示例值：
func (builder *EmployeeBuilder) CostCenterList(costCenterList []*JobDataCostCenter) *EmployeeBuilder {
	builder.costCenterList = costCenterList
	builder.costCenterListFlag = true
	return builder
}

// 是否离职重聘
//
// 示例值：
func (builder *EmployeeBuilder) Rehire(rehire *Enum) *EmployeeBuilder {
	builder.rehire = rehire
	builder.rehireFlag = true
	return builder
}

// 历史雇佣信息 ID，可以通过【查询单个雇佣信息】查询详细信息
//
// 示例值：7164286667866966659
func (builder *EmployeeBuilder) RehireEmploymentId(rehireEmploymentId string) *EmployeeBuilder {
	builder.rehireEmploymentId = rehireEmploymentId
	builder.rehireEmploymentIdFlag = true
	return builder
}

// 基本个人信息
//
// 示例值：
func (builder *EmployeeBuilder) PersonInfo(personInfo *PersonInfo) *EmployeeBuilder {
	builder.personInfo = personInfo
	builder.personInfoFlag = true
	return builder
}

// 自定义字段
//
// 示例值：
func (builder *EmployeeBuilder) CustomFields(customFields []*CustomFieldData) *EmployeeBuilder {
	builder.customFields = customFields
	builder.customFieldsFlag = true
	return builder
}

// 竞业状态，枚举值包括:1.竞业中；2.未竞业
//
// 示例值：
func (builder *EmployeeBuilder) NoncompeteStatus(noncompeteStatus *Enum) *EmployeeBuilder {
	builder.noncompeteStatus = noncompeteStatus
	builder.noncompeteStatusFlag = true
	return builder
}

// 是否历史离职人员
//
// 示例值：true
func (builder *EmployeeBuilder) PastOffboarding(pastOffboarding bool) *EmployeeBuilder {
	builder.pastOffboarding = pastOffboarding
	builder.pastOffboardingFlag = true
	return builder
}

// 转正式日期
//
// 示例值：2020-01-01
func (builder *EmployeeBuilder) RegularEmployeeStartDate(regularEmployeeStartDate string) *EmployeeBuilder {
	builder.regularEmployeeStartDate = regularEmployeeStartDate
	builder.regularEmployeeStartDateFlag = true
	return builder
}

// 外部系统 ID , 可存储租户系统中的员工 ID
//
// 示例值：10000000
func (builder *EmployeeBuilder) ExternalId(externalId string) *EmployeeBuilder {
	builder.externalId = externalId
	builder.externalIdFlag = true
	return builder
}

// 入职次数
//
// 示例值：16
func (builder *EmployeeBuilder) TimesEmployed(timesEmployed int) *EmployeeBuilder {
	builder.timesEmployed = timesEmployed
	builder.timesEmployedFlag = true
	return builder
}

// 招聘来源，枚举值 api_name 可通过【获取自定义字段详情】接口查询
//
// 示例值：
func (builder *EmployeeBuilder) RecruitmentType(recruitmentType *Enum) *EmployeeBuilder {
	builder.recruitmentType = recruitmentType
	builder.recruitmentTypeFlag = true
	return builder
}

// 员工头像
//
// 示例值：https://internal-api-lark-file.feishu-boe.cn/static-resource/v1/v2_a550d36b-28ef-48ad-9e50-58004beb386j~?image_size=noop&cut_type=&quality=&format=png&sticker_format=.webp
func (builder *EmployeeBuilder) AvatarUrl(avatarUrl string) *EmployeeBuilder {
	builder.avatarUrl = avatarUrl
	builder.avatarUrlFlag = true
	return builder
}

// 主合同 ID
//
// 示例值：7164286667866966659
func (builder *EmployeeBuilder) PrimaryContractId(primaryContractId string) *EmployeeBuilder {
	builder.primaryContractId = primaryContractId
	builder.primaryContractIdFlag = true
	return builder
}

// 主合同开始日期
//
// 示例值：2020-01-01
func (builder *EmployeeBuilder) ContractStartDate(contractStartDate string) *EmployeeBuilder {
	builder.contractStartDate = contractStartDate
	builder.contractStartDateFlag = true
	return builder
}

// 主合同到期日期
//
// 示例值：2020-01-01
func (builder *EmployeeBuilder) ContractEndDate(contractEndDate string) *EmployeeBuilder {
	builder.contractEndDate = contractEndDate
	builder.contractEndDateFlag = true
	return builder
}

// 主合同预计到期日期
//
// 示例值：2020-01-01
func (builder *EmployeeBuilder) ContractExpectedEndDate(contractExpectedEndDate string) *EmployeeBuilder {
	builder.contractExpectedEndDate = contractExpectedEndDate
	builder.contractExpectedEndDateFlag = true
	return builder
}

// 所属薪资组 ID
//
// 示例值：7164286667866966659
func (builder *EmployeeBuilder) PayGroupId(payGroupId string) *EmployeeBuilder {
	builder.payGroupId = payGroupId
	builder.payGroupIdFlag = true
	return builder
}

// 是否外派
//
// 示例值：true
func (builder *EmployeeBuilder) InternationalAssignment(internationalAssignment bool) *EmployeeBuilder {
	builder.internationalAssignment = internationalAssignment
	builder.internationalAssignmentFlag = true
	return builder
}

// 工作日历 ID
//
// 示例值：7164286667866966659
func (builder *EmployeeBuilder) WorkCalendarId(workCalendarId string) *EmployeeBuilder {
	builder.workCalendarId = workCalendarId
	builder.workCalendarIdFlag = true
	return builder
}

// 部门基本信息
//
// 示例值：
func (builder *EmployeeBuilder) Department(department *BasicDepartment) *EmployeeBuilder {
	builder.department = department
	builder.departmentFlag = true
	return builder
}

// 直接上级基本信息
//
// 示例值：
func (builder *EmployeeBuilder) DirectManager(directManager *BasicEmployee) *EmployeeBuilder {
	builder.directManager = directManager
	builder.directManagerFlag = true
	return builder
}

// 虚线上级基本信息
//
// 示例值：
func (builder *EmployeeBuilder) DottedLineManager(dottedLineManager *BasicEmployee) *EmployeeBuilder {
	builder.dottedLineManager = dottedLineManager
	builder.dottedLineManagerFlag = true
	return builder
}

// 时区
//
// 示例值：Asia/Shanghai
func (builder *EmployeeBuilder) TimeZone(timeZone string) *EmployeeBuilder {
	builder.timeZone = timeZone
	builder.timeZoneFlag = true
	return builder
}

// 任职公司
//
// 示例值：7174374910734141112
func (builder *EmployeeBuilder) ServiceCompany(serviceCompany string) *EmployeeBuilder {
	builder.serviceCompany = serviceCompany
	builder.serviceCompanyFlag = true
	return builder
}

// 薪资类型
//
// 示例值：
func (builder *EmployeeBuilder) CompensationType(compensationType *Enum) *EmployeeBuilder {
	builder.compensationType = compensationType
	builder.compensationTypeFlag = true
	return builder
}

// 排班类型
//
// 示例值：
func (builder *EmployeeBuilder) WorkShift(workShift *Enum) *EmployeeBuilder {
	builder.workShift = workShift
	builder.workShiftFlag = true
	return builder
}

func (builder *EmployeeBuilder) Build() *Employee {
	req := &Employee{}
	if builder.employmentIdFlag {
		req.EmploymentId = &builder.employmentId

	}
	if builder.atsApplicationIdFlag {
		req.AtsApplicationId = &builder.atsApplicationId

	}
	if builder.prehireIdFlag {
		req.PrehireId = &builder.prehireId

	}
	if builder.employeeNumberFlag {
		req.EmployeeNumber = &builder.employeeNumber

	}
	if builder.employeeTypeIdFlag {
		req.EmployeeTypeId = &builder.employeeTypeId

	}
	if builder.departmentIdFlag {
		req.DepartmentId = &builder.departmentId

	}
	if builder.jobLevelIdFlag {
		req.JobLevelId = &builder.jobLevelId

	}
	if builder.jobLevelFlag {
		req.JobLevel = builder.jobLevel
	}
	if builder.jobGradeIdFlag {
		req.JobGradeId = &builder.jobGradeId

	}
	if builder.workLocationIdFlag {
		req.WorkLocationId = &builder.workLocationId

	}
	if builder.jobFamilyIdFlag {
		req.JobFamilyId = &builder.jobFamilyId

	}
	if builder.jobFamilyFlag {
		req.JobFamily = builder.jobFamily
	}
	if builder.jobIdFlag {
		req.JobId = &builder.jobId

	}
	if builder.jobFlag {
		req.Job = builder.job
	}
	if builder.companyIdFlag {
		req.CompanyId = &builder.companyId

	}
	if builder.workingHoursTypeIdFlag {
		req.WorkingHoursTypeId = &builder.workingHoursTypeId

	}
	if builder.tenureFlag {
		req.Tenure = &builder.tenure

	}
	if builder.seniorityDateFlag {
		req.SeniorityDate = &builder.seniorityDate

	}
	if builder.effectiveDateFlag {
		req.EffectiveDate = &builder.effectiveDate

	}
	if builder.primaryEmploymentFlag {
		req.PrimaryEmployment = &builder.primaryEmployment

	}
	if builder.probationPeriodFlag {
		req.ProbationPeriod = &builder.probationPeriod

	}
	if builder.onProbationFlag {
		req.OnProbation = &builder.onProbation

	}
	if builder.probationEndDateFlag {
		req.ProbationEndDate = &builder.probationEndDate

	}
	if builder.directManagerIdFlag {
		req.DirectManagerId = &builder.directManagerId

	}
	if builder.dottedLineManagerIdFlag {
		req.DottedLineManagerId = &builder.dottedLineManagerId

	}
	if builder.employmentTypeFlag {
		req.EmploymentType = builder.employmentType
	}
	if builder.employmentStatusFlag {
		req.EmploymentStatus = builder.employmentStatus
	}
	if builder.expirationDateFlag {
		req.ExpirationDate = &builder.expirationDate

	}
	if builder.reasonForOffboardingFlag {
		req.ReasonForOffboarding = builder.reasonForOffboarding
	}
	if builder.emailAddressFlag {
		req.EmailAddress = &builder.emailAddress

	}

	if builder.workEmailListFlag {
		req.WorkEmailList = builder.workEmailList
	}
	if builder.costCenterListFlag {
		req.CostCenterList = builder.costCenterList
	}
	if builder.rehireFlag {
		req.Rehire = builder.rehire
	}
	if builder.rehireEmploymentIdFlag {
		req.RehireEmploymentId = &builder.rehireEmploymentId

	}
	if builder.personInfoFlag {
		req.PersonInfo = builder.personInfo
	}
	if builder.customFieldsFlag {
		req.CustomFields = builder.customFields
	}
	if builder.noncompeteStatusFlag {
		req.NoncompeteStatus = builder.noncompeteStatus
	}
	if builder.pastOffboardingFlag {
		req.PastOffboarding = &builder.pastOffboarding

	}
	if builder.regularEmployeeStartDateFlag {
		req.RegularEmployeeStartDate = &builder.regularEmployeeStartDate

	}
	if builder.externalIdFlag {
		req.ExternalId = &builder.externalId

	}
	if builder.timesEmployedFlag {
		req.TimesEmployed = &builder.timesEmployed

	}
	if builder.recruitmentTypeFlag {
		req.RecruitmentType = builder.recruitmentType
	}
	if builder.avatarUrlFlag {
		req.AvatarUrl = &builder.avatarUrl

	}
	if builder.primaryContractIdFlag {
		req.PrimaryContractId = &builder.primaryContractId

	}
	if builder.contractStartDateFlag {
		req.ContractStartDate = &builder.contractStartDate

	}
	if builder.contractEndDateFlag {
		req.ContractEndDate = &builder.contractEndDate

	}
	if builder.contractExpectedEndDateFlag {
		req.ContractExpectedEndDate = &builder.contractExpectedEndDate

	}
	if builder.payGroupIdFlag {
		req.PayGroupId = &builder.payGroupId

	}
	if builder.internationalAssignmentFlag {
		req.InternationalAssignment = &builder.internationalAssignment

	}
	if builder.workCalendarIdFlag {
		req.WorkCalendarId = &builder.workCalendarId

	}
	if builder.departmentFlag {
		req.Department = builder.department
	}
	if builder.directManagerFlag {
		req.DirectManager = builder.directManager
	}
	if builder.dottedLineManagerFlag {
		req.DottedLineManager = builder.dottedLineManager
	}
	if builder.timeZoneFlag {
		req.TimeZone = &builder.timeZone

	}

	if builder.serviceCompanyFlag {
		req.ServiceCompany = &builder.serviceCompany

	}
	if builder.compensationTypeFlag {
		req.CompensationType = builder.compensationType
	}
	if builder.workShiftFlag {
		req.WorkShift = builder.workShift
	}
	return req
}

type EmployeeDomainEventData struct {
	Id          *string  `json:"id,omitempty"`            // 变更实体的ID
	Entity      *string  `json:"entity,omitempty"`        // 变更实体标识，ObjAPIName
	AggEntity   *string  `json:"agg_entity,omitempty"`    // 聚合实体标识，父对象 ObjAPIName
	AggEntityId *string  `json:"agg_entity_id,omitempty"` // 聚合实体ID 父对象ID
	OptType     *int     `json:"opt_type,omitempty"`      // 操作类型
	Fields      []string `json:"fields,omitempty"`        // 字段标识，ApiName
}

type EmployeeDomainEventDataBuilder struct {
	id              string // 变更实体的ID
	idFlag          bool
	entity          string // 变更实体标识，ObjAPIName
	entityFlag      bool
	aggEntity       string // 聚合实体标识，父对象 ObjAPIName
	aggEntityFlag   bool
	aggEntityId     string // 聚合实体ID 父对象ID
	aggEntityIdFlag bool
	optType         int // 操作类型
	optTypeFlag     bool
	fields          []string // 字段标识，ApiName
	fieldsFlag      bool
}

func NewEmployeeDomainEventDataBuilder() *EmployeeDomainEventDataBuilder {
	builder := &EmployeeDomainEventDataBuilder{}
	return builder
}

// 变更实体的ID
//
// 示例值：7291573441955235372
func (builder *EmployeeDomainEventDataBuilder) Id(id string) *EmployeeDomainEventDataBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

// 变更实体标识，ObjAPIName
//
// 示例值：email
func (builder *EmployeeDomainEventDataBuilder) Entity(entity string) *EmployeeDomainEventDataBuilder {
	builder.entity = entity
	builder.entityFlag = true
	return builder
}

// 聚合实体标识，父对象 ObjAPIName
//
// 示例值：person
func (builder *EmployeeDomainEventDataBuilder) AggEntity(aggEntity string) *EmployeeDomainEventDataBuilder {
	builder.aggEntity = aggEntity
	builder.aggEntityFlag = true
	return builder
}

// 聚合实体ID 父对象ID
//
// 示例值：7291273149417948716
func (builder *EmployeeDomainEventDataBuilder) AggEntityId(aggEntityId string) *EmployeeDomainEventDataBuilder {
	builder.aggEntityId = aggEntityId
	builder.aggEntityIdFlag = true
	return builder
}

// 操作类型
//
// 示例值：1
func (builder *EmployeeDomainEventDataBuilder) OptType(optType int) *EmployeeDomainEventDataBuilder {
	builder.optType = optType
	builder.optTypeFlag = true
	return builder
}

// 字段标识，ApiName
//
// 示例值：
func (builder *EmployeeDomainEventDataBuilder) Fields(fields []string) *EmployeeDomainEventDataBuilder {
	builder.fields = fields
	builder.fieldsFlag = true
	return builder
}

func (builder *EmployeeDomainEventDataBuilder) Build() *EmployeeDomainEventData {
	req := &EmployeeDomainEventData{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.entityFlag {
		req.Entity = &builder.entity

	}
	if builder.aggEntityFlag {
		req.AggEntity = &builder.aggEntity

	}
	if builder.aggEntityIdFlag {
		req.AggEntityId = &builder.aggEntityId

	}
	if builder.optTypeFlag {
		req.OptType = &builder.optType

	}
	if builder.fieldsFlag {
		req.Fields = builder.fields
	}
	return req
}

type EmployeeInternationalAssignment struct {
	EmploymentId             *string                      `json:"employment_id,omitempty"`             // Employment ID
	InternationalAssignments []*InternationalAssignmentV2 `json:"international_assignments,omitempty"` // 派驻信息列表
}

type EmployeeInternationalAssignmentBuilder struct {
	employmentId                 string // Employment ID
	employmentIdFlag             bool
	internationalAssignments     []*InternationalAssignmentV2 // 派驻信息列表
	internationalAssignmentsFlag bool
}

func NewEmployeeInternationalAssignmentBuilder() *EmployeeInternationalAssignmentBuilder {
	builder := &EmployeeInternationalAssignmentBuilder{}
	return builder
}

// Employment ID
//
// 示例值：6893014062142064135
func (builder *EmployeeInternationalAssignmentBuilder) EmploymentId(employmentId string) *EmployeeInternationalAssignmentBuilder {
	builder.employmentId = employmentId
	builder.employmentIdFlag = true
	return builder
}

// 派驻信息列表
//
// 示例值：
func (builder *EmployeeInternationalAssignmentBuilder) InternationalAssignments(internationalAssignments []*InternationalAssignmentV2) *EmployeeInternationalAssignmentBuilder {
	builder.internationalAssignments = internationalAssignments
	builder.internationalAssignmentsFlag = true
	return builder
}

func (builder *EmployeeInternationalAssignmentBuilder) Build() *EmployeeInternationalAssignment {
	req := &EmployeeInternationalAssignment{}
	if builder.employmentIdFlag {
		req.EmploymentId = &builder.employmentId

	}
	if builder.internationalAssignmentsFlag {
		req.InternationalAssignments = builder.internationalAssignments
	}
	return req
}

type EmployeeJobData struct {
	EmploymentId *string    `json:"employment_id,omitempty"` // Employment ID
	JobDatas     []*JobData `json:"job_datas,omitempty"`     // 实体在 CoreHR 内部的唯一键
}

type EmployeeJobDataBuilder struct {
	employmentId     string // Employment ID
	employmentIdFlag bool
	jobDatas         []*JobData // 实体在 CoreHR 内部的唯一键
	jobDatasFlag     bool
}

func NewEmployeeJobDataBuilder() *EmployeeJobDataBuilder {
	builder := &EmployeeJobDataBuilder{}
	return builder
}

// Employment ID
//
// 示例值：6893014062142064135
func (builder *EmployeeJobDataBuilder) EmploymentId(employmentId string) *EmployeeJobDataBuilder {
	builder.employmentId = employmentId
	builder.employmentIdFlag = true
	return builder
}

// 实体在 CoreHR 内部的唯一键
//
// 示例值：6890452208593372679
func (builder *EmployeeJobDataBuilder) JobDatas(jobDatas []*JobData) *EmployeeJobDataBuilder {
	builder.jobDatas = jobDatas
	builder.jobDatasFlag = true
	return builder
}

func (builder *EmployeeJobDataBuilder) Build() *EmployeeJobData {
	req := &EmployeeJobData{}
	if builder.employmentIdFlag {
		req.EmploymentId = &builder.employmentId

	}
	if builder.jobDatasFlag {
		req.JobDatas = builder.jobDatas
	}
	return req
}

type Employment struct {
	PrehireId            *string              `json:"prehire_id,omitempty"`             // 待入职 ID
	EmployeeTypeId       *string              `json:"employee_type_id,omitempty"`       // 人员类型
	Tenure               *string              `json:"tenure,omitempty"`                 // 司龄
	DepartmentId         *string              `json:"department_id,omitempty"`          // 部门 ID，枚举值及详细信息可通过【批量查询部门】接口查询获得
	JobLevelId           *string              `json:"job_level_id,omitempty"`           // 职级 ID，枚举值及详细信息可通过【批量查询职务级别】接口查询获得
	WorkLocationId       *string              `json:"work_location_id,omitempty"`       // 工作地点 ID，枚举值及详细信息可通过【批量查询地点】接口查询获得
	JobFamilyId          *string              `json:"job_family_id,omitempty"`          // 职务序列 ID，枚举值及详细信息可通过【批量查询职务序列】接口查询获得
	JobId                *string              `json:"job_id,omitempty"`                 // 职务 ID，枚举值及详细信息可通过【批量查询职务】接口查询获得
	CompanyId            *string              `json:"company_id,omitempty"`             // 法人主体 ID，枚举值及详细信息可通过【批量查询公司】接口查询获得
	WorkingHoursTypeId   *string              `json:"working_hours_type_id,omitempty"`  // 工时制度 ID，枚举值及详细信息可通过【批量查询工时制度】接口查询获得
	Id                   *string              `json:"id,omitempty"`                     // 实体在飞书人事（企业版）内部的唯一键
	SeniorityDate        *string              `json:"seniority_date,omitempty"`         // 资历起算日期
	EmployeeNumber       *string              `json:"employee_number,omitempty"`        // 员工编号
	EffectiveDate        *string              `json:"effective_date,omitempty"`         // 当前雇佣记录的入职日期
	ExpirationDate       *string              `json:"expiration_date,omitempty"`        // 离职日期，即员工的最后一个工作日，最后一个工作日时员工的雇佣状态仍为“在职”，次日凌晨将更改为“离职”
	EmploymentType       *Enum                `json:"employment_type,omitempty"`        // 雇佣类型
	PersonId             *string              `json:"person_id,omitempty"`              // 人员信息，引用 Person 的 ID
	ProbationPeriod      *int                 `json:"probation_period,omitempty"`       // 试用期时长（月），试用期结束日期 - 试用期开始日期后取月数
	OnProbation          *string              `json:"on_probation,omitempty"`           // 是否在试用期中
	ProbationEndDate     *string              `json:"probation_end_date,omitempty"`     // 试用期结束日期
	PrimaryEmployment    *bool                `json:"primary_employment,omitempty"`     // 是否是主雇佣信息
	EmploymentStatus     *Enum                `json:"employment_status,omitempty"`      // 雇员状态
	WorkEmailList        []*Email             `json:"work_email_list,omitempty"`        // 工作邮箱列表
	EmailAddress         *string              `json:"email_address,omitempty"`          // 邮箱
	ReasonForOffboarding *Enum                `json:"reason_for_offboarding,omitempty"` // 离职原因
	CostCenterList       []*JobDataCostCenter `json:"cost_center_list,omitempty"`       // 成本中心列表
	AtsApplicationId     *string              `json:"ats_application_id,omitempty"`     // 招聘应用 ID
	CustomFields         []*ObjectFieldData   `json:"custom_fields,omitempty"`          // 自定义字段
}

type EmploymentBuilder struct {
	prehireId                string // 待入职 ID
	prehireIdFlag            bool
	employeeTypeId           string // 人员类型
	employeeTypeIdFlag       bool
	tenure                   string // 司龄
	tenureFlag               bool
	departmentId             string // 部门 ID，枚举值及详细信息可通过【批量查询部门】接口查询获得
	departmentIdFlag         bool
	jobLevelId               string // 职级 ID，枚举值及详细信息可通过【批量查询职务级别】接口查询获得
	jobLevelIdFlag           bool
	workLocationId           string // 工作地点 ID，枚举值及详细信息可通过【批量查询地点】接口查询获得
	workLocationIdFlag       bool
	jobFamilyId              string // 职务序列 ID，枚举值及详细信息可通过【批量查询职务序列】接口查询获得
	jobFamilyIdFlag          bool
	jobId                    string // 职务 ID，枚举值及详细信息可通过【批量查询职务】接口查询获得
	jobIdFlag                bool
	companyId                string // 法人主体 ID，枚举值及详细信息可通过【批量查询公司】接口查询获得
	companyIdFlag            bool
	workingHoursTypeId       string // 工时制度 ID，枚举值及详细信息可通过【批量查询工时制度】接口查询获得
	workingHoursTypeIdFlag   bool
	id                       string // 实体在飞书人事（企业版）内部的唯一键
	idFlag                   bool
	seniorityDate            string // 资历起算日期
	seniorityDateFlag        bool
	employeeNumber           string // 员工编号
	employeeNumberFlag       bool
	effectiveDate            string // 当前雇佣记录的入职日期
	effectiveDateFlag        bool
	expirationDate           string // 离职日期，即员工的最后一个工作日，最后一个工作日时员工的雇佣状态仍为“在职”，次日凌晨将更改为“离职”
	expirationDateFlag       bool
	employmentType           *Enum // 雇佣类型
	employmentTypeFlag       bool
	personId                 string // 人员信息，引用 Person 的 ID
	personIdFlag             bool
	probationPeriod          int // 试用期时长（月），试用期结束日期 - 试用期开始日期后取月数
	probationPeriodFlag      bool
	onProbation              string // 是否在试用期中
	onProbationFlag          bool
	probationEndDate         string // 试用期结束日期
	probationEndDateFlag     bool
	primaryEmployment        bool // 是否是主雇佣信息
	primaryEmploymentFlag    bool
	employmentStatus         *Enum // 雇员状态
	employmentStatusFlag     bool
	workEmailList            []*Email // 工作邮箱列表
	workEmailListFlag        bool
	emailAddress             string // 邮箱
	emailAddressFlag         bool
	reasonForOffboarding     *Enum // 离职原因
	reasonForOffboardingFlag bool
	costCenterList           []*JobDataCostCenter // 成本中心列表
	costCenterListFlag       bool
	atsApplicationId         string // 招聘应用 ID
	atsApplicationIdFlag     bool
	customFields             []*ObjectFieldData // 自定义字段
	customFieldsFlag         bool
}

func NewEmploymentBuilder() *EmploymentBuilder {
	builder := &EmploymentBuilder{}
	return builder
}

// 待入职 ID
//
// 示例值：1
func (builder *EmploymentBuilder) PrehireId(prehireId string) *EmploymentBuilder {
	builder.prehireId = prehireId
	builder.prehireIdFlag = true
	return builder
}

// 人员类型
//
// 示例值：1
func (builder *EmploymentBuilder) EmployeeTypeId(employeeTypeId string) *EmploymentBuilder {
	builder.employeeTypeId = employeeTypeId
	builder.employeeTypeIdFlag = true
	return builder
}

// 司龄
//
// 示例值：1
func (builder *EmploymentBuilder) Tenure(tenure string) *EmploymentBuilder {
	builder.tenure = tenure
	builder.tenureFlag = true
	return builder
}

// 部门 ID，枚举值及详细信息可通过【批量查询部门】接口查询获得
//
// 示例值：6893014062142064135
func (builder *EmploymentBuilder) DepartmentId(departmentId string) *EmploymentBuilder {
	builder.departmentId = departmentId
	builder.departmentIdFlag = true
	return builder
}

// 职级 ID，枚举值及详细信息可通过【批量查询职务级别】接口查询获得
//
// 示例值：6893014062142064135
func (builder *EmploymentBuilder) JobLevelId(jobLevelId string) *EmploymentBuilder {
	builder.jobLevelId = jobLevelId
	builder.jobLevelIdFlag = true
	return builder
}

// 工作地点 ID，枚举值及详细信息可通过【批量查询地点】接口查询获得
//
// 示例值：6893014062142064135
func (builder *EmploymentBuilder) WorkLocationId(workLocationId string) *EmploymentBuilder {
	builder.workLocationId = workLocationId
	builder.workLocationIdFlag = true
	return builder
}

// 职务序列 ID，枚举值及详细信息可通过【批量查询职务序列】接口查询获得
//
// 示例值：6893014062142064135
func (builder *EmploymentBuilder) JobFamilyId(jobFamilyId string) *EmploymentBuilder {
	builder.jobFamilyId = jobFamilyId
	builder.jobFamilyIdFlag = true
	return builder
}

// 职务 ID，枚举值及详细信息可通过【批量查询职务】接口查询获得
//
// 示例值：6893014062142064135
func (builder *EmploymentBuilder) JobId(jobId string) *EmploymentBuilder {
	builder.jobId = jobId
	builder.jobIdFlag = true
	return builder
}

// 法人主体 ID，枚举值及详细信息可通过【批量查询公司】接口查询获得
//
// 示例值：6893014062142064135
func (builder *EmploymentBuilder) CompanyId(companyId string) *EmploymentBuilder {
	builder.companyId = companyId
	builder.companyIdFlag = true
	return builder
}

// 工时制度 ID，枚举值及详细信息可通过【批量查询工时制度】接口查询获得
//
// 示例值：6893014062142064135
func (builder *EmploymentBuilder) WorkingHoursTypeId(workingHoursTypeId string) *EmploymentBuilder {
	builder.workingHoursTypeId = workingHoursTypeId
	builder.workingHoursTypeIdFlag = true
	return builder
}

// 实体在飞书人事（企业版）内部的唯一键
//
// 示例值：6893014062142064135
func (builder *EmploymentBuilder) Id(id string) *EmploymentBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

// 资历起算日期
//
// 示例值：2020-01-01
func (builder *EmploymentBuilder) SeniorityDate(seniorityDate string) *EmploymentBuilder {
	builder.seniorityDate = seniorityDate
	builder.seniorityDateFlag = true
	return builder
}

// 员工编号
//
// 示例值：1000000
func (builder *EmploymentBuilder) EmployeeNumber(employeeNumber string) *EmploymentBuilder {
	builder.employeeNumber = employeeNumber
	builder.employeeNumberFlag = true
	return builder
}

// 当前雇佣记录的入职日期
//
// 示例值：2020-01-01
func (builder *EmploymentBuilder) EffectiveDate(effectiveDate string) *EmploymentBuilder {
	builder.effectiveDate = effectiveDate
	builder.effectiveDateFlag = true
	return builder
}

// 离职日期，即员工的最后一个工作日，最后一个工作日时员工的雇佣状态仍为“在职”，次日凌晨将更改为“离职”
//
// 示例值：2021-01-01
func (builder *EmploymentBuilder) ExpirationDate(expirationDate string) *EmploymentBuilder {
	builder.expirationDate = expirationDate
	builder.expirationDateFlag = true
	return builder
}

// 雇佣类型
//
// 示例值：
func (builder *EmploymentBuilder) EmploymentType(employmentType *Enum) *EmploymentBuilder {
	builder.employmentType = employmentType
	builder.employmentTypeFlag = true
	return builder
}

// 人员信息，引用 Person 的 ID
//
// 示例值：6919733936050406926
func (builder *EmploymentBuilder) PersonId(personId string) *EmploymentBuilder {
	builder.personId = personId
	builder.personIdFlag = true
	return builder
}

// 试用期时长（月），试用期结束日期 - 试用期开始日期后取月数
//
// 示例值：9999
func (builder *EmploymentBuilder) ProbationPeriod(probationPeriod int) *EmploymentBuilder {
	builder.probationPeriod = probationPeriod
	builder.probationPeriodFlag = true
	return builder
}

// 是否在试用期中
//
// 示例值：true
func (builder *EmploymentBuilder) OnProbation(onProbation string) *EmploymentBuilder {
	builder.onProbation = onProbation
	builder.onProbationFlag = true
	return builder
}

// 试用期结束日期
//
// 示例值：2022-01-01
func (builder *EmploymentBuilder) ProbationEndDate(probationEndDate string) *EmploymentBuilder {
	builder.probationEndDate = probationEndDate
	builder.probationEndDateFlag = true
	return builder
}

// 是否是主雇佣信息
//
// 示例值：true
func (builder *EmploymentBuilder) PrimaryEmployment(primaryEmployment bool) *EmploymentBuilder {
	builder.primaryEmployment = primaryEmployment
	builder.primaryEmploymentFlag = true
	return builder
}

// 雇员状态
//
// 示例值：
func (builder *EmploymentBuilder) EmploymentStatus(employmentStatus *Enum) *EmploymentBuilder {
	builder.employmentStatus = employmentStatus
	builder.employmentStatusFlag = true
	return builder
}

// 工作邮箱列表
//
// 示例值：
func (builder *EmploymentBuilder) WorkEmailList(workEmailList []*Email) *EmploymentBuilder {
	builder.workEmailList = workEmailList
	builder.workEmailListFlag = true
	return builder
}

// 邮箱
//
// 示例值：test@163.com
func (builder *EmploymentBuilder) EmailAddress(emailAddress string) *EmploymentBuilder {
	builder.emailAddress = emailAddress
	builder.emailAddressFlag = true
	return builder
}

// 离职原因
//
// 示例值：
func (builder *EmploymentBuilder) ReasonForOffboarding(reasonForOffboarding *Enum) *EmploymentBuilder {
	builder.reasonForOffboarding = reasonForOffboarding
	builder.reasonForOffboardingFlag = true
	return builder
}

// 成本中心列表
//
// 示例值：
func (builder *EmploymentBuilder) CostCenterList(costCenterList []*JobDataCostCenter) *EmploymentBuilder {
	builder.costCenterList = costCenterList
	builder.costCenterListFlag = true
	return builder
}

// 招聘应用 ID
//
// 示例值：6838119494196871234
func (builder *EmploymentBuilder) AtsApplicationId(atsApplicationId string) *EmploymentBuilder {
	builder.atsApplicationId = atsApplicationId
	builder.atsApplicationIdFlag = true
	return builder
}

// 自定义字段
//
// 示例值：
func (builder *EmploymentBuilder) CustomFields(customFields []*ObjectFieldData) *EmploymentBuilder {
	builder.customFields = customFields
	builder.customFieldsFlag = true
	return builder
}

func (builder *EmploymentBuilder) Build() *Employment {
	req := &Employment{}
	if builder.prehireIdFlag {
		req.PrehireId = &builder.prehireId

	}
	if builder.employeeTypeIdFlag {
		req.EmployeeTypeId = &builder.employeeTypeId

	}
	if builder.tenureFlag {
		req.Tenure = &builder.tenure

	}
	if builder.departmentIdFlag {
		req.DepartmentId = &builder.departmentId

	}
	if builder.jobLevelIdFlag {
		req.JobLevelId = &builder.jobLevelId

	}
	if builder.workLocationIdFlag {
		req.WorkLocationId = &builder.workLocationId

	}
	if builder.jobFamilyIdFlag {
		req.JobFamilyId = &builder.jobFamilyId

	}
	if builder.jobIdFlag {
		req.JobId = &builder.jobId

	}
	if builder.companyIdFlag {
		req.CompanyId = &builder.companyId

	}
	if builder.workingHoursTypeIdFlag {
		req.WorkingHoursTypeId = &builder.workingHoursTypeId

	}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.seniorityDateFlag {
		req.SeniorityDate = &builder.seniorityDate

	}
	if builder.employeeNumberFlag {
		req.EmployeeNumber = &builder.employeeNumber

	}
	if builder.effectiveDateFlag {
		req.EffectiveDate = &builder.effectiveDate

	}
	if builder.expirationDateFlag {
		req.ExpirationDate = &builder.expirationDate

	}
	if builder.employmentTypeFlag {
		req.EmploymentType = builder.employmentType
	}
	if builder.personIdFlag {
		req.PersonId = &builder.personId

	}
	if builder.probationPeriodFlag {
		req.ProbationPeriod = &builder.probationPeriod

	}
	if builder.onProbationFlag {
		req.OnProbation = &builder.onProbation

	}
	if builder.probationEndDateFlag {
		req.ProbationEndDate = &builder.probationEndDate

	}
	if builder.primaryEmploymentFlag {
		req.PrimaryEmployment = &builder.primaryEmployment

	}
	if builder.employmentStatusFlag {
		req.EmploymentStatus = builder.employmentStatus
	}
	if builder.workEmailListFlag {
		req.WorkEmailList = builder.workEmailList
	}
	if builder.emailAddressFlag {
		req.EmailAddress = &builder.emailAddress

	}
	if builder.reasonForOffboardingFlag {
		req.ReasonForOffboarding = builder.reasonForOffboarding
	}
	if builder.costCenterListFlag {
		req.CostCenterList = builder.costCenterList
	}
	if builder.atsApplicationIdFlag {
		req.AtsApplicationId = &builder.atsApplicationId

	}
	if builder.customFieldsFlag {
		req.CustomFields = builder.customFields
	}
	return req
}

type EmploymentBp struct {
	EmploymentId  *string  `json:"employment_id,omitempty"`   // 员工雇佣 ID
	HrbpIds       []string `json:"hrbp_ids,omitempty"`        // 部门 hrbp 雇佣 ID 列表
	LocationBpIds []string `json:"location_bp_ids,omitempty"` // 属地 bp 雇佣 ID 列表
}

type EmploymentBpBuilder struct {
	employmentId      string // 员工雇佣 ID
	employmentIdFlag  bool
	hrbpIds           []string // 部门 hrbp 雇佣 ID 列表
	hrbpIdsFlag       bool
	locationBpIds     []string // 属地 bp 雇佣 ID 列表
	locationBpIdsFlag bool
}

func NewEmploymentBpBuilder() *EmploymentBpBuilder {
	builder := &EmploymentBpBuilder{}
	return builder
}

// 员工雇佣 ID
//
// 示例值：6863326262618752123
func (builder *EmploymentBpBuilder) EmploymentId(employmentId string) *EmploymentBpBuilder {
	builder.employmentId = employmentId
	builder.employmentIdFlag = true
	return builder
}

// 部门 hrbp 雇佣 ID 列表
//
// 示例值：
func (builder *EmploymentBpBuilder) HrbpIds(hrbpIds []string) *EmploymentBpBuilder {
	builder.hrbpIds = hrbpIds
	builder.hrbpIdsFlag = true
	return builder
}

// 属地 bp 雇佣 ID 列表
//
// 示例值：
func (builder *EmploymentBpBuilder) LocationBpIds(locationBpIds []string) *EmploymentBpBuilder {
	builder.locationBpIds = locationBpIds
	builder.locationBpIdsFlag = true
	return builder
}

func (builder *EmploymentBpBuilder) Build() *EmploymentBp {
	req := &EmploymentBp{}
	if builder.employmentIdFlag {
		req.EmploymentId = &builder.employmentId

	}
	if builder.hrbpIdsFlag {
		req.HrbpIds = builder.hrbpIds
	}
	if builder.locationBpIdsFlag {
		req.LocationBpIds = builder.locationBpIds
	}
	return req
}

type Enum struct {
	EnumName *string `json:"enum_name,omitempty"` // 枚举值
	Display  []*I18n `json:"display,omitempty"`   // 枚举多语展示
}

type EnumBuilder struct {
	enumName     string // 枚举值
	enumNameFlag bool
	display      []*I18n // 枚举多语展示
	displayFlag  bool
}

func NewEnumBuilder() *EnumBuilder {
	builder := &EnumBuilder{}
	return builder
}

// 枚举值
//
// 示例值：phone_type
func (builder *EnumBuilder) EnumName(enumName string) *EnumBuilder {
	builder.enumName = enumName
	builder.enumNameFlag = true
	return builder
}

// 枚举多语展示
//
// 示例值：
func (builder *EnumBuilder) Display(display []*I18n) *EnumBuilder {
	builder.display = display
	builder.displayFlag = true
	return builder
}

func (builder *EnumBuilder) Build() *Enum {
	req := &Enum{}
	if builder.enumNameFlag {
		req.EnumName = &builder.enumName

	}
	if builder.displayFlag {
		req.Display = builder.display
	}
	return req
}

type File struct {
	Id *string `json:"id,omitempty"` // 上传文件ID

}

type FileBuilder struct {
	id     string // 上传文件ID
	idFlag bool
}

func NewFileBuilder() *FileBuilder {
	builder := &FileBuilder{}
	return builder
}

// 上传文件ID
//
// 示例值：150018109586e8ea745e47ae8feb3722dbe1d03a181336393633393133303431393831343930373235150200
func (builder *FileBuilder) Id(id string) *FileBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

func (builder *FileBuilder) Build() *File {
	req := &File{}
	if builder.idFlag {
		req.Id = &builder.id

	}

	return req
}

type FormFieldVariableBoolValue struct {
	Value *bool `json:"value,omitempty"` // 布尔变量的值
}

type FormFieldVariableBoolValueBuilder struct {
	value     bool // 布尔变量的值
	valueFlag bool
}

func NewFormFieldVariableBoolValueBuilder() *FormFieldVariableBoolValueBuilder {
	builder := &FormFieldVariableBoolValueBuilder{}
	return builder
}

// 布尔变量的值
//
// 示例值：true
func (builder *FormFieldVariableBoolValueBuilder) Value(value bool) *FormFieldVariableBoolValueBuilder {
	builder.value = value
	builder.valueFlag = true
	return builder
}

func (builder *FormFieldVariableBoolValueBuilder) Build() *FormFieldVariableBoolValue {
	req := &FormFieldVariableBoolValue{}
	if builder.valueFlag {
		req.Value = &builder.value

	}
	return req
}

type FormFieldVariableI18nValue struct {
	Value *BpmDataengineI18n `json:"value,omitempty"` // 多语参数
}

type FormFieldVariableI18nValueBuilder struct {
	value     *BpmDataengineI18n // 多语参数
	valueFlag bool
}

func NewFormFieldVariableI18nValueBuilder() *FormFieldVariableI18nValueBuilder {
	builder := &FormFieldVariableI18nValueBuilder{}
	return builder
}

// 多语参数
//
// 示例值：
func (builder *FormFieldVariableI18nValueBuilder) Value(value *BpmDataengineI18n) *FormFieldVariableI18nValueBuilder {
	builder.value = value
	builder.valueFlag = true
	return builder
}

func (builder *FormFieldVariableI18nValueBuilder) Build() *FormFieldVariableI18nValue {
	req := &FormFieldVariableI18nValue{}
	if builder.valueFlag {
		req.Value = builder.value
	}
	return req
}

type FormFieldVariableNullValue struct {
}

type FormFieldVariableNumberValue struct {
	Value *int `json:"value,omitempty"` // 数值类型变量的值
}

type FormFieldVariableNumberValueBuilder struct {
	value     int // 数值类型变量的值
	valueFlag bool
}

func NewFormFieldVariableNumberValueBuilder() *FormFieldVariableNumberValueBuilder {
	builder := &FormFieldVariableNumberValueBuilder{}
	return builder
}

// 数值类型变量的值
//
// 示例值：1
func (builder *FormFieldVariableNumberValueBuilder) Value(value int) *FormFieldVariableNumberValueBuilder {
	builder.value = value
	builder.valueFlag = true
	return builder
}

func (builder *FormFieldVariableNumberValueBuilder) Build() *FormFieldVariableNumberValue {
	req := &FormFieldVariableNumberValue{}
	if builder.valueFlag {
		req.Value = &builder.value

	}
	return req
}

type FormFieldVariableStringValue struct {
	Value *string `json:"value,omitempty"` // 文本类型变量的值
}

type FormFieldVariableStringValueBuilder struct {
	value     string // 文本类型变量的值
	valueFlag bool
}

func NewFormFieldVariableStringValueBuilder() *FormFieldVariableStringValueBuilder {
	builder := &FormFieldVariableStringValueBuilder{}
	return builder
}

// 文本类型变量的值
//
// 示例值：字符串
func (builder *FormFieldVariableStringValueBuilder) Value(value string) *FormFieldVariableStringValueBuilder {
	builder.value = value
	builder.valueFlag = true
	return builder
}

func (builder *FormFieldVariableStringValueBuilder) Build() *FormFieldVariableStringValue {
	req := &FormFieldVariableStringValue{}
	if builder.valueFlag {
		req.Value = &builder.value

	}
	return req
}

type FormVariableValueInfo struct {
	TextValue       *FormFieldVariableStringValue `json:"text_value,omitempty"`       // 文本变量对象
	NumberValue     *FormFieldVariableStringValue `json:"number_value,omitempty"`     // 数值变量对象（这里的value必须传入一个合法的数字，常见非法值："" 和 null）
	DateValue       *FormFieldVariableNumberValue `json:"date_value,omitempty"`       // 日期变量对象（这里的value为从1970年1月1日（UTC/GMT的午夜）开始所经过的天数）
	EmploymentValue *FormFieldVariableStringValue `json:"employment_value,omitempty"` // 员工变量对象（值传入employmentID）
	DateTimeValue   *FormFieldVariableNumberValue `json:"date_time_value,omitempty"`  // 日期时间变量对象（从1970年1月1日（UTC/GMT的午夜）开始所经过的毫秒数。）
	EnumValue       *FormFieldVariableStringValue `json:"enum_value,omitempty"`       // 枚举变量对象（客户需要传入 枚举的枚举项key作为enum_value.value的值）
	NullValue       *FormFieldVariableNullValue   `json:"null_value,omitempty"`       // 空变量对象
	BoolValue       *FormFieldVariableBoolValue   `json:"bool_value,omitempty"`       // 布尔变量对象
	DepartmentValue *FormFieldVariableStringValue `json:"department_value,omitempty"` // 部门变量对象（值传入departmentID）
	I18nValue       *FormFieldVariableI18nValue   `json:"i18n_value,omitempty"`       // i18n变量对象（中英文为可选，但不能出现中英文均为空的数据。）
	ObjectValue     *FormFieldVariableStringValue `json:"object_value,omitempty"`     // 对象变量（对于所有引用wukong数据的Value，object_value.value中传入wukong中的wkID。）
}

type FormVariableValueInfoBuilder struct {
	textValue           *FormFieldVariableStringValue // 文本变量对象
	textValueFlag       bool
	numberValue         *FormFieldVariableStringValue // 数值变量对象（这里的value必须传入一个合法的数字，常见非法值："" 和 null）
	numberValueFlag     bool
	dateValue           *FormFieldVariableNumberValue // 日期变量对象（这里的value为从1970年1月1日（UTC/GMT的午夜）开始所经过的天数）
	dateValueFlag       bool
	employmentValue     *FormFieldVariableStringValue // 员工变量对象（值传入employmentID）
	employmentValueFlag bool
	dateTimeValue       *FormFieldVariableNumberValue // 日期时间变量对象（从1970年1月1日（UTC/GMT的午夜）开始所经过的毫秒数。）
	dateTimeValueFlag   bool
	enumValue           *FormFieldVariableStringValue // 枚举变量对象（客户需要传入 枚举的枚举项key作为enum_value.value的值）
	enumValueFlag       bool
	nullValue           *FormFieldVariableNullValue // 空变量对象
	nullValueFlag       bool
	boolValue           *FormFieldVariableBoolValue // 布尔变量对象
	boolValueFlag       bool
	departmentValue     *FormFieldVariableStringValue // 部门变量对象（值传入departmentID）
	departmentValueFlag bool
	i18nValue           *FormFieldVariableI18nValue // i18n变量对象（中英文为可选，但不能出现中英文均为空的数据。）
	i18nValueFlag       bool
	objectValue         *FormFieldVariableStringValue // 对象变量（对于所有引用wukong数据的Value，object_value.value中传入wukong中的wkID。）
	objectValueFlag     bool
}

func NewFormVariableValueInfoBuilder() *FormVariableValueInfoBuilder {
	builder := &FormVariableValueInfoBuilder{}
	return builder
}

// 文本变量对象
//
// 示例值：
func (builder *FormVariableValueInfoBuilder) TextValue(textValue *FormFieldVariableStringValue) *FormVariableValueInfoBuilder {
	builder.textValue = textValue
	builder.textValueFlag = true
	return builder
}

// 数值变量对象（这里的value必须传入一个合法的数字，常见非法值："" 和 null）
//
// 示例值：
func (builder *FormVariableValueInfoBuilder) NumberValue(numberValue *FormFieldVariableStringValue) *FormVariableValueInfoBuilder {
	builder.numberValue = numberValue
	builder.numberValueFlag = true
	return builder
}

// 日期变量对象（这里的value为从1970年1月1日（UTC/GMT的午夜）开始所经过的天数）
//
// 示例值：
func (builder *FormVariableValueInfoBuilder) DateValue(dateValue *FormFieldVariableNumberValue) *FormVariableValueInfoBuilder {
	builder.dateValue = dateValue
	builder.dateValueFlag = true
	return builder
}

// 员工变量对象（值传入employmentID）
//
// 示例值：
func (builder *FormVariableValueInfoBuilder) EmploymentValue(employmentValue *FormFieldVariableStringValue) *FormVariableValueInfoBuilder {
	builder.employmentValue = employmentValue
	builder.employmentValueFlag = true
	return builder
}

// 日期时间变量对象（从1970年1月1日（UTC/GMT的午夜）开始所经过的毫秒数。）
//
// 示例值：
func (builder *FormVariableValueInfoBuilder) DateTimeValue(dateTimeValue *FormFieldVariableNumberValue) *FormVariableValueInfoBuilder {
	builder.dateTimeValue = dateTimeValue
	builder.dateTimeValueFlag = true
	return builder
}

// 枚举变量对象（客户需要传入 枚举的枚举项key作为enum_value.value的值）
//
// 示例值：
func (builder *FormVariableValueInfoBuilder) EnumValue(enumValue *FormFieldVariableStringValue) *FormVariableValueInfoBuilder {
	builder.enumValue = enumValue
	builder.enumValueFlag = true
	return builder
}

// 空变量对象
//
// 示例值：
func (builder *FormVariableValueInfoBuilder) NullValue(nullValue *FormFieldVariableNullValue) *FormVariableValueInfoBuilder {
	builder.nullValue = nullValue
	builder.nullValueFlag = true
	return builder
}

// 布尔变量对象
//
// 示例值：
func (builder *FormVariableValueInfoBuilder) BoolValue(boolValue *FormFieldVariableBoolValue) *FormVariableValueInfoBuilder {
	builder.boolValue = boolValue
	builder.boolValueFlag = true
	return builder
}

// 部门变量对象（值传入departmentID）
//
// 示例值：
func (builder *FormVariableValueInfoBuilder) DepartmentValue(departmentValue *FormFieldVariableStringValue) *FormVariableValueInfoBuilder {
	builder.departmentValue = departmentValue
	builder.departmentValueFlag = true
	return builder
}

// i18n变量对象（中英文为可选，但不能出现中英文均为空的数据。）
//
// 示例值：
func (builder *FormVariableValueInfoBuilder) I18nValue(i18nValue *FormFieldVariableI18nValue) *FormVariableValueInfoBuilder {
	builder.i18nValue = i18nValue
	builder.i18nValueFlag = true
	return builder
}

// 对象变量（对于所有引用wukong数据的Value，object_value.value中传入wukong中的wkID。）
//
// 示例值：
func (builder *FormVariableValueInfoBuilder) ObjectValue(objectValue *FormFieldVariableStringValue) *FormVariableValueInfoBuilder {
	builder.objectValue = objectValue
	builder.objectValueFlag = true
	return builder
}

func (builder *FormVariableValueInfoBuilder) Build() *FormVariableValueInfo {
	req := &FormVariableValueInfo{}
	if builder.textValueFlag {
		req.TextValue = builder.textValue
	}
	if builder.numberValueFlag {
		req.NumberValue = builder.numberValue
	}
	if builder.dateValueFlag {
		req.DateValue = builder.dateValue
	}
	if builder.employmentValueFlag {
		req.EmploymentValue = builder.employmentValue
	}
	if builder.dateTimeValueFlag {
		req.DateTimeValue = builder.dateTimeValue
	}
	if builder.enumValueFlag {
		req.EnumValue = builder.enumValue
	}
	if builder.nullValueFlag {
		req.NullValue = builder.nullValue
	}
	if builder.boolValueFlag {
		req.BoolValue = builder.boolValue
	}
	if builder.departmentValueFlag {
		req.DepartmentValue = builder.departmentValue
	}
	if builder.i18nValueFlag {
		req.I18nValue = builder.i18nValue
	}
	if builder.objectValueFlag {
		req.ObjectValue = builder.objectValue
	}
	return req
}

type HiberarchyCommon struct {
	ParentId       *string            `json:"parent_id,omitempty"`       // 上级组织
	Name           []*I18n            `json:"name,omitempty"`            // 名称
	Type           *Enum              `json:"type,omitempty"`            // 组织类型
	Active         *bool              `json:"active,omitempty"`          // 启用
	EffectiveTime  *string            `json:"effective_time,omitempty"`  // 生效时间
	ExpirationTime *string            `json:"expiration_time,omitempty"` // 失效时间
	Code           *string            `json:"code,omitempty"`            // 编码
	Description    []*I18n            `json:"description,omitempty"`     // 描述
	TreeOrder      *string            `json:"tree_order,omitempty"`      // 树形排序，代表同层级的部门排序序号
	ListOrder      *string            `json:"list_order,omitempty"`      // 列表排序，代表所有部门的混排序号
	CustomFields   []*ObjectFieldData `json:"custom_fields,omitempty"`   // 自定义字段
}

type HiberarchyCommonBuilder struct {
	parentId           string // 上级组织
	parentIdFlag       bool
	name               []*I18n // 名称
	nameFlag           bool
	type_              *Enum // 组织类型
	typeFlag           bool
	active             bool // 启用
	activeFlag         bool
	effectiveTime      string // 生效时间
	effectiveTimeFlag  bool
	expirationTime     string // 失效时间
	expirationTimeFlag bool
	code               string // 编码
	codeFlag           bool
	description        []*I18n // 描述
	descriptionFlag    bool
	treeOrder          string // 树形排序，代表同层级的部门排序序号
	treeOrderFlag      bool
	listOrder          string // 列表排序，代表所有部门的混排序号
	listOrderFlag      bool
	customFields       []*ObjectFieldData // 自定义字段
	customFieldsFlag   bool
}

func NewHiberarchyCommonBuilder() *HiberarchyCommonBuilder {
	builder := &HiberarchyCommonBuilder{}
	return builder
}

// 上级组织
//
// 示例值：4719168654814483759
func (builder *HiberarchyCommonBuilder) ParentId(parentId string) *HiberarchyCommonBuilder {
	builder.parentId = parentId
	builder.parentIdFlag = true
	return builder
}

// 名称
//
// 示例值：
func (builder *HiberarchyCommonBuilder) Name(name []*I18n) *HiberarchyCommonBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}

// 组织类型
//
// 示例值：
func (builder *HiberarchyCommonBuilder) Type(type_ *Enum) *HiberarchyCommonBuilder {
	builder.type_ = type_
	builder.typeFlag = true
	return builder
}

// 启用
//
// 示例值：true
func (builder *HiberarchyCommonBuilder) Active(active bool) *HiberarchyCommonBuilder {
	builder.active = active
	builder.activeFlag = true
	return builder
}

// 生效时间
//
// 示例值：2020-05-01 00:00:00
func (builder *HiberarchyCommonBuilder) EffectiveTime(effectiveTime string) *HiberarchyCommonBuilder {
	builder.effectiveTime = effectiveTime
	builder.effectiveTimeFlag = true
	return builder
}

// 失效时间
//
// 示例值：2020-05-02 00:00:00
func (builder *HiberarchyCommonBuilder) ExpirationTime(expirationTime string) *HiberarchyCommonBuilder {
	builder.expirationTime = expirationTime
	builder.expirationTimeFlag = true
	return builder
}

// 编码
//
// 示例值：12456
func (builder *HiberarchyCommonBuilder) Code(code string) *HiberarchyCommonBuilder {
	builder.code = code
	builder.codeFlag = true
	return builder
}

// 描述
//
// 示例值：
func (builder *HiberarchyCommonBuilder) Description(description []*I18n) *HiberarchyCommonBuilder {
	builder.description = description
	builder.descriptionFlag = true
	return builder
}

// 树形排序，代表同层级的部门排序序号
//
// 示例值：123
func (builder *HiberarchyCommonBuilder) TreeOrder(treeOrder string) *HiberarchyCommonBuilder {
	builder.treeOrder = treeOrder
	builder.treeOrderFlag = true
	return builder
}

// 列表排序，代表所有部门的混排序号
//
// 示例值：123
func (builder *HiberarchyCommonBuilder) ListOrder(listOrder string) *HiberarchyCommonBuilder {
	builder.listOrder = listOrder
	builder.listOrderFlag = true
	return builder
}

// 自定义字段
//
// 示例值：
func (builder *HiberarchyCommonBuilder) CustomFields(customFields []*ObjectFieldData) *HiberarchyCommonBuilder {
	builder.customFields = customFields
	builder.customFieldsFlag = true
	return builder
}

func (builder *HiberarchyCommonBuilder) Build() *HiberarchyCommon {
	req := &HiberarchyCommon{}
	if builder.parentIdFlag {
		req.ParentId = &builder.parentId

	}
	if builder.nameFlag {
		req.Name = builder.name
	}
	if builder.typeFlag {
		req.Type = builder.type_
	}
	if builder.activeFlag {
		req.Active = &builder.active

	}
	if builder.effectiveTimeFlag {
		req.EffectiveTime = &builder.effectiveTime

	}
	if builder.expirationTimeFlag {
		req.ExpirationTime = &builder.expirationTime

	}
	if builder.codeFlag {
		req.Code = &builder.code

	}
	if builder.descriptionFlag {
		req.Description = builder.description
	}
	if builder.treeOrderFlag {
		req.TreeOrder = &builder.treeOrder

	}
	if builder.listOrderFlag {
		req.ListOrder = &builder.listOrder

	}
	if builder.customFieldsFlag {
		req.CustomFields = builder.customFields
	}
	return req
}

type I18n struct {
	Lang  *string `json:"lang,omitempty"`  // 语言
	Value *string `json:"value,omitempty"` // 内容
}

type I18nBuilder struct {
	lang      string // 语言
	langFlag  bool
	value     string // 内容
	valueFlag bool
}

func NewI18nBuilder() *I18nBuilder {
	builder := &I18nBuilder{}
	return builder
}

// 语言
//
// 示例值：zh-CN
func (builder *I18nBuilder) Lang(lang string) *I18nBuilder {
	builder.lang = lang
	builder.langFlag = true
	return builder
}

// 内容
//
// 示例值：张三
func (builder *I18nBuilder) Value(value string) *I18nBuilder {
	builder.value = value
	builder.valueFlag = true
	return builder
}

func (builder *I18nBuilder) Build() *I18n {
	req := &I18n{}
	if builder.langFlag {
		req.Lang = &builder.lang

	}
	if builder.valueFlag {
		req.Value = &builder.value

	}
	return req
}

type I18nV2 struct {
	ZhCn *string `json:"zh_cn,omitempty"` // zh-CN
	EnUs *string `json:"en_us,omitempty"` // en-US
}

type I18nV2Builder struct {
	zhCn     string // zh-CN
	zhCnFlag bool
	enUs     string // en-US
	enUsFlag bool
}

func NewI18nV2Builder() *I18nV2Builder {
	builder := &I18nV2Builder{}
	return builder
}

// zh-CN
//
// 示例值：王冰
func (builder *I18nV2Builder) ZhCn(zhCn string) *I18nV2Builder {
	builder.zhCn = zhCn
	builder.zhCnFlag = true
	return builder
}

// en-US
//
// 示例值：Bob
func (builder *I18nV2Builder) EnUs(enUs string) *I18nV2Builder {
	builder.enUs = enUs
	builder.enUsFlag = true
	return builder
}

func (builder *I18nV2Builder) Build() *I18nV2 {
	req := &I18nV2{}
	if builder.zhCnFlag {
		req.ZhCn = &builder.zhCn

	}
	if builder.enUsFlag {
		req.EnUs = &builder.enUs

	}
	return req
}

type InternationalAssignment struct {
	Id                            *string `json:"id,omitempty"`                              // 当前生效的外派记录ID
	AssignmentCityId              *string `json:"assignment_city_id,omitempty"`              // 当前生效外派记录的外派城市（派驻地）ID
	AssignmentCompanyId           *string `json:"assignment_company_id,omitempty"`           // 当前生效外派记录的外派公司ID
	AssignmentCountryId           *string `json:"assignment_country_id,omitempty"`           // 当前生效外派记录的外派国家ID
	AssignmentReason              *I18n   `json:"assignment_reason,omitempty"`               // 当前生效外派记录的外派原因
	EffectiveTime                 *string `json:"effective_time,omitempty"`                  // 当前生效外派记录的生效时间
	StartAssignmentProcessId      *string `json:"start_assignment_process_id,omitempty"`     // 当前生效外派记录的开始外派流程 ID
	EndAssignmentProcessId        *string `json:"end_assignment_process_id,omitempty"`       // 当前生效外派记录的结束外派流程 ID
	ExpirationTime                *string `json:"expiration_time,omitempty"`                 // 当前生效外派记录的失效时间
	InternationalAssignmentStatus *Enum   `json:"international_assignment_status,omitempty"` // -| 当前生效外派记录的外派状态 - 枚举值可查询【获取字段详情】接口获取，按如下参数查询即可： - custom_api_name：international_assignment_status - object_api_name：international_assignment
	InternationalAssignmentType   *Enum   `json:"international_assignment_type,omitempty"`   // -| 当前生效外派记录的外派类型 - 枚举值可查询【获取字段详情】接口获取，按如下参数查询即可： - custom_api_name：international_assignment_type - object_api_name：international_assignment
}

type InternationalAssignmentBuilder struct {
	id                                string // 当前生效的外派记录ID
	idFlag                            bool
	assignmentCityId                  string // 当前生效外派记录的外派城市（派驻地）ID
	assignmentCityIdFlag              bool
	assignmentCompanyId               string // 当前生效外派记录的外派公司ID
	assignmentCompanyIdFlag           bool
	assignmentCountryId               string // 当前生效外派记录的外派国家ID
	assignmentCountryIdFlag           bool
	assignmentReason                  *I18n // 当前生效外派记录的外派原因
	assignmentReasonFlag              bool
	effectiveTime                     string // 当前生效外派记录的生效时间
	effectiveTimeFlag                 bool
	startAssignmentProcessId          string // 当前生效外派记录的开始外派流程 ID
	startAssignmentProcessIdFlag      bool
	endAssignmentProcessId            string // 当前生效外派记录的结束外派流程 ID
	endAssignmentProcessIdFlag        bool
	expirationTime                    string // 当前生效外派记录的失效时间
	expirationTimeFlag                bool
	internationalAssignmentStatus     *Enum // -| 当前生效外派记录的外派状态 - 枚举值可查询【获取字段详情】接口获取，按如下参数查询即可： - custom_api_name：international_assignment_status - object_api_name：international_assignment
	internationalAssignmentStatusFlag bool
	internationalAssignmentType       *Enum // -| 当前生效外派记录的外派类型 - 枚举值可查询【获取字段详情】接口获取，按如下参数查询即可： - custom_api_name：international_assignment_type - object_api_name：international_assignment
	internationalAssignmentTypeFlag   bool
}

func NewInternationalAssignmentBuilder() *InternationalAssignmentBuilder {
	builder := &InternationalAssignmentBuilder{}
	return builder
}

// 当前生效的外派记录ID
//
// 示例值：7046599238679447000
func (builder *InternationalAssignmentBuilder) Id(id string) *InternationalAssignmentBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

// 当前生效外派记录的外派城市（派驻地）ID
//
// 示例值：7046599238679447084
func (builder *InternationalAssignmentBuilder) AssignmentCityId(assignmentCityId string) *InternationalAssignmentBuilder {
	builder.assignmentCityId = assignmentCityId
	builder.assignmentCityIdFlag = true
	return builder
}

// 当前生效外派记录的外派公司ID
//
// 示例值：7046599238679447084
func (builder *InternationalAssignmentBuilder) AssignmentCompanyId(assignmentCompanyId string) *InternationalAssignmentBuilder {
	builder.assignmentCompanyId = assignmentCompanyId
	builder.assignmentCompanyIdFlag = true
	return builder
}

// 当前生效外派记录的外派国家ID
//
// 示例值：7046599238679447084
func (builder *InternationalAssignmentBuilder) AssignmentCountryId(assignmentCountryId string) *InternationalAssignmentBuilder {
	builder.assignmentCountryId = assignmentCountryId
	builder.assignmentCountryIdFlag = true
	return builder
}

// 当前生效外派记录的外派原因
//
// 示例值：
func (builder *InternationalAssignmentBuilder) AssignmentReason(assignmentReason *I18n) *InternationalAssignmentBuilder {
	builder.assignmentReason = assignmentReason
	builder.assignmentReasonFlag = true
	return builder
}

// 当前生效外派记录的生效时间
//
// 示例值：2023-08-29
func (builder *InternationalAssignmentBuilder) EffectiveTime(effectiveTime string) *InternationalAssignmentBuilder {
	builder.effectiveTime = effectiveTime
	builder.effectiveTimeFlag = true
	return builder
}

// 当前生效外派记录的开始外派流程 ID
//
// 示例值：111111
func (builder *InternationalAssignmentBuilder) StartAssignmentProcessId(startAssignmentProcessId string) *InternationalAssignmentBuilder {
	builder.startAssignmentProcessId = startAssignmentProcessId
	builder.startAssignmentProcessIdFlag = true
	return builder
}

// 当前生效外派记录的结束外派流程 ID
//
// 示例值：1111111
func (builder *InternationalAssignmentBuilder) EndAssignmentProcessId(endAssignmentProcessId string) *InternationalAssignmentBuilder {
	builder.endAssignmentProcessId = endAssignmentProcessId
	builder.endAssignmentProcessIdFlag = true
	return builder
}

// 当前生效外派记录的失效时间
//
// 示例值：2023-12-29
func (builder *InternationalAssignmentBuilder) ExpirationTime(expirationTime string) *InternationalAssignmentBuilder {
	builder.expirationTime = expirationTime
	builder.expirationTimeFlag = true
	return builder
}

// -| 当前生效外派记录的外派状态 - 枚举值可查询【获取字段详情】接口获取，按如下参数查询即可： - custom_api_name：international_assignment_status - object_api_name：international_assignment
//
// 示例值：
func (builder *InternationalAssignmentBuilder) InternationalAssignmentStatus(internationalAssignmentStatus *Enum) *InternationalAssignmentBuilder {
	builder.internationalAssignmentStatus = internationalAssignmentStatus
	builder.internationalAssignmentStatusFlag = true
	return builder
}

// -| 当前生效外派记录的外派类型 - 枚举值可查询【获取字段详情】接口获取，按如下参数查询即可： - custom_api_name：international_assignment_type - object_api_name：international_assignment
//
// 示例值：
func (builder *InternationalAssignmentBuilder) InternationalAssignmentType(internationalAssignmentType *Enum) *InternationalAssignmentBuilder {
	builder.internationalAssignmentType = internationalAssignmentType
	builder.internationalAssignmentTypeFlag = true
	return builder
}

func (builder *InternationalAssignmentBuilder) Build() *InternationalAssignment {
	req := &InternationalAssignment{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.assignmentCityIdFlag {
		req.AssignmentCityId = &builder.assignmentCityId

	}
	if builder.assignmentCompanyIdFlag {
		req.AssignmentCompanyId = &builder.assignmentCompanyId

	}
	if builder.assignmentCountryIdFlag {
		req.AssignmentCountryId = &builder.assignmentCountryId

	}
	if builder.assignmentReasonFlag {
		req.AssignmentReason = builder.assignmentReason
	}
	if builder.effectiveTimeFlag {
		req.EffectiveTime = &builder.effectiveTime

	}
	if builder.startAssignmentProcessIdFlag {
		req.StartAssignmentProcessId = &builder.startAssignmentProcessId

	}
	if builder.endAssignmentProcessIdFlag {
		req.EndAssignmentProcessId = &builder.endAssignmentProcessId

	}
	if builder.expirationTimeFlag {
		req.ExpirationTime = &builder.expirationTime

	}
	if builder.internationalAssignmentStatusFlag {
		req.InternationalAssignmentStatus = builder.internationalAssignmentStatus
	}
	if builder.internationalAssignmentTypeFlag {
		req.InternationalAssignmentType = builder.internationalAssignmentType
	}
	return req
}

type InternationalAssignmentV2 struct {
	Id                                     *string `json:"id,omitempty"`                                         // 派驻信息ID
	EmploymentId                           *string `json:"employment_id,omitempty"`                              // Employment ID
	CreatedBy                              *string `json:"created_by,omitempty"`                                 // 创建人
	CreatedAt                              *string `json:"created_at,omitempty"`                                 // 创建时间
	EffectiveTime                          *string `json:"effective_time,omitempty"`                             // 生效时间
	InternationalAssignmentExpectedEndDate *string `json:"international_assignment_expected_end_date,omitempty"` // 预计结束日期
	ExpirationTime                         *string `json:"expiration_time,omitempty"`                            // 失效时间
	DeletedAt                              *string `json:"deleted_at,omitempty"`                                 // 删除时间
	UpdatedAt                              *string `json:"updated_at,omitempty"`                                 // 更新时间
	UpdatedBy                              *string `json:"updated_by,omitempty"`                                 // 更新人
	AssignmentCountry                      *string `json:"assignment_country,omitempty"`                         // 外派国家ID
	AssignmentCity                         *string `json:"assignment_city,omitempty"`                            // 外派城市ID
	AssignmentCompany                      *string `json:"assignment_company,omitempty"`                         // 外派公司ID
	InternationalAssignmentStatus          *Enum   `json:"international_assignment_status,omitempty"`            // 当前生效外派记录的外派状态 - 枚举值可查询【获取字段详情】接口获取，按如下参数查询即可： - custom_api_name：international_assignment_status - object_api_name：international_assignment
	InternationalAssignmentType            *Enum   `json:"international_assignment_type,omitempty"`              // 当前生效外派记录的外派类型 - 枚举值可查询【获取字段详情】接口获取，按如下参数查询即可： - custom_api_name：international_assignment_type - object_api_name：international_assignment
	InternationalAssignmentAllowance       *bool   `json:"international_assignment_allowance,omitempty"`         // 是否享有派驻津贴
	Accommodation                          *bool   `json:"accommodation,omitempty"`                              // 是否提供住宿
	Description                            *string `json:"description,omitempty"`                                // 描述
}

type InternationalAssignmentV2Builder struct {
	id                                         string // 派驻信息ID
	idFlag                                     bool
	employmentId                               string // Employment ID
	employmentIdFlag                           bool
	createdBy                                  string // 创建人
	createdByFlag                              bool
	createdAt                                  string // 创建时间
	createdAtFlag                              bool
	effectiveTime                              string // 生效时间
	effectiveTimeFlag                          bool
	internationalAssignmentExpectedEndDate     string // 预计结束日期
	internationalAssignmentExpectedEndDateFlag bool
	expirationTime                             string // 失效时间
	expirationTimeFlag                         bool
	deletedAt                                  string // 删除时间
	deletedAtFlag                              bool
	updatedAt                                  string // 更新时间
	updatedAtFlag                              bool
	updatedBy                                  string // 更新人
	updatedByFlag                              bool
	assignmentCountry                          string // 外派国家ID
	assignmentCountryFlag                      bool
	assignmentCity                             string // 外派城市ID
	assignmentCityFlag                         bool
	assignmentCompany                          string // 外派公司ID
	assignmentCompanyFlag                      bool
	internationalAssignmentStatus              *Enum // 当前生效外派记录的外派状态 - 枚举值可查询【获取字段详情】接口获取，按如下参数查询即可： - custom_api_name：international_assignment_status - object_api_name：international_assignment
	internationalAssignmentStatusFlag          bool
	internationalAssignmentType                *Enum // 当前生效外派记录的外派类型 - 枚举值可查询【获取字段详情】接口获取，按如下参数查询即可： - custom_api_name：international_assignment_type - object_api_name：international_assignment
	internationalAssignmentTypeFlag            bool
	internationalAssignmentAllowance           bool // 是否享有派驻津贴
	internationalAssignmentAllowanceFlag       bool
	accommodation                              bool // 是否提供住宿
	accommodationFlag                          bool
	description                                string // 描述
	descriptionFlag                            bool
}

func NewInternationalAssignmentV2Builder() *InternationalAssignmentV2Builder {
	builder := &InternationalAssignmentV2Builder{}
	return builder
}

// 派驻信息ID
//
// 示例值：7046599238679447000
func (builder *InternationalAssignmentV2Builder) Id(id string) *InternationalAssignmentV2Builder {
	builder.id = id
	builder.idFlag = true
	return builder
}

// Employment ID
//
// 示例值：7046599238679447000
func (builder *InternationalAssignmentV2Builder) EmploymentId(employmentId string) *InternationalAssignmentV2Builder {
	builder.employmentId = employmentId
	builder.employmentIdFlag = true
	return builder
}

// 创建人
//
// 示例值：7046599238679447000
func (builder *InternationalAssignmentV2Builder) CreatedBy(createdBy string) *InternationalAssignmentV2Builder {
	builder.createdBy = createdBy
	builder.createdByFlag = true
	return builder
}

// 创建时间
//
// 示例值：2021-08-18 16:04:21
func (builder *InternationalAssignmentV2Builder) CreatedAt(createdAt string) *InternationalAssignmentV2Builder {
	builder.createdAt = createdAt
	builder.createdAtFlag = true
	return builder
}

// 生效时间
//
// 示例值：2023-08-29
func (builder *InternationalAssignmentV2Builder) EffectiveTime(effectiveTime string) *InternationalAssignmentV2Builder {
	builder.effectiveTime = effectiveTime
	builder.effectiveTimeFlag = true
	return builder
}

// 预计结束日期
//
// 示例值：2023-12-29
func (builder *InternationalAssignmentV2Builder) InternationalAssignmentExpectedEndDate(internationalAssignmentExpectedEndDate string) *InternationalAssignmentV2Builder {
	builder.internationalAssignmentExpectedEndDate = internationalAssignmentExpectedEndDate
	builder.internationalAssignmentExpectedEndDateFlag = true
	return builder
}

// 失效时间
//
// 示例值：2023-12-29
func (builder *InternationalAssignmentV2Builder) ExpirationTime(expirationTime string) *InternationalAssignmentV2Builder {
	builder.expirationTime = expirationTime
	builder.expirationTimeFlag = true
	return builder
}

// 删除时间
//
// 示例值：2021-08-18 16:04:21
func (builder *InternationalAssignmentV2Builder) DeletedAt(deletedAt string) *InternationalAssignmentV2Builder {
	builder.deletedAt = deletedAt
	builder.deletedAtFlag = true
	return builder
}

// 更新时间
//
// 示例值：2021-08-18 16:04:21
func (builder *InternationalAssignmentV2Builder) UpdatedAt(updatedAt string) *InternationalAssignmentV2Builder {
	builder.updatedAt = updatedAt
	builder.updatedAtFlag = true
	return builder
}

// 更新人
//
// 示例值：7046599238679447000
func (builder *InternationalAssignmentV2Builder) UpdatedBy(updatedBy string) *InternationalAssignmentV2Builder {
	builder.updatedBy = updatedBy
	builder.updatedByFlag = true
	return builder
}

// 外派国家ID
//
// 示例值：7046599238679447084
func (builder *InternationalAssignmentV2Builder) AssignmentCountry(assignmentCountry string) *InternationalAssignmentV2Builder {
	builder.assignmentCountry = assignmentCountry
	builder.assignmentCountryFlag = true
	return builder
}

// 外派城市ID
//
// 示例值：7046599238679447084
func (builder *InternationalAssignmentV2Builder) AssignmentCity(assignmentCity string) *InternationalAssignmentV2Builder {
	builder.assignmentCity = assignmentCity
	builder.assignmentCityFlag = true
	return builder
}

// 外派公司ID
//
// 示例值：7046599238679447084
func (builder *InternationalAssignmentV2Builder) AssignmentCompany(assignmentCompany string) *InternationalAssignmentV2Builder {
	builder.assignmentCompany = assignmentCompany
	builder.assignmentCompanyFlag = true
	return builder
}

// 当前生效外派记录的外派状态 - 枚举值可查询【获取字段详情】接口获取，按如下参数查询即可： - custom_api_name：international_assignment_status - object_api_name：international_assignment
//
// 示例值：
func (builder *InternationalAssignmentV2Builder) InternationalAssignmentStatus(internationalAssignmentStatus *Enum) *InternationalAssignmentV2Builder {
	builder.internationalAssignmentStatus = internationalAssignmentStatus
	builder.internationalAssignmentStatusFlag = true
	return builder
}

// 当前生效外派记录的外派类型 - 枚举值可查询【获取字段详情】接口获取，按如下参数查询即可： - custom_api_name：international_assignment_type - object_api_name：international_assignment
//
// 示例值：
func (builder *InternationalAssignmentV2Builder) InternationalAssignmentType(internationalAssignmentType *Enum) *InternationalAssignmentV2Builder {
	builder.internationalAssignmentType = internationalAssignmentType
	builder.internationalAssignmentTypeFlag = true
	return builder
}

// 是否享有派驻津贴
//
// 示例值：false
func (builder *InternationalAssignmentV2Builder) InternationalAssignmentAllowance(internationalAssignmentAllowance bool) *InternationalAssignmentV2Builder {
	builder.internationalAssignmentAllowance = internationalAssignmentAllowance
	builder.internationalAssignmentAllowanceFlag = true
	return builder
}

// 是否提供住宿
//
// 示例值：false
func (builder *InternationalAssignmentV2Builder) Accommodation(accommodation bool) *InternationalAssignmentV2Builder {
	builder.accommodation = accommodation
	builder.accommodationFlag = true
	return builder
}

// 描述
//
// 示例值：外派信息的描述
func (builder *InternationalAssignmentV2Builder) Description(description string) *InternationalAssignmentV2Builder {
	builder.description = description
	builder.descriptionFlag = true
	return builder
}

func (builder *InternationalAssignmentV2Builder) Build() *InternationalAssignmentV2 {
	req := &InternationalAssignmentV2{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.employmentIdFlag {
		req.EmploymentId = &builder.employmentId

	}
	if builder.createdByFlag {
		req.CreatedBy = &builder.createdBy

	}
	if builder.createdAtFlag {
		req.CreatedAt = &builder.createdAt

	}
	if builder.effectiveTimeFlag {
		req.EffectiveTime = &builder.effectiveTime

	}
	if builder.internationalAssignmentExpectedEndDateFlag {
		req.InternationalAssignmentExpectedEndDate = &builder.internationalAssignmentExpectedEndDate

	}
	if builder.expirationTimeFlag {
		req.ExpirationTime = &builder.expirationTime

	}
	if builder.deletedAtFlag {
		req.DeletedAt = &builder.deletedAt

	}
	if builder.updatedAtFlag {
		req.UpdatedAt = &builder.updatedAt

	}
	if builder.updatedByFlag {
		req.UpdatedBy = &builder.updatedBy

	}
	if builder.assignmentCountryFlag {
		req.AssignmentCountry = &builder.assignmentCountry

	}
	if builder.assignmentCityFlag {
		req.AssignmentCity = &builder.assignmentCity

	}
	if builder.assignmentCompanyFlag {
		req.AssignmentCompany = &builder.assignmentCompany

	}
	if builder.internationalAssignmentStatusFlag {
		req.InternationalAssignmentStatus = builder.internationalAssignmentStatus
	}
	if builder.internationalAssignmentTypeFlag {
		req.InternationalAssignmentType = builder.internationalAssignmentType
	}
	if builder.internationalAssignmentAllowanceFlag {
		req.InternationalAssignmentAllowance = &builder.internationalAssignmentAllowance

	}
	if builder.accommodationFlag {
		req.Accommodation = &builder.accommodation

	}
	if builder.descriptionFlag {
		req.Description = &builder.description

	}
	return req
}

type InternationalAssignmentV2ForCreate struct {
	EmploymentId                           *string `json:"employment_id,omitempty"`                              // Employment ID
	EffectiveTime                          *string `json:"effective_time,omitempty"`                             // 生效时间
	InternationalAssignmentExpectedEndDate *string `json:"international_assignment_expected_end_date,omitempty"` // 预计结束日期
	ExpirationTime                         *string `json:"expiration_time,omitempty"`                            // 失效时间
	AssignmentCountry                      *string `json:"assignment_country,omitempty"`                         // 外派国家ID
	AssignmentCity                         *string `json:"assignment_city,omitempty"`                            // 外派城市ID
	AssignmentCompany                      *string `json:"assignment_company,omitempty"`                         // 外派公司ID
	InternationalAssignmentStatus          *Enum   `json:"international_assignment_status,omitempty"`            // 当前生效外派记录的外派状态 - 枚举值可查询【获取字段详情】接口获取，按如下参数查询即可： - custom_api_name：international_assignment_status - object_api_name：international_assignment
	InternationalAssignmentType            *Enum   `json:"international_assignment_type,omitempty"`              // 当前生效外派记录的外派类型 - 枚举值可查询【获取字段详情】接口获取，按如下参数查询即可： - custom_api_name：international_assignment_type - object_api_name：international_assignment
	InternationalAssignmentAllowance       *bool   `json:"international_assignment_allowance,omitempty"`         // 是否享有派驻津贴
	Accommodation                          *bool   `json:"accommodation,omitempty"`                              // 是否提供住宿
	Description                            *string `json:"description,omitempty"`                                // 描述
}

type InternationalAssignmentV2ForCreateBuilder struct {
	employmentId                               string // Employment ID
	employmentIdFlag                           bool
	effectiveTime                              string // 生效时间
	effectiveTimeFlag                          bool
	internationalAssignmentExpectedEndDate     string // 预计结束日期
	internationalAssignmentExpectedEndDateFlag bool
	expirationTime                             string // 失效时间
	expirationTimeFlag                         bool
	assignmentCountry                          string // 外派国家ID
	assignmentCountryFlag                      bool
	assignmentCity                             string // 外派城市ID
	assignmentCityFlag                         bool
	assignmentCompany                          string // 外派公司ID
	assignmentCompanyFlag                      bool
	internationalAssignmentStatus              *Enum // 当前生效外派记录的外派状态 - 枚举值可查询【获取字段详情】接口获取，按如下参数查询即可： - custom_api_name：international_assignment_status - object_api_name：international_assignment
	internationalAssignmentStatusFlag          bool
	internationalAssignmentType                *Enum // 当前生效外派记录的外派类型 - 枚举值可查询【获取字段详情】接口获取，按如下参数查询即可： - custom_api_name：international_assignment_type - object_api_name：international_assignment
	internationalAssignmentTypeFlag            bool
	internationalAssignmentAllowance           bool // 是否享有派驻津贴
	internationalAssignmentAllowanceFlag       bool
	accommodation                              bool // 是否提供住宿
	accommodationFlag                          bool
	description                                string // 描述
	descriptionFlag                            bool
}

func NewInternationalAssignmentV2ForCreateBuilder() *InternationalAssignmentV2ForCreateBuilder {
	builder := &InternationalAssignmentV2ForCreateBuilder{}
	return builder
}

// Employment ID
//
// 示例值：7046599238679447000
func (builder *InternationalAssignmentV2ForCreateBuilder) EmploymentId(employmentId string) *InternationalAssignmentV2ForCreateBuilder {
	builder.employmentId = employmentId
	builder.employmentIdFlag = true
	return builder
}

// 生效时间
//
// 示例值：2023-08-29
func (builder *InternationalAssignmentV2ForCreateBuilder) EffectiveTime(effectiveTime string) *InternationalAssignmentV2ForCreateBuilder {
	builder.effectiveTime = effectiveTime
	builder.effectiveTimeFlag = true
	return builder
}

// 预计结束日期
//
// 示例值：2023-12-29
func (builder *InternationalAssignmentV2ForCreateBuilder) InternationalAssignmentExpectedEndDate(internationalAssignmentExpectedEndDate string) *InternationalAssignmentV2ForCreateBuilder {
	builder.internationalAssignmentExpectedEndDate = internationalAssignmentExpectedEndDate
	builder.internationalAssignmentExpectedEndDateFlag = true
	return builder
}

// 失效时间
//
// 示例值：2023-12-29
func (builder *InternationalAssignmentV2ForCreateBuilder) ExpirationTime(expirationTime string) *InternationalAssignmentV2ForCreateBuilder {
	builder.expirationTime = expirationTime
	builder.expirationTimeFlag = true
	return builder
}

// 外派国家ID
//
// 示例值：7046599238679447084
func (builder *InternationalAssignmentV2ForCreateBuilder) AssignmentCountry(assignmentCountry string) *InternationalAssignmentV2ForCreateBuilder {
	builder.assignmentCountry = assignmentCountry
	builder.assignmentCountryFlag = true
	return builder
}

// 外派城市ID
//
// 示例值：7046599238679447084
func (builder *InternationalAssignmentV2ForCreateBuilder) AssignmentCity(assignmentCity string) *InternationalAssignmentV2ForCreateBuilder {
	builder.assignmentCity = assignmentCity
	builder.assignmentCityFlag = true
	return builder
}

// 外派公司ID
//
// 示例值：7046599238679447084
func (builder *InternationalAssignmentV2ForCreateBuilder) AssignmentCompany(assignmentCompany string) *InternationalAssignmentV2ForCreateBuilder {
	builder.assignmentCompany = assignmentCompany
	builder.assignmentCompanyFlag = true
	return builder
}

// 当前生效外派记录的外派状态 - 枚举值可查询【获取字段详情】接口获取，按如下参数查询即可： - custom_api_name：international_assignment_status - object_api_name：international_assignment
//
// 示例值：
func (builder *InternationalAssignmentV2ForCreateBuilder) InternationalAssignmentStatus(internationalAssignmentStatus *Enum) *InternationalAssignmentV2ForCreateBuilder {
	builder.internationalAssignmentStatus = internationalAssignmentStatus
	builder.internationalAssignmentStatusFlag = true
	return builder
}

// 当前生效外派记录的外派类型 - 枚举值可查询【获取字段详情】接口获取，按如下参数查询即可： - custom_api_name：international_assignment_type - object_api_name：international_assignment
//
// 示例值：
func (builder *InternationalAssignmentV2ForCreateBuilder) InternationalAssignmentType(internationalAssignmentType *Enum) *InternationalAssignmentV2ForCreateBuilder {
	builder.internationalAssignmentType = internationalAssignmentType
	builder.internationalAssignmentTypeFlag = true
	return builder
}

// 是否享有派驻津贴
//
// 示例值：true
func (builder *InternationalAssignmentV2ForCreateBuilder) InternationalAssignmentAllowance(internationalAssignmentAllowance bool) *InternationalAssignmentV2ForCreateBuilder {
	builder.internationalAssignmentAllowance = internationalAssignmentAllowance
	builder.internationalAssignmentAllowanceFlag = true
	return builder
}

// 是否提供住宿
//
// 示例值：true
func (builder *InternationalAssignmentV2ForCreateBuilder) Accommodation(accommodation bool) *InternationalAssignmentV2ForCreateBuilder {
	builder.accommodation = accommodation
	builder.accommodationFlag = true
	return builder
}

// 描述
//
// 示例值：外派信息的描述
func (builder *InternationalAssignmentV2ForCreateBuilder) Description(description string) *InternationalAssignmentV2ForCreateBuilder {
	builder.description = description
	builder.descriptionFlag = true
	return builder
}

func (builder *InternationalAssignmentV2ForCreateBuilder) Build() *InternationalAssignmentV2ForCreate {
	req := &InternationalAssignmentV2ForCreate{}
	if builder.employmentIdFlag {
		req.EmploymentId = &builder.employmentId

	}
	if builder.effectiveTimeFlag {
		req.EffectiveTime = &builder.effectiveTime

	}
	if builder.internationalAssignmentExpectedEndDateFlag {
		req.InternationalAssignmentExpectedEndDate = &builder.internationalAssignmentExpectedEndDate

	}
	if builder.expirationTimeFlag {
		req.ExpirationTime = &builder.expirationTime

	}
	if builder.assignmentCountryFlag {
		req.AssignmentCountry = &builder.assignmentCountry

	}
	if builder.assignmentCityFlag {
		req.AssignmentCity = &builder.assignmentCity

	}
	if builder.assignmentCompanyFlag {
		req.AssignmentCompany = &builder.assignmentCompany

	}
	if builder.internationalAssignmentStatusFlag {
		req.InternationalAssignmentStatus = builder.internationalAssignmentStatus
	}
	if builder.internationalAssignmentTypeFlag {
		req.InternationalAssignmentType = builder.internationalAssignmentType
	}
	if builder.internationalAssignmentAllowanceFlag {
		req.InternationalAssignmentAllowance = &builder.internationalAssignmentAllowance

	}
	if builder.accommodationFlag {
		req.Accommodation = &builder.accommodation

	}
	if builder.descriptionFlag {
		req.Description = &builder.description

	}
	return req
}

type InternationalAssignmentV2ForPatch struct {
	EffectiveTime                          *string `json:"effective_time,omitempty"`                             // 生效时间
	InternationalAssignmentExpectedEndDate *string `json:"international_assignment_expected_end_date,omitempty"` // 预计结束日期
	ExpirationTime                         *string `json:"expiration_time,omitempty"`                            // 失效时间
	AssignmentCountry                      *string `json:"assignment_country,omitempty"`                         // 外派国家ID
	AssignmentCity                         *string `json:"assignment_city,omitempty"`                            // 外派城市ID
	AssignmentCompany                      *string `json:"assignment_company,omitempty"`                         // 外派公司ID
	InternationalAssignmentStatus          *Enum   `json:"international_assignment_status,omitempty"`            // 当前生效外派记录的外派状态 - 枚举值可查询【获取字段详情】接口获取，按如下参数查询即可： - custom_api_name：international_assignment_status - object_api_name：international_assignment
	InternationalAssignmentType            *Enum   `json:"international_assignment_type,omitempty"`              // 当前生效外派记录的外派类型 - 枚举值可查询【获取字段详情】接口获取，按如下参数查询即可： - custom_api_name：international_assignment_type - object_api_name：international_assignment
	InternationalAssignmentAllowance       *bool   `json:"international_assignment_allowance,omitempty"`         // 是否享有派驻津贴
	Accommodation                          *bool   `json:"accommodation,omitempty"`                              // 是否提供住宿
	Description                            *string `json:"description,omitempty"`                                // 描述
}

type InternationalAssignmentV2ForPatchBuilder struct {
	effectiveTime                              string // 生效时间
	effectiveTimeFlag                          bool
	internationalAssignmentExpectedEndDate     string // 预计结束日期
	internationalAssignmentExpectedEndDateFlag bool
	expirationTime                             string // 失效时间
	expirationTimeFlag                         bool
	assignmentCountry                          string // 外派国家ID
	assignmentCountryFlag                      bool
	assignmentCity                             string // 外派城市ID
	assignmentCityFlag                         bool
	assignmentCompany                          string // 外派公司ID
	assignmentCompanyFlag                      bool
	internationalAssignmentStatus              *Enum // 当前生效外派记录的外派状态 - 枚举值可查询【获取字段详情】接口获取，按如下参数查询即可： - custom_api_name：international_assignment_status - object_api_name：international_assignment
	internationalAssignmentStatusFlag          bool
	internationalAssignmentType                *Enum // 当前生效外派记录的外派类型 - 枚举值可查询【获取字段详情】接口获取，按如下参数查询即可： - custom_api_name：international_assignment_type - object_api_name：international_assignment
	internationalAssignmentTypeFlag            bool
	internationalAssignmentAllowance           bool // 是否享有派驻津贴
	internationalAssignmentAllowanceFlag       bool
	accommodation                              bool // 是否提供住宿
	accommodationFlag                          bool
	description                                string // 描述
	descriptionFlag                            bool
}

func NewInternationalAssignmentV2ForPatchBuilder() *InternationalAssignmentV2ForPatchBuilder {
	builder := &InternationalAssignmentV2ForPatchBuilder{}
	return builder
}

// 生效时间
//
// 示例值：2023-08-29
func (builder *InternationalAssignmentV2ForPatchBuilder) EffectiveTime(effectiveTime string) *InternationalAssignmentV2ForPatchBuilder {
	builder.effectiveTime = effectiveTime
	builder.effectiveTimeFlag = true
	return builder
}

// 预计结束日期
//
// 示例值：2023-12-29
func (builder *InternationalAssignmentV2ForPatchBuilder) InternationalAssignmentExpectedEndDate(internationalAssignmentExpectedEndDate string) *InternationalAssignmentV2ForPatchBuilder {
	builder.internationalAssignmentExpectedEndDate = internationalAssignmentExpectedEndDate
	builder.internationalAssignmentExpectedEndDateFlag = true
	return builder
}

// 失效时间
//
// 示例值：2023-12-29
func (builder *InternationalAssignmentV2ForPatchBuilder) ExpirationTime(expirationTime string) *InternationalAssignmentV2ForPatchBuilder {
	builder.expirationTime = expirationTime
	builder.expirationTimeFlag = true
	return builder
}

// 外派国家ID
//
// 示例值：7046599238679447084
func (builder *InternationalAssignmentV2ForPatchBuilder) AssignmentCountry(assignmentCountry string) *InternationalAssignmentV2ForPatchBuilder {
	builder.assignmentCountry = assignmentCountry
	builder.assignmentCountryFlag = true
	return builder
}

// 外派城市ID
//
// 示例值：7046599238679447084
func (builder *InternationalAssignmentV2ForPatchBuilder) AssignmentCity(assignmentCity string) *InternationalAssignmentV2ForPatchBuilder {
	builder.assignmentCity = assignmentCity
	builder.assignmentCityFlag = true
	return builder
}

// 外派公司ID
//
// 示例值：7046599238679447084
func (builder *InternationalAssignmentV2ForPatchBuilder) AssignmentCompany(assignmentCompany string) *InternationalAssignmentV2ForPatchBuilder {
	builder.assignmentCompany = assignmentCompany
	builder.assignmentCompanyFlag = true
	return builder
}

// 当前生效外派记录的外派状态 - 枚举值可查询【获取字段详情】接口获取，按如下参数查询即可： - custom_api_name：international_assignment_status - object_api_name：international_assignment
//
// 示例值：
func (builder *InternationalAssignmentV2ForPatchBuilder) InternationalAssignmentStatus(internationalAssignmentStatus *Enum) *InternationalAssignmentV2ForPatchBuilder {
	builder.internationalAssignmentStatus = internationalAssignmentStatus
	builder.internationalAssignmentStatusFlag = true
	return builder
}

// 当前生效外派记录的外派类型 - 枚举值可查询【获取字段详情】接口获取，按如下参数查询即可： - custom_api_name：international_assignment_type - object_api_name：international_assignment
//
// 示例值：
func (builder *InternationalAssignmentV2ForPatchBuilder) InternationalAssignmentType(internationalAssignmentType *Enum) *InternationalAssignmentV2ForPatchBuilder {
	builder.internationalAssignmentType = internationalAssignmentType
	builder.internationalAssignmentTypeFlag = true
	return builder
}

// 是否享有派驻津贴
//
// 示例值：true
func (builder *InternationalAssignmentV2ForPatchBuilder) InternationalAssignmentAllowance(internationalAssignmentAllowance bool) *InternationalAssignmentV2ForPatchBuilder {
	builder.internationalAssignmentAllowance = internationalAssignmentAllowance
	builder.internationalAssignmentAllowanceFlag = true
	return builder
}

// 是否提供住宿
//
// 示例值：true
func (builder *InternationalAssignmentV2ForPatchBuilder) Accommodation(accommodation bool) *InternationalAssignmentV2ForPatchBuilder {
	builder.accommodation = accommodation
	builder.accommodationFlag = true
	return builder
}

// 描述
//
// 示例值：外派信息的描述
func (builder *InternationalAssignmentV2ForPatchBuilder) Description(description string) *InternationalAssignmentV2ForPatchBuilder {
	builder.description = description
	builder.descriptionFlag = true
	return builder
}

func (builder *InternationalAssignmentV2ForPatchBuilder) Build() *InternationalAssignmentV2ForPatch {
	req := &InternationalAssignmentV2ForPatch{}
	if builder.effectiveTimeFlag {
		req.EffectiveTime = &builder.effectiveTime

	}
	if builder.internationalAssignmentExpectedEndDateFlag {
		req.InternationalAssignmentExpectedEndDate = &builder.internationalAssignmentExpectedEndDate

	}
	if builder.expirationTimeFlag {
		req.ExpirationTime = &builder.expirationTime

	}
	if builder.assignmentCountryFlag {
		req.AssignmentCountry = &builder.assignmentCountry

	}
	if builder.assignmentCityFlag {
		req.AssignmentCity = &builder.assignmentCity

	}
	if builder.assignmentCompanyFlag {
		req.AssignmentCompany = &builder.assignmentCompany

	}
	if builder.internationalAssignmentStatusFlag {
		req.InternationalAssignmentStatus = builder.internationalAssignmentStatus
	}
	if builder.internationalAssignmentTypeFlag {
		req.InternationalAssignmentType = builder.internationalAssignmentType
	}
	if builder.internationalAssignmentAllowanceFlag {
		req.InternationalAssignmentAllowance = &builder.internationalAssignmentAllowance

	}
	if builder.accommodationFlag {
		req.Accommodation = &builder.accommodation

	}
	if builder.descriptionFlag {
		req.Description = &builder.description

	}
	return req
}

type Job struct {
	Id                 *string            `json:"id,omitempty"`                    // 实体在CoreHR内部的唯一键
	Code               *string            `json:"code,omitempty"`                  // 编码
	Name               []*I18n            `json:"name,omitempty"`                  // 名称
	Description        []*I18n            `json:"description,omitempty"`           // 描述
	Active             *bool              `json:"active,omitempty"`                // 启用
	JobTitle           []*I18n            `json:"job_title,omitempty"`             // 职务头衔
	JobFamilyIdList    []string           `json:"job_family_id_list,omitempty"`    // 序列
	JobLevelIdList     []string           `json:"job_level_id_list,omitempty"`     // 职级
	WorkingHoursTypeId *string            `json:"working_hours_type_id,omitempty"` // 工时制度，引用WorkingHoursType的ID
	EffectiveTime      *string            `json:"effective_time,omitempty"`        // 生效时间
	ExpirationTime     *string            `json:"expiration_time,omitempty"`       // 失效时间
	CustomFields       []*ObjectFieldData `json:"custom_fields,omitempty"`         // 自定义字段
}

type JobBuilder struct {
	id                     string // 实体在CoreHR内部的唯一键
	idFlag                 bool
	code                   string // 编码
	codeFlag               bool
	name                   []*I18n // 名称
	nameFlag               bool
	description            []*I18n // 描述
	descriptionFlag        bool
	active                 bool // 启用
	activeFlag             bool
	jobTitle               []*I18n // 职务头衔
	jobTitleFlag           bool
	jobFamilyIdList        []string // 序列
	jobFamilyIdListFlag    bool
	jobLevelIdList         []string // 职级
	jobLevelIdListFlag     bool
	workingHoursTypeId     string // 工时制度，引用WorkingHoursType的ID
	workingHoursTypeIdFlag bool
	effectiveTime          string // 生效时间
	effectiveTimeFlag      bool
	expirationTime         string // 失效时间
	expirationTimeFlag     bool
	customFields           []*ObjectFieldData // 自定义字段
	customFieldsFlag       bool
}

func NewJobBuilder() *JobBuilder {
	builder := &JobBuilder{}
	return builder
}

// 实体在CoreHR内部的唯一键
//
// 示例值：4698040628992333549
func (builder *JobBuilder) Id(id string) *JobBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

// 编码
//
// 示例值：JP422119
func (builder *JobBuilder) Code(code string) *JobBuilder {
	builder.code = code
	builder.codeFlag = true
	return builder
}

// 名称
//
// 示例值：
func (builder *JobBuilder) Name(name []*I18n) *JobBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}

// 描述
//
// 示例值：
func (builder *JobBuilder) Description(description []*I18n) *JobBuilder {
	builder.description = description
	builder.descriptionFlag = true
	return builder
}

// 启用
//
// 示例值：true
func (builder *JobBuilder) Active(active bool) *JobBuilder {
	builder.active = active
	builder.activeFlag = true
	return builder
}

// 职务头衔
//
// 示例值：
func (builder *JobBuilder) JobTitle(jobTitle []*I18n) *JobBuilder {
	builder.jobTitle = jobTitle
	builder.jobTitleFlag = true
	return builder
}

// 序列
//
// 示例值：
func (builder *JobBuilder) JobFamilyIdList(jobFamilyIdList []string) *JobBuilder {
	builder.jobFamilyIdList = jobFamilyIdList
	builder.jobFamilyIdListFlag = true
	return builder
}

// 职级
//
// 示例值：
func (builder *JobBuilder) JobLevelIdList(jobLevelIdList []string) *JobBuilder {
	builder.jobLevelIdList = jobLevelIdList
	builder.jobLevelIdListFlag = true
	return builder
}

// 工时制度，引用WorkingHoursType的ID
//
// 示例值：6890452208593372679
func (builder *JobBuilder) WorkingHoursTypeId(workingHoursTypeId string) *JobBuilder {
	builder.workingHoursTypeId = workingHoursTypeId
	builder.workingHoursTypeIdFlag = true
	return builder
}

// 生效时间
//
// 示例值：2020-01-01 00:00:00
func (builder *JobBuilder) EffectiveTime(effectiveTime string) *JobBuilder {
	builder.effectiveTime = effectiveTime
	builder.effectiveTimeFlag = true
	return builder
}

// 失效时间
//
// 示例值：2021-01-01 00:00:00
func (builder *JobBuilder) ExpirationTime(expirationTime string) *JobBuilder {
	builder.expirationTime = expirationTime
	builder.expirationTimeFlag = true
	return builder
}

// 自定义字段
//
// 示例值：
func (builder *JobBuilder) CustomFields(customFields []*ObjectFieldData) *JobBuilder {
	builder.customFields = customFields
	builder.customFieldsFlag = true
	return builder
}

func (builder *JobBuilder) Build() *Job {
	req := &Job{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.codeFlag {
		req.Code = &builder.code

	}
	if builder.nameFlag {
		req.Name = builder.name
	}
	if builder.descriptionFlag {
		req.Description = builder.description
	}
	if builder.activeFlag {
		req.Active = &builder.active

	}
	if builder.jobTitleFlag {
		req.JobTitle = builder.jobTitle
	}
	if builder.jobFamilyIdListFlag {
		req.JobFamilyIdList = builder.jobFamilyIdList
	}
	if builder.jobLevelIdListFlag {
		req.JobLevelIdList = builder.jobLevelIdList
	}
	if builder.workingHoursTypeIdFlag {
		req.WorkingHoursTypeId = &builder.workingHoursTypeId

	}
	if builder.effectiveTimeFlag {
		req.EffectiveTime = &builder.effectiveTime

	}
	if builder.expirationTimeFlag {
		req.ExpirationTime = &builder.expirationTime

	}
	if builder.customFieldsFlag {
		req.CustomFields = builder.customFields
	}
	return req
}

type JobChange struct {
	JobChangeId                    *string       `json:"job_change_id,omitempty"`                     // 异动记录 id
	EmploymentId                   *string       `json:"employment_id,omitempty"`                     // 雇员 id
	Status                         *string       `json:"status,omitempty"`                            // 异动状态
	TransferTypeUniqueIdentifier   *string       `json:"transfer_type_unique_identifier,omitempty"`   // 异动类型
	TransferReasonUniqueIdentifier *string       `json:"transfer_reason_unique_identifier,omitempty"` // 异动原因
	ProcessId                      *string       `json:"process_id,omitempty"`                        // 异动流程 id
	EffectiveDate                  *string       `json:"effective_date,omitempty"`                    // 生效时间
	CreatedTime                    *string       `json:"created_time,omitempty"`                      // 创建时间
	UpdatedTime                    *string       `json:"updated_time,omitempty"`                      // 更新时间
	TransferInfo                   *TransferInfo `json:"transfer_info,omitempty"`                     // 异动详细信息
}

type JobChangeBuilder struct {
	jobChangeId                        string // 异动记录 id
	jobChangeIdFlag                    bool
	employmentId                       string // 雇员 id
	employmentIdFlag                   bool
	status                             string // 异动状态
	statusFlag                         bool
	transferTypeUniqueIdentifier       string // 异动类型
	transferTypeUniqueIdentifierFlag   bool
	transferReasonUniqueIdentifier     string // 异动原因
	transferReasonUniqueIdentifierFlag bool
	processId                          string // 异动流程 id
	processIdFlag                      bool
	effectiveDate                      string // 生效时间
	effectiveDateFlag                  bool
	createdTime                        string // 创建时间
	createdTimeFlag                    bool
	updatedTime                        string // 更新时间
	updatedTimeFlag                    bool
	transferInfo                       *TransferInfo // 异动详细信息
	transferInfoFlag                   bool
}

func NewJobChangeBuilder() *JobChangeBuilder {
	builder := &JobChangeBuilder{}
	return builder
}

// 异动记录 id
//
// 示例值：6991776076699549697
func (builder *JobChangeBuilder) JobChangeId(jobChangeId string) *JobChangeBuilder {
	builder.jobChangeId = jobChangeId
	builder.jobChangeIdFlag = true
	return builder
}

// 雇员 id
//
// 示例值：ou_a294793e8fa21529f2a60e3e9de45520
func (builder *JobChangeBuilder) EmploymentId(employmentId string) *JobChangeBuilder {
	builder.employmentId = employmentId
	builder.employmentIdFlag = true
	return builder
}

// 异动状态
//
// 示例值：Approved
func (builder *JobChangeBuilder) Status(status string) *JobChangeBuilder {
	builder.status = status
	builder.statusFlag = true
	return builder
}

// 异动类型
//
// 示例值：direct_leader_change
func (builder *JobChangeBuilder) TransferTypeUniqueIdentifier(transferTypeUniqueIdentifier string) *JobChangeBuilder {
	builder.transferTypeUniqueIdentifier = transferTypeUniqueIdentifier
	builder.transferTypeUniqueIdentifierFlag = true
	return builder
}

// 异动原因
//
// 示例值：involuntary_transfer
func (builder *JobChangeBuilder) TransferReasonUniqueIdentifier(transferReasonUniqueIdentifier string) *JobChangeBuilder {
	builder.transferReasonUniqueIdentifier = transferReasonUniqueIdentifier
	builder.transferReasonUniqueIdentifierFlag = true
	return builder
}

// 异动流程 id
//
// 示例值：6991776078461142564
func (builder *JobChangeBuilder) ProcessId(processId string) *JobChangeBuilder {
	builder.processId = processId
	builder.processIdFlag = true
	return builder
}

// 生效时间
//
// 示例值：2022-03-01
func (builder *JobChangeBuilder) EffectiveDate(effectiveDate string) *JobChangeBuilder {
	builder.effectiveDate = effectiveDate
	builder.effectiveDateFlag = true
	return builder
}

// 创建时间
//
// 示例值：1627899724000
func (builder *JobChangeBuilder) CreatedTime(createdTime string) *JobChangeBuilder {
	builder.createdTime = createdTime
	builder.createdTimeFlag = true
	return builder
}

// 更新时间
//
// 示例值：1647434443000
func (builder *JobChangeBuilder) UpdatedTime(updatedTime string) *JobChangeBuilder {
	builder.updatedTime = updatedTime
	builder.updatedTimeFlag = true
	return builder
}

// 异动详细信息
//
// 示例值：
func (builder *JobChangeBuilder) TransferInfo(transferInfo *TransferInfo) *JobChangeBuilder {
	builder.transferInfo = transferInfo
	builder.transferInfoFlag = true
	return builder
}

func (builder *JobChangeBuilder) Build() *JobChange {
	req := &JobChange{}
	if builder.jobChangeIdFlag {
		req.JobChangeId = &builder.jobChangeId

	}
	if builder.employmentIdFlag {
		req.EmploymentId = &builder.employmentId

	}
	if builder.statusFlag {
		req.Status = &builder.status

	}
	if builder.transferTypeUniqueIdentifierFlag {
		req.TransferTypeUniqueIdentifier = &builder.transferTypeUniqueIdentifier

	}
	if builder.transferReasonUniqueIdentifierFlag {
		req.TransferReasonUniqueIdentifier = &builder.transferReasonUniqueIdentifier

	}
	if builder.processIdFlag {
		req.ProcessId = &builder.processId

	}
	if builder.effectiveDateFlag {
		req.EffectiveDate = &builder.effectiveDate

	}
	if builder.createdTimeFlag {
		req.CreatedTime = &builder.createdTime

	}
	if builder.updatedTimeFlag {
		req.UpdatedTime = &builder.updatedTime

	}
	if builder.transferInfoFlag {
		req.TransferInfo = builder.transferInfo
	}
	return req
}

type JobData struct {
	JobDataId                *string              `json:"job_data_id,omitempty"`                 // 任职信息 ID
	VersionId                *string              `json:"version_id,omitempty"`                  // 任职记录版本 ID
	EmployeeTypeId           *string              `json:"employee_type_id,omitempty"`            // 人员类型 ID，枚举值及详细信息可通过【查询单个人员类型】接口查询获得
	WorkingHoursTypeId       *string              `json:"working_hours_type_id,omitempty"`       // 工时制度 ID，枚举值及详细信息可通过【查询单个工时制度】接口查询获得
	WorkLocationId           *string              `json:"work_location_id,omitempty"`            // 工作地点 ID，枚举值及详细信息可通过【查询单个地点】接口查询获得
	DepartmentId             *string              `json:"department_id,omitempty"`               // 部门 ID，枚举值及详细信息可通过【查询单个部门】接口查询获得
	JobId                    *string              `json:"job_id,omitempty"`                      // 职务 ID，枚举值及详细信息可通过【查询单个职务】接口查询获得
	JobLevelId               *string              `json:"job_level_id,omitempty"`                // 职务级别 ID，枚举值及详细信息可通过【查询单个职务级别】接口查询获得
	JobGradeId               *string              `json:"job_grade_id,omitempty"`                // 职等 ID
	JobFamilyId              *string              `json:"job_family_id,omitempty"`               // 职务序列 ID，枚举值及详细信息可通过【查询单个职务序列】接口查询获得
	ProbationStartDate       *string              `json:"probation_start_date,omitempty"`        // 试用期开始日期
	ProbationEndDate         *string              `json:"probation_end_date,omitempty"`          // 试用期结束日期（实际结束日期）
	PrimaryJobData           *bool                `json:"primary_job_data,omitempty"`            // 是否为主任职
	EmploymentId             *string              `json:"employment_id,omitempty"`               // 雇佣 ID
	EffectiveTime            *string              `json:"effective_time,omitempty"`              // 生效时间
	ExpirationTime           *string              `json:"expiration_time,omitempty"`             // 失效时间
	AssignmentStartReason    *Enum                `json:"assignment_start_reason,omitempty"`     // 任职原因，枚举值可通过文档【飞书人事枚举常量】任职原因（assignment_start_reason）枚举定义部分获得
	ProbationExpectedEndDate *string              `json:"probation_expected_end_date,omitempty"` // 预计试用期结束日期
	ProbationOutcome         *Enum                `json:"probation_outcome,omitempty"`           // 试用期结果，枚举值可通过文档【飞书人事枚举常量】试用期结果（probation_outcome）枚举定义部分获得
	DirectManager            *BasicJobData        `json:"direct_manager,omitempty"`              // 直属上级
	DottedLineManagers       []*BasicJobData      `json:"dotted_line_managers,omitempty"`        // 虚线上级
	SecondDirectManager      *BasicJobData        `json:"second_direct_manager,omitempty"`       // 第二实线主管
	CostCenterRates          []*JobDataCostCenter `json:"cost_center_rates,omitempty"`           // 成本中心分摊信息
	WorkShift                *Enum                `json:"work_shift,omitempty"`                  // 排班类型
	CompensationType         *Enum                `json:"compensation_type,omitempty"`           // 薪资类型
	ServiceCompany           *string              `json:"service_company,omitempty"`             // 任职公司

}

type JobDataBuilder struct {
	jobDataId                    string // 任职信息 ID
	jobDataIdFlag                bool
	versionId                    string // 任职记录版本 ID
	versionIdFlag                bool
	employeeTypeId               string // 人员类型 ID，枚举值及详细信息可通过【查询单个人员类型】接口查询获得
	employeeTypeIdFlag           bool
	workingHoursTypeId           string // 工时制度 ID，枚举值及详细信息可通过【查询单个工时制度】接口查询获得
	workingHoursTypeIdFlag       bool
	workLocationId               string // 工作地点 ID，枚举值及详细信息可通过【查询单个地点】接口查询获得
	workLocationIdFlag           bool
	departmentId                 string // 部门 ID，枚举值及详细信息可通过【查询单个部门】接口查询获得
	departmentIdFlag             bool
	jobId                        string // 职务 ID，枚举值及详细信息可通过【查询单个职务】接口查询获得
	jobIdFlag                    bool
	jobLevelId                   string // 职务级别 ID，枚举值及详细信息可通过【查询单个职务级别】接口查询获得
	jobLevelIdFlag               bool
	jobGradeId                   string // 职等 ID
	jobGradeIdFlag               bool
	jobFamilyId                  string // 职务序列 ID，枚举值及详细信息可通过【查询单个职务序列】接口查询获得
	jobFamilyIdFlag              bool
	probationStartDate           string // 试用期开始日期
	probationStartDateFlag       bool
	probationEndDate             string // 试用期结束日期（实际结束日期）
	probationEndDateFlag         bool
	primaryJobData               bool // 是否为主任职
	primaryJobDataFlag           bool
	employmentId                 string // 雇佣 ID
	employmentIdFlag             bool
	effectiveTime                string // 生效时间
	effectiveTimeFlag            bool
	expirationTime               string // 失效时间
	expirationTimeFlag           bool
	assignmentStartReason        *Enum // 任职原因，枚举值可通过文档【飞书人事枚举常量】任职原因（assignment_start_reason）枚举定义部分获得
	assignmentStartReasonFlag    bool
	probationExpectedEndDate     string // 预计试用期结束日期
	probationExpectedEndDateFlag bool
	probationOutcome             *Enum // 试用期结果，枚举值可通过文档【飞书人事枚举常量】试用期结果（probation_outcome）枚举定义部分获得
	probationOutcomeFlag         bool
	directManager                *BasicJobData // 直属上级
	directManagerFlag            bool
	dottedLineManagers           []*BasicJobData // 虚线上级
	dottedLineManagersFlag       bool
	secondDirectManager          *BasicJobData // 第二实线主管
	secondDirectManagerFlag      bool
	costCenterRates              []*JobDataCostCenter // 成本中心分摊信息
	costCenterRatesFlag          bool
	workShift                    *Enum // 排班类型
	workShiftFlag                bool
	compensationType             *Enum // 薪资类型
	compensationTypeFlag         bool
	serviceCompany               string // 任职公司
	serviceCompanyFlag           bool
}

func NewJobDataBuilder() *JobDataBuilder {
	builder := &JobDataBuilder{}
	return builder
}

// 任职信息 ID
//
// 示例值：6890452208593372679
func (builder *JobDataBuilder) JobDataId(jobDataId string) *JobDataBuilder {
	builder.jobDataId = jobDataId
	builder.jobDataIdFlag = true
	return builder
}

// 任职记录版本 ID
//
// 示例值：6890452208593372697
func (builder *JobDataBuilder) VersionId(versionId string) *JobDataBuilder {
	builder.versionId = versionId
	builder.versionIdFlag = true
	return builder
}

// 人员类型 ID，枚举值及详细信息可通过【查询单个人员类型】接口查询获得
//
// 示例值：6890452208593372679
func (builder *JobDataBuilder) EmployeeTypeId(employeeTypeId string) *JobDataBuilder {
	builder.employeeTypeId = employeeTypeId
	builder.employeeTypeIdFlag = true
	return builder
}

// 工时制度 ID，枚举值及详细信息可通过【查询单个工时制度】接口查询获得
//
// 示例值：6890452208593372679
func (builder *JobDataBuilder) WorkingHoursTypeId(workingHoursTypeId string) *JobDataBuilder {
	builder.workingHoursTypeId = workingHoursTypeId
	builder.workingHoursTypeIdFlag = true
	return builder
}

// 工作地点 ID，枚举值及详细信息可通过【查询单个地点】接口查询获得
//
// 示例值：6890452208593372679
func (builder *JobDataBuilder) WorkLocationId(workLocationId string) *JobDataBuilder {
	builder.workLocationId = workLocationId
	builder.workLocationIdFlag = true
	return builder
}

// 部门 ID，枚举值及详细信息可通过【查询单个部门】接口查询获得
//
// 示例值：6890452208593372679
func (builder *JobDataBuilder) DepartmentId(departmentId string) *JobDataBuilder {
	builder.departmentId = departmentId
	builder.departmentIdFlag = true
	return builder
}

// 职务 ID，枚举值及详细信息可通过【查询单个职务】接口查询获得
//
// 示例值：6890452208593372679
func (builder *JobDataBuilder) JobId(jobId string) *JobDataBuilder {
	builder.jobId = jobId
	builder.jobIdFlag = true
	return builder
}

// 职务级别 ID，枚举值及详细信息可通过【查询单个职务级别】接口查询获得
//
// 示例值：6890452208593372679
func (builder *JobDataBuilder) JobLevelId(jobLevelId string) *JobDataBuilder {
	builder.jobLevelId = jobLevelId
	builder.jobLevelIdFlag = true
	return builder
}

// 职等 ID
//
// 示例值：6890452208593372679
func (builder *JobDataBuilder) JobGradeId(jobGradeId string) *JobDataBuilder {
	builder.jobGradeId = jobGradeId
	builder.jobGradeIdFlag = true
	return builder
}

// 职务序列 ID，枚举值及详细信息可通过【查询单个职务序列】接口查询获得
//
// 示例值：1245678
func (builder *JobDataBuilder) JobFamilyId(jobFamilyId string) *JobDataBuilder {
	builder.jobFamilyId = jobFamilyId
	builder.jobFamilyIdFlag = true
	return builder
}

// 试用期开始日期
//
// 示例值：2018-03-16T00:00:00
func (builder *JobDataBuilder) ProbationStartDate(probationStartDate string) *JobDataBuilder {
	builder.probationStartDate = probationStartDate
	builder.probationStartDateFlag = true
	return builder
}

// 试用期结束日期（实际结束日期）
//
// 示例值：2019-05-24T00:00:00
func (builder *JobDataBuilder) ProbationEndDate(probationEndDate string) *JobDataBuilder {
	builder.probationEndDate = probationEndDate
	builder.probationEndDateFlag = true
	return builder
}

// 是否为主任职
//
// 示例值：true
func (builder *JobDataBuilder) PrimaryJobData(primaryJobData bool) *JobDataBuilder {
	builder.primaryJobData = primaryJobData
	builder.primaryJobDataFlag = true
	return builder
}

// 雇佣 ID
//
// 示例值：6893014062142064135
func (builder *JobDataBuilder) EmploymentId(employmentId string) *JobDataBuilder {
	builder.employmentId = employmentId
	builder.employmentIdFlag = true
	return builder
}

// 生效时间
//
// 示例值：2020-05-01 00:00:00
func (builder *JobDataBuilder) EffectiveTime(effectiveTime string) *JobDataBuilder {
	builder.effectiveTime = effectiveTime
	builder.effectiveTimeFlag = true
	return builder
}

// 失效时间
//
// 示例值：2020-05-02 00:00:00
func (builder *JobDataBuilder) ExpirationTime(expirationTime string) *JobDataBuilder {
	builder.expirationTime = expirationTime
	builder.expirationTimeFlag = true
	return builder
}

// 任职原因，枚举值可通过文档【飞书人事枚举常量】任职原因（assignment_start_reason）枚举定义部分获得
//
// 示例值：onboarding
func (builder *JobDataBuilder) AssignmentStartReason(assignmentStartReason *Enum) *JobDataBuilder {
	builder.assignmentStartReason = assignmentStartReason
	builder.assignmentStartReasonFlag = true
	return builder
}

// 预计试用期结束日期
//
// 示例值：2006-01-02
func (builder *JobDataBuilder) ProbationExpectedEndDate(probationExpectedEndDate string) *JobDataBuilder {
	builder.probationExpectedEndDate = probationExpectedEndDate
	builder.probationExpectedEndDateFlag = true
	return builder
}

// 试用期结果，枚举值可通过文档【飞书人事枚举常量】试用期结果（probation_outcome）枚举定义部分获得
//
// 示例值：passed
func (builder *JobDataBuilder) ProbationOutcome(probationOutcome *Enum) *JobDataBuilder {
	builder.probationOutcome = probationOutcome
	builder.probationOutcomeFlag = true
	return builder
}

// 直属上级
//
// 示例值：
func (builder *JobDataBuilder) DirectManager(directManager *BasicJobData) *JobDataBuilder {
	builder.directManager = directManager
	builder.directManagerFlag = true
	return builder
}

// 虚线上级
//
// 示例值：
func (builder *JobDataBuilder) DottedLineManagers(dottedLineManagers []*BasicJobData) *JobDataBuilder {
	builder.dottedLineManagers = dottedLineManagers
	builder.dottedLineManagersFlag = true
	return builder
}

// 第二实线主管
//
// 示例值：6890452208593372679
func (builder *JobDataBuilder) SecondDirectManager(secondDirectManager *BasicJobData) *JobDataBuilder {
	builder.secondDirectManager = secondDirectManager
	builder.secondDirectManagerFlag = true
	return builder
}

// 成本中心分摊信息
//
// 示例值：
func (builder *JobDataBuilder) CostCenterRates(costCenterRates []*JobDataCostCenter) *JobDataBuilder {
	builder.costCenterRates = costCenterRates
	builder.costCenterRatesFlag = true
	return builder
}

// 排班类型
//
// 示例值：
func (builder *JobDataBuilder) WorkShift(workShift *Enum) *JobDataBuilder {
	builder.workShift = workShift
	builder.workShiftFlag = true
	return builder
}

// 薪资类型
//
// 示例值：
func (builder *JobDataBuilder) CompensationType(compensationType *Enum) *JobDataBuilder {
	builder.compensationType = compensationType
	builder.compensationTypeFlag = true
	return builder
}

// 任职公司
//
// 示例值：6890452208593372680
func (builder *JobDataBuilder) ServiceCompany(serviceCompany string) *JobDataBuilder {
	builder.serviceCompany = serviceCompany
	builder.serviceCompanyFlag = true
	return builder
}

func (builder *JobDataBuilder) Build() *JobData {
	req := &JobData{}
	if builder.jobDataIdFlag {
		req.JobDataId = &builder.jobDataId

	}
	if builder.versionIdFlag {
		req.VersionId = &builder.versionId

	}
	if builder.employeeTypeIdFlag {
		req.EmployeeTypeId = &builder.employeeTypeId

	}
	if builder.workingHoursTypeIdFlag {
		req.WorkingHoursTypeId = &builder.workingHoursTypeId

	}
	if builder.workLocationIdFlag {
		req.WorkLocationId = &builder.workLocationId

	}
	if builder.departmentIdFlag {
		req.DepartmentId = &builder.departmentId

	}
	if builder.jobIdFlag {
		req.JobId = &builder.jobId

	}
	if builder.jobLevelIdFlag {
		req.JobLevelId = &builder.jobLevelId

	}
	if builder.jobGradeIdFlag {
		req.JobGradeId = &builder.jobGradeId

	}
	if builder.jobFamilyIdFlag {
		req.JobFamilyId = &builder.jobFamilyId

	}
	if builder.probationStartDateFlag {
		req.ProbationStartDate = &builder.probationStartDate

	}
	if builder.probationEndDateFlag {
		req.ProbationEndDate = &builder.probationEndDate

	}
	if builder.primaryJobDataFlag {
		req.PrimaryJobData = &builder.primaryJobData

	}
	if builder.employmentIdFlag {
		req.EmploymentId = &builder.employmentId

	}
	if builder.effectiveTimeFlag {
		req.EffectiveTime = &builder.effectiveTime

	}
	if builder.expirationTimeFlag {
		req.ExpirationTime = &builder.expirationTime

	}
	if builder.assignmentStartReasonFlag {
		req.AssignmentStartReason = builder.assignmentStartReason
	}
	if builder.probationExpectedEndDateFlag {
		req.ProbationExpectedEndDate = &builder.probationExpectedEndDate

	}
	if builder.probationOutcomeFlag {
		req.ProbationOutcome = builder.probationOutcome
	}
	if builder.directManagerFlag {
		req.DirectManager = builder.directManager
	}
	if builder.dottedLineManagersFlag {
		req.DottedLineManagers = builder.dottedLineManagers
	}
	if builder.secondDirectManagerFlag {
		req.SecondDirectManager = builder.secondDirectManager
	}
	if builder.costCenterRatesFlag {
		req.CostCenterRates = builder.costCenterRates
	}
	if builder.workShiftFlag {
		req.WorkShift = builder.workShift
	}
	if builder.compensationTypeFlag {
		req.CompensationType = builder.compensationType
	}
	if builder.serviceCompanyFlag {
		req.ServiceCompany = &builder.serviceCompany

	}

	return req
}

type JobDataCostCenter struct {
	CostCenterId *string `json:"cost_center_id,omitempty"` // 成本中心 ID，可以通过【查询单个成本中心信息】接口获取对应的成本中心信息
	Rate         *int    `json:"rate,omitempty"`           // 分摊比例
}

type JobDataCostCenterBuilder struct {
	costCenterId     string // 成本中心 ID，可以通过【查询单个成本中心信息】接口获取对应的成本中心信息
	costCenterIdFlag bool
	rate             int // 分摊比例
	rateFlag         bool
}

func NewJobDataCostCenterBuilder() *JobDataCostCenterBuilder {
	builder := &JobDataCostCenterBuilder{}
	return builder
}

// 成本中心 ID，可以通过【查询单个成本中心信息】接口获取对应的成本中心信息
//
// 示例值：6950635856373745165
func (builder *JobDataCostCenterBuilder) CostCenterId(costCenterId string) *JobDataCostCenterBuilder {
	builder.costCenterId = costCenterId
	builder.costCenterIdFlag = true
	return builder
}

// 分摊比例
//
// 示例值：100
func (builder *JobDataCostCenterBuilder) Rate(rate int) *JobDataCostCenterBuilder {
	builder.rate = rate
	builder.rateFlag = true
	return builder
}

func (builder *JobDataCostCenterBuilder) Build() *JobDataCostCenter {
	req := &JobDataCostCenter{}
	if builder.costCenterIdFlag {
		req.CostCenterId = &builder.costCenterId

	}
	if builder.rateFlag {
		req.Rate = &builder.rate

	}
	return req
}

type JobFamily struct {
	JobFamilyId    *string            `json:"job_family_id,omitempty"`   // 序列 ID
	Name           []*I18n            `json:"name,omitempty"`            // 名称
	Active         *bool              `json:"active,omitempty"`          // 启用
	ParentId       *string            `json:"parent_id,omitempty"`       // 上级序列
	EffectiveTime  *string            `json:"effective_time,omitempty"`  // 生效时间
	ExpirationTime *string            `json:"expiration_time,omitempty"` // 失效时间
	Code           *string            `json:"code,omitempty"`            // 编码
	CustomFields   []*CustomFieldData `json:"custom_fields,omitempty"`   // 自定义字段
}

type JobFamilyBuilder struct {
	jobFamilyId        string // 序列 ID
	jobFamilyIdFlag    bool
	name               []*I18n // 名称
	nameFlag           bool
	active             bool // 启用
	activeFlag         bool
	parentId           string // 上级序列
	parentIdFlag       bool
	effectiveTime      string // 生效时间
	effectiveTimeFlag  bool
	expirationTime     string // 失效时间
	expirationTimeFlag bool
	code               string // 编码
	codeFlag           bool
	customFields       []*CustomFieldData // 自定义字段
	customFieldsFlag   bool
}

func NewJobFamilyBuilder() *JobFamilyBuilder {
	builder := &JobFamilyBuilder{}
	return builder
}

// 序列 ID
//
// 示例值：4698019107896524633
func (builder *JobFamilyBuilder) JobFamilyId(jobFamilyId string) *JobFamilyBuilder {
	builder.jobFamilyId = jobFamilyId
	builder.jobFamilyIdFlag = true
	return builder
}

// 名称
//
// 示例值：
func (builder *JobFamilyBuilder) Name(name []*I18n) *JobFamilyBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}

// 启用
//
// 示例值：true
func (builder *JobFamilyBuilder) Active(active bool) *JobFamilyBuilder {
	builder.active = active
	builder.activeFlag = true
	return builder
}

// 上级序列
//
// 示例值：4698020757495316313
func (builder *JobFamilyBuilder) ParentId(parentId string) *JobFamilyBuilder {
	builder.parentId = parentId
	builder.parentIdFlag = true
	return builder
}

// 生效时间
//
// 示例值：2020-05-01 00:00:00
func (builder *JobFamilyBuilder) EffectiveTime(effectiveTime string) *JobFamilyBuilder {
	builder.effectiveTime = effectiveTime
	builder.effectiveTimeFlag = true
	return builder
}

// 失效时间
//
// 示例值：2020-05-02 00:00:00
func (builder *JobFamilyBuilder) ExpirationTime(expirationTime string) *JobFamilyBuilder {
	builder.expirationTime = expirationTime
	builder.expirationTimeFlag = true
	return builder
}

// 编码
//
// 示例值：123456
func (builder *JobFamilyBuilder) Code(code string) *JobFamilyBuilder {
	builder.code = code
	builder.codeFlag = true
	return builder
}

// 自定义字段
//
// 示例值：
func (builder *JobFamilyBuilder) CustomFields(customFields []*CustomFieldData) *JobFamilyBuilder {
	builder.customFields = customFields
	builder.customFieldsFlag = true
	return builder
}

func (builder *JobFamilyBuilder) Build() *JobFamily {
	req := &JobFamily{}
	if builder.jobFamilyIdFlag {
		req.JobFamilyId = &builder.jobFamilyId

	}
	if builder.nameFlag {
		req.Name = builder.name
	}
	if builder.activeFlag {
		req.Active = &builder.active

	}
	if builder.parentIdFlag {
		req.ParentId = &builder.parentId

	}
	if builder.effectiveTimeFlag {
		req.EffectiveTime = &builder.effectiveTime

	}
	if builder.expirationTimeFlag {
		req.ExpirationTime = &builder.expirationTime

	}
	if builder.codeFlag {
		req.Code = &builder.code

	}
	if builder.customFieldsFlag {
		req.CustomFields = builder.customFields
	}
	return req
}

type JobLevel struct {
	JobLevelId   *string            `json:"job_level_id,omitempty"`  // 职级 ID
	LevelOrder   *int               `json:"level_order,omitempty"`   // 职级数值
	Code         *string            `json:"code,omitempty"`          // 编码
	Name         []*I18n            `json:"name,omitempty"`          // 名称
	Description  []*I18n            `json:"description,omitempty"`   // 描述
	Active       *bool              `json:"active,omitempty"`        // 启用
	CustomFields []*CustomFieldData `json:"custom_fields,omitempty"` // 自定义字段
}

type JobLevelBuilder struct {
	jobLevelId       string // 职级 ID
	jobLevelIdFlag   bool
	levelOrder       int // 职级数值
	levelOrderFlag   bool
	code             string // 编码
	codeFlag         bool
	name             []*I18n // 名称
	nameFlag         bool
	description      []*I18n // 描述
	descriptionFlag  bool
	active           bool // 启用
	activeFlag       bool
	customFields     []*CustomFieldData // 自定义字段
	customFieldsFlag bool
}

func NewJobLevelBuilder() *JobLevelBuilder {
	builder := &JobLevelBuilder{}
	return builder
}

// 职级 ID
//
// 示例值：4692446793125560154
func (builder *JobLevelBuilder) JobLevelId(jobLevelId string) *JobLevelBuilder {
	builder.jobLevelId = jobLevelId
	builder.jobLevelIdFlag = true
	return builder
}

// 职级数值
//
// 示例值：9999
func (builder *JobLevelBuilder) LevelOrder(levelOrder int) *JobLevelBuilder {
	builder.levelOrder = levelOrder
	builder.levelOrderFlag = true
	return builder
}

// 编码
//
// 示例值：VQzo/BSonp8l6PmcZ+VlDhkd2595LMkhyBAGX6HAlCY=
func (builder *JobLevelBuilder) Code(code string) *JobLevelBuilder {
	builder.code = code
	builder.codeFlag = true
	return builder
}

// 名称
//
// 示例值：
func (builder *JobLevelBuilder) Name(name []*I18n) *JobLevelBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}

// 描述
//
// 示例值：
func (builder *JobLevelBuilder) Description(description []*I18n) *JobLevelBuilder {
	builder.description = description
	builder.descriptionFlag = true
	return builder
}

// 启用
//
// 示例值：true
func (builder *JobLevelBuilder) Active(active bool) *JobLevelBuilder {
	builder.active = active
	builder.activeFlag = true
	return builder
}

// 自定义字段
//
// 示例值：
func (builder *JobLevelBuilder) CustomFields(customFields []*CustomFieldData) *JobLevelBuilder {
	builder.customFields = customFields
	builder.customFieldsFlag = true
	return builder
}

func (builder *JobLevelBuilder) Build() *JobLevel {
	req := &JobLevel{}
	if builder.jobLevelIdFlag {
		req.JobLevelId = &builder.jobLevelId

	}
	if builder.levelOrderFlag {
		req.LevelOrder = &builder.levelOrder

	}
	if builder.codeFlag {
		req.Code = &builder.code

	}
	if builder.nameFlag {
		req.Name = builder.name
	}
	if builder.descriptionFlag {
		req.Description = builder.description
	}
	if builder.activeFlag {
		req.Active = &builder.active

	}
	if builder.customFieldsFlag {
		req.CustomFields = builder.customFields
	}
	return req
}

type Location struct {
	LocationId         *string            `json:"location_id,omitempty"`           // 地点 ID
	HiberarchyCommon   *HiberarchyCommon  `json:"hiberarchy_common,omitempty"`     // 地点基本信息
	LocationUsageList  []*Enum            `json:"location_usage_list,omitempty"`   // 地点用途
	Address            []*Address         `json:"address,omitempty"`               // 地址
	WorkingHoursTypeId *string            `json:"working_hours_type_id,omitempty"` // 工时制度
	EffectiveTime      *string            `json:"effective_time,omitempty"`        // 生效时间
	ExpirationTime     *string            `json:"expiration_time,omitempty"`       // 失效时间
	CustomFields       []*CustomFieldData `json:"custom_fields,omitempty"`         // 自定义字段
	Locale             *Enum              `json:"locale,omitempty"`                // 区域设置
	TimeZoneId         *string            `json:"time_zone_id,omitempty"`          // 时区
	DisplayLanguageId  *string            `json:"display_language_id,omitempty"`   // 默认显示语言
}

type LocationBuilder struct {
	locationId             string // 地点 ID
	locationIdFlag         bool
	hiberarchyCommon       *HiberarchyCommon // 地点基本信息
	hiberarchyCommonFlag   bool
	locationUsageList      []*Enum // 地点用途
	locationUsageListFlag  bool
	address                []*Address // 地址
	addressFlag            bool
	workingHoursTypeId     string // 工时制度
	workingHoursTypeIdFlag bool
	effectiveTime          string // 生效时间
	effectiveTimeFlag      bool
	expirationTime         string // 失效时间
	expirationTimeFlag     bool
	customFields           []*CustomFieldData // 自定义字段
	customFieldsFlag       bool
	locale                 *Enum // 区域设置
	localeFlag             bool
	timeZoneId             string // 时区
	timeZoneIdFlag         bool
	displayLanguageId      string // 默认显示语言
	displayLanguageIdFlag  bool
}

func NewLocationBuilder() *LocationBuilder {
	builder := &LocationBuilder{}
	return builder
}

// 地点 ID
//
// 示例值：4718803945687580505
func (builder *LocationBuilder) LocationId(locationId string) *LocationBuilder {
	builder.locationId = locationId
	builder.locationIdFlag = true
	return builder
}

// 地点基本信息
//
// 示例值：
func (builder *LocationBuilder) HiberarchyCommon(hiberarchyCommon *HiberarchyCommon) *LocationBuilder {
	builder.hiberarchyCommon = hiberarchyCommon
	builder.hiberarchyCommonFlag = true
	return builder
}

// 地点用途
//
// 示例值：
func (builder *LocationBuilder) LocationUsageList(locationUsageList []*Enum) *LocationBuilder {
	builder.locationUsageList = locationUsageList
	builder.locationUsageListFlag = true
	return builder
}

// 地址
//
// 示例值：
func (builder *LocationBuilder) Address(address []*Address) *LocationBuilder {
	builder.address = address
	builder.addressFlag = true
	return builder
}

// 工时制度
//
// 示例值：4690238309151997779
func (builder *LocationBuilder) WorkingHoursTypeId(workingHoursTypeId string) *LocationBuilder {
	builder.workingHoursTypeId = workingHoursTypeId
	builder.workingHoursTypeIdFlag = true
	return builder
}

// 生效时间
//
// 示例值：2020-05-01 00:00:00
func (builder *LocationBuilder) EffectiveTime(effectiveTime string) *LocationBuilder {
	builder.effectiveTime = effectiveTime
	builder.effectiveTimeFlag = true
	return builder
}

// 失效时间
//
// 示例值：2020-05-02 00:00:00
func (builder *LocationBuilder) ExpirationTime(expirationTime string) *LocationBuilder {
	builder.expirationTime = expirationTime
	builder.expirationTimeFlag = true
	return builder
}

// 自定义字段
//
// 示例值：
func (builder *LocationBuilder) CustomFields(customFields []*CustomFieldData) *LocationBuilder {
	builder.customFields = customFields
	builder.customFieldsFlag = true
	return builder
}

// 区域设置
//
// 示例值：zh_cn
func (builder *LocationBuilder) Locale(locale *Enum) *LocationBuilder {
	builder.locale = locale
	builder.localeFlag = true
	return builder
}

// 时区
//
// 示例值：123456789
func (builder *LocationBuilder) TimeZoneId(timeZoneId string) *LocationBuilder {
	builder.timeZoneId = timeZoneId
	builder.timeZoneIdFlag = true
	return builder
}

// 默认显示语言
//
// 示例值：123456789
func (builder *LocationBuilder) DisplayLanguageId(displayLanguageId string) *LocationBuilder {
	builder.displayLanguageId = displayLanguageId
	builder.displayLanguageIdFlag = true
	return builder
}

func (builder *LocationBuilder) Build() *Location {
	req := &Location{}
	if builder.locationIdFlag {
		req.LocationId = &builder.locationId

	}
	if builder.hiberarchyCommonFlag {
		req.HiberarchyCommon = builder.hiberarchyCommon
	}
	if builder.locationUsageListFlag {
		req.LocationUsageList = builder.locationUsageList
	}
	if builder.addressFlag {
		req.Address = builder.address
	}
	if builder.workingHoursTypeIdFlag {
		req.WorkingHoursTypeId = &builder.workingHoursTypeId

	}
	if builder.effectiveTimeFlag {
		req.EffectiveTime = &builder.effectiveTime

	}
	if builder.expirationTimeFlag {
		req.ExpirationTime = &builder.expirationTime

	}
	if builder.customFieldsFlag {
		req.CustomFields = builder.customFields
	}
	if builder.localeFlag {
		req.Locale = builder.locale
	}
	if builder.timeZoneIdFlag {
		req.TimeZoneId = &builder.timeZoneId

	}
	if builder.displayLanguageIdFlag {
		req.DisplayLanguageId = &builder.displayLanguageId

	}
	return req
}

type LocationV2 struct {
	LocationId         *string            `json:"location_id,omitempty"`           // 地点 ID
	ParentLocationId   *string            `json:"parent_location_id,omitempty"`    // 上级地点ID
	Names              []*I18n            `json:"names,omitempty"`                 // 名称
	Code               *string            `json:"code,omitempty"`                  // 编码
	Active             *bool              `json:"active,omitempty"`                // 启用状态
	LocationUsages     []*Enum            `json:"location_usages,omitempty"`       // 地点用途
	Addresses          []*Address         `json:"addresses,omitempty"`             // 地址
	WorkingHoursTypeId *string            `json:"working_hours_type_id,omitempty"` // 工时制度
	EffectiveTime      *string            `json:"effective_time,omitempty"`        // 生效时间
	ExpirationTime     *string            `json:"expiration_time,omitempty"`       // 失效时间
	CustomFields       []*CustomFieldData `json:"custom_fields,omitempty"`         // 自定义字段
	Locale             *Enum              `json:"locale,omitempty"`                // 区域设置
	TimeZoneId         *string            `json:"time_zone_id,omitempty"`          // 时区
	DisplayLanguageId  *string            `json:"display_language_id,omitempty"`   // 默认显示语言
}

type LocationV2Builder struct {
	locationId             string // 地点 ID
	locationIdFlag         bool
	parentLocationId       string // 上级地点ID
	parentLocationIdFlag   bool
	names                  []*I18n // 名称
	namesFlag              bool
	code                   string // 编码
	codeFlag               bool
	active                 bool // 启用状态
	activeFlag             bool
	locationUsages         []*Enum // 地点用途
	locationUsagesFlag     bool
	addresses              []*Address // 地址
	addressesFlag          bool
	workingHoursTypeId     string // 工时制度
	workingHoursTypeIdFlag bool
	effectiveTime          string // 生效时间
	effectiveTimeFlag      bool
	expirationTime         string // 失效时间
	expirationTimeFlag     bool
	customFields           []*CustomFieldData // 自定义字段
	customFieldsFlag       bool
	locale                 *Enum // 区域设置
	localeFlag             bool
	timeZoneId             string // 时区
	timeZoneIdFlag         bool
	displayLanguageId      string // 默认显示语言
	displayLanguageIdFlag  bool
}

func NewLocationV2Builder() *LocationV2Builder {
	builder := &LocationV2Builder{}
	return builder
}

// 地点 ID
//
// 示例值：4718803945687580505
func (builder *LocationV2Builder) LocationId(locationId string) *LocationV2Builder {
	builder.locationId = locationId
	builder.locationIdFlag = true
	return builder
}

// 上级地点ID
//
// 示例值：4719168654814483759
func (builder *LocationV2Builder) ParentLocationId(parentLocationId string) *LocationV2Builder {
	builder.parentLocationId = parentLocationId
	builder.parentLocationIdFlag = true
	return builder
}

// 名称
//
// 示例值：
func (builder *LocationV2Builder) Names(names []*I18n) *LocationV2Builder {
	builder.names = names
	builder.namesFlag = true
	return builder
}

// 编码
//
// 示例值：LO_CountryRegion_CHN
func (builder *LocationV2Builder) Code(code string) *LocationV2Builder {
	builder.code = code
	builder.codeFlag = true
	return builder
}

// 启用状态
//
// 示例值：true
func (builder *LocationV2Builder) Active(active bool) *LocationV2Builder {
	builder.active = active
	builder.activeFlag = true
	return builder
}

// 地点用途
//
// 示例值：
func (builder *LocationV2Builder) LocationUsages(locationUsages []*Enum) *LocationV2Builder {
	builder.locationUsages = locationUsages
	builder.locationUsagesFlag = true
	return builder
}

// 地址
//
// 示例值：
func (builder *LocationV2Builder) Addresses(addresses []*Address) *LocationV2Builder {
	builder.addresses = addresses
	builder.addressesFlag = true
	return builder
}

// 工时制度
//
// 示例值：4690238309151997779
func (builder *LocationV2Builder) WorkingHoursTypeId(workingHoursTypeId string) *LocationV2Builder {
	builder.workingHoursTypeId = workingHoursTypeId
	builder.workingHoursTypeIdFlag = true
	return builder
}

// 生效时间
//
// 示例值：2020-05-01 00:00:00
func (builder *LocationV2Builder) EffectiveTime(effectiveTime string) *LocationV2Builder {
	builder.effectiveTime = effectiveTime
	builder.effectiveTimeFlag = true
	return builder
}

// 失效时间
//
// 示例值：2020-05-02 00:00:00
func (builder *LocationV2Builder) ExpirationTime(expirationTime string) *LocationV2Builder {
	builder.expirationTime = expirationTime
	builder.expirationTimeFlag = true
	return builder
}

// 自定义字段
//
// 示例值：
func (builder *LocationV2Builder) CustomFields(customFields []*CustomFieldData) *LocationV2Builder {
	builder.customFields = customFields
	builder.customFieldsFlag = true
	return builder
}

// 区域设置
//
// 示例值：zh_cn
func (builder *LocationV2Builder) Locale(locale *Enum) *LocationV2Builder {
	builder.locale = locale
	builder.localeFlag = true
	return builder
}

// 时区
//
// 示例值：123456789
func (builder *LocationV2Builder) TimeZoneId(timeZoneId string) *LocationV2Builder {
	builder.timeZoneId = timeZoneId
	builder.timeZoneIdFlag = true
	return builder
}

// 默认显示语言
//
// 示例值：123456789
func (builder *LocationV2Builder) DisplayLanguageId(displayLanguageId string) *LocationV2Builder {
	builder.displayLanguageId = displayLanguageId
	builder.displayLanguageIdFlag = true
	return builder
}

func (builder *LocationV2Builder) Build() *LocationV2 {
	req := &LocationV2{}
	if builder.locationIdFlag {
		req.LocationId = &builder.locationId

	}
	if builder.parentLocationIdFlag {
		req.ParentLocationId = &builder.parentLocationId

	}
	if builder.namesFlag {
		req.Names = builder.names
	}
	if builder.codeFlag {
		req.Code = &builder.code

	}
	if builder.activeFlag {
		req.Active = &builder.active

	}
	if builder.locationUsagesFlag {
		req.LocationUsages = builder.locationUsages
	}
	if builder.addressesFlag {
		req.Addresses = builder.addresses
	}
	if builder.workingHoursTypeIdFlag {
		req.WorkingHoursTypeId = &builder.workingHoursTypeId

	}
	if builder.effectiveTimeFlag {
		req.EffectiveTime = &builder.effectiveTime

	}
	if builder.expirationTimeFlag {
		req.ExpirationTime = &builder.expirationTime

	}
	if builder.customFieldsFlag {
		req.CustomFields = builder.customFields
	}
	if builder.localeFlag {
		req.Locale = builder.locale
	}
	if builder.timeZoneIdFlag {
		req.TimeZoneId = &builder.timeZoneId

	}
	if builder.displayLanguageIdFlag {
		req.DisplayLanguageId = &builder.displayLanguageId

	}
	return req
}

type MatchRule struct {
	LeftValue   *string  `json:"left_value,omitempty"`   // 左值
	Operator    *string  `json:"operator,omitempty"`     // 操作符
	RightValues []string `json:"right_values,omitempty"` // 右值
}

type MatchRuleBuilder struct {
	leftValue       string // 左值
	leftValueFlag   bool
	operator        string // 操作符
	operatorFlag    bool
	rightValues     []string // 右值
	rightValuesFlag bool
}

func NewMatchRuleBuilder() *MatchRuleBuilder {
	builder := &MatchRuleBuilder{}
	return builder
}

// 左值
//
// 示例值：department
func (builder *MatchRuleBuilder) LeftValue(leftValue string) *MatchRuleBuilder {
	builder.leftValue = leftValue
	builder.leftValueFlag = true
	return builder
}

// 操作符
//
// 示例值：contains
func (builder *MatchRuleBuilder) Operator(operator string) *MatchRuleBuilder {
	builder.operator = operator
	builder.operatorFlag = true
	return builder
}

// 右值
//
// 示例值：
func (builder *MatchRuleBuilder) RightValues(rightValues []string) *MatchRuleBuilder {
	builder.rightValues = rightValues
	builder.rightValuesFlag = true
	return builder
}

func (builder *MatchRuleBuilder) Build() *MatchRule {
	req := &MatchRule{}
	if builder.leftValueFlag {
		req.LeftValue = &builder.leftValue

	}
	if builder.operatorFlag {
		req.Operator = &builder.operator

	}
	if builder.rightValuesFlag {
		req.RightValues = builder.rightValues
	}
	return req
}

type MatchRules struct {
	MatchRules []*MatchRule `json:"match_rules,omitempty"` // 匹配规则组，组内取交集
}

type MatchRulesBuilder struct {
	matchRules     []*MatchRule // 匹配规则组，组内取交集
	matchRulesFlag bool
}

func NewMatchRulesBuilder() *MatchRulesBuilder {
	builder := &MatchRulesBuilder{}
	return builder
}

// 匹配规则组，组内取交集
//
// 示例值：
func (builder *MatchRulesBuilder) MatchRules(matchRules []*MatchRule) *MatchRulesBuilder {
	builder.matchRules = matchRules
	builder.matchRulesFlag = true
	return builder
}

func (builder *MatchRulesBuilder) Build() *MatchRules {
	req := &MatchRules{}
	if builder.matchRulesFlag {
		req.MatchRules = builder.matchRules
	}
	return req
}

type Name struct {
	FullName          *string `json:"full_name,omitempty"`           // 全名
	FirstName         *string `json:"first_name,omitempty"`          // 名
	MiddleName        *string `json:"middle_name,omitempty"`         // 中间名
	NamePrimary       *string `json:"name_primary,omitempty"`        // 姓
	LocalFirstName    *string `json:"local_first_name,omitempty"`    // 名 - 本地文字
	LocalMiddleName   *string `json:"local_middle_name,omitempty"`   // 本地中间名
	LocalPrimary      *string `json:"local_primary,omitempty"`       // 姓 - 本地文字
	CountryRegionId   *string `json:"country_region_id,omitempty"`   // 国家 / 地区
	CustomLocalName   *string `json:"custom_local_name,omitempty"`   // 本地文字的自定义姓名
	CustomWesternName *string `json:"custom_western_name,omitempty"` // 西方文字的自定义姓名
}

type NameBuilder struct {
	fullName              string // 全名
	fullNameFlag          bool
	firstName             string // 名
	firstNameFlag         bool
	middleName            string // 中间名
	middleNameFlag        bool
	namePrimary           string // 姓
	namePrimaryFlag       bool
	localFirstName        string // 名 - 本地文字
	localFirstNameFlag    bool
	localMiddleName       string // 本地中间名
	localMiddleNameFlag   bool
	localPrimary          string // 姓 - 本地文字
	localPrimaryFlag      bool
	countryRegionId       string // 国家 / 地区
	countryRegionIdFlag   bool
	customLocalName       string // 本地文字的自定义姓名
	customLocalNameFlag   bool
	customWesternName     string // 西方文字的自定义姓名
	customWesternNameFlag bool
}

func NewNameBuilder() *NameBuilder {
	builder := &NameBuilder{}
	return builder
}

// 全名
//
// 示例值：李一一
func (builder *NameBuilder) FullName(fullName string) *NameBuilder {
	builder.fullName = fullName
	builder.fullNameFlag = true
	return builder
}

// 名
//
// 示例值：一
func (builder *NameBuilder) FirstName(firstName string) *NameBuilder {
	builder.firstName = firstName
	builder.firstNameFlag = true
	return builder
}

// 中间名
//
// 示例值：一
func (builder *NameBuilder) MiddleName(middleName string) *NameBuilder {
	builder.middleName = middleName
	builder.middleNameFlag = true
	return builder
}

// 姓
//
// 示例值：李
func (builder *NameBuilder) NamePrimary(namePrimary string) *NameBuilder {
	builder.namePrimary = namePrimary
	builder.namePrimaryFlag = true
	return builder
}

// 名 - 本地文字
//
// 示例值：一
func (builder *NameBuilder) LocalFirstName(localFirstName string) *NameBuilder {
	builder.localFirstName = localFirstName
	builder.localFirstNameFlag = true
	return builder
}

// 本地中间名
//
// 示例值：一
func (builder *NameBuilder) LocalMiddleName(localMiddleName string) *NameBuilder {
	builder.localMiddleName = localMiddleName
	builder.localMiddleNameFlag = true
	return builder
}

// 姓 - 本地文字
//
// 示例值：李
func (builder *NameBuilder) LocalPrimary(localPrimary string) *NameBuilder {
	builder.localPrimary = localPrimary
	builder.localPrimaryFlag = true
	return builder
}

// 国家 / 地区
//
// 示例值：6862995757234914824
func (builder *NameBuilder) CountryRegionId(countryRegionId string) *NameBuilder {
	builder.countryRegionId = countryRegionId
	builder.countryRegionIdFlag = true
	return builder
}

// 本地文字的自定义姓名
//
// 示例值：李一一
func (builder *NameBuilder) CustomLocalName(customLocalName string) *NameBuilder {
	builder.customLocalName = customLocalName
	builder.customLocalNameFlag = true
	return builder
}

// 西方文字的自定义姓名
//
// 示例值：YiyiLi
func (builder *NameBuilder) CustomWesternName(customWesternName string) *NameBuilder {
	builder.customWesternName = customWesternName
	builder.customWesternNameFlag = true
	return builder
}

func (builder *NameBuilder) Build() *Name {
	req := &Name{}
	if builder.fullNameFlag {
		req.FullName = &builder.fullName

	}
	if builder.firstNameFlag {
		req.FirstName = &builder.firstName

	}
	if builder.middleNameFlag {
		req.MiddleName = &builder.middleName

	}
	if builder.namePrimaryFlag {
		req.NamePrimary = &builder.namePrimary

	}
	if builder.localFirstNameFlag {
		req.LocalFirstName = &builder.localFirstName

	}
	if builder.localMiddleNameFlag {
		req.LocalMiddleName = &builder.localMiddleName

	}
	if builder.localPrimaryFlag {
		req.LocalPrimary = &builder.localPrimary

	}
	if builder.countryRegionIdFlag {
		req.CountryRegionId = &builder.countryRegionId

	}
	if builder.customLocalNameFlag {
		req.CustomLocalName = &builder.customLocalName

	}
	if builder.customWesternNameFlag {
		req.CustomWesternName = &builder.customWesternName

	}
	return req
}

type NameForUpdate struct {
	FullName          *string `json:"full_name,omitempty"`           // 全名
	FirstName         *string `json:"first_name,omitempty"`          // 名
	MiddleName        *string `json:"middle_name,omitempty"`         // 中间名
	NamePrimary       *string `json:"name_primary,omitempty"`        // 姓
	LocalFirstName    *string `json:"local_first_name,omitempty"`    // 名 - 本地文字
	LocalMiddleName   *string `json:"local_middle_name,omitempty"`   // 本地中间名
	LocalPrimary      *string `json:"local_primary,omitempty"`       // 姓 - 本地文字
	CustomLocalName   *string `json:"custom_local_name,omitempty"`   // 自定义姓名（本地文字）
	CustomWesternName *string `json:"custom_western_name,omitempty"` // 自定义姓名（西方文字）
	CountryRegion     *string `json:"country_region,omitempty"`      // 国家/地区
	NameType          *string `json:"name_type,omitempty"`           // 姓名类型，枚举值
}

type NameForUpdateBuilder struct {
	fullName              string // 全名
	fullNameFlag          bool
	firstName             string // 名
	firstNameFlag         bool
	middleName            string // 中间名
	middleNameFlag        bool
	namePrimary           string // 姓
	namePrimaryFlag       bool
	localFirstName        string // 名 - 本地文字
	localFirstNameFlag    bool
	localMiddleName       string // 本地中间名
	localMiddleNameFlag   bool
	localPrimary          string // 姓 - 本地文字
	localPrimaryFlag      bool
	customLocalName       string // 自定义姓名（本地文字）
	customLocalNameFlag   bool
	customWesternName     string // 自定义姓名（西方文字）
	customWesternNameFlag bool
	countryRegion         string // 国家/地区
	countryRegionFlag     bool
	nameType              string // 姓名类型，枚举值
	nameTypeFlag          bool
}

func NewNameForUpdateBuilder() *NameForUpdateBuilder {
	builder := &NameForUpdateBuilder{}
	return builder
}

// 全名
//
// 示例值：李一一
func (builder *NameForUpdateBuilder) FullName(fullName string) *NameForUpdateBuilder {
	builder.fullName = fullName
	builder.fullNameFlag = true
	return builder
}

// 名
//
// 示例值：一
func (builder *NameForUpdateBuilder) FirstName(firstName string) *NameForUpdateBuilder {
	builder.firstName = firstName
	builder.firstNameFlag = true
	return builder
}

// 中间名
//
// 示例值：一
func (builder *NameForUpdateBuilder) MiddleName(middleName string) *NameForUpdateBuilder {
	builder.middleName = middleName
	builder.middleNameFlag = true
	return builder
}

// 姓
//
// 示例值：李
func (builder *NameForUpdateBuilder) NamePrimary(namePrimary string) *NameForUpdateBuilder {
	builder.namePrimary = namePrimary
	builder.namePrimaryFlag = true
	return builder
}

// 名 - 本地文字
//
// 示例值：一
func (builder *NameForUpdateBuilder) LocalFirstName(localFirstName string) *NameForUpdateBuilder {
	builder.localFirstName = localFirstName
	builder.localFirstNameFlag = true
	return builder
}

// 本地中间名
//
// 示例值：一
func (builder *NameForUpdateBuilder) LocalMiddleName(localMiddleName string) *NameForUpdateBuilder {
	builder.localMiddleName = localMiddleName
	builder.localMiddleNameFlag = true
	return builder
}

// 姓 - 本地文字
//
// 示例值：李
func (builder *NameForUpdateBuilder) LocalPrimary(localPrimary string) *NameForUpdateBuilder {
	builder.localPrimary = localPrimary
	builder.localPrimaryFlag = true
	return builder
}

// 自定义姓名（本地文字）
//
// 示例值：李一一
func (builder *NameForUpdateBuilder) CustomLocalName(customLocalName string) *NameForUpdateBuilder {
	builder.customLocalName = customLocalName
	builder.customLocalNameFlag = true
	return builder
}

// 自定义姓名（西方文字）
//
// 示例值：YiyiLi
func (builder *NameForUpdateBuilder) CustomWesternName(customWesternName string) *NameForUpdateBuilder {
	builder.customWesternName = customWesternName
	builder.customWesternNameFlag = true
	return builder
}

// 国家/地区
//
// 示例值：6862995757234914824
func (builder *NameForUpdateBuilder) CountryRegion(countryRegion string) *NameForUpdateBuilder {
	builder.countryRegion = countryRegion
	builder.countryRegionFlag = true
	return builder
}

// 姓名类型，枚举值
//
// 示例值：legal_name，preferred_name
func (builder *NameForUpdateBuilder) NameType(nameType string) *NameForUpdateBuilder {
	builder.nameType = nameType
	builder.nameTypeFlag = true
	return builder
}

func (builder *NameForUpdateBuilder) Build() *NameForUpdate {
	req := &NameForUpdate{}
	if builder.fullNameFlag {
		req.FullName = &builder.fullName

	}
	if builder.firstNameFlag {
		req.FirstName = &builder.firstName

	}
	if builder.middleNameFlag {
		req.MiddleName = &builder.middleName

	}
	if builder.namePrimaryFlag {
		req.NamePrimary = &builder.namePrimary

	}
	if builder.localFirstNameFlag {
		req.LocalFirstName = &builder.localFirstName

	}
	if builder.localMiddleNameFlag {
		req.LocalMiddleName = &builder.localMiddleName

	}
	if builder.localPrimaryFlag {
		req.LocalPrimary = &builder.localPrimary

	}
	if builder.customLocalNameFlag {
		req.CustomLocalName = &builder.customLocalName

	}
	if builder.customWesternNameFlag {
		req.CustomWesternName = &builder.customWesternName

	}
	if builder.countryRegionFlag {
		req.CountryRegion = &builder.countryRegion

	}
	if builder.nameTypeFlag {
		req.NameType = &builder.nameType

	}
	return req
}

type NationalId struct {
	NationalIdTypeId *string            `json:"national_id_type_id,omitempty"` // 国家证件类型
	NationalIdNumber *string            `json:"national_id_number,omitempty"`  // 证件号码
	IssueDate        *string            `json:"issue_date,omitempty"`          // 证件签发日期
	ExpirationDate   *string            `json:"expiration_date,omitempty"`     // 证件到期日期
	CountryRegionId  *string            `json:"country_region_id,omitempty"`   // 国家 / 地区
	IssuedBy         *string            `json:"issued_by,omitempty"`           // 证件签发机构
	CustomFields     []*CustomFieldData `json:"custom_fields,omitempty"`       // 自定义字段
}

type NationalIdBuilder struct {
	nationalIdTypeId     string // 国家证件类型
	nationalIdTypeIdFlag bool
	nationalIdNumber     string // 证件号码
	nationalIdNumberFlag bool
	issueDate            string // 证件签发日期
	issueDateFlag        bool
	expirationDate       string // 证件到期日期
	expirationDateFlag   bool
	countryRegionId      string // 国家 / 地区
	countryRegionIdFlag  bool
	issuedBy             string // 证件签发机构
	issuedByFlag         bool
	customFields         []*CustomFieldData // 自定义字段
	customFieldsFlag     bool
}

func NewNationalIdBuilder() *NationalIdBuilder {
	builder := &NationalIdBuilder{}
	return builder
}

// 国家证件类型
//
// 示例值：6863330041896371725
func (builder *NationalIdBuilder) NationalIdTypeId(nationalIdTypeId string) *NationalIdBuilder {
	builder.nationalIdTypeId = nationalIdTypeId
	builder.nationalIdTypeIdFlag = true
	return builder
}

// 证件号码
//
// 示例值：1231131333
func (builder *NationalIdBuilder) NationalIdNumber(nationalIdNumber string) *NationalIdBuilder {
	builder.nationalIdNumber = nationalIdNumber
	builder.nationalIdNumberFlag = true
	return builder
}

// 证件签发日期
//
// 示例值：2020-04-01
func (builder *NationalIdBuilder) IssueDate(issueDate string) *NationalIdBuilder {
	builder.issueDate = issueDate
	builder.issueDateFlag = true
	return builder
}

// 证件到期日期
//
// 示例值：2020-05-21
func (builder *NationalIdBuilder) ExpirationDate(expirationDate string) *NationalIdBuilder {
	builder.expirationDate = expirationDate
	builder.expirationDateFlag = true
	return builder
}

// 国家 / 地区
//
// 示例值：6862995757234914824
func (builder *NationalIdBuilder) CountryRegionId(countryRegionId string) *NationalIdBuilder {
	builder.countryRegionId = countryRegionId
	builder.countryRegionIdFlag = true
	return builder
}

// 证件签发机构
//
// 示例值：北京市公安局
func (builder *NationalIdBuilder) IssuedBy(issuedBy string) *NationalIdBuilder {
	builder.issuedBy = issuedBy
	builder.issuedByFlag = true
	return builder
}

// 自定义字段
//
// 示例值：
func (builder *NationalIdBuilder) CustomFields(customFields []*CustomFieldData) *NationalIdBuilder {
	builder.customFields = customFields
	builder.customFieldsFlag = true
	return builder
}

func (builder *NationalIdBuilder) Build() *NationalId {
	req := &NationalId{}
	if builder.nationalIdTypeIdFlag {
		req.NationalIdTypeId = &builder.nationalIdTypeId

	}
	if builder.nationalIdNumberFlag {
		req.NationalIdNumber = &builder.nationalIdNumber

	}
	if builder.issueDateFlag {
		req.IssueDate = &builder.issueDate

	}
	if builder.expirationDateFlag {
		req.ExpirationDate = &builder.expirationDate

	}
	if builder.countryRegionIdFlag {
		req.CountryRegionId = &builder.countryRegionId

	}
	if builder.issuedByFlag {
		req.IssuedBy = &builder.issuedBy

	}
	if builder.customFieldsFlag {
		req.CustomFields = builder.customFields
	}
	return req
}

type Nationality struct {
	NationalityId   *string `json:"nationality_id,omitempty"`    // 国籍 ID（对应其他查询结果的 nationality_id_v2 字段）
	Name            []*I18n `json:"name,omitempty"`              // 名称
	Alpha2Code      *string `json:"alpha_2_code,omitempty"`      // 二字码
	Alpha3Code      *string `json:"alpha_3_code,omitempty"`      // 三字码
	NumericCode     *int    `json:"numeric_code,omitempty"`      // 数字代码
	CountryRegionId *string `json:"country_region_id,omitempty"` // 国家 / 地区 ID ，可通过【查询单条国家/地区信息】 接口查询
	Status          *int    `json:"status,omitempty"`            // 状态
}

type NationalityBuilder struct {
	nationalityId       string // 国籍 ID（对应其他查询结果的 nationality_id_v2 字段）
	nationalityIdFlag   bool
	name                []*I18n // 名称
	nameFlag            bool
	alpha2Code          string // 二字码
	alpha2CodeFlag      bool
	alpha3Code          string // 三字码
	alpha3CodeFlag      bool
	numericCode         int // 数字代码
	numericCodeFlag     bool
	countryRegionId     string // 国家 / 地区 ID ，可通过【查询单条国家/地区信息】 接口查询
	countryRegionIdFlag bool
	status              int // 状态
	statusFlag          bool
}

func NewNationalityBuilder() *NationalityBuilder {
	builder := &NationalityBuilder{}
	return builder
}

// 国籍 ID（对应其他查询结果的 nationality_id_v2 字段）
//
// 示例值：6893014062142064135
func (builder *NationalityBuilder) NationalityId(nationalityId string) *NationalityBuilder {
	builder.nationalityId = nationalityId
	builder.nationalityIdFlag = true
	return builder
}

// 名称
//
// 示例值：
func (builder *NationalityBuilder) Name(name []*I18n) *NationalityBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}

// 二字码
//
// 示例值：CN
func (builder *NationalityBuilder) Alpha2Code(alpha2Code string) *NationalityBuilder {
	builder.alpha2Code = alpha2Code
	builder.alpha2CodeFlag = true
	return builder
}

// 三字码
//
// 示例值：CHN
func (builder *NationalityBuilder) Alpha3Code(alpha3Code string) *NationalityBuilder {
	builder.alpha3Code = alpha3Code
	builder.alpha3CodeFlag = true
	return builder
}

// 数字代码
//
// 示例值：156
func (builder *NationalityBuilder) NumericCode(numericCode int) *NationalityBuilder {
	builder.numericCode = numericCode
	builder.numericCodeFlag = true
	return builder
}

// 国家 / 地区 ID ，可通过【查询单条国家/地区信息】 接口查询
//
// 示例值：6893014061142064135
func (builder *NationalityBuilder) CountryRegionId(countryRegionId string) *NationalityBuilder {
	builder.countryRegionId = countryRegionId
	builder.countryRegionIdFlag = true
	return builder
}

// 状态
//
// 示例值：1
func (builder *NationalityBuilder) Status(status int) *NationalityBuilder {
	builder.status = status
	builder.statusFlag = true
	return builder
}

func (builder *NationalityBuilder) Build() *Nationality {
	req := &Nationality{}
	if builder.nationalityIdFlag {
		req.NationalityId = &builder.nationalityId

	}
	if builder.nameFlag {
		req.Name = builder.name
	}
	if builder.alpha2CodeFlag {
		req.Alpha2Code = &builder.alpha2Code

	}
	if builder.alpha3CodeFlag {
		req.Alpha3Code = &builder.alpha3Code

	}
	if builder.numericCodeFlag {
		req.NumericCode = &builder.numericCode

	}
	if builder.countryRegionIdFlag {
		req.CountryRegionId = &builder.countryRegionId

	}
	if builder.statusFlag {
		req.Status = &builder.status

	}
	return req
}

type ObjectFieldData struct {
	FieldName *string `json:"field_name,omitempty"` // 字段名
	Value     *string `json:"value,omitempty"`      // 字段值，是json转义后的字符串，根据元数据定义不同，字段格式不同(123, 123.23, true, [\"id1\",\"id2\], 2006-01-02 15:04:05])
}

type ObjectFieldDataBuilder struct {
	fieldName     string // 字段名
	fieldNameFlag bool
	value         string // 字段值，是json转义后的字符串，根据元数据定义不同，字段格式不同(123, 123.23, true, [\"id1\",\"id2\], 2006-01-02 15:04:05])
	valueFlag     bool
}

func NewObjectFieldDataBuilder() *ObjectFieldDataBuilder {
	builder := &ObjectFieldDataBuilder{}
	return builder
}

// 字段名
//
// 示例值：name
func (builder *ObjectFieldDataBuilder) FieldName(fieldName string) *ObjectFieldDataBuilder {
	builder.fieldName = fieldName
	builder.fieldNameFlag = true
	return builder
}

// 字段值，是json转义后的字符串，根据元数据定义不同，字段格式不同(123, 123.23, true, [\"id1\",\"id2\], 2006-01-02 15:04:05])
//
// 示例值：Sandy
func (builder *ObjectFieldDataBuilder) Value(value string) *ObjectFieldDataBuilder {
	builder.value = value
	builder.valueFlag = true
	return builder
}

func (builder *ObjectFieldDataBuilder) Build() *ObjectFieldData {
	req := &ObjectFieldData{}
	if builder.fieldNameFlag {
		req.FieldName = &builder.fieldName

	}
	if builder.valueFlag {
		req.Value = &builder.value

	}
	return req
}

type OfferInfo struct {
	OfferId              *string              `json:"offer_id,omitempty"`                // Offer id
	OfferHrId            *string              `json:"offer_hr_id,omitempty"`             // Offer hr id
	DepartmentId         *string              `json:"department_id,omitempty"`           // 部门 id
	DirectLeaderId       *string              `json:"direct_leader_id,omitempty"`        // 直属领导id
	JobId                *string              `json:"job_id,omitempty"`                  // 职务id
	JobFamilyId          *string              `json:"job_family_id,omitempty"`           // 序列id
	JobLevelId           *string              `json:"job_level_id,omitempty"`            // 级别id
	JobTitle             *string              `json:"job_title,omitempty"`               // 职务头衔id
	ProbationStartDate   *string              `json:"probation_start_date,omitempty"`    // 试用期开始日期
	ProbationEndDate     *string              `json:"probation_end_date,omitempty"`      // 试用期结束日期
	ContractStartDate    *string              `json:"contract_start_date,omitempty"`     // 合同开始日期
	ContractEndDate      *string              `json:"contract_end_date,omitempty"`       // 合同结束日期
	DurationPeriod       *float64             `json:"duration_period,omitempty"`         // 合同期限时长
	DurationUnit         *string              `json:"duration_unit,omitempty"`           // 合同期限单位
	OnboardingDate       *string              `json:"onboarding_date,omitempty"`         // 入职日期
	OnboardingLocationId *string              `json:"onboarding_location_id,omitempty"`  // 入职地点id
	OfficeLocationId     *string              `json:"office_location_id,omitempty"`      // 办公地点id
	RecruitmentTypeId    *string              `json:"recruitment_type_id,omitempty"`     // 招聘来源id
	ProbationPeriod      *string              `json:"probation_period,omitempty"`        // 试用期时长
	EmployeeTypeId       *string              `json:"employee_type_id,omitempty"`        // 人员类型id
	EmploymentTypeId     *string              `json:"employment_type_id,omitempty"`      // 雇佣类型id
	WorkEmail            *string              `json:"work_email,omitempty"`              // 工作邮箱
	DurationTypeId       *string              `json:"duration_type_id,omitempty"`        // 期限类型id
	SigningTypeId        *string              `json:"signing_type_id,omitempty"`         // 签订类型id
	EntryMode            *string              `json:"entry_mode,omitempty"`              // 入职方式
	SocialSecurityCityId *string              `json:"social_security_city_id,omitempty"` // 社保城市id
	ContractType         *string              `json:"contract_type,omitempty"`           // 合同类型
	Company              *string              `json:"company,omitempty"`                 // 公司
	CostCenterRate       []*JobDataCostCenter `json:"cost_center_rate,omitempty"`        // 成本中心分摊信息
	JobGradeId           *string              `json:"job_grade_id,omitempty"`            // 职等ID
	CustomFields         []*ObjectFieldData   `json:"custom_fields,omitempty"`           // 自定义字段
	ServiceCompany       *string              `json:"service_company,omitempty"`         // 任职公司
	WorkShift            *string              `json:"work_shift,omitempty"`              // 排班
	CompensationType     *string              `json:"compensation_type,omitempty"`       // 薪资类型
	WorkLocationId       *string              `json:"work_location_id,omitempty"`        // 工作地点id
	OnboardingAddressId  *string              `json:"onboarding_address_id,omitempty"`   // 入职地址id
	OfficeAddressId      *string              `json:"office_address_id,omitempty"`       // 办公地址id
}

type OfferInfoBuilder struct {
	offerId                  string // Offer id
	offerIdFlag              bool
	offerHrId                string // Offer hr id
	offerHrIdFlag            bool
	departmentId             string // 部门 id
	departmentIdFlag         bool
	directLeaderId           string // 直属领导id
	directLeaderIdFlag       bool
	jobId                    string // 职务id
	jobIdFlag                bool
	jobFamilyId              string // 序列id
	jobFamilyIdFlag          bool
	jobLevelId               string // 级别id
	jobLevelIdFlag           bool
	jobTitle                 string // 职务头衔id
	jobTitleFlag             bool
	probationStartDate       string // 试用期开始日期
	probationStartDateFlag   bool
	probationEndDate         string // 试用期结束日期
	probationEndDateFlag     bool
	contractStartDate        string // 合同开始日期
	contractStartDateFlag    bool
	contractEndDate          string // 合同结束日期
	contractEndDateFlag      bool
	durationPeriod           float64 // 合同期限时长
	durationPeriodFlag       bool
	durationUnit             string // 合同期限单位
	durationUnitFlag         bool
	onboardingDate           string // 入职日期
	onboardingDateFlag       bool
	onboardingLocationId     string // 入职地点id
	onboardingLocationIdFlag bool
	officeLocationId         string // 办公地点id
	officeLocationIdFlag     bool
	recruitmentTypeId        string // 招聘来源id
	recruitmentTypeIdFlag    bool
	probationPeriod          string // 试用期时长
	probationPeriodFlag      bool
	employeeTypeId           string // 人员类型id
	employeeTypeIdFlag       bool
	employmentTypeId         string // 雇佣类型id
	employmentTypeIdFlag     bool
	workEmail                string // 工作邮箱
	workEmailFlag            bool
	durationTypeId           string // 期限类型id
	durationTypeIdFlag       bool
	signingTypeId            string // 签订类型id
	signingTypeIdFlag        bool
	entryMode                string // 入职方式
	entryModeFlag            bool
	socialSecurityCityId     string // 社保城市id
	socialSecurityCityIdFlag bool
	contractType             string // 合同类型
	contractTypeFlag         bool
	company                  string // 公司
	companyFlag              bool
	costCenterRate           []*JobDataCostCenter // 成本中心分摊信息
	costCenterRateFlag       bool
	jobGradeId               string // 职等ID
	jobGradeIdFlag           bool
	customFields             []*ObjectFieldData // 自定义字段
	customFieldsFlag         bool
	serviceCompany           string // 任职公司
	serviceCompanyFlag       bool
	workShift                string // 排班
	workShiftFlag            bool
	compensationType         string // 薪资类型
	compensationTypeFlag     bool
	workLocationId           string // 工作地点id
	workLocationIdFlag       bool
	onboardingAddressId      string // 入职地址id
	onboardingAddressIdFlag  bool
	officeAddressId          string // 办公地址id
	officeAddressIdFlag      bool
}

func NewOfferInfoBuilder() *OfferInfoBuilder {
	builder := &OfferInfoBuilder{}
	return builder
}

// Offer id
//
// 示例值：7032210902531327521
func (builder *OfferInfoBuilder) OfferId(offerId string) *OfferInfoBuilder {
	builder.offerId = offerId
	builder.offerIdFlag = true
	return builder
}

// Offer hr id
//
// 示例值：7032210902531327521
func (builder *OfferInfoBuilder) OfferHrId(offerHrId string) *OfferInfoBuilder {
	builder.offerHrId = offerHrId
	builder.offerHrIdFlag = true
	return builder
}

// 部门 id
//
// 示例值：7147562782945478177
func (builder *OfferInfoBuilder) DepartmentId(departmentId string) *OfferInfoBuilder {
	builder.departmentId = departmentId
	builder.departmentIdFlag = true
	return builder
}

// 直属领导id
//
// 示例值：7032210902531327521
func (builder *OfferInfoBuilder) DirectLeaderId(directLeaderId string) *OfferInfoBuilder {
	builder.directLeaderId = directLeaderId
	builder.directLeaderIdFlag = true
	return builder
}

// 职务id
//
// 示例值：6977976735715378724
func (builder *OfferInfoBuilder) JobId(jobId string) *OfferInfoBuilder {
	builder.jobId = jobId
	builder.jobIdFlag = true
	return builder
}

// 序列id
//
// 示例值：6977972856625939999
func (builder *OfferInfoBuilder) JobFamilyId(jobFamilyId string) *OfferInfoBuilder {
	builder.jobFamilyId = jobFamilyId
	builder.jobFamilyIdFlag = true
	return builder
}

// 级别id
//
// 示例值：6977971894960145950
func (builder *OfferInfoBuilder) JobLevelId(jobLevelId string) *OfferInfoBuilder {
	builder.jobLevelId = jobLevelId
	builder.jobLevelIdFlag = true
	return builder
}

// 职务头衔id
//
// 示例值：java
func (builder *OfferInfoBuilder) JobTitle(jobTitle string) *OfferInfoBuilder {
	builder.jobTitle = jobTitle
	builder.jobTitleFlag = true
	return builder
}

// 试用期开始日期
//
// 示例值：2022-07-29
func (builder *OfferInfoBuilder) ProbationStartDate(probationStartDate string) *OfferInfoBuilder {
	builder.probationStartDate = probationStartDate
	builder.probationStartDateFlag = true
	return builder
}

// 试用期结束日期
//
// 示例值：2023-04-07
func (builder *OfferInfoBuilder) ProbationEndDate(probationEndDate string) *OfferInfoBuilder {
	builder.probationEndDate = probationEndDate
	builder.probationEndDateFlag = true
	return builder
}

// 合同开始日期
//
// 示例值：2022-10-08
func (builder *OfferInfoBuilder) ContractStartDate(contractStartDate string) *OfferInfoBuilder {
	builder.contractStartDate = contractStartDate
	builder.contractStartDateFlag = true
	return builder
}

// 合同结束日期
//
// 示例值：2025-10-07
func (builder *OfferInfoBuilder) ContractEndDate(contractEndDate string) *OfferInfoBuilder {
	builder.contractEndDate = contractEndDate
	builder.contractEndDateFlag = true
	return builder
}

// 合同期限时长
//
// 示例值：3
func (builder *OfferInfoBuilder) DurationPeriod(durationPeriod float64) *OfferInfoBuilder {
	builder.durationPeriod = durationPeriod
	builder.durationPeriodFlag = true
	return builder
}

// 合同期限单位
//
// 示例值：年
func (builder *OfferInfoBuilder) DurationUnit(durationUnit string) *OfferInfoBuilder {
	builder.durationUnit = durationUnit
	builder.durationUnitFlag = true
	return builder
}

// 入职日期
//
// 示例值：2022-10-08
func (builder *OfferInfoBuilder) OnboardingDate(onboardingDate string) *OfferInfoBuilder {
	builder.onboardingDate = onboardingDate
	builder.onboardingDateFlag = true
	return builder
}

// 入职地点id
//
// 示例值：6977976687350924832
func (builder *OfferInfoBuilder) OnboardingLocationId(onboardingLocationId string) *OfferInfoBuilder {
	builder.onboardingLocationId = onboardingLocationId
	builder.onboardingLocationIdFlag = true
	return builder
}

// 办公地点id
//
// 示例值：6977976687350924832
func (builder *OfferInfoBuilder) OfficeLocationId(officeLocationId string) *OfferInfoBuilder {
	builder.officeLocationId = officeLocationId
	builder.officeLocationIdFlag = true
	return builder
}

// 招聘来源id
//
// 示例值：experienced_professionals
func (builder *OfferInfoBuilder) RecruitmentTypeId(recruitmentTypeId string) *OfferInfoBuilder {
	builder.recruitmentTypeId = recruitmentTypeId
	builder.recruitmentTypeIdFlag = true
	return builder
}

// 试用期时长
//
// 示例值：6
func (builder *OfferInfoBuilder) ProbationPeriod(probationPeriod string) *OfferInfoBuilder {
	builder.probationPeriod = probationPeriod
	builder.probationPeriodFlag = true
	return builder
}

// 人员类型id
//
// 示例值：6977973225846343171
func (builder *OfferInfoBuilder) EmployeeTypeId(employeeTypeId string) *OfferInfoBuilder {
	builder.employeeTypeId = employeeTypeId
	builder.employeeTypeIdFlag = true
	return builder
}

// 雇佣类型id
//
// 示例值：6977973225846343171
func (builder *OfferInfoBuilder) EmploymentTypeId(employmentTypeId string) *OfferInfoBuilder {
	builder.employmentTypeId = employmentTypeId
	builder.employmentTypeIdFlag = true
	return builder
}

// 工作邮箱
//
// 示例值：joshua@bytedance.com
func (builder *OfferInfoBuilder) WorkEmail(workEmail string) *OfferInfoBuilder {
	builder.workEmail = workEmail
	builder.workEmailFlag = true
	return builder
}

// 期限类型id
//
// 示例值：6977973225846343171
func (builder *OfferInfoBuilder) DurationTypeId(durationTypeId string) *OfferInfoBuilder {
	builder.durationTypeId = durationTypeId
	builder.durationTypeIdFlag = true
	return builder
}

// 签订类型id
//
// 示例值：6738317738688661772
func (builder *OfferInfoBuilder) SigningTypeId(signingTypeId string) *OfferInfoBuilder {
	builder.signingTypeId = signingTypeId
	builder.signingTypeIdFlag = true
	return builder
}

// 入职方式
//
// 示例值：1
func (builder *OfferInfoBuilder) EntryMode(entryMode string) *OfferInfoBuilder {
	builder.entryMode = entryMode
	builder.entryModeFlag = true
	return builder
}

// 社保城市id
//
// 示例值：xxx
func (builder *OfferInfoBuilder) SocialSecurityCityId(socialSecurityCityId string) *OfferInfoBuilder {
	builder.socialSecurityCityId = socialSecurityCityId
	builder.socialSecurityCityIdFlag = true
	return builder
}

// 合同类型
//
// 示例值：6738317738688661772
func (builder *OfferInfoBuilder) ContractType(contractType string) *OfferInfoBuilder {
	builder.contractType = contractType
	builder.contractTypeFlag = true
	return builder
}

// 公司
//
// 示例值：6738317738688661772
func (builder *OfferInfoBuilder) Company(company string) *OfferInfoBuilder {
	builder.company = company
	builder.companyFlag = true
	return builder
}

// 成本中心分摊信息
//
// 示例值：
func (builder *OfferInfoBuilder) CostCenterRate(costCenterRate []*JobDataCostCenter) *OfferInfoBuilder {
	builder.costCenterRate = costCenterRate
	builder.costCenterRateFlag = true
	return builder
}

// 职等ID
//
// 示例值：6738317738688661772
func (builder *OfferInfoBuilder) JobGradeId(jobGradeId string) *OfferInfoBuilder {
	builder.jobGradeId = jobGradeId
	builder.jobGradeIdFlag = true
	return builder
}

// 自定义字段
//
// 示例值：
func (builder *OfferInfoBuilder) CustomFields(customFields []*ObjectFieldData) *OfferInfoBuilder {
	builder.customFields = customFields
	builder.customFieldsFlag = true
	return builder
}

// 任职公司
//
// 示例值：6738317738688661772
func (builder *OfferInfoBuilder) ServiceCompany(serviceCompany string) *OfferInfoBuilder {
	builder.serviceCompany = serviceCompany
	builder.serviceCompanyFlag = true
	return builder
}

// 排班
//
// 示例值：work_shift
func (builder *OfferInfoBuilder) WorkShift(workShift string) *OfferInfoBuilder {
	builder.workShift = workShift
	builder.workShiftFlag = true
	return builder
}

// 薪资类型
//
// 示例值：hourly
func (builder *OfferInfoBuilder) CompensationType(compensationType string) *OfferInfoBuilder {
	builder.compensationType = compensationType
	builder.compensationTypeFlag = true
	return builder
}

// 工作地点id
//
// 示例值：6977976687350924833
func (builder *OfferInfoBuilder) WorkLocationId(workLocationId string) *OfferInfoBuilder {
	builder.workLocationId = workLocationId
	builder.workLocationIdFlag = true
	return builder
}

// 入职地址id
//
// 示例值：6977976687350924833
func (builder *OfferInfoBuilder) OnboardingAddressId(onboardingAddressId string) *OfferInfoBuilder {
	builder.onboardingAddressId = onboardingAddressId
	builder.onboardingAddressIdFlag = true
	return builder
}

// 办公地址id
//
// 示例值：6977976687350924833
func (builder *OfferInfoBuilder) OfficeAddressId(officeAddressId string) *OfferInfoBuilder {
	builder.officeAddressId = officeAddressId
	builder.officeAddressIdFlag = true
	return builder
}

func (builder *OfferInfoBuilder) Build() *OfferInfo {
	req := &OfferInfo{}
	if builder.offerIdFlag {
		req.OfferId = &builder.offerId

	}
	if builder.offerHrIdFlag {
		req.OfferHrId = &builder.offerHrId

	}
	if builder.departmentIdFlag {
		req.DepartmentId = &builder.departmentId

	}
	if builder.directLeaderIdFlag {
		req.DirectLeaderId = &builder.directLeaderId

	}
	if builder.jobIdFlag {
		req.JobId = &builder.jobId

	}
	if builder.jobFamilyIdFlag {
		req.JobFamilyId = &builder.jobFamilyId

	}
	if builder.jobLevelIdFlag {
		req.JobLevelId = &builder.jobLevelId

	}
	if builder.jobTitleFlag {
		req.JobTitle = &builder.jobTitle

	}
	if builder.probationStartDateFlag {
		req.ProbationStartDate = &builder.probationStartDate

	}
	if builder.probationEndDateFlag {
		req.ProbationEndDate = &builder.probationEndDate

	}
	if builder.contractStartDateFlag {
		req.ContractStartDate = &builder.contractStartDate

	}
	if builder.contractEndDateFlag {
		req.ContractEndDate = &builder.contractEndDate

	}
	if builder.durationPeriodFlag {
		req.DurationPeriod = &builder.durationPeriod

	}
	if builder.durationUnitFlag {
		req.DurationUnit = &builder.durationUnit

	}
	if builder.onboardingDateFlag {
		req.OnboardingDate = &builder.onboardingDate

	}
	if builder.onboardingLocationIdFlag {
		req.OnboardingLocationId = &builder.onboardingLocationId

	}
	if builder.officeLocationIdFlag {
		req.OfficeLocationId = &builder.officeLocationId

	}
	if builder.recruitmentTypeIdFlag {
		req.RecruitmentTypeId = &builder.recruitmentTypeId

	}
	if builder.probationPeriodFlag {
		req.ProbationPeriod = &builder.probationPeriod

	}
	if builder.employeeTypeIdFlag {
		req.EmployeeTypeId = &builder.employeeTypeId

	}
	if builder.employmentTypeIdFlag {
		req.EmploymentTypeId = &builder.employmentTypeId

	}
	if builder.workEmailFlag {
		req.WorkEmail = &builder.workEmail

	}
	if builder.durationTypeIdFlag {
		req.DurationTypeId = &builder.durationTypeId

	}
	if builder.signingTypeIdFlag {
		req.SigningTypeId = &builder.signingTypeId

	}
	if builder.entryModeFlag {
		req.EntryMode = &builder.entryMode

	}
	if builder.socialSecurityCityIdFlag {
		req.SocialSecurityCityId = &builder.socialSecurityCityId

	}
	if builder.contractTypeFlag {
		req.ContractType = &builder.contractType

	}
	if builder.companyFlag {
		req.Company = &builder.company

	}
	if builder.costCenterRateFlag {
		req.CostCenterRate = builder.costCenterRate
	}
	if builder.jobGradeIdFlag {
		req.JobGradeId = &builder.jobGradeId

	}
	if builder.customFieldsFlag {
		req.CustomFields = builder.customFields
	}
	if builder.serviceCompanyFlag {
		req.ServiceCompany = &builder.serviceCompany

	}
	if builder.workShiftFlag {
		req.WorkShift = &builder.workShift

	}
	if builder.compensationTypeFlag {
		req.CompensationType = &builder.compensationType

	}
	if builder.workLocationIdFlag {
		req.WorkLocationId = &builder.workLocationId

	}
	if builder.onboardingAddressIdFlag {
		req.OnboardingAddressId = &builder.onboardingAddressId

	}
	if builder.officeAddressIdFlag {
		req.OfficeAddressId = &builder.officeAddressId

	}
	return req
}

type OfferInfoUpdate struct {
	OnboardingDate       *string              `json:"onboarding_date,omitempty"`        // 入职日期
	AtsApplicationId     *string              `json:"ats_application_id,omitempty"`     // 招聘应用ID
	OnboardingLocationId *string              `json:"onboarding_location_id,omitempty"` // 入职地点ID，详细信息可通过【批量查询地点】接口获得
	OnboardingAddressId  *string              `json:"onboarding_address_id,omitempty"`  // 入职地址ID，详细信息可通过【批量查询地址】接口获得
	OfficeLocationId     *string              `json:"office_location_id,omitempty"`     // 办公地点ID，详细信息可通过【批量查询地点】接口获得
	OfficeAddressId      *string              `json:"office_address_id,omitempty"`      // 办公地址ID，详细信息可通过【批量查询地址】接口获得
	EmploymentType       *string              `json:"employment_type,omitempty"`        // 雇佣类型，通过查询枚举集【employment_type】获得枚举apiName
	OnboardingMethod     *string              `json:"onboarding_method,omitempty"`      // 入职方式，通过查询枚举集【onboarding_method】获得枚举apiName
	WorkEmails           []*EmailForUpdate    `json:"work_emails,omitempty"`            // 工作邮箱
	CostCenterRates      []*JobDataCostCenter `json:"cost_center_rates,omitempty"`      // 成本中心分摊信息,只支持商业化租户
	CustomFields         []*ObjectFieldData   `json:"custom_fields,omitempty"`          // 自定义字段
}

type OfferInfoUpdateBuilder struct {
	onboardingDate           string // 入职日期
	onboardingDateFlag       bool
	atsApplicationId         string // 招聘应用ID
	atsApplicationIdFlag     bool
	onboardingLocationId     string // 入职地点ID，详细信息可通过【批量查询地点】接口获得
	onboardingLocationIdFlag bool
	onboardingAddressId      string // 入职地址ID，详细信息可通过【批量查询地址】接口获得
	onboardingAddressIdFlag  bool
	officeLocationId         string // 办公地点ID，详细信息可通过【批量查询地点】接口获得
	officeLocationIdFlag     bool
	officeAddressId          string // 办公地址ID，详细信息可通过【批量查询地址】接口获得
	officeAddressIdFlag      bool
	employmentType           string // 雇佣类型，通过查询枚举集【employment_type】获得枚举apiName
	employmentTypeFlag       bool
	onboardingMethod         string // 入职方式，通过查询枚举集【onboarding_method】获得枚举apiName
	onboardingMethodFlag     bool
	workEmails               []*EmailForUpdate // 工作邮箱
	workEmailsFlag           bool
	costCenterRates          []*JobDataCostCenter // 成本中心分摊信息,只支持商业化租户
	costCenterRatesFlag      bool
	customFields             []*ObjectFieldData // 自定义字段
	customFieldsFlag         bool
}

func NewOfferInfoUpdateBuilder() *OfferInfoUpdateBuilder {
	builder := &OfferInfoUpdateBuilder{}
	return builder
}

// 入职日期
//
// 示例值：2022-10-08
func (builder *OfferInfoUpdateBuilder) OnboardingDate(onboardingDate string) *OfferInfoUpdateBuilder {
	builder.onboardingDate = onboardingDate
	builder.onboardingDateFlag = true
	return builder
}

// 招聘应用ID
//
// 示例值：7140946969586010375
func (builder *OfferInfoUpdateBuilder) AtsApplicationId(atsApplicationId string) *OfferInfoUpdateBuilder {
	builder.atsApplicationId = atsApplicationId
	builder.atsApplicationIdFlag = true
	return builder
}

// 入职地点ID，详细信息可通过【批量查询地点】接口获得
//
// 示例值：6977976687350924832
func (builder *OfferInfoUpdateBuilder) OnboardingLocationId(onboardingLocationId string) *OfferInfoUpdateBuilder {
	builder.onboardingLocationId = onboardingLocationId
	builder.onboardingLocationIdFlag = true
	return builder
}

// 入职地址ID，详细信息可通过【批量查询地址】接口获得
//
// 示例值：6977976687350924832
func (builder *OfferInfoUpdateBuilder) OnboardingAddressId(onboardingAddressId string) *OfferInfoUpdateBuilder {
	builder.onboardingAddressId = onboardingAddressId
	builder.onboardingAddressIdFlag = true
	return builder
}

// 办公地点ID，详细信息可通过【批量查询地点】接口获得
//
// 示例值：6977976687350924833
func (builder *OfferInfoUpdateBuilder) OfficeLocationId(officeLocationId string) *OfferInfoUpdateBuilder {
	builder.officeLocationId = officeLocationId
	builder.officeLocationIdFlag = true
	return builder
}

// 办公地址ID，详细信息可通过【批量查询地址】接口获得
//
// 示例值：6977976687350924832
func (builder *OfferInfoUpdateBuilder) OfficeAddressId(officeAddressId string) *OfferInfoUpdateBuilder {
	builder.officeAddressId = officeAddressId
	builder.officeAddressIdFlag = true
	return builder
}

// 雇佣类型，通过查询枚举集【employment_type】获得枚举apiName
//
// 示例值：employee(员工);contingent_worker(临时工)
func (builder *OfferInfoUpdateBuilder) EmploymentType(employmentType string) *OfferInfoUpdateBuilder {
	builder.employmentType = employmentType
	builder.employmentTypeFlag = true
	return builder
}

// 入职方式，通过查询枚举集【onboarding_method】获得枚举apiName
//
// 示例值：onsite(现场入职);remote(远程入职)
func (builder *OfferInfoUpdateBuilder) OnboardingMethod(onboardingMethod string) *OfferInfoUpdateBuilder {
	builder.onboardingMethod = onboardingMethod
	builder.onboardingMethodFlag = true
	return builder
}

// 工作邮箱
//
// 示例值：
func (builder *OfferInfoUpdateBuilder) WorkEmails(workEmails []*EmailForUpdate) *OfferInfoUpdateBuilder {
	builder.workEmails = workEmails
	builder.workEmailsFlag = true
	return builder
}

// 成本中心分摊信息,只支持商业化租户
//
// 示例值：
func (builder *OfferInfoUpdateBuilder) CostCenterRates(costCenterRates []*JobDataCostCenter) *OfferInfoUpdateBuilder {
	builder.costCenterRates = costCenterRates
	builder.costCenterRatesFlag = true
	return builder
}

// 自定义字段
//
// 示例值：
func (builder *OfferInfoUpdateBuilder) CustomFields(customFields []*ObjectFieldData) *OfferInfoUpdateBuilder {
	builder.customFields = customFields
	builder.customFieldsFlag = true
	return builder
}

func (builder *OfferInfoUpdateBuilder) Build() *OfferInfoUpdate {
	req := &OfferInfoUpdate{}
	if builder.onboardingDateFlag {
		req.OnboardingDate = &builder.onboardingDate

	}
	if builder.atsApplicationIdFlag {
		req.AtsApplicationId = &builder.atsApplicationId

	}
	if builder.onboardingLocationIdFlag {
		req.OnboardingLocationId = &builder.onboardingLocationId

	}
	if builder.onboardingAddressIdFlag {
		req.OnboardingAddressId = &builder.onboardingAddressId

	}
	if builder.officeLocationIdFlag {
		req.OfficeLocationId = &builder.officeLocationId

	}
	if builder.officeAddressIdFlag {
		req.OfficeAddressId = &builder.officeAddressId

	}
	if builder.employmentTypeFlag {
		req.EmploymentType = &builder.employmentType

	}
	if builder.onboardingMethodFlag {
		req.OnboardingMethod = &builder.onboardingMethod

	}
	if builder.workEmailsFlag {
		req.WorkEmails = builder.workEmails
	}
	if builder.costCenterRatesFlag {
		req.CostCenterRates = builder.costCenterRates
	}
	if builder.customFieldsFlag {
		req.CustomFields = builder.customFields
	}
	return req
}

type OnboardingFlow struct {
	Id   *string `json:"id,omitempty"`   // 流程id
	Name *I18nV2 `json:"name,omitempty"` // 流程名称
}

type OnboardingFlowBuilder struct {
	id       string // 流程id
	idFlag   bool
	name     *I18nV2 // 流程名称
	nameFlag bool
}

func NewOnboardingFlowBuilder() *OnboardingFlowBuilder {
	builder := &OnboardingFlowBuilder{}
	return builder
}

// 流程id
//
// 示例值：628caefb0eb4ac9c806982ee
func (builder *OnboardingFlowBuilder) Id(id string) *OnboardingFlowBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

// 流程名称
//
// 示例值：
func (builder *OnboardingFlowBuilder) Name(name *I18nV2) *OnboardingFlowBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}

func (builder *OnboardingFlowBuilder) Build() *OnboardingFlow {
	req := &OnboardingFlow{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.nameFlag {
		req.Name = builder.name
	}
	return req
}

type OnboardingQrCode struct {
	Id              *string                 `json:"id,omitempty"`               // 唯一键
	Pngs            []string                `json:"pngs,omitempty"`             // 二维码图片链接,文件名区分语言
	Url             *string                 `json:"url,omitempty"`              // 二维码值链接
	Active          *bool                   `json:"active,omitempty"`           // 有效性
	CreatedBy       *string                 `json:"created_by,omitempty"`       // 创建人
	UpdatedBy       *string                 `json:"updated_by,omitempty"`       // 更新人
	CreatedAt       *int                    `json:"created_at,omitempty"`       // 创建时间
	UpdatedAt       *int                    `json:"updated_at,omitempty"`       // 更新时间
	DimensionValues []*QrCodeDimensionValue `json:"dimension_values,omitempty"` // 维度值列表
}

type OnboardingQrCodeBuilder struct {
	id                  string // 唯一键
	idFlag              bool
	pngs                []string // 二维码图片链接,文件名区分语言
	pngsFlag            bool
	url                 string // 二维码值链接
	urlFlag             bool
	active              bool // 有效性
	activeFlag          bool
	createdBy           string // 创建人
	createdByFlag       bool
	updatedBy           string // 更新人
	updatedByFlag       bool
	createdAt           int // 创建时间
	createdAtFlag       bool
	updatedAt           int // 更新时间
	updatedAtFlag       bool
	dimensionValues     []*QrCodeDimensionValue // 维度值列表
	dimensionValuesFlag bool
}

func NewOnboardingQrCodeBuilder() *OnboardingQrCodeBuilder {
	builder := &OnboardingQrCodeBuilder{}
	return builder
}

// 唯一键
//
// 示例值：345241
func (builder *OnboardingQrCodeBuilder) Id(id string) *OnboardingQrCodeBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

// 二维码图片链接,文件名区分语言
//
// 示例值：
func (builder *OnboardingQrCodeBuilder) Pngs(pngs []string) *OnboardingQrCodeBuilder {
	builder.pngs = pngs
	builder.pngsFlag = true
	return builder
}

// 二维码值链接
//
// 示例值：xxxxx
func (builder *OnboardingQrCodeBuilder) Url(url string) *OnboardingQrCodeBuilder {
	builder.url = url
	builder.urlFlag = true
	return builder
}

// 有效性
//
// 示例值：xxx
func (builder *OnboardingQrCodeBuilder) Active(active bool) *OnboardingQrCodeBuilder {
	builder.active = active
	builder.activeFlag = true
	return builder
}

// 创建人
//
// 示例值：xxxxx
func (builder *OnboardingQrCodeBuilder) CreatedBy(createdBy string) *OnboardingQrCodeBuilder {
	builder.createdBy = createdBy
	builder.createdByFlag = true
	return builder
}

// 更新人
//
// 示例值：xxxxx
func (builder *OnboardingQrCodeBuilder) UpdatedBy(updatedBy string) *OnboardingQrCodeBuilder {
	builder.updatedBy = updatedBy
	builder.updatedByFlag = true
	return builder
}

// 创建时间
//
// 示例值：xxxxxx
func (builder *OnboardingQrCodeBuilder) CreatedAt(createdAt int) *OnboardingQrCodeBuilder {
	builder.createdAt = createdAt
	builder.createdAtFlag = true
	return builder
}

// 更新时间
//
// 示例值：xxxxx
func (builder *OnboardingQrCodeBuilder) UpdatedAt(updatedAt int) *OnboardingQrCodeBuilder {
	builder.updatedAt = updatedAt
	builder.updatedAtFlag = true
	return builder
}

// 维度值列表
//
// 示例值：
func (builder *OnboardingQrCodeBuilder) DimensionValues(dimensionValues []*QrCodeDimensionValue) *OnboardingQrCodeBuilder {
	builder.dimensionValues = dimensionValues
	builder.dimensionValuesFlag = true
	return builder
}

func (builder *OnboardingQrCodeBuilder) Build() *OnboardingQrCode {
	req := &OnboardingQrCode{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.pngsFlag {
		req.Pngs = builder.pngs
	}
	if builder.urlFlag {
		req.Url = &builder.url

	}
	if builder.activeFlag {
		req.Active = &builder.active

	}
	if builder.createdByFlag {
		req.CreatedBy = &builder.createdBy

	}
	if builder.updatedByFlag {
		req.UpdatedBy = &builder.updatedBy

	}
	if builder.createdAtFlag {
		req.CreatedAt = &builder.createdAt

	}
	if builder.updatedAtFlag {
		req.UpdatedAt = &builder.updatedAt

	}
	if builder.dimensionValuesFlag {
		req.DimensionValues = builder.dimensionValues
	}
	return req
}

type OnboardingTask struct {
	TaskName   *string `json:"task_name,omitempty"`   // 任务名称
	TaskStatus *string `json:"task_status,omitempty"` // 任务名称
	OperatorId *string `json:"operator_id,omitempty"` // 当前操作人雇佣 ID
	TaskCode   *string `json:"task_code,omitempty"`   // 任务code
}

type OnboardingTaskBuilder struct {
	taskName       string // 任务名称
	taskNameFlag   bool
	taskStatus     string // 任务名称
	taskStatusFlag bool
	operatorId     string // 当前操作人雇佣 ID
	operatorIdFlag bool
	taskCode       string // 任务code
	taskCodeFlag   bool
}

func NewOnboardingTaskBuilder() *OnboardingTaskBuilder {
	builder := &OnboardingTaskBuilder{}
	return builder
}

// 任务名称
//
// 示例值：task_1
func (builder *OnboardingTaskBuilder) TaskName(taskName string) *OnboardingTaskBuilder {
	builder.taskName = taskName
	builder.taskNameFlag = true
	return builder
}

// 任务名称
//
// 示例值：
func (builder *OnboardingTaskBuilder) TaskStatus(taskStatus string) *OnboardingTaskBuilder {
	builder.taskStatus = taskStatus
	builder.taskStatusFlag = true
	return builder
}

// 当前操作人雇佣 ID
//
// 示例值：7032210902531327521
func (builder *OnboardingTaskBuilder) OperatorId(operatorId string) *OnboardingTaskBuilder {
	builder.operatorId = operatorId
	builder.operatorIdFlag = true
	return builder
}

// 任务code
//
// 示例值：task_11
func (builder *OnboardingTaskBuilder) TaskCode(taskCode string) *OnboardingTaskBuilder {
	builder.taskCode = taskCode
	builder.taskCodeFlag = true
	return builder
}

func (builder *OnboardingTaskBuilder) Build() *OnboardingTask {
	req := &OnboardingTask{}
	if builder.taskNameFlag {
		req.TaskName = &builder.taskName

	}
	if builder.taskStatusFlag {
		req.TaskStatus = &builder.taskStatus

	}
	if builder.operatorIdFlag {
		req.OperatorId = &builder.operatorId

	}
	if builder.taskCodeFlag {
		req.TaskCode = &builder.taskCode

	}
	return req
}

type OrgRole struct {
	ApiName              *string  `json:"api_name,omitempty"`               // 唯一标识
	EmploymentIds        []string `json:"employment_ids,omitempty"`         // 授权员工列表
	InheritEmploymentIds []string `json:"inherit_employment_ids,omitempty"` // 继承至上级授权员工列表
}

type OrgRoleBuilder struct {
	apiName                  string // 唯一标识
	apiNameFlag              bool
	employmentIds            []string // 授权员工列表
	employmentIdsFlag        bool
	inheritEmploymentIds     []string // 继承至上级授权员工列表
	inheritEmploymentIdsFlag bool
}

func NewOrgRoleBuilder() *OrgRoleBuilder {
	builder := &OrgRoleBuilder{}
	return builder
}

// 唯一标识
//
// 示例值：hrbp
func (builder *OrgRoleBuilder) ApiName(apiName string) *OrgRoleBuilder {
	builder.apiName = apiName
	builder.apiNameFlag = true
	return builder
}

// 授权员工列表
//
// 示例值：
func (builder *OrgRoleBuilder) EmploymentIds(employmentIds []string) *OrgRoleBuilder {
	builder.employmentIds = employmentIds
	builder.employmentIdsFlag = true
	return builder
}

// 继承至上级授权员工列表
//
// 示例值：
func (builder *OrgRoleBuilder) InheritEmploymentIds(inheritEmploymentIds []string) *OrgRoleBuilder {
	builder.inheritEmploymentIds = inheritEmploymentIds
	builder.inheritEmploymentIdsFlag = true
	return builder
}

func (builder *OrgRoleBuilder) Build() *OrgRole {
	req := &OrgRole{}
	if builder.apiNameFlag {
		req.ApiName = &builder.apiName

	}
	if builder.employmentIdsFlag {
		req.EmploymentIds = builder.employmentIds
	}
	if builder.inheritEmploymentIdsFlag {
		req.InheritEmploymentIds = builder.inheritEmploymentIds
	}
	return req
}

type OrgRoleUpdate struct {
	ApiName       *string  `json:"api_name,omitempty"`       // 唯一标识
	EmploymentIds []string `json:"employment_ids,omitempty"` // 授权员工列表
}

type OrgRoleUpdateBuilder struct {
	apiName           string // 唯一标识
	apiNameFlag       bool
	employmentIds     []string // 授权员工列表
	employmentIdsFlag bool
}

func NewOrgRoleUpdateBuilder() *OrgRoleUpdateBuilder {
	builder := &OrgRoleUpdateBuilder{}
	return builder
}

// 唯一标识
//
// 示例值：hrbp
func (builder *OrgRoleUpdateBuilder) ApiName(apiName string) *OrgRoleUpdateBuilder {
	builder.apiName = apiName
	builder.apiNameFlag = true
	return builder
}

// 授权员工列表
//
// 示例值：
func (builder *OrgRoleUpdateBuilder) EmploymentIds(employmentIds []string) *OrgRoleUpdateBuilder {
	builder.employmentIds = employmentIds
	builder.employmentIdsFlag = true
	return builder
}

func (builder *OrgRoleUpdateBuilder) Build() *OrgRoleUpdate {
	req := &OrgRoleUpdate{}
	if builder.apiNameFlag {
		req.ApiName = &builder.apiName

	}
	if builder.employmentIdsFlag {
		req.EmploymentIds = builder.employmentIds
	}
	return req
}

type OrgdraftDepartmentId struct {
	DepartmentId      *string `json:"department_id,omitempty"`       // 部门 ID ，新建部门审批通过前会返回空值
	DraftDepartmentId *string `json:"draft_department_id,omitempty"` // 调整部门 ID ，新建部门审批通过前会返回格式为 td_xxx 的临时 ID
}

type OrgdraftDepartmentIdBuilder struct {
	departmentId          string // 部门 ID ，新建部门审批通过前会返回空值
	departmentIdFlag      bool
	draftDepartmentId     string // 调整部门 ID ，新建部门审批通过前会返回格式为 td_xxx 的临时 ID
	draftDepartmentIdFlag bool
}

func NewOrgdraftDepartmentIdBuilder() *OrgdraftDepartmentIdBuilder {
	builder := &OrgdraftDepartmentIdBuilder{}
	return builder
}

// 部门 ID ，新建部门审批通过前会返回空值
//
// 示例值：6974659700705068581
func (builder *OrgdraftDepartmentIdBuilder) DepartmentId(departmentId string) *OrgdraftDepartmentIdBuilder {
	builder.departmentId = departmentId
	builder.departmentIdFlag = true
	return builder
}

// 调整部门 ID ，新建部门审批通过前会返回格式为 td_xxx 的临时 ID
//
// 示例值：6974659700705068581
func (builder *OrgdraftDepartmentIdBuilder) DraftDepartmentId(draftDepartmentId string) *OrgdraftDepartmentIdBuilder {
	builder.draftDepartmentId = draftDepartmentId
	builder.draftDepartmentIdFlag = true
	return builder
}

func (builder *OrgdraftDepartmentIdBuilder) Build() *OrgdraftDepartmentId {
	req := &OrgdraftDepartmentId{}
	if builder.departmentIdFlag {
		req.DepartmentId = &builder.departmentId

	}
	if builder.draftDepartmentIdFlag {
		req.DraftDepartmentId = &builder.draftDepartmentId

	}
	return req
}

type PersonInfo struct {
	PersonId                 *string       `json:"person_id,omitempty"`                   // 个人信息 ID
	PhoneNumber              *string       `json:"phone_number,omitempty"`                // 个人电话
	LegalName                *string       `json:"legal_name,omitempty"`                  // 法定姓名
	PreferredName            *string       `json:"preferred_name,omitempty"`              // 常用名
	PreferredLocalFullName   *string       `json:"preferred_local_full_name,omitempty"`   // 常用本地全名
	PreferredEnglishFullName *string       `json:"preferred_english_full_name,omitempty"` // 常用英文全名
	NameList                 []*PersonName `json:"name_list,omitempty"`                   // 姓名列表
	Gender                   *Enum         `json:"gender,omitempty"`                      // -| 性别，枚举值可查询【获取字段详情】接口获取，按如下参数查询即可： - custom_api_name：gender - object_api_name：person
	DateOfBirth              *string       `json:"date_of_birth,omitempty"`               // 出生日期

	NationalityIdV2 *string `json:"nationality_id_v2,omitempty"` // 国籍 ID，可通过【查询国籍信息】接口查询

	Race                     *Enum                 `json:"race,omitempty"`                        // -| 民族 / 种族，枚举值可查询【获取字段详情】接口获取，按如下参数查询即可： - custom_api_name：ethnicity_race - object_api_name：person
	MaritalStatus            *Enum                 `json:"marital_status,omitempty"`              // -| 婚姻状况，枚举值可查询【获取字段详情】接口获取，按如下参数查询即可： - custom_api_name：marital_status - object_api_name：person
	PhoneList                []*Phone              `json:"phone_list,omitempty"`                  // 电话列表，只有当满足下面所有条件时，电话在个人信息页才可见
	AddressList              []*Address            `json:"address_list,omitempty"`                // 地址列表
	EmailList                []*Email              `json:"email_list,omitempty"`                  // 邮箱列表
	WorkExperienceList       []*WorkExperienceInfo `json:"work_experience_list,omitempty"`        // 工作经历列表
	EducationList            []*Education          `json:"education_list,omitempty"`              // 教育经历列表
	BankAccountList          []*BankAccount        `json:"bank_account_list,omitempty"`           // 银行账户
	NationalIdList           []*NationalId         `json:"national_id_list,omitempty"`            // 证件
	DependentList            []*Dependent          `json:"dependent_list,omitempty"`              // 家庭成员列表
	EmergencyContactList     []*EmergencyContact   `json:"emergency_contact_list,omitempty"`      // 紧急联系人列表
	DateEnteredWorkforce     *string               `json:"date_entered_workforce,omitempty"`      // 参加工作日期
	WorkingYears             *int                  `json:"working_years,omitempty"`               // 工龄
	ProfileImageId           *string               `json:"profile_image_id,omitempty"`            // 头像资源的 ID
	EmailAddress             *string               `json:"email_address,omitempty"`               // 邮箱地址
	Age                      *int                  `json:"age,omitempty"`                         // 年龄
	HighestLevelOfEducation  *Education            `json:"highest_level_of_education,omitempty"`  // 最高学历教育经历
	HighestDegreeOfEducation *Education            `json:"highest_degree_of_education,omitempty"` // 最高学位教育经历
	PersonalProfile          []*PersonalProfile    `json:"personal_profile,omitempty"`            // 个人资料附件
	NativeRegion             *string               `json:"native_region,omitempty"`               // 籍贯 ID
	HukouType                *Enum                 `json:"hukou_type,omitempty"`                  // 户口类型，枚举值可通过文档【飞书人事枚举常量】户口类型（hukou_type）枚举定义部分获得
	HukouLocation            *string               `json:"hukou_location,omitempty"`              // 户口所在地
	PoliticalAffiliations    []*Enum               `json:"political_affiliations,omitempty"`      // 政治面貌，枚举值可查询【获取字段详情】接口获取，按如下参数查询即可： - custom_api_name：political_affiliation - object_api_name：person_info_chn
	TalentId                 *string               `json:"talent_id,omitempty"`                   // 人才 ID
	CustomFields             []*CustomFieldData    `json:"custom_fields,omitempty"`               // 自定义字段
	NationalIdNumber         *string               `json:"national_id_number,omitempty"`          // 居民身份证件号码
	FamilyAddress            *string               `json:"family_address,omitempty"`              // 家庭地址
	PersonInfoChns           []*PersonInfoChn      `json:"person_info_chns,omitempty"`            // 个人附加信息
	BornCountryRegion        *string               `json:"born_country_region,omitempty"`         // 出生国家/地区
	IsDisabled               *bool                 `json:"is_disabled,omitempty"`                 // 是否残疾
	DisableCardNumber        *string               `json:"disable_card_number,omitempty"`         // 残疾证号
	IsMartyrFamily           *bool                 `json:"is_martyr_family,omitempty"`            // 是否烈属
	MartyrCardNumber         *string               `json:"martyr_card_number,omitempty"`          // 烈属证号
	IsOldAlone               *bool                 `json:"is_old_alone,omitempty"`                // 是否孤老
	ResidentTaxes            []*ResidentTax        `json:"resident_taxes,omitempty"`              // 居民身份信息
	FirstEntryTime           *string               `json:"first_entry_time,omitempty"`            // 首次入境日期
	LeaveTime                *string               `json:"leave_time,omitempty"`                  // 预计离境日期
	Religion                 *Enum                 `json:"religion,omitempty"`                    // -| 宗教信仰，枚举值可查询【获取字段详情】接口获取，按如下参数查询即可： - object_api_name：person - custom_api_name：religion
}

type PersonInfoBuilder struct {
	personId                     string // 个人信息 ID
	personIdFlag                 bool
	phoneNumber                  string // 个人电话
	phoneNumberFlag              bool
	legalName                    string // 法定姓名
	legalNameFlag                bool
	preferredName                string // 常用名
	preferredNameFlag            bool
	preferredLocalFullName       string // 常用本地全名
	preferredLocalFullNameFlag   bool
	preferredEnglishFullName     string // 常用英文全名
	preferredEnglishFullNameFlag bool
	nameList                     []*PersonName // 姓名列表
	nameListFlag                 bool
	gender                       *Enum // -| 性别，枚举值可查询【获取字段详情】接口获取，按如下参数查询即可： - custom_api_name：gender - object_api_name：person
	genderFlag                   bool
	dateOfBirth                  string // 出生日期
	dateOfBirthFlag              bool

	nationalityIdV2     string // 国籍 ID，可通过【查询国籍信息】接口查询
	nationalityIdV2Flag bool

	race                         *Enum // -| 民族 / 种族，枚举值可查询【获取字段详情】接口获取，按如下参数查询即可： - custom_api_name：ethnicity_race - object_api_name：person
	raceFlag                     bool
	maritalStatus                *Enum // -| 婚姻状况，枚举值可查询【获取字段详情】接口获取，按如下参数查询即可： - custom_api_name：marital_status - object_api_name：person
	maritalStatusFlag            bool
	phoneList                    []*Phone // 电话列表，只有当满足下面所有条件时，电话在个人信息页才可见
	phoneListFlag                bool
	addressList                  []*Address // 地址列表
	addressListFlag              bool
	emailList                    []*Email // 邮箱列表
	emailListFlag                bool
	workExperienceList           []*WorkExperienceInfo // 工作经历列表
	workExperienceListFlag       bool
	educationList                []*Education // 教育经历列表
	educationListFlag            bool
	bankAccountList              []*BankAccount // 银行账户
	bankAccountListFlag          bool
	nationalIdList               []*NationalId // 证件
	nationalIdListFlag           bool
	dependentList                []*Dependent // 家庭成员列表
	dependentListFlag            bool
	emergencyContactList         []*EmergencyContact // 紧急联系人列表
	emergencyContactListFlag     bool
	dateEnteredWorkforce         string // 参加工作日期
	dateEnteredWorkforceFlag     bool
	workingYears                 int // 工龄
	workingYearsFlag             bool
	profileImageId               string // 头像资源的 ID
	profileImageIdFlag           bool
	emailAddress                 string // 邮箱地址
	emailAddressFlag             bool
	age                          int // 年龄
	ageFlag                      bool
	highestLevelOfEducation      *Education // 最高学历教育经历
	highestLevelOfEducationFlag  bool
	highestDegreeOfEducation     *Education // 最高学位教育经历
	highestDegreeOfEducationFlag bool
	personalProfile              []*PersonalProfile // 个人资料附件
	personalProfileFlag          bool
	nativeRegion                 string // 籍贯 ID
	nativeRegionFlag             bool
	hukouType                    *Enum // 户口类型，枚举值可通过文档【飞书人事枚举常量】户口类型（hukou_type）枚举定义部分获得
	hukouTypeFlag                bool
	hukouLocation                string // 户口所在地
	hukouLocationFlag            bool
	politicalAffiliations        []*Enum // 政治面貌，枚举值可查询【获取字段详情】接口获取，按如下参数查询即可： - custom_api_name：political_affiliation - object_api_name：person_info_chn
	politicalAffiliationsFlag    bool
	talentId                     string // 人才 ID
	talentIdFlag                 bool
	customFields                 []*CustomFieldData // 自定义字段
	customFieldsFlag             bool
	nationalIdNumber             string // 居民身份证件号码
	nationalIdNumberFlag         bool
	familyAddress                string // 家庭地址
	familyAddressFlag            bool
	personInfoChns               []*PersonInfoChn // 个人附加信息
	personInfoChnsFlag           bool
	bornCountryRegion            string // 出生国家/地区
	bornCountryRegionFlag        bool
	isDisabled                   bool // 是否残疾
	isDisabledFlag               bool
	disableCardNumber            string // 残疾证号
	disableCardNumberFlag        bool
	isMartyrFamily               bool // 是否烈属
	isMartyrFamilyFlag           bool
	martyrCardNumber             string // 烈属证号
	martyrCardNumberFlag         bool
	isOldAlone                   bool // 是否孤老
	isOldAloneFlag               bool
	residentTaxes                []*ResidentTax // 居民身份信息
	residentTaxesFlag            bool
	firstEntryTime               string // 首次入境日期
	firstEntryTimeFlag           bool
	leaveTime                    string // 预计离境日期
	leaveTimeFlag                bool
	religion                     *Enum // -| 宗教信仰，枚举值可查询【获取字段详情】接口获取，按如下参数查询即可： - object_api_name：person - custom_api_name：religion
	religionFlag                 bool
}

func NewPersonInfoBuilder() *PersonInfoBuilder {
	builder := &PersonInfoBuilder{}
	return builder
}

// 个人信息 ID
//
// 示例值：6919733936050406926
func (builder *PersonInfoBuilder) PersonId(personId string) *PersonInfoBuilder {
	builder.personId = personId
	builder.personIdFlag = true
	return builder
}

// 个人电话
//
// 示例值：13649211111
func (builder *PersonInfoBuilder) PhoneNumber(phoneNumber string) *PersonInfoBuilder {
	builder.phoneNumber = phoneNumber
	builder.phoneNumberFlag = true
	return builder
}

// 法定姓名
//
// 示例值：张三
func (builder *PersonInfoBuilder) LegalName(legalName string) *PersonInfoBuilder {
	builder.legalName = legalName
	builder.legalNameFlag = true
	return builder
}

// 常用名
//
// 示例值：刘梓新(Henry)
func (builder *PersonInfoBuilder) PreferredName(preferredName string) *PersonInfoBuilder {
	builder.preferredName = preferredName
	builder.preferredNameFlag = true
	return builder
}

// 常用本地全名
//
// 示例值：刘梓新
func (builder *PersonInfoBuilder) PreferredLocalFullName(preferredLocalFullName string) *PersonInfoBuilder {
	builder.preferredLocalFullName = preferredLocalFullName
	builder.preferredLocalFullNameFlag = true
	return builder
}

// 常用英文全名
//
// 示例值：Henry
func (builder *PersonInfoBuilder) PreferredEnglishFullName(preferredEnglishFullName string) *PersonInfoBuilder {
	builder.preferredEnglishFullName = preferredEnglishFullName
	builder.preferredEnglishFullNameFlag = true
	return builder
}

// 姓名列表
//
// 示例值：
func (builder *PersonInfoBuilder) NameList(nameList []*PersonName) *PersonInfoBuilder {
	builder.nameList = nameList
	builder.nameListFlag = true
	return builder
}

// -| 性别，枚举值可查询【获取字段详情】接口获取，按如下参数查询即可： - custom_api_name：gender - object_api_name：person
//
// 示例值：
func (builder *PersonInfoBuilder) Gender(gender *Enum) *PersonInfoBuilder {
	builder.gender = gender
	builder.genderFlag = true
	return builder
}

// 出生日期
//
// 示例值：2020-01-01
func (builder *PersonInfoBuilder) DateOfBirth(dateOfBirth string) *PersonInfoBuilder {
	builder.dateOfBirth = dateOfBirth
	builder.dateOfBirthFlag = true
	return builder
}

// 国籍 ID，可通过【查询国籍信息】接口查询
//
// 示例值：6862995757234914821
func (builder *PersonInfoBuilder) NationalityIdV2(nationalityIdV2 string) *PersonInfoBuilder {
	builder.nationalityIdV2 = nationalityIdV2
	builder.nationalityIdV2Flag = true
	return builder
}

// -| 民族 / 种族，枚举值可查询【获取字段详情】接口获取，按如下参数查询即可： - custom_api_name：ethnicity_race - object_api_name：person
//
// 示例值：
func (builder *PersonInfoBuilder) Race(race *Enum) *PersonInfoBuilder {
	builder.race = race
	builder.raceFlag = true
	return builder
}

// -| 婚姻状况，枚举值可查询【获取字段详情】接口获取，按如下参数查询即可： - custom_api_name：marital_status - object_api_name：person
//
// 示例值：
func (builder *PersonInfoBuilder) MaritalStatus(maritalStatus *Enum) *PersonInfoBuilder {
	builder.maritalStatus = maritalStatus
	builder.maritalStatusFlag = true
	return builder
}

// 电话列表，只有当满足下面所有条件时，电话在个人信息页才可见
//
// 示例值：
func (builder *PersonInfoBuilder) PhoneList(phoneList []*Phone) *PersonInfoBuilder {
	builder.phoneList = phoneList
	builder.phoneListFlag = true
	return builder
}

// 地址列表
//
// 示例值：
func (builder *PersonInfoBuilder) AddressList(addressList []*Address) *PersonInfoBuilder {
	builder.addressList = addressList
	builder.addressListFlag = true
	return builder
}

// 邮箱列表
//
// 示例值：
func (builder *PersonInfoBuilder) EmailList(emailList []*Email) *PersonInfoBuilder {
	builder.emailList = emailList
	builder.emailListFlag = true
	return builder
}

// 工作经历列表
//
// 示例值：
func (builder *PersonInfoBuilder) WorkExperienceList(workExperienceList []*WorkExperienceInfo) *PersonInfoBuilder {
	builder.workExperienceList = workExperienceList
	builder.workExperienceListFlag = true
	return builder
}

// 教育经历列表
//
// 示例值：
func (builder *PersonInfoBuilder) EducationList(educationList []*Education) *PersonInfoBuilder {
	builder.educationList = educationList
	builder.educationListFlag = true
	return builder
}

// 银行账户
//
// 示例值：
func (builder *PersonInfoBuilder) BankAccountList(bankAccountList []*BankAccount) *PersonInfoBuilder {
	builder.bankAccountList = bankAccountList
	builder.bankAccountListFlag = true
	return builder
}

// 证件
//
// 示例值：
func (builder *PersonInfoBuilder) NationalIdList(nationalIdList []*NationalId) *PersonInfoBuilder {
	builder.nationalIdList = nationalIdList
	builder.nationalIdListFlag = true
	return builder
}

// 家庭成员列表
//
// 示例值：
func (builder *PersonInfoBuilder) DependentList(dependentList []*Dependent) *PersonInfoBuilder {
	builder.dependentList = dependentList
	builder.dependentListFlag = true
	return builder
}

// 紧急联系人列表
//
// 示例值：
func (builder *PersonInfoBuilder) EmergencyContactList(emergencyContactList []*EmergencyContact) *PersonInfoBuilder {
	builder.emergencyContactList = emergencyContactList
	builder.emergencyContactListFlag = true
	return builder
}

// 参加工作日期
//
// 示例值：2020-10-01
func (builder *PersonInfoBuilder) DateEnteredWorkforce(dateEnteredWorkforce string) *PersonInfoBuilder {
	builder.dateEnteredWorkforce = dateEnteredWorkforce
	builder.dateEnteredWorkforceFlag = true
	return builder
}

// 工龄
//
// 示例值：2
func (builder *PersonInfoBuilder) WorkingYears(workingYears int) *PersonInfoBuilder {
	builder.workingYears = workingYears
	builder.workingYearsFlag = true
	return builder
}

// 头像资源的 ID
//
// 示例值：dfysuc8x76dsfsw
func (builder *PersonInfoBuilder) ProfileImageId(profileImageId string) *PersonInfoBuilder {
	builder.profileImageId = profileImageId
	builder.profileImageIdFlag = true
	return builder
}

// 邮箱地址
//
// 示例值：test@163.com
func (builder *PersonInfoBuilder) EmailAddress(emailAddress string) *PersonInfoBuilder {
	builder.emailAddress = emailAddress
	builder.emailAddressFlag = true
	return builder
}

// 年龄
//
// 示例值：22
func (builder *PersonInfoBuilder) Age(age int) *PersonInfoBuilder {
	builder.age = age
	builder.ageFlag = true
	return builder
}

// 最高学历教育经历
//
// 示例值：
func (builder *PersonInfoBuilder) HighestLevelOfEducation(highestLevelOfEducation *Education) *PersonInfoBuilder {
	builder.highestLevelOfEducation = highestLevelOfEducation
	builder.highestLevelOfEducationFlag = true
	return builder
}

// 最高学位教育经历
//
// 示例值：
func (builder *PersonInfoBuilder) HighestDegreeOfEducation(highestDegreeOfEducation *Education) *PersonInfoBuilder {
	builder.highestDegreeOfEducation = highestDegreeOfEducation
	builder.highestDegreeOfEducationFlag = true
	return builder
}

// 个人资料附件
//
// 示例值：
func (builder *PersonInfoBuilder) PersonalProfile(personalProfile []*PersonalProfile) *PersonInfoBuilder {
	builder.personalProfile = personalProfile
	builder.personalProfileFlag = true
	return builder
}

// 籍贯 ID
//
// 示例值：6863326262618752111
func (builder *PersonInfoBuilder) NativeRegion(nativeRegion string) *PersonInfoBuilder {
	builder.nativeRegion = nativeRegion
	builder.nativeRegionFlag = true
	return builder
}

// 户口类型，枚举值可通过文档【飞书人事枚举常量】户口类型（hukou_type）枚举定义部分获得
//
// 示例值：
func (builder *PersonInfoBuilder) HukouType(hukouType *Enum) *PersonInfoBuilder {
	builder.hukouType = hukouType
	builder.hukouTypeFlag = true
	return builder
}

// 户口所在地
//
// 示例值：山东省平阴县
func (builder *PersonInfoBuilder) HukouLocation(hukouLocation string) *PersonInfoBuilder {
	builder.hukouLocation = hukouLocation
	builder.hukouLocationFlag = true
	return builder
}

// 政治面貌，枚举值可查询【获取字段详情】接口获取，按如下参数查询即可： - custom_api_name：political_affiliation - object_api_name：person_info_chn
//
// 示例值：
func (builder *PersonInfoBuilder) PoliticalAffiliations(politicalAffiliations []*Enum) *PersonInfoBuilder {
	builder.politicalAffiliations = politicalAffiliations
	builder.politicalAffiliationsFlag = true
	return builder
}

// 人才 ID
//
// 示例值：6863326262618752123
func (builder *PersonInfoBuilder) TalentId(talentId string) *PersonInfoBuilder {
	builder.talentId = talentId
	builder.talentIdFlag = true
	return builder
}

// 自定义字段
//
// 示例值：
func (builder *PersonInfoBuilder) CustomFields(customFields []*CustomFieldData) *PersonInfoBuilder {
	builder.customFields = customFields
	builder.customFieldsFlag = true
	return builder
}

// 居民身份证件号码
//
// 示例值：11010000000000
func (builder *PersonInfoBuilder) NationalIdNumber(nationalIdNumber string) *PersonInfoBuilder {
	builder.nationalIdNumber = nationalIdNumber
	builder.nationalIdNumberFlag = true
	return builder
}

// 家庭地址
//
// 示例值：6863326262618752123
func (builder *PersonInfoBuilder) FamilyAddress(familyAddress string) *PersonInfoBuilder {
	builder.familyAddress = familyAddress
	builder.familyAddressFlag = true
	return builder
}

// 个人附加信息
//
// 示例值：6863326262618752123
func (builder *PersonInfoBuilder) PersonInfoChns(personInfoChns []*PersonInfoChn) *PersonInfoBuilder {
	builder.personInfoChns = personInfoChns
	builder.personInfoChnsFlag = true
	return builder
}

// 出生国家/地区
//
// 示例值：中国
func (builder *PersonInfoBuilder) BornCountryRegion(bornCountryRegion string) *PersonInfoBuilder {
	builder.bornCountryRegion = bornCountryRegion
	builder.bornCountryRegionFlag = true
	return builder
}

// 是否残疾
//
// 示例值：true
func (builder *PersonInfoBuilder) IsDisabled(isDisabled bool) *PersonInfoBuilder {
	builder.isDisabled = isDisabled
	builder.isDisabledFlag = true
	return builder
}

// 残疾证号
//
// 示例值：1110000
func (builder *PersonInfoBuilder) DisableCardNumber(disableCardNumber string) *PersonInfoBuilder {
	builder.disableCardNumber = disableCardNumber
	builder.disableCardNumberFlag = true
	return builder
}

// 是否烈属
//
// 示例值：true
func (builder *PersonInfoBuilder) IsMartyrFamily(isMartyrFamily bool) *PersonInfoBuilder {
	builder.isMartyrFamily = isMartyrFamily
	builder.isMartyrFamilyFlag = true
	return builder
}

// 烈属证号
//
// 示例值：1110000
func (builder *PersonInfoBuilder) MartyrCardNumber(martyrCardNumber string) *PersonInfoBuilder {
	builder.martyrCardNumber = martyrCardNumber
	builder.martyrCardNumberFlag = true
	return builder
}

// 是否孤老
//
// 示例值：true
func (builder *PersonInfoBuilder) IsOldAlone(isOldAlone bool) *PersonInfoBuilder {
	builder.isOldAlone = isOldAlone
	builder.isOldAloneFlag = true
	return builder
}

// 居民身份信息
//
// 示例值：6863326262618752123
func (builder *PersonInfoBuilder) ResidentTaxes(residentTaxes []*ResidentTax) *PersonInfoBuilder {
	builder.residentTaxes = residentTaxes
	builder.residentTaxesFlag = true
	return builder
}

// 首次入境日期
//
// 示例值：2021-01-02
func (builder *PersonInfoBuilder) FirstEntryTime(firstEntryTime string) *PersonInfoBuilder {
	builder.firstEntryTime = firstEntryTime
	builder.firstEntryTimeFlag = true
	return builder
}

// 预计离境日期
//
// 示例值：2022-01-02
func (builder *PersonInfoBuilder) LeaveTime(leaveTime string) *PersonInfoBuilder {
	builder.leaveTime = leaveTime
	builder.leaveTimeFlag = true
	return builder
}

// -| 宗教信仰，枚举值可查询【获取字段详情】接口获取，按如下参数查询即可： - object_api_name：person - custom_api_name：religion
//
// 示例值：
func (builder *PersonInfoBuilder) Religion(religion *Enum) *PersonInfoBuilder {
	builder.religion = religion
	builder.religionFlag = true
	return builder
}

func (builder *PersonInfoBuilder) Build() *PersonInfo {
	req := &PersonInfo{}
	if builder.personIdFlag {
		req.PersonId = &builder.personId

	}
	if builder.phoneNumberFlag {
		req.PhoneNumber = &builder.phoneNumber

	}
	if builder.legalNameFlag {
		req.LegalName = &builder.legalName

	}
	if builder.preferredNameFlag {
		req.PreferredName = &builder.preferredName

	}
	if builder.preferredLocalFullNameFlag {
		req.PreferredLocalFullName = &builder.preferredLocalFullName

	}
	if builder.preferredEnglishFullNameFlag {
		req.PreferredEnglishFullName = &builder.preferredEnglishFullName

	}
	if builder.nameListFlag {
		req.NameList = builder.nameList
	}
	if builder.genderFlag {
		req.Gender = builder.gender
	}
	if builder.dateOfBirthFlag {
		req.DateOfBirth = &builder.dateOfBirth

	}

	if builder.nationalityIdV2Flag {
		req.NationalityIdV2 = &builder.nationalityIdV2

	}

	if builder.raceFlag {
		req.Race = builder.race
	}
	if builder.maritalStatusFlag {
		req.MaritalStatus = builder.maritalStatus
	}
	if builder.phoneListFlag {
		req.PhoneList = builder.phoneList
	}
	if builder.addressListFlag {
		req.AddressList = builder.addressList
	}
	if builder.emailListFlag {
		req.EmailList = builder.emailList
	}
	if builder.workExperienceListFlag {
		req.WorkExperienceList = builder.workExperienceList
	}
	if builder.educationListFlag {
		req.EducationList = builder.educationList
	}
	if builder.bankAccountListFlag {
		req.BankAccountList = builder.bankAccountList
	}
	if builder.nationalIdListFlag {
		req.NationalIdList = builder.nationalIdList
	}
	if builder.dependentListFlag {
		req.DependentList = builder.dependentList
	}
	if builder.emergencyContactListFlag {
		req.EmergencyContactList = builder.emergencyContactList
	}
	if builder.dateEnteredWorkforceFlag {
		req.DateEnteredWorkforce = &builder.dateEnteredWorkforce

	}
	if builder.workingYearsFlag {
		req.WorkingYears = &builder.workingYears

	}
	if builder.profileImageIdFlag {
		req.ProfileImageId = &builder.profileImageId

	}
	if builder.emailAddressFlag {
		req.EmailAddress = &builder.emailAddress

	}
	if builder.ageFlag {
		req.Age = &builder.age

	}
	if builder.highestLevelOfEducationFlag {
		req.HighestLevelOfEducation = builder.highestLevelOfEducation
	}
	if builder.highestDegreeOfEducationFlag {
		req.HighestDegreeOfEducation = builder.highestDegreeOfEducation
	}
	if builder.personalProfileFlag {
		req.PersonalProfile = builder.personalProfile
	}
	if builder.nativeRegionFlag {
		req.NativeRegion = &builder.nativeRegion

	}
	if builder.hukouTypeFlag {
		req.HukouType = builder.hukouType
	}
	if builder.hukouLocationFlag {
		req.HukouLocation = &builder.hukouLocation

	}
	if builder.politicalAffiliationsFlag {
		req.PoliticalAffiliations = builder.politicalAffiliations
	}
	if builder.talentIdFlag {
		req.TalentId = &builder.talentId

	}
	if builder.customFieldsFlag {
		req.CustomFields = builder.customFields
	}
	if builder.nationalIdNumberFlag {
		req.NationalIdNumber = &builder.nationalIdNumber

	}
	if builder.familyAddressFlag {
		req.FamilyAddress = &builder.familyAddress

	}
	if builder.personInfoChnsFlag {
		req.PersonInfoChns = builder.personInfoChns
	}
	if builder.bornCountryRegionFlag {
		req.BornCountryRegion = &builder.bornCountryRegion

	}
	if builder.isDisabledFlag {
		req.IsDisabled = &builder.isDisabled

	}
	if builder.disableCardNumberFlag {
		req.DisableCardNumber = &builder.disableCardNumber

	}
	if builder.isMartyrFamilyFlag {
		req.IsMartyrFamily = &builder.isMartyrFamily

	}
	if builder.martyrCardNumberFlag {
		req.MartyrCardNumber = &builder.martyrCardNumber

	}
	if builder.isOldAloneFlag {
		req.IsOldAlone = &builder.isOldAlone

	}
	if builder.residentTaxesFlag {
		req.ResidentTaxes = builder.residentTaxes
	}
	if builder.firstEntryTimeFlag {
		req.FirstEntryTime = &builder.firstEntryTime

	}
	if builder.leaveTimeFlag {
		req.LeaveTime = &builder.leaveTime

	}
	if builder.religionFlag {
		req.Religion = builder.religion
	}
	return req
}

type PersonInfoChn struct {
	NativeRegion   *string `json:"native_region,omitempty"`    // 籍贯 ID
	HukouType      *Enum   `json:"hukou_type,omitempty"`       // -| 户口类型，枚举值可查询【获取字段详情】接口获取，按如下参数查询即可： - custom_api_name：hukou_type - object_api_name：person_info_chn
	HukouLocation  *string `json:"hukou_location,omitempty"`   // 户口所在地
	FirstEntryTime *string `json:"first_entry_time,omitempty"` // 首次入境日期
	LeaveTime      *string `json:"leave_time,omitempty"`       // 预计离境日期
}

type PersonInfoChnBuilder struct {
	nativeRegion       string // 籍贯 ID
	nativeRegionFlag   bool
	hukouType          *Enum // -| 户口类型，枚举值可查询【获取字段详情】接口获取，按如下参数查询即可： - custom_api_name：hukou_type - object_api_name：person_info_chn
	hukouTypeFlag      bool
	hukouLocation      string // 户口所在地
	hukouLocationFlag  bool
	firstEntryTime     string // 首次入境日期
	firstEntryTimeFlag bool
	leaveTime          string // 预计离境日期
	leaveTimeFlag      bool
}

func NewPersonInfoChnBuilder() *PersonInfoChnBuilder {
	builder := &PersonInfoChnBuilder{}
	return builder
}

// 籍贯 ID
//
// 示例值：6863326262618752111
func (builder *PersonInfoChnBuilder) NativeRegion(nativeRegion string) *PersonInfoChnBuilder {
	builder.nativeRegion = nativeRegion
	builder.nativeRegionFlag = true
	return builder
}

// -| 户口类型，枚举值可查询【获取字段详情】接口获取，按如下参数查询即可： - custom_api_name：hukou_type - object_api_name：person_info_chn
//
// 示例值：
func (builder *PersonInfoChnBuilder) HukouType(hukouType *Enum) *PersonInfoChnBuilder {
	builder.hukouType = hukouType
	builder.hukouTypeFlag = true
	return builder
}

// 户口所在地
//
// 示例值：山东省平阴县
func (builder *PersonInfoChnBuilder) HukouLocation(hukouLocation string) *PersonInfoChnBuilder {
	builder.hukouLocation = hukouLocation
	builder.hukouLocationFlag = true
	return builder
}

// 首次入境日期
//
// 示例值：2023-07-09
func (builder *PersonInfoChnBuilder) FirstEntryTime(firstEntryTime string) *PersonInfoChnBuilder {
	builder.firstEntryTime = firstEntryTime
	builder.firstEntryTimeFlag = true
	return builder
}

// 预计离境日期
//
// 示例值：2023-07-09
func (builder *PersonInfoChnBuilder) LeaveTime(leaveTime string) *PersonInfoChnBuilder {
	builder.leaveTime = leaveTime
	builder.leaveTimeFlag = true
	return builder
}

func (builder *PersonInfoChnBuilder) Build() *PersonInfoChn {
	req := &PersonInfoChn{}
	if builder.nativeRegionFlag {
		req.NativeRegion = &builder.nativeRegion

	}
	if builder.hukouTypeFlag {
		req.HukouType = builder.hukouType
	}
	if builder.hukouLocationFlag {
		req.HukouLocation = &builder.hukouLocation

	}
	if builder.firstEntryTimeFlag {
		req.FirstEntryTime = &builder.firstEntryTime

	}
	if builder.leaveTimeFlag {
		req.LeaveTime = &builder.leaveTime

	}
	return req
}

type PersonName struct {
	LocalPrimary                     *string `json:"local_primary,omitempty"`                         // 姓 - 本地文字
	LocalFirstName                   *string `json:"local_first_name,omitempty"`                      // 名 - 本地文字
	CountryRegionId                  *string `json:"country_region_id,omitempty"`                     // 国家 / 地区
	NameType                         *Enum   `json:"name_type,omitempty"`                             // 姓名类型
	LocalFirstName2                  *string `json:"local_first_name_2,omitempty"`                    // 名 - 第二本地文字
	LocalPrimary2                    *string `json:"local_primary_2,omitempty"`                       // 姓 - 第二本地文字
	AdditionalNameType               *Enum   `json:"additional_name_type,omitempty"`                  // 补充姓名类型
	FirstName                        *string `json:"first_name,omitempty"`                            // 名
	FullName                         *string `json:"full_name,omitempty"`                             // 全名
	Hereditary                       *string `json:"hereditary,omitempty"`                            // 姓氏称谓
	CustomName                       *string `json:"custom_name,omitempty"`                           // 自定义姓名（未传入时，姓名将默认根据所属国家 / 地区规则对相关姓、名字段拼接）
	CustomLocalName                  *string `json:"custom_local_name,omitempty"`                     // 本地文字的自定义姓名（未传入时，本地文字的姓名将默认根据所属国家 / 地区规则对本地文字的相关姓、名字段拼接）
	MiddleName                       *string `json:"middle_name,omitempty"`                           // 中间名
	NamePrimary                      *string `json:"name_primary,omitempty"`                          // 姓
	Secondary                        *string `json:"secondary,omitempty"`                             // 第二姓氏
	Social                           *Enum   `json:"social,omitempty"`                                // 尊称
	Tertiary                         *string `json:"tertiary,omitempty"`                              // 婚后姓氏
	Title                            *Enum   `json:"title,omitempty"`                                 // 头衔
	LocalMiddleName                  *string `json:"local_middle_name,omitempty"`                     // 本地中间名
	LocalSecondary                   *string `json:"local_secondary,omitempty"`                       // 第二姓氏 - 本地文字
	DisplayNameLocalAndWesternScript *string `json:"display_name_local_and_western_script,omitempty"` // 展示姓名（本地和西方文字）
	DisplayNameLocalScript           *string `json:"display_name_local_script,omitempty"`             // 展示姓名（本地文字）
	DisplayNameWesternScript         *string `json:"display_name_western_script,omitempty"`           // 展示姓名（西方文字）
}

type PersonNameBuilder struct {
	localPrimary                         string // 姓 - 本地文字
	localPrimaryFlag                     bool
	localFirstName                       string // 名 - 本地文字
	localFirstNameFlag                   bool
	countryRegionId                      string // 国家 / 地区
	countryRegionIdFlag                  bool
	nameType                             *Enum // 姓名类型
	nameTypeFlag                         bool
	localFirstName2                      string // 名 - 第二本地文字
	localFirstName2Flag                  bool
	localPrimary2                        string // 姓 - 第二本地文字
	localPrimary2Flag                    bool
	additionalNameType                   *Enum // 补充姓名类型
	additionalNameTypeFlag               bool
	firstName                            string // 名
	firstNameFlag                        bool
	fullName                             string // 全名
	fullNameFlag                         bool
	hereditary                           string // 姓氏称谓
	hereditaryFlag                       bool
	customName                           string // 自定义姓名（未传入时，姓名将默认根据所属国家 / 地区规则对相关姓、名字段拼接）
	customNameFlag                       bool
	customLocalName                      string // 本地文字的自定义姓名（未传入时，本地文字的姓名将默认根据所属国家 / 地区规则对本地文字的相关姓、名字段拼接）
	customLocalNameFlag                  bool
	middleName                           string // 中间名
	middleNameFlag                       bool
	namePrimary                          string // 姓
	namePrimaryFlag                      bool
	secondary                            string // 第二姓氏
	secondaryFlag                        bool
	social                               *Enum // 尊称
	socialFlag                           bool
	tertiary                             string // 婚后姓氏
	tertiaryFlag                         bool
	title                                *Enum // 头衔
	titleFlag                            bool
	localMiddleName                      string // 本地中间名
	localMiddleNameFlag                  bool
	localSecondary                       string // 第二姓氏 - 本地文字
	localSecondaryFlag                   bool
	displayNameLocalAndWesternScript     string // 展示姓名（本地和西方文字）
	displayNameLocalAndWesternScriptFlag bool
	displayNameLocalScript               string // 展示姓名（本地文字）
	displayNameLocalScriptFlag           bool
	displayNameWesternScript             string // 展示姓名（西方文字）
	displayNameWesternScriptFlag         bool
}

func NewPersonNameBuilder() *PersonNameBuilder {
	builder := &PersonNameBuilder{}
	return builder
}

// 姓 - 本地文字
//
// 示例值：黄
func (builder *PersonNameBuilder) LocalPrimary(localPrimary string) *PersonNameBuilder {
	builder.localPrimary = localPrimary
	builder.localPrimaryFlag = true
	return builder
}

// 名 - 本地文字
//
// 示例值：四
func (builder *PersonNameBuilder) LocalFirstName(localFirstName string) *PersonNameBuilder {
	builder.localFirstName = localFirstName
	builder.localFirstNameFlag = true
	return builder
}

// 国家 / 地区
//
// 示例值：6862995757234914824
func (builder *PersonNameBuilder) CountryRegionId(countryRegionId string) *PersonNameBuilder {
	builder.countryRegionId = countryRegionId
	builder.countryRegionIdFlag = true
	return builder
}

// 姓名类型
//
// 示例值：
func (builder *PersonNameBuilder) NameType(nameType *Enum) *PersonNameBuilder {
	builder.nameType = nameType
	builder.nameTypeFlag = true
	return builder
}

// 名 - 第二本地文字
//
// 示例值：五
func (builder *PersonNameBuilder) LocalFirstName2(localFirstName2 string) *PersonNameBuilder {
	builder.localFirstName2 = localFirstName2
	builder.localFirstName2Flag = true
	return builder
}

// 姓 - 第二本地文字
//
// 示例值：王
func (builder *PersonNameBuilder) LocalPrimary2(localPrimary2 string) *PersonNameBuilder {
	builder.localPrimary2 = localPrimary2
	builder.localPrimary2Flag = true
	return builder
}

// 补充姓名类型
//
// 示例值：
func (builder *PersonNameBuilder) AdditionalNameType(additionalNameType *Enum) *PersonNameBuilder {
	builder.additionalNameType = additionalNameType
	builder.additionalNameTypeFlag = true
	return builder
}

// 名
//
// 示例值：帅
func (builder *PersonNameBuilder) FirstName(firstName string) *PersonNameBuilder {
	builder.firstName = firstName
	builder.firstNameFlag = true
	return builder
}

// 全名
//
// 示例值：王大帅
func (builder *PersonNameBuilder) FullName(fullName string) *PersonNameBuilder {
	builder.fullName = fullName
	builder.fullNameFlag = true
	return builder
}

// 姓氏称谓
//
// 示例值：王
func (builder *PersonNameBuilder) Hereditary(hereditary string) *PersonNameBuilder {
	builder.hereditary = hereditary
	builder.hereditaryFlag = true
	return builder
}

// 自定义姓名（未传入时，姓名将默认根据所属国家 / 地区规则对相关姓、名字段拼接）
//
// 示例值：王大帅
func (builder *PersonNameBuilder) CustomName(customName string) *PersonNameBuilder {
	builder.customName = customName
	builder.customNameFlag = true
	return builder
}

// 本地文字的自定义姓名（未传入时，本地文字的姓名将默认根据所属国家 / 地区规则对本地文字的相关姓、名字段拼接）
//
// 示例值：王大帅
func (builder *PersonNameBuilder) CustomLocalName(customLocalName string) *PersonNameBuilder {
	builder.customLocalName = customLocalName
	builder.customLocalNameFlag = true
	return builder
}

// 中间名
//
// 示例值：大
func (builder *PersonNameBuilder) MiddleName(middleName string) *PersonNameBuilder {
	builder.middleName = middleName
	builder.middleNameFlag = true
	return builder
}

// 姓
//
// 示例值：王
func (builder *PersonNameBuilder) NamePrimary(namePrimary string) *PersonNameBuilder {
	builder.namePrimary = namePrimary
	builder.namePrimaryFlag = true
	return builder
}

// 第二姓氏
//
// 示例值：王
func (builder *PersonNameBuilder) Secondary(secondary string) *PersonNameBuilder {
	builder.secondary = secondary
	builder.secondaryFlag = true
	return builder
}

// 尊称
//
// 示例值：王大帅
func (builder *PersonNameBuilder) Social(social *Enum) *PersonNameBuilder {
	builder.social = social
	builder.socialFlag = true
	return builder
}

// 婚后姓氏
//
// 示例值：王
func (builder *PersonNameBuilder) Tertiary(tertiary string) *PersonNameBuilder {
	builder.tertiary = tertiary
	builder.tertiaryFlag = true
	return builder
}

// 头衔
//
// 示例值：王
func (builder *PersonNameBuilder) Title(title *Enum) *PersonNameBuilder {
	builder.title = title
	builder.titleFlag = true
	return builder
}

// 本地中间名
//
// 示例值：大
func (builder *PersonNameBuilder) LocalMiddleName(localMiddleName string) *PersonNameBuilder {
	builder.localMiddleName = localMiddleName
	builder.localMiddleNameFlag = true
	return builder
}

// 第二姓氏 - 本地文字
//
// 示例值：王
func (builder *PersonNameBuilder) LocalSecondary(localSecondary string) *PersonNameBuilder {
	builder.localSecondary = localSecondary
	builder.localSecondaryFlag = true
	return builder
}

// 展示姓名（本地和西方文字）
//
// 示例值：王大帅
func (builder *PersonNameBuilder) DisplayNameLocalAndWesternScript(displayNameLocalAndWesternScript string) *PersonNameBuilder {
	builder.displayNameLocalAndWesternScript = displayNameLocalAndWesternScript
	builder.displayNameLocalAndWesternScriptFlag = true
	return builder
}

// 展示姓名（本地文字）
//
// 示例值：王大帅
func (builder *PersonNameBuilder) DisplayNameLocalScript(displayNameLocalScript string) *PersonNameBuilder {
	builder.displayNameLocalScript = displayNameLocalScript
	builder.displayNameLocalScriptFlag = true
	return builder
}

// 展示姓名（西方文字）
//
// 示例值：王大帅
func (builder *PersonNameBuilder) DisplayNameWesternScript(displayNameWesternScript string) *PersonNameBuilder {
	builder.displayNameWesternScript = displayNameWesternScript
	builder.displayNameWesternScriptFlag = true
	return builder
}

func (builder *PersonNameBuilder) Build() *PersonName {
	req := &PersonName{}
	if builder.localPrimaryFlag {
		req.LocalPrimary = &builder.localPrimary

	}
	if builder.localFirstNameFlag {
		req.LocalFirstName = &builder.localFirstName

	}
	if builder.countryRegionIdFlag {
		req.CountryRegionId = &builder.countryRegionId

	}
	if builder.nameTypeFlag {
		req.NameType = builder.nameType
	}
	if builder.localFirstName2Flag {
		req.LocalFirstName2 = &builder.localFirstName2

	}
	if builder.localPrimary2Flag {
		req.LocalPrimary2 = &builder.localPrimary2

	}
	if builder.additionalNameTypeFlag {
		req.AdditionalNameType = builder.additionalNameType
	}
	if builder.firstNameFlag {
		req.FirstName = &builder.firstName

	}
	if builder.fullNameFlag {
		req.FullName = &builder.fullName

	}
	if builder.hereditaryFlag {
		req.Hereditary = &builder.hereditary

	}
	if builder.customNameFlag {
		req.CustomName = &builder.customName

	}
	if builder.customLocalNameFlag {
		req.CustomLocalName = &builder.customLocalName

	}
	if builder.middleNameFlag {
		req.MiddleName = &builder.middleName

	}
	if builder.namePrimaryFlag {
		req.NamePrimary = &builder.namePrimary

	}
	if builder.secondaryFlag {
		req.Secondary = &builder.secondary

	}
	if builder.socialFlag {
		req.Social = builder.social
	}
	if builder.tertiaryFlag {
		req.Tertiary = &builder.tertiary

	}
	if builder.titleFlag {
		req.Title = builder.title
	}
	if builder.localMiddleNameFlag {
		req.LocalMiddleName = &builder.localMiddleName

	}
	if builder.localSecondaryFlag {
		req.LocalSecondary = &builder.localSecondary

	}
	if builder.displayNameLocalAndWesternScriptFlag {
		req.DisplayNameLocalAndWesternScript = &builder.displayNameLocalAndWesternScript

	}
	if builder.displayNameLocalScriptFlag {
		req.DisplayNameLocalScript = &builder.displayNameLocalScript

	}
	if builder.displayNameWesternScriptFlag {
		req.DisplayNameWesternScript = &builder.displayNameWesternScript

	}
	return req
}

type PersonalProfile struct {
	PersonalProfileType *Enum   `json:"personal_profile_type,omitempty"` // 资料类型
	Files               []*File `json:"files,omitempty"`                 // 上传文件列表
}

type PersonalProfileBuilder struct {
	personalProfileType     *Enum // 资料类型
	personalProfileTypeFlag bool
	files                   []*File // 上传文件列表
	filesFlag               bool
}

func NewPersonalProfileBuilder() *PersonalProfileBuilder {
	builder := &PersonalProfileBuilder{}
	return builder
}

// 资料类型
//
// 示例值：
func (builder *PersonalProfileBuilder) PersonalProfileType(personalProfileType *Enum) *PersonalProfileBuilder {
	builder.personalProfileType = personalProfileType
	builder.personalProfileTypeFlag = true
	return builder
}

// 上传文件列表
//
// 示例值：
func (builder *PersonalProfileBuilder) Files(files []*File) *PersonalProfileBuilder {
	builder.files = files
	builder.filesFlag = true
	return builder
}

func (builder *PersonalProfileBuilder) Build() *PersonalProfile {
	req := &PersonalProfile{}

	if builder.personalProfileTypeFlag {
		req.PersonalProfileType = builder.personalProfileType
	}
	if builder.filesFlag {
		req.Files = builder.files
	}
	return req
}

type Phone struct {
	InternationalAreaCode *Enum   `json:"international_area_code,omitempty"` // 国家区号
	PhoneNumber           *string `json:"phone_number,omitempty"`            // 电话号码
	FormattedPhoneNumber  *string `json:"formatted_phone_number,omitempty"`  // 完整电话号码
	DeviceType            *Enum   `json:"device_type,omitempty"`             // 设备类型
	PhoneUsage            *Enum   `json:"phone_usage,omitempty"`             // 电话用途
	IsPrimary             *bool   `json:"is_primary,omitempty"`              // 主要电话
	IsPublic              *bool   `json:"is_public,omitempty"`               // 公开电话
}

type PhoneBuilder struct {
	internationalAreaCode     *Enum // 国家区号
	internationalAreaCodeFlag bool
	phoneNumber               string // 电话号码
	phoneNumberFlag           bool
	formattedPhoneNumber      string // 完整电话号码
	formattedPhoneNumberFlag  bool
	deviceType                *Enum // 设备类型
	deviceTypeFlag            bool
	phoneUsage                *Enum // 电话用途
	phoneUsageFlag            bool
	isPrimary                 bool // 主要电话
	isPrimaryFlag             bool
	isPublic                  bool // 公开电话
	isPublicFlag              bool
}

func NewPhoneBuilder() *PhoneBuilder {
	builder := &PhoneBuilder{}
	return builder
}

// 国家区号
//
// 示例值：
func (builder *PhoneBuilder) InternationalAreaCode(internationalAreaCode *Enum) *PhoneBuilder {
	builder.internationalAreaCode = internationalAreaCode
	builder.internationalAreaCodeFlag = true
	return builder
}

// 电话号码
//
// 示例值：010-12345678
func (builder *PhoneBuilder) PhoneNumber(phoneNumber string) *PhoneBuilder {
	builder.phoneNumber = phoneNumber
	builder.phoneNumberFlag = true
	return builder
}

// 完整电话号码
//
// 示例值：+86 010-12345678
func (builder *PhoneBuilder) FormattedPhoneNumber(formattedPhoneNumber string) *PhoneBuilder {
	builder.formattedPhoneNumber = formattedPhoneNumber
	builder.formattedPhoneNumberFlag = true
	return builder
}

// 设备类型
//
// 示例值：
func (builder *PhoneBuilder) DeviceType(deviceType *Enum) *PhoneBuilder {
	builder.deviceType = deviceType
	builder.deviceTypeFlag = true
	return builder
}

// 电话用途
//
// 示例值：
func (builder *PhoneBuilder) PhoneUsage(phoneUsage *Enum) *PhoneBuilder {
	builder.phoneUsage = phoneUsage
	builder.phoneUsageFlag = true
	return builder
}

// 主要电话
//
// 示例值：true
func (builder *PhoneBuilder) IsPrimary(isPrimary bool) *PhoneBuilder {
	builder.isPrimary = isPrimary
	builder.isPrimaryFlag = true
	return builder
}

// 公开电话
//
// 示例值：true
func (builder *PhoneBuilder) IsPublic(isPublic bool) *PhoneBuilder {
	builder.isPublic = isPublic
	builder.isPublicFlag = true
	return builder
}

func (builder *PhoneBuilder) Build() *Phone {
	req := &Phone{}
	if builder.internationalAreaCodeFlag {
		req.InternationalAreaCode = builder.internationalAreaCode
	}
	if builder.phoneNumberFlag {
		req.PhoneNumber = &builder.phoneNumber

	}
	if builder.formattedPhoneNumberFlag {
		req.FormattedPhoneNumber = &builder.formattedPhoneNumber

	}
	if builder.deviceTypeFlag {
		req.DeviceType = builder.deviceType
	}
	if builder.phoneUsageFlag {
		req.PhoneUsage = builder.phoneUsage
	}
	if builder.isPrimaryFlag {
		req.IsPrimary = &builder.isPrimary

	}
	if builder.isPublicFlag {
		req.IsPublic = &builder.isPublic

	}
	return req
}

type PhoneForUpdate struct {
	InternationalAreaCode *string `json:"international_area_code,omitempty"` // 国家区号,枚举值
	PhoneNumber           *string `json:"phone_number,omitempty"`            // 电话号码
	DeviceType            *string `json:"device_type,omitempty"`             // 设备类型，枚举值
	PhoneUsage            *string `json:"phone_usage,omitempty"`             // 电话用途,枚举值
	IsPrimary             *bool   `json:"is_primary,omitempty"`              // 主要电话,若有多个电话，只能有一个电话的「is_primary」为true
	IsPublic              *bool   `json:"is_public,omitempty"`               // 公开电话
}

type PhoneForUpdateBuilder struct {
	internationalAreaCode     string // 国家区号,枚举值
	internationalAreaCodeFlag bool
	phoneNumber               string // 电话号码
	phoneNumberFlag           bool
	deviceType                string // 设备类型，枚举值
	deviceTypeFlag            bool
	phoneUsage                string // 电话用途,枚举值
	phoneUsageFlag            bool
	isPrimary                 bool // 主要电话,若有多个电话，只能有一个电话的「is_primary」为true
	isPrimaryFlag             bool
	isPublic                  bool // 公开电话
	isPublicFlag              bool
}

func NewPhoneForUpdateBuilder() *PhoneForUpdateBuilder {
	builder := &PhoneForUpdateBuilder{}
	return builder
}

// 国家区号,枚举值
//
// 示例值：86_china
func (builder *PhoneForUpdateBuilder) InternationalAreaCode(internationalAreaCode string) *PhoneForUpdateBuilder {
	builder.internationalAreaCode = internationalAreaCode
	builder.internationalAreaCodeFlag = true
	return builder
}

// 电话号码
//
// 示例值：010-12345678
func (builder *PhoneForUpdateBuilder) PhoneNumber(phoneNumber string) *PhoneForUpdateBuilder {
	builder.phoneNumber = phoneNumber
	builder.phoneNumberFlag = true
	return builder
}

// 设备类型，枚举值
//
// 示例值：mobile_phone
func (builder *PhoneForUpdateBuilder) DeviceType(deviceType string) *PhoneForUpdateBuilder {
	builder.deviceType = deviceType
	builder.deviceTypeFlag = true
	return builder
}

// 电话用途,枚举值
//
// 示例值：home
func (builder *PhoneForUpdateBuilder) PhoneUsage(phoneUsage string) *PhoneForUpdateBuilder {
	builder.phoneUsage = phoneUsage
	builder.phoneUsageFlag = true
	return builder
}

// 主要电话,若有多个电话，只能有一个电话的「is_primary」为true
//
// 示例值：true
func (builder *PhoneForUpdateBuilder) IsPrimary(isPrimary bool) *PhoneForUpdateBuilder {
	builder.isPrimary = isPrimary
	builder.isPrimaryFlag = true
	return builder
}

// 公开电话
//
// 示例值：true
func (builder *PhoneForUpdateBuilder) IsPublic(isPublic bool) *PhoneForUpdateBuilder {
	builder.isPublic = isPublic
	builder.isPublicFlag = true
	return builder
}

func (builder *PhoneForUpdateBuilder) Build() *PhoneForUpdate {
	req := &PhoneForUpdate{}
	if builder.internationalAreaCodeFlag {
		req.InternationalAreaCode = &builder.internationalAreaCode

	}
	if builder.phoneNumberFlag {
		req.PhoneNumber = &builder.phoneNumber

	}
	if builder.deviceTypeFlag {
		req.DeviceType = &builder.deviceType

	}
	if builder.phoneUsageFlag {
		req.PhoneUsage = &builder.phoneUsage

	}
	if builder.isPrimaryFlag {
		req.IsPrimary = &builder.isPrimary

	}
	if builder.isPublicFlag {
		req.IsPublic = &builder.isPublic

	}
	return req
}

type PhoneNumberAndAreaCode struct {
	AreaCode    *Enum   `json:"area_code,omitempty"`    // 区号
	PhoneNumber *string `json:"phone_number,omitempty"` // 号码
}

type PhoneNumberAndAreaCodeBuilder struct {
	areaCode        *Enum // 区号
	areaCodeFlag    bool
	phoneNumber     string // 号码
	phoneNumberFlag bool
}

func NewPhoneNumberAndAreaCodeBuilder() *PhoneNumberAndAreaCodeBuilder {
	builder := &PhoneNumberAndAreaCodeBuilder{}
	return builder
}

// 区号
//
// 示例值：123123
func (builder *PhoneNumberAndAreaCodeBuilder) AreaCode(areaCode *Enum) *PhoneNumberAndAreaCodeBuilder {
	builder.areaCode = areaCode
	builder.areaCodeFlag = true
	return builder
}

// 号码
//
// 示例值：213213
func (builder *PhoneNumberAndAreaCodeBuilder) PhoneNumber(phoneNumber string) *PhoneNumberAndAreaCodeBuilder {
	builder.phoneNumber = phoneNumber
	builder.phoneNumberFlag = true
	return builder
}

func (builder *PhoneNumberAndAreaCodeBuilder) Build() *PhoneNumberAndAreaCode {
	req := &PhoneNumberAndAreaCode{}
	if builder.areaCodeFlag {
		req.AreaCode = builder.areaCode
	}
	if builder.phoneNumberFlag {
		req.PhoneNumber = &builder.phoneNumber

	}
	return req
}

type PreHire struct {
	PersonInfo     *PersonInfo            `json:"person_info,omitempty"`     // 个人信息
	EmploymentInfo *PreHireEmploymentInfo `json:"employment_info,omitempty"` // 工作信息
	OnboardingInfo *PreHireOnboardingInfo `json:"onboarding_info,omitempty"` // 入职信息
	ProbationInfo  *PreHireProbationInfo  `json:"probation_info,omitempty"`  // 试用期信息
	ContractInfo   *PreHireContractInfo   `json:"contract_info,omitempty"`   // 合同信息
	PreHireId      *string                `json:"pre_hire_id,omitempty"`     // 待入职 id

}

type PreHireBuilder struct {
	personInfo         *PersonInfo // 个人信息
	personInfoFlag     bool
	employmentInfo     *PreHireEmploymentInfo // 工作信息
	employmentInfoFlag bool
	onboardingInfo     *PreHireOnboardingInfo // 入职信息
	onboardingInfoFlag bool
	probationInfo      *PreHireProbationInfo // 试用期信息
	probationInfoFlag  bool
	contractInfo       *PreHireContractInfo // 合同信息
	contractInfoFlag   bool
	preHireId          string // 待入职 id
	preHireIdFlag      bool
}

func NewPreHireBuilder() *PreHireBuilder {
	builder := &PreHireBuilder{}
	return builder
}

// 个人信息
//
// 示例值：
func (builder *PreHireBuilder) PersonInfo(personInfo *PersonInfo) *PreHireBuilder {
	builder.personInfo = personInfo
	builder.personInfoFlag = true
	return builder
}

// 工作信息
//
// 示例值：
func (builder *PreHireBuilder) EmploymentInfo(employmentInfo *PreHireEmploymentInfo) *PreHireBuilder {
	builder.employmentInfo = employmentInfo
	builder.employmentInfoFlag = true
	return builder
}

// 入职信息
//
// 示例值：
func (builder *PreHireBuilder) OnboardingInfo(onboardingInfo *PreHireOnboardingInfo) *PreHireBuilder {
	builder.onboardingInfo = onboardingInfo
	builder.onboardingInfoFlag = true
	return builder
}

// 试用期信息
//
// 示例值：
func (builder *PreHireBuilder) ProbationInfo(probationInfo *PreHireProbationInfo) *PreHireBuilder {
	builder.probationInfo = probationInfo
	builder.probationInfoFlag = true
	return builder
}

// 合同信息
//
// 示例值：
func (builder *PreHireBuilder) ContractInfo(contractInfo *PreHireContractInfo) *PreHireBuilder {
	builder.contractInfo = contractInfo
	builder.contractInfoFlag = true
	return builder
}

// 待入职 id
//
// 示例值：7032210902531327521
func (builder *PreHireBuilder) PreHireId(preHireId string) *PreHireBuilder {
	builder.preHireId = preHireId
	builder.preHireIdFlag = true
	return builder
}

func (builder *PreHireBuilder) Build() *PreHire {
	req := &PreHire{}
	if builder.personInfoFlag {
		req.PersonInfo = builder.personInfo
	}
	if builder.employmentInfoFlag {
		req.EmploymentInfo = builder.employmentInfo
	}
	if builder.onboardingInfoFlag {
		req.OnboardingInfo = builder.onboardingInfo
	}
	if builder.probationInfoFlag {
		req.ProbationInfo = builder.probationInfo
	}
	if builder.contractInfoFlag {
		req.ContractInfo = builder.contractInfo
	}
	if builder.preHireIdFlag {
		req.PreHireId = &builder.preHireId

	}

	return req
}

type PreHireContractInfo struct {
	ContractStartDate *string `json:"contract_start_date,omitempty"` // 合同开始日期
	ContractEndDate   *string `json:"contract_end_date,omitempty"`   // 合同结束日期
	ContractType      *string `json:"contract_type,omitempty"`       // -| 合同类型，枚举值可查询【获取字段详情】接口获取，按如下参数查询即可： - object_api_name = "pre_hire" - custom_api_name = "contract_type"
	DurationType      *string `json:"duration_type,omitempty"`       // -| 期限类型，枚举值可查询【获取字段详情】接口获取，按如下参数查询即可： - object_api_name = "pre_hire" - custom_api_name = "duration_type"
	SigningType       *string `json:"signing_type,omitempty"`        // -| 签订类型，枚举值可查询【获取字段详情】接口获取，按如下参数查询即可： - object_api_name = "pre_hire" - custom_api_name = "duration_type"
}

type PreHireContractInfoBuilder struct {
	contractStartDate     string // 合同开始日期
	contractStartDateFlag bool
	contractEndDate       string // 合同结束日期
	contractEndDateFlag   bool
	contractType          string // -| 合同类型，枚举值可查询【获取字段详情】接口获取，按如下参数查询即可： - object_api_name = "pre_hire" - custom_api_name = "contract_type"
	contractTypeFlag      bool
	durationType          string // -| 期限类型，枚举值可查询【获取字段详情】接口获取，按如下参数查询即可： - object_api_name = "pre_hire" - custom_api_name = "duration_type"
	durationTypeFlag      bool
	signingType           string // -| 签订类型，枚举值可查询【获取字段详情】接口获取，按如下参数查询即可： - object_api_name = "pre_hire" - custom_api_name = "duration_type"
	signingTypeFlag       bool
}

func NewPreHireContractInfoBuilder() *PreHireContractInfoBuilder {
	builder := &PreHireContractInfoBuilder{}
	return builder
}

// 合同开始日期
//
// 示例值：2022-10-08
func (builder *PreHireContractInfoBuilder) ContractStartDate(contractStartDate string) *PreHireContractInfoBuilder {
	builder.contractStartDate = contractStartDate
	builder.contractStartDateFlag = true
	return builder
}

// 合同结束日期
//
// 示例值：2025-10-07
func (builder *PreHireContractInfoBuilder) ContractEndDate(contractEndDate string) *PreHireContractInfoBuilder {
	builder.contractEndDate = contractEndDate
	builder.contractEndDateFlag = true
	return builder
}

// -| 合同类型，枚举值可查询【获取字段详情】接口获取，按如下参数查询即可： - object_api_name = "pre_hire" - custom_api_name = "contract_type"
//
// 示例值：labor_contract
func (builder *PreHireContractInfoBuilder) ContractType(contractType string) *PreHireContractInfoBuilder {
	builder.contractType = contractType
	builder.contractTypeFlag = true
	return builder
}

// -| 期限类型，枚举值可查询【获取字段详情】接口获取，按如下参数查询即可： - object_api_name = "pre_hire" - custom_api_name = "duration_type"
//
// 示例值：fixed_term
func (builder *PreHireContractInfoBuilder) DurationType(durationType string) *PreHireContractInfoBuilder {
	builder.durationType = durationType
	builder.durationTypeFlag = true
	return builder
}

// -| 签订类型，枚举值可查询【获取字段详情】接口获取，按如下参数查询即可： - object_api_name = "pre_hire" - custom_api_name = "duration_type"
//
// 示例值：renewed
func (builder *PreHireContractInfoBuilder) SigningType(signingType string) *PreHireContractInfoBuilder {
	builder.signingType = signingType
	builder.signingTypeFlag = true
	return builder
}

func (builder *PreHireContractInfoBuilder) Build() *PreHireContractInfo {
	req := &PreHireContractInfo{}
	if builder.contractStartDateFlag {
		req.ContractStartDate = &builder.contractStartDate

	}
	if builder.contractEndDateFlag {
		req.ContractEndDate = &builder.contractEndDate

	}
	if builder.contractTypeFlag {
		req.ContractType = &builder.contractType

	}
	if builder.durationTypeFlag {
		req.DurationType = &builder.durationType

	}
	if builder.signingTypeFlag {
		req.SigningType = &builder.signingType

	}
	return req
}

type PreHireEmploymentInfo struct {
	DepartmentId         *string              `json:"department_id,omitempty"`           // 部门 ID ，可以通过【搜索部门信息】接口获取
	CostCenterRates      []*JobDataCostCenter `json:"cost_center_rates,omitempty"`       // 成本中心分摊信息
	OfficeLocationId     *string              `json:"office_location_id,omitempty"`      // 办公地点id ，详细信息可通过【批量查询地点】接口获得
	WorkLocationId       *string              `json:"work_location_id,omitempty"`        // 工作地点id ，详细信息可通过【批量查询地点】接口获得
	WorkStation          *string              `json:"work_station,omitempty"`            // 工位
	WorkerId             *string              `json:"worker_id,omitempty"`               // 工号
	CompensationType     *Enum                `json:"compensation_type,omitempty"`       // -| 薪资类型，枚举值可查询【获取字段详情】接口获取，按如下参数查询即可： - custom_api_name：compensation_type - object_api_name：pre_hire
	DirectLeaderId       *string              `json:"direct_leader_id,omitempty"`        // 直属上级雇佣 ID ， 可以通过【搜索员工信息】接口获取
	JobId                *string              `json:"job_id,omitempty"`                  // 职务 ID ,可以通过【批量查询职务】接口获取
	JobFamilyId          *string              `json:"job_family_id,omitempty"`           // 序列 ID，可以通过【批量查询职务序列】接口获取
	JobLevelId           *string              `json:"job_level_id,omitempty"`            // 职级 ID，可以通过【批量查询职务级别】接口获取
	JobGradeId           *string              `json:"job_grade_id,omitempty"`            // 职等 ID
	JobTitle             *string              `json:"job_title,omitempty"`               // 职务头衔
	EmployeeTypeId       *string              `json:"employee_type_id,omitempty"`        // 人员类型 ID ，可以通过招聘【批量查询人员类型】接口获取
	EmploymentType       *string              `json:"employment_type,omitempty"`         // -| 雇佣类型， 枚举值可查询【获取字段详情】接口获取，按如下参数查询即可： - object_api_name = "pre_hire" - custom_api_name = "employment_type"
	WorkEmail            *string              `json:"work_email,omitempty"`              // 工作邮箱
	CompanyId            *string              `json:"company_id,omitempty"`              // 公司 ID , 详细信息可通过【批量查询公司】接口获得
	SocialSecurityCityId *string              `json:"social_security_city_id,omitempty"` // 社保城市 ID ，详细信息可通过【批量查询地点】接口获得
	NonCompeteCovenant   *bool                `json:"non_compete_covenant,omitempty"`    // 是否包含竞业条款
	WeeklyWorkingHours   *int                 `json:"weekly_working_hours,omitempty"`    // 周工作时长（单位：小时）
	Rehire               *string              `json:"rehire,omitempty"`                  // 是否离职重聘
	RehireEmploymentId   *string              `json:"rehire_employment_id,omitempty"`    // -| 历史雇佣信息 ID ，雇佣信息详细信息可以通过「查询单个雇佣信息」API 获得，系统会检验当前雇佣信息的合法性，要求： - 雇佣信息为该人员最后一次雇佣记录 - 雇佣信息的雇员状态 = "terminated" - 该人员不存在其他待入职记录
	WorkingHoursType     *string              `json:"working_hours_type,omitempty"`      // -| 工时制度 ID ，可通过【查询单个工时制度】接口获取
	WeeklyWorkingHoursV2 *float64             `json:"weekly_working_hours_v2,omitempty"` // 周工作时长v2（单位：小时）
	OfficeAddress        *Address             `json:"office_address,omitempty"`          // 办公地址
	WorkingCalendarId    *string              `json:"working_calendar_id,omitempty"`     // 工作日历
	UpdatedAt            *string              `json:"updated_at,omitempty"`              // 更新时间
	SuspectedRehiring    *bool                `json:"suspected_rehiring,omitempty"`      // 是否疑似重聘
	CustomFields         []*CustomFieldData   `json:"custom_fields,omitempty"`           // 自定义字段
}

type PreHireEmploymentInfoBuilder struct {
	departmentId             string // 部门 ID ，可以通过【搜索部门信息】接口获取
	departmentIdFlag         bool
	costCenterRates          []*JobDataCostCenter // 成本中心分摊信息
	costCenterRatesFlag      bool
	officeLocationId         string // 办公地点id ，详细信息可通过【批量查询地点】接口获得
	officeLocationIdFlag     bool
	workLocationId           string // 工作地点id ，详细信息可通过【批量查询地点】接口获得
	workLocationIdFlag       bool
	workStation              string // 工位
	workStationFlag          bool
	workerId                 string // 工号
	workerIdFlag             bool
	compensationType         *Enum // -| 薪资类型，枚举值可查询【获取字段详情】接口获取，按如下参数查询即可： - custom_api_name：compensation_type - object_api_name：pre_hire
	compensationTypeFlag     bool
	directLeaderId           string // 直属上级雇佣 ID ， 可以通过【搜索员工信息】接口获取
	directLeaderIdFlag       bool
	jobId                    string // 职务 ID ,可以通过【批量查询职务】接口获取
	jobIdFlag                bool
	jobFamilyId              string // 序列 ID，可以通过【批量查询职务序列】接口获取
	jobFamilyIdFlag          bool
	jobLevelId               string // 职级 ID，可以通过【批量查询职务级别】接口获取
	jobLevelIdFlag           bool
	jobGradeId               string // 职等 ID
	jobGradeIdFlag           bool
	jobTitle                 string // 职务头衔
	jobTitleFlag             bool
	employeeTypeId           string // 人员类型 ID ，可以通过招聘【批量查询人员类型】接口获取
	employeeTypeIdFlag       bool
	employmentType           string // -| 雇佣类型， 枚举值可查询【获取字段详情】接口获取，按如下参数查询即可： - object_api_name = "pre_hire" - custom_api_name = "employment_type"
	employmentTypeFlag       bool
	workEmail                string // 工作邮箱
	workEmailFlag            bool
	companyId                string // 公司 ID , 详细信息可通过【批量查询公司】接口获得
	companyIdFlag            bool
	socialSecurityCityId     string // 社保城市 ID ，详细信息可通过【批量查询地点】接口获得
	socialSecurityCityIdFlag bool
	nonCompeteCovenant       bool // 是否包含竞业条款
	nonCompeteCovenantFlag   bool
	weeklyWorkingHours       int // 周工作时长（单位：小时）
	weeklyWorkingHoursFlag   bool
	rehire                   string // 是否离职重聘
	rehireFlag               bool
	rehireEmploymentId       string // -| 历史雇佣信息 ID ，雇佣信息详细信息可以通过「查询单个雇佣信息」API 获得，系统会检验当前雇佣信息的合法性，要求： - 雇佣信息为该人员最后一次雇佣记录 - 雇佣信息的雇员状态 = "terminated" - 该人员不存在其他待入职记录
	rehireEmploymentIdFlag   bool
	workingHoursType         string // -| 工时制度 ID ，可通过【查询单个工时制度】接口获取
	workingHoursTypeFlag     bool
	weeklyWorkingHoursV2     float64 // 周工作时长v2（单位：小时）
	weeklyWorkingHoursV2Flag bool
	officeAddress            *Address // 办公地址
	officeAddressFlag        bool
	workingCalendarId        string // 工作日历
	workingCalendarIdFlag    bool
	updatedAt                string // 更新时间
	updatedAtFlag            bool
	suspectedRehiring        bool // 是否疑似重聘
	suspectedRehiringFlag    bool
	customFields             []*CustomFieldData // 自定义字段
	customFieldsFlag         bool
}

func NewPreHireEmploymentInfoBuilder() *PreHireEmploymentInfoBuilder {
	builder := &PreHireEmploymentInfoBuilder{}
	return builder
}

// 部门 ID ，可以通过【搜索部门信息】接口获取
//
// 示例值：7147562782945478177
func (builder *PreHireEmploymentInfoBuilder) DepartmentId(departmentId string) *PreHireEmploymentInfoBuilder {
	builder.departmentId = departmentId
	builder.departmentIdFlag = true
	return builder
}

// 成本中心分摊信息
//
// 示例值：
func (builder *PreHireEmploymentInfoBuilder) CostCenterRates(costCenterRates []*JobDataCostCenter) *PreHireEmploymentInfoBuilder {
	builder.costCenterRates = costCenterRates
	builder.costCenterRatesFlag = true
	return builder
}

// 办公地点id ，详细信息可通过【批量查询地点】接口获得
//
// 示例值：6977976687350924832
func (builder *PreHireEmploymentInfoBuilder) OfficeLocationId(officeLocationId string) *PreHireEmploymentInfoBuilder {
	builder.officeLocationId = officeLocationId
	builder.officeLocationIdFlag = true
	return builder
}

// 工作地点id ，详细信息可通过【批量查询地点】接口获得
//
// 示例值：6977976687350924832
func (builder *PreHireEmploymentInfoBuilder) WorkLocationId(workLocationId string) *PreHireEmploymentInfoBuilder {
	builder.workLocationId = workLocationId
	builder.workLocationIdFlag = true
	return builder
}

// 工位
//
// 示例值：ABC123
func (builder *PreHireEmploymentInfoBuilder) WorkStation(workStation string) *PreHireEmploymentInfoBuilder {
	builder.workStation = workStation
	builder.workStationFlag = true
	return builder
}

// 工号
//
// 示例值：1234567
func (builder *PreHireEmploymentInfoBuilder) WorkerId(workerId string) *PreHireEmploymentInfoBuilder {
	builder.workerId = workerId
	builder.workerIdFlag = true
	return builder
}

// -| 薪资类型，枚举值可查询【获取字段详情】接口获取，按如下参数查询即可： - custom_api_name：compensation_type - object_api_name：pre_hire
//
// 示例值：
func (builder *PreHireEmploymentInfoBuilder) CompensationType(compensationType *Enum) *PreHireEmploymentInfoBuilder {
	builder.compensationType = compensationType
	builder.compensationTypeFlag = true
	return builder
}

// 直属上级雇佣 ID ， 可以通过【搜索员工信息】接口获取
//
// 示例值：7032210902531327521
func (builder *PreHireEmploymentInfoBuilder) DirectLeaderId(directLeaderId string) *PreHireEmploymentInfoBuilder {
	builder.directLeaderId = directLeaderId
	builder.directLeaderIdFlag = true
	return builder
}

// 职务 ID ,可以通过【批量查询职务】接口获取
//
// 示例值：6977976735715378724
func (builder *PreHireEmploymentInfoBuilder) JobId(jobId string) *PreHireEmploymentInfoBuilder {
	builder.jobId = jobId
	builder.jobIdFlag = true
	return builder
}

// 序列 ID，可以通过【批量查询职务序列】接口获取
//
// 示例值：6977972856625939999
func (builder *PreHireEmploymentInfoBuilder) JobFamilyId(jobFamilyId string) *PreHireEmploymentInfoBuilder {
	builder.jobFamilyId = jobFamilyId
	builder.jobFamilyIdFlag = true
	return builder
}

// 职级 ID，可以通过【批量查询职务级别】接口获取
//
// 示例值：6977971894960145950
func (builder *PreHireEmploymentInfoBuilder) JobLevelId(jobLevelId string) *PreHireEmploymentInfoBuilder {
	builder.jobLevelId = jobLevelId
	builder.jobLevelIdFlag = true
	return builder
}

// 职等 ID
//
// 示例值：6977971894960145950
func (builder *PreHireEmploymentInfoBuilder) JobGradeId(jobGradeId string) *PreHireEmploymentInfoBuilder {
	builder.jobGradeId = jobGradeId
	builder.jobGradeIdFlag = true
	return builder
}

// 职务头衔
//
// 示例值：java
func (builder *PreHireEmploymentInfoBuilder) JobTitle(jobTitle string) *PreHireEmploymentInfoBuilder {
	builder.jobTitle = jobTitle
	builder.jobTitleFlag = true
	return builder
}

// 人员类型 ID ，可以通过招聘【批量查询人员类型】接口获取
//
// 示例值：6977973225846343171
func (builder *PreHireEmploymentInfoBuilder) EmployeeTypeId(employeeTypeId string) *PreHireEmploymentInfoBuilder {
	builder.employeeTypeId = employeeTypeId
	builder.employeeTypeIdFlag = true
	return builder
}

// -| 雇佣类型， 枚举值可查询【获取字段详情】接口获取，按如下参数查询即可： - object_api_name = "pre_hire" - custom_api_name = "employment_type"
//
// 示例值：employee
func (builder *PreHireEmploymentInfoBuilder) EmploymentType(employmentType string) *PreHireEmploymentInfoBuilder {
	builder.employmentType = employmentType
	builder.employmentTypeFlag = true
	return builder
}

// 工作邮箱
//
// 示例值：joshua@bytedance.com
func (builder *PreHireEmploymentInfoBuilder) WorkEmail(workEmail string) *PreHireEmploymentInfoBuilder {
	builder.workEmail = workEmail
	builder.workEmailFlag = true
	return builder
}

// 公司 ID , 详细信息可通过【批量查询公司】接口获得
//
// 示例值：6738317738688661772
func (builder *PreHireEmploymentInfoBuilder) CompanyId(companyId string) *PreHireEmploymentInfoBuilder {
	builder.companyId = companyId
	builder.companyIdFlag = true
	return builder
}

// 社保城市 ID ，详细信息可通过【批量查询地点】接口获得
//
// 示例值：6977973225846343171
func (builder *PreHireEmploymentInfoBuilder) SocialSecurityCityId(socialSecurityCityId string) *PreHireEmploymentInfoBuilder {
	builder.socialSecurityCityId = socialSecurityCityId
	builder.socialSecurityCityIdFlag = true
	return builder
}

// 是否包含竞业条款
//
// 示例值：true
func (builder *PreHireEmploymentInfoBuilder) NonCompeteCovenant(nonCompeteCovenant bool) *PreHireEmploymentInfoBuilder {
	builder.nonCompeteCovenant = nonCompeteCovenant
	builder.nonCompeteCovenantFlag = true
	return builder
}

// 周工作时长（单位：小时）
//
// 示例值：8
func (builder *PreHireEmploymentInfoBuilder) WeeklyWorkingHours(weeklyWorkingHours int) *PreHireEmploymentInfoBuilder {
	builder.weeklyWorkingHours = weeklyWorkingHours
	builder.weeklyWorkingHoursFlag = true
	return builder
}

// 是否离职重聘
//
// 示例值：
func (builder *PreHireEmploymentInfoBuilder) Rehire(rehire string) *PreHireEmploymentInfoBuilder {
	builder.rehire = rehire
	builder.rehireFlag = true
	return builder
}

// -| 历史雇佣信息 ID ，雇佣信息详细信息可以通过「查询单个雇佣信息」API 获得，系统会检验当前雇佣信息的合法性，要求： - 雇佣信息为该人员最后一次雇佣记录 - 雇佣信息的雇员状态 = "terminated" - 该人员不存在其他待入职记录
//
// 示例值：6977973225846343172
func (builder *PreHireEmploymentInfoBuilder) RehireEmploymentId(rehireEmploymentId string) *PreHireEmploymentInfoBuilder {
	builder.rehireEmploymentId = rehireEmploymentId
	builder.rehireEmploymentIdFlag = true
	return builder
}

// -| 工时制度 ID ，可通过【查询单个工时制度】接口获取
//
// 示例值：6977973225846343171
func (builder *PreHireEmploymentInfoBuilder) WorkingHoursType(workingHoursType string) *PreHireEmploymentInfoBuilder {
	builder.workingHoursType = workingHoursType
	builder.workingHoursTypeFlag = true
	return builder
}

// 周工作时长v2（单位：小时）
//
// 示例值：8.5
func (builder *PreHireEmploymentInfoBuilder) WeeklyWorkingHoursV2(weeklyWorkingHoursV2 float64) *PreHireEmploymentInfoBuilder {
	builder.weeklyWorkingHoursV2 = weeklyWorkingHoursV2
	builder.weeklyWorkingHoursV2Flag = true
	return builder
}

// 办公地址
//
// 示例值：
func (builder *PreHireEmploymentInfoBuilder) OfficeAddress(officeAddress *Address) *PreHireEmploymentInfoBuilder {
	builder.officeAddress = officeAddress
	builder.officeAddressFlag = true
	return builder
}

// 工作日历
//
// 示例值：6977973225846343173
func (builder *PreHireEmploymentInfoBuilder) WorkingCalendarId(workingCalendarId string) *PreHireEmploymentInfoBuilder {
	builder.workingCalendarId = workingCalendarId
	builder.workingCalendarIdFlag = true
	return builder
}

// 更新时间
//
// 示例值：2023-01-10 10:29
func (builder *PreHireEmploymentInfoBuilder) UpdatedAt(updatedAt string) *PreHireEmploymentInfoBuilder {
	builder.updatedAt = updatedAt
	builder.updatedAtFlag = true
	return builder
}

// 是否疑似重聘
//
// 示例值：false
func (builder *PreHireEmploymentInfoBuilder) SuspectedRehiring(suspectedRehiring bool) *PreHireEmploymentInfoBuilder {
	builder.suspectedRehiring = suspectedRehiring
	builder.suspectedRehiringFlag = true
	return builder
}

// 自定义字段
//
// 示例值：
func (builder *PreHireEmploymentInfoBuilder) CustomFields(customFields []*CustomFieldData) *PreHireEmploymentInfoBuilder {
	builder.customFields = customFields
	builder.customFieldsFlag = true
	return builder
}

func (builder *PreHireEmploymentInfoBuilder) Build() *PreHireEmploymentInfo {
	req := &PreHireEmploymentInfo{}
	if builder.departmentIdFlag {
		req.DepartmentId = &builder.departmentId

	}
	if builder.costCenterRatesFlag {
		req.CostCenterRates = builder.costCenterRates
	}
	if builder.officeLocationIdFlag {
		req.OfficeLocationId = &builder.officeLocationId

	}
	if builder.workLocationIdFlag {
		req.WorkLocationId = &builder.workLocationId

	}
	if builder.workStationFlag {
		req.WorkStation = &builder.workStation

	}
	if builder.workerIdFlag {
		req.WorkerId = &builder.workerId

	}
	if builder.compensationTypeFlag {
		req.CompensationType = builder.compensationType
	}
	if builder.directLeaderIdFlag {
		req.DirectLeaderId = &builder.directLeaderId

	}
	if builder.jobIdFlag {
		req.JobId = &builder.jobId

	}
	if builder.jobFamilyIdFlag {
		req.JobFamilyId = &builder.jobFamilyId

	}
	if builder.jobLevelIdFlag {
		req.JobLevelId = &builder.jobLevelId

	}
	if builder.jobGradeIdFlag {
		req.JobGradeId = &builder.jobGradeId

	}
	if builder.jobTitleFlag {
		req.JobTitle = &builder.jobTitle

	}
	if builder.employeeTypeIdFlag {
		req.EmployeeTypeId = &builder.employeeTypeId

	}
	if builder.employmentTypeFlag {
		req.EmploymentType = &builder.employmentType

	}
	if builder.workEmailFlag {
		req.WorkEmail = &builder.workEmail

	}
	if builder.companyIdFlag {
		req.CompanyId = &builder.companyId

	}
	if builder.socialSecurityCityIdFlag {
		req.SocialSecurityCityId = &builder.socialSecurityCityId

	}
	if builder.nonCompeteCovenantFlag {
		req.NonCompeteCovenant = &builder.nonCompeteCovenant

	}
	if builder.weeklyWorkingHoursFlag {
		req.WeeklyWorkingHours = &builder.weeklyWorkingHours

	}
	if builder.rehireFlag {
		req.Rehire = &builder.rehire

	}
	if builder.rehireEmploymentIdFlag {
		req.RehireEmploymentId = &builder.rehireEmploymentId

	}
	if builder.workingHoursTypeFlag {
		req.WorkingHoursType = &builder.workingHoursType

	}
	if builder.weeklyWorkingHoursV2Flag {
		req.WeeklyWorkingHoursV2 = &builder.weeklyWorkingHoursV2

	}
	if builder.officeAddressFlag {
		req.OfficeAddress = builder.officeAddress
	}
	if builder.workingCalendarIdFlag {
		req.WorkingCalendarId = &builder.workingCalendarId

	}
	if builder.updatedAtFlag {
		req.UpdatedAt = &builder.updatedAt

	}
	if builder.suspectedRehiringFlag {
		req.SuspectedRehiring = &builder.suspectedRehiring

	}
	if builder.customFieldsFlag {
		req.CustomFields = builder.customFields
	}
	return req
}

type PreHireOnboardingInfo struct {
	OfferId              *string           `json:"offer_id,omitempty"`               // Offer id , 可以通过招聘【获取 Offer 列表】接口获取
	OfferHrId            *string           `json:"offer_hr_id,omitempty"`            // Offer hr 的 雇佣 ID
	EntryMode            *string           `json:"entry_mode,omitempty"`             // -| 入职方式，枚举值可查询【获取字段详情】接口获取，按如下参数查询即可： - object_api_name = "pre_hire" - custom_api_name = "onboarding_method"
	OnboardingDate       *string           `json:"onboarding_date,omitempty"`        // 入职日期
	AtsApplicationId     *string           `json:"ats_application_id,omitempty"`     // 招聘投递 ID ，详细信息可以通过招聘【获取投递信息】接口查询获得
	RecruitmentType      *string           `json:"recruitment_type,omitempty"`       // -| 招聘来源 ，枚举值可查询【获取字段详情】接口获取，按如下参数查询即可： - object_api_name = "pre_hire" - custom_api_name = "recruitment_type"
	OnboardingLocationId *string           `json:"onboarding_location_id,omitempty"` // -| 入职地点id , 详细信息可通过【批量查询地点】接口获得
	CompanySponsoredVisa *bool             `json:"company_sponsored_visa,omitempty"` // -| 需要公司办理签证
	OnboardingStatus     *string           `json:"onboarding_status,omitempty"`      // -| 入职状态
	OnboardingTaskList   []*OnboardingTask `json:"onboarding_task_list,omitempty"`   // 入职任务列表
	OnboardingAddress    *Address          `json:"onboarding_address,omitempty"`     // 入职地址
	FlowName             []*I18n           `json:"flow_name,omitempty"`              // 入职流程
}

type PreHireOnboardingInfoBuilder struct {
	offerId                  string // Offer id , 可以通过招聘【获取 Offer 列表】接口获取
	offerIdFlag              bool
	offerHrId                string // Offer hr 的 雇佣 ID
	offerHrIdFlag            bool
	entryMode                string // -| 入职方式，枚举值可查询【获取字段详情】接口获取，按如下参数查询即可： - object_api_name = "pre_hire" - custom_api_name = "onboarding_method"
	entryModeFlag            bool
	onboardingDate           string // 入职日期
	onboardingDateFlag       bool
	atsApplicationId         string // 招聘投递 ID ，详细信息可以通过招聘【获取投递信息】接口查询获得
	atsApplicationIdFlag     bool
	recruitmentType          string // -| 招聘来源 ，枚举值可查询【获取字段详情】接口获取，按如下参数查询即可： - object_api_name = "pre_hire" - custom_api_name = "recruitment_type"
	recruitmentTypeFlag      bool
	onboardingLocationId     string // -| 入职地点id , 详细信息可通过【批量查询地点】接口获得
	onboardingLocationIdFlag bool
	companySponsoredVisa     bool // -| 需要公司办理签证
	companySponsoredVisaFlag bool
	onboardingStatus         string // -| 入职状态
	onboardingStatusFlag     bool
	onboardingTaskList       []*OnboardingTask // 入职任务列表
	onboardingTaskListFlag   bool
	onboardingAddress        *Address // 入职地址
	onboardingAddressFlag    bool
	flowName                 []*I18n // 入职流程
	flowNameFlag             bool
}

func NewPreHireOnboardingInfoBuilder() *PreHireOnboardingInfoBuilder {
	builder := &PreHireOnboardingInfoBuilder{}
	return builder
}

// Offer id , 可以通过招聘【获取 Offer 列表】接口获取
//
// 示例值：7032210902531327521
func (builder *PreHireOnboardingInfoBuilder) OfferId(offerId string) *PreHireOnboardingInfoBuilder {
	builder.offerId = offerId
	builder.offerIdFlag = true
	return builder
}

// Offer hr 的 雇佣 ID
//
// 示例值：7032210902531327521
func (builder *PreHireOnboardingInfoBuilder) OfferHrId(offerHrId string) *PreHireOnboardingInfoBuilder {
	builder.offerHrId = offerHrId
	builder.offerHrIdFlag = true
	return builder
}

// -| 入职方式，枚举值可查询【获取字段详情】接口获取，按如下参数查询即可： - object_api_name = "pre_hire" - custom_api_name = "onboarding_method"
//
// 示例值：onsite
func (builder *PreHireOnboardingInfoBuilder) EntryMode(entryMode string) *PreHireOnboardingInfoBuilder {
	builder.entryMode = entryMode
	builder.entryModeFlag = true
	return builder
}

// 入职日期
//
// 示例值：2022-10-08
func (builder *PreHireOnboardingInfoBuilder) OnboardingDate(onboardingDate string) *PreHireOnboardingInfoBuilder {
	builder.onboardingDate = onboardingDate
	builder.onboardingDateFlag = true
	return builder
}

// 招聘投递 ID ，详细信息可以通过招聘【获取投递信息】接口查询获得
//
// 示例值：7140946969586010376
func (builder *PreHireOnboardingInfoBuilder) AtsApplicationId(atsApplicationId string) *PreHireOnboardingInfoBuilder {
	builder.atsApplicationId = atsApplicationId
	builder.atsApplicationIdFlag = true
	return builder
}

// -| 招聘来源 ，枚举值可查询【获取字段详情】接口获取，按如下参数查询即可： - object_api_name = "pre_hire" - custom_api_name = "recruitment_type"
//
// 示例值：recent_graduates
func (builder *PreHireOnboardingInfoBuilder) RecruitmentType(recruitmentType string) *PreHireOnboardingInfoBuilder {
	builder.recruitmentType = recruitmentType
	builder.recruitmentTypeFlag = true
	return builder
}

// -| 入职地点id , 详细信息可通过【批量查询地点】接口获得
//
// 示例值：6977976687350924832
func (builder *PreHireOnboardingInfoBuilder) OnboardingLocationId(onboardingLocationId string) *PreHireOnboardingInfoBuilder {
	builder.onboardingLocationId = onboardingLocationId
	builder.onboardingLocationIdFlag = true
	return builder
}

// -| 需要公司办理签证
//
// 示例值：true
func (builder *PreHireOnboardingInfoBuilder) CompanySponsoredVisa(companySponsoredVisa bool) *PreHireOnboardingInfoBuilder {
	builder.companySponsoredVisa = companySponsoredVisa
	builder.companySponsoredVisaFlag = true
	return builder
}

// -| 入职状态
//
// 示例值：
func (builder *PreHireOnboardingInfoBuilder) OnboardingStatus(onboardingStatus string) *PreHireOnboardingInfoBuilder {
	builder.onboardingStatus = onboardingStatus
	builder.onboardingStatusFlag = true
	return builder
}

// 入职任务列表
//
// 示例值：
func (builder *PreHireOnboardingInfoBuilder) OnboardingTaskList(onboardingTaskList []*OnboardingTask) *PreHireOnboardingInfoBuilder {
	builder.onboardingTaskList = onboardingTaskList
	builder.onboardingTaskListFlag = true
	return builder
}

// 入职地址
//
// 示例值：
func (builder *PreHireOnboardingInfoBuilder) OnboardingAddress(onboardingAddress *Address) *PreHireOnboardingInfoBuilder {
	builder.onboardingAddress = onboardingAddress
	builder.onboardingAddressFlag = true
	return builder
}

// 入职流程
//
// 示例值：
func (builder *PreHireOnboardingInfoBuilder) FlowName(flowName []*I18n) *PreHireOnboardingInfoBuilder {
	builder.flowName = flowName
	builder.flowNameFlag = true
	return builder
}

func (builder *PreHireOnboardingInfoBuilder) Build() *PreHireOnboardingInfo {
	req := &PreHireOnboardingInfo{}
	if builder.offerIdFlag {
		req.OfferId = &builder.offerId

	}
	if builder.offerHrIdFlag {
		req.OfferHrId = &builder.offerHrId

	}
	if builder.entryModeFlag {
		req.EntryMode = &builder.entryMode

	}
	if builder.onboardingDateFlag {
		req.OnboardingDate = &builder.onboardingDate

	}
	if builder.atsApplicationIdFlag {
		req.AtsApplicationId = &builder.atsApplicationId

	}
	if builder.recruitmentTypeFlag {
		req.RecruitmentType = &builder.recruitmentType

	}
	if builder.onboardingLocationIdFlag {
		req.OnboardingLocationId = &builder.onboardingLocationId

	}
	if builder.companySponsoredVisaFlag {
		req.CompanySponsoredVisa = &builder.companySponsoredVisa

	}
	if builder.onboardingStatusFlag {
		req.OnboardingStatus = &builder.onboardingStatus

	}
	if builder.onboardingTaskListFlag {
		req.OnboardingTaskList = builder.onboardingTaskList
	}
	if builder.onboardingAddressFlag {
		req.OnboardingAddress = builder.onboardingAddress
	}
	if builder.flowNameFlag {
		req.FlowName = builder.flowName
	}
	return req
}

type PreHireProbationInfo struct {
	ProbationStartDate *string `json:"probation_start_date,omitempty"` // 试用期开始日期
	ProbationEndDate   *string `json:"probation_end_date,omitempty"`   // 试用期结束日期
	ProbationPeriod    *int    `json:"probation_period,omitempty"`     // 试用期时长（单位：天）
}

type PreHireProbationInfoBuilder struct {
	probationStartDate     string // 试用期开始日期
	probationStartDateFlag bool
	probationEndDate       string // 试用期结束日期
	probationEndDateFlag   bool
	probationPeriod        int // 试用期时长（单位：天）
	probationPeriodFlag    bool
}

func NewPreHireProbationInfoBuilder() *PreHireProbationInfoBuilder {
	builder := &PreHireProbationInfoBuilder{}
	return builder
}

// 试用期开始日期
//
// 示例值：2022-07-29
func (builder *PreHireProbationInfoBuilder) ProbationStartDate(probationStartDate string) *PreHireProbationInfoBuilder {
	builder.probationStartDate = probationStartDate
	builder.probationStartDateFlag = true
	return builder
}

// 试用期结束日期
//
// 示例值：2023-04-07
func (builder *PreHireProbationInfoBuilder) ProbationEndDate(probationEndDate string) *PreHireProbationInfoBuilder {
	builder.probationEndDate = probationEndDate
	builder.probationEndDateFlag = true
	return builder
}

// 试用期时长（单位：天）
//
// 示例值：6
func (builder *PreHireProbationInfoBuilder) ProbationPeriod(probationPeriod int) *PreHireProbationInfoBuilder {
	builder.probationPeriod = probationPeriod
	builder.probationPeriodFlag = true
	return builder
}

func (builder *PreHireProbationInfoBuilder) Build() *PreHireProbationInfo {
	req := &PreHireProbationInfo{}
	if builder.probationStartDateFlag {
		req.ProbationStartDate = &builder.probationStartDate

	}
	if builder.probationEndDateFlag {
		req.ProbationEndDate = &builder.probationEndDate

	}
	if builder.probationPeriodFlag {
		req.ProbationPeriod = &builder.probationPeriod

	}
	return req
}

type PrehireCreate struct {
	BasicInfo        *BasicInfo        `json:"basic_info,omitempty"`         // 个人信息
	OfferInfo        *OfferInfo        `json:"offer_info,omitempty"`         // 职位信息
	EducationInfo    []*EducationInfo  `json:"education_info,omitempty"`     // 教育经历
	WorkExperience   []*WorkExperience `json:"work_experience,omitempty"`    // 工作经历
	AtsApplicationId *string           `json:"ats_application_id,omitempty"` // 招聘应用ID
}

type PrehireCreateBuilder struct {
	basicInfo            *BasicInfo // 个人信息
	basicInfoFlag        bool
	offerInfo            *OfferInfo // 职位信息
	offerInfoFlag        bool
	educationInfo        []*EducationInfo // 教育经历
	educationInfoFlag    bool
	workExperience       []*WorkExperience // 工作经历
	workExperienceFlag   bool
	atsApplicationId     string // 招聘应用ID
	atsApplicationIdFlag bool
}

func NewPrehireCreateBuilder() *PrehireCreateBuilder {
	builder := &PrehireCreateBuilder{}
	return builder
}

// 个人信息
//
// 示例值：
func (builder *PrehireCreateBuilder) BasicInfo(basicInfo *BasicInfo) *PrehireCreateBuilder {
	builder.basicInfo = basicInfo
	builder.basicInfoFlag = true
	return builder
}

// 职位信息
//
// 示例值：
func (builder *PrehireCreateBuilder) OfferInfo(offerInfo *OfferInfo) *PrehireCreateBuilder {
	builder.offerInfo = offerInfo
	builder.offerInfoFlag = true
	return builder
}

// 教育经历
//
// 示例值：
func (builder *PrehireCreateBuilder) EducationInfo(educationInfo []*EducationInfo) *PrehireCreateBuilder {
	builder.educationInfo = educationInfo
	builder.educationInfoFlag = true
	return builder
}

// 工作经历
//
// 示例值：
func (builder *PrehireCreateBuilder) WorkExperience(workExperience []*WorkExperience) *PrehireCreateBuilder {
	builder.workExperience = workExperience
	builder.workExperienceFlag = true
	return builder
}

// 招聘应用ID
//
// 示例值：7140946969586010376
func (builder *PrehireCreateBuilder) AtsApplicationId(atsApplicationId string) *PrehireCreateBuilder {
	builder.atsApplicationId = atsApplicationId
	builder.atsApplicationIdFlag = true
	return builder
}

func (builder *PrehireCreateBuilder) Build() *PrehireCreate {
	req := &PrehireCreate{}
	if builder.basicInfoFlag {
		req.BasicInfo = builder.basicInfo
	}
	if builder.offerInfoFlag {
		req.OfferInfo = builder.offerInfo
	}
	if builder.educationInfoFlag {
		req.EducationInfo = builder.educationInfo
	}
	if builder.workExperienceFlag {
		req.WorkExperience = builder.workExperience
	}
	if builder.atsApplicationIdFlag {
		req.AtsApplicationId = &builder.atsApplicationId

	}
	return req
}

type PrehireUpdate struct {
	BasicInfoUpdate      *BasicInfoUpdate `json:"basic_info_update,omitempty"`      // 更新个人（person）信息
	OfferInfoUpdate      *OfferInfoUpdate `json:"offer_info_update,omitempty"`      // 更新待入职（prehire）信息
	StandardUpdateFields []string         `json:"standard_update_fields,omitempty"` // 指定需要更新的系统字段，只支持最多下钻一层，格式如下：; - basic_info_update字段：basic_info_update.name（对name整体进行覆盖更新）；basic_info_update.emails（对邮箱整体进行更新）; - offer_info_update字段：offer_info_update.onboarding_method; - 招聘ID：ats_application_id
	CustomUpdateFields   []string         `json:"custom_update_fields,omitempty"`   // 指定需要更新的PreHire对象上的自定义字段，格式如下：; - custom_field1__c
}

type PrehireUpdateBuilder struct {
	basicInfoUpdate          *BasicInfoUpdate // 更新个人（person）信息
	basicInfoUpdateFlag      bool
	offerInfoUpdate          *OfferInfoUpdate // 更新待入职（prehire）信息
	offerInfoUpdateFlag      bool
	standardUpdateFields     []string // 指定需要更新的系统字段，只支持最多下钻一层，格式如下：; - basic_info_update字段：basic_info_update.name（对name整体进行覆盖更新）；basic_info_update.emails（对邮箱整体进行更新）; - offer_info_update字段：offer_info_update.onboarding_method; - 招聘ID：ats_application_id
	standardUpdateFieldsFlag bool
	customUpdateFields       []string // 指定需要更新的PreHire对象上的自定义字段，格式如下：; - custom_field1__c
	customUpdateFieldsFlag   bool
}

func NewPrehireUpdateBuilder() *PrehireUpdateBuilder {
	builder := &PrehireUpdateBuilder{}
	return builder
}

// 更新个人（person）信息
//
// 示例值：
func (builder *PrehireUpdateBuilder) BasicInfoUpdate(basicInfoUpdate *BasicInfoUpdate) *PrehireUpdateBuilder {
	builder.basicInfoUpdate = basicInfoUpdate
	builder.basicInfoUpdateFlag = true
	return builder
}

// 更新待入职（prehire）信息
//
// 示例值：
func (builder *PrehireUpdateBuilder) OfferInfoUpdate(offerInfoUpdate *OfferInfoUpdate) *PrehireUpdateBuilder {
	builder.offerInfoUpdate = offerInfoUpdate
	builder.offerInfoUpdateFlag = true
	return builder
}

// 指定需要更新的系统字段，只支持最多下钻一层，格式如下：; - basic_info_update字段：basic_info_update.name（对name整体进行覆盖更新）；basic_info_update.emails（对邮箱整体进行更新）; - offer_info_update字段：offer_info_update.onboarding_method; - 招聘ID：ats_application_id
//
// 示例值：\["basic_info_update.names","offer_info_update.onboarding_method"\]
func (builder *PrehireUpdateBuilder) StandardUpdateFields(standardUpdateFields []string) *PrehireUpdateBuilder {
	builder.standardUpdateFields = standardUpdateFields
	builder.standardUpdateFieldsFlag = true
	return builder
}

// 指定需要更新的PreHire对象上的自定义字段，格式如下：; - custom_field1__c
//
// 示例值：\["custom_field1__c","custom_field2__c"\]
func (builder *PrehireUpdateBuilder) CustomUpdateFields(customUpdateFields []string) *PrehireUpdateBuilder {
	builder.customUpdateFields = customUpdateFields
	builder.customUpdateFieldsFlag = true
	return builder
}

func (builder *PrehireUpdateBuilder) Build() *PrehireUpdate {
	req := &PrehireUpdate{}
	if builder.basicInfoUpdateFlag {
		req.BasicInfoUpdate = builder.basicInfoUpdate
	}
	if builder.offerInfoUpdateFlag {
		req.OfferInfoUpdate = builder.offerInfoUpdate
	}
	if builder.standardUpdateFieldsFlag {
		req.StandardUpdateFields = builder.standardUpdateFields
	}
	if builder.customUpdateFieldsFlag {
		req.CustomUpdateFields = builder.customUpdateFields
	}
	return req
}

type ProbationInfo struct {
	EmploymentId             *string            `json:"employment_id,omitempty"`               // 雇佣 ID
	ProbationId              *string            `json:"probation_id,omitempty"`                // 试用期信息 ID
	ProbationStartDate       *string            `json:"probation_start_date,omitempty"`        // 试用期开始日期
	ProbationExpectedEndDate *string            `json:"probation_expected_end_date,omitempty"` // 试用期预计结束日期
	ActualProbationEndDate   *string            `json:"actual_probation_end_date,omitempty"`   // 试用期实际结束日期
	InitiatingTime           *string            `json:"initiating_time,omitempty"`             // 转正发起日期
	SubmissionType           *Enum              `json:"submission_type,omitempty"`             // 发起方
	InitiatorId              *string            `json:"initiator_id,omitempty"`                // 转正发起人的雇佣 ID，当系统发起转正时该字段为空
	ProbationStatus          *Enum              `json:"probation_status,omitempty"`            // 试用期状态
	SelfReview               *string            `json:"self_review,omitempty"`                 // 员工自评
	Notes                    *string            `json:"notes,omitempty"`                       // 备注
	ProcessId                *string            `json:"process_id,omitempty"`                  // 流程实例 ID
	ConvertedViaBpm          *bool              `json:"converted_via_bpm,omitempty"`           // 是否通过 BPM 转正
	CustomFields             []*CustomFieldData `json:"custom_fields,omitempty"`               // 自定义字段
	FinalAssessmentStatus    *Enum              `json:"final_assessment_status,omitempty"`     // 试用期考核最终状态
	FinalAssessmentResult    *Enum              `json:"final_assessment_result,omitempty"`     // 试用期考核最终结果
	FinalAssessmentScore     *float64           `json:"final_assessment_score,omitempty"`      // 试用期考核最终得分
	FinalAssessmentGrade     *Enum              `json:"final_assessment_grade,omitempty"`      // 试用期考核最终等级
	FinalAssessmentComment   *string            `json:"final_assessment_comment,omitempty"`    // 试用期考核最终评语
	FinalAssessmentDetail    *string            `json:"final_assessment_detail,omitempty"`     // 最终考核结果页面超链接
	Assessments              []*Assessment      `json:"assessments,omitempty"`                 // 试用期考核结果列表
}

type ProbationInfoBuilder struct {
	employmentId                 string // 雇佣 ID
	employmentIdFlag             bool
	probationId                  string // 试用期信息 ID
	probationIdFlag              bool
	probationStartDate           string // 试用期开始日期
	probationStartDateFlag       bool
	probationExpectedEndDate     string // 试用期预计结束日期
	probationExpectedEndDateFlag bool
	actualProbationEndDate       string // 试用期实际结束日期
	actualProbationEndDateFlag   bool
	initiatingTime               string // 转正发起日期
	initiatingTimeFlag           bool
	submissionType               *Enum // 发起方
	submissionTypeFlag           bool
	initiatorId                  string // 转正发起人的雇佣 ID，当系统发起转正时该字段为空
	initiatorIdFlag              bool
	probationStatus              *Enum // 试用期状态
	probationStatusFlag          bool
	selfReview                   string // 员工自评
	selfReviewFlag               bool
	notes                        string // 备注
	notesFlag                    bool
	processId                    string // 流程实例 ID
	processIdFlag                bool
	convertedViaBpm              bool // 是否通过 BPM 转正
	convertedViaBpmFlag          bool
	customFields                 []*CustomFieldData // 自定义字段
	customFieldsFlag             bool
	finalAssessmentStatus        *Enum // 试用期考核最终状态
	finalAssessmentStatusFlag    bool
	finalAssessmentResult        *Enum // 试用期考核最终结果
	finalAssessmentResultFlag    bool
	finalAssessmentScore         float64 // 试用期考核最终得分
	finalAssessmentScoreFlag     bool
	finalAssessmentGrade         *Enum // 试用期考核最终等级
	finalAssessmentGradeFlag     bool
	finalAssessmentComment       string // 试用期考核最终评语
	finalAssessmentCommentFlag   bool
	finalAssessmentDetail        string // 最终考核结果页面超链接
	finalAssessmentDetailFlag    bool
	assessments                  []*Assessment // 试用期考核结果列表
	assessmentsFlag              bool
}

func NewProbationInfoBuilder() *ProbationInfoBuilder {
	builder := &ProbationInfoBuilder{}
	return builder
}

// 雇佣 ID
//
// 示例值：6893014062142064135
func (builder *ProbationInfoBuilder) EmploymentId(employmentId string) *ProbationInfoBuilder {
	builder.employmentId = employmentId
	builder.employmentIdFlag = true
	return builder
}

// 试用期信息 ID
//
// 示例值：6893014062142064132
func (builder *ProbationInfoBuilder) ProbationId(probationId string) *ProbationInfoBuilder {
	builder.probationId = probationId
	builder.probationIdFlag = true
	return builder
}

// 试用期开始日期
//
// 示例值：2022-05-20
func (builder *ProbationInfoBuilder) ProbationStartDate(probationStartDate string) *ProbationInfoBuilder {
	builder.probationStartDate = probationStartDate
	builder.probationStartDateFlag = true
	return builder
}

// 试用期预计结束日期
//
// 示例值：2022-05-28
func (builder *ProbationInfoBuilder) ProbationExpectedEndDate(probationExpectedEndDate string) *ProbationInfoBuilder {
	builder.probationExpectedEndDate = probationExpectedEndDate
	builder.probationExpectedEndDateFlag = true
	return builder
}

// 试用期实际结束日期
//
// 示例值：2022-06-28
func (builder *ProbationInfoBuilder) ActualProbationEndDate(actualProbationEndDate string) *ProbationInfoBuilder {
	builder.actualProbationEndDate = actualProbationEndDate
	builder.actualProbationEndDateFlag = true
	return builder
}

// 转正发起日期
//
// 示例值：2022-07-28
func (builder *ProbationInfoBuilder) InitiatingTime(initiatingTime string) *ProbationInfoBuilder {
	builder.initiatingTime = initiatingTime
	builder.initiatingTimeFlag = true
	return builder
}

// 发起方
//
// 示例值：hr_submission
func (builder *ProbationInfoBuilder) SubmissionType(submissionType *Enum) *ProbationInfoBuilder {
	builder.submissionType = submissionType
	builder.submissionTypeFlag = true
	return builder
}

// 转正发起人的雇佣 ID，当系统发起转正时该字段为空
//
// 示例值：6893014062142061135
func (builder *ProbationInfoBuilder) InitiatorId(initiatorId string) *ProbationInfoBuilder {
	builder.initiatorId = initiatorId
	builder.initiatorIdFlag = true
	return builder
}

// 试用期状态
//
// 示例值：converted
func (builder *ProbationInfoBuilder) ProbationStatus(probationStatus *Enum) *ProbationInfoBuilder {
	builder.probationStatus = probationStatus
	builder.probationStatusFlag = true
	return builder
}

// 员工自评
//
// 示例值：符合预期
func (builder *ProbationInfoBuilder) SelfReview(selfReview string) *ProbationInfoBuilder {
	builder.selfReview = selfReview
	builder.selfReviewFlag = true
	return builder
}

// 备注
//
// 示例值：高潜
func (builder *ProbationInfoBuilder) Notes(notes string) *ProbationInfoBuilder {
	builder.notes = notes
	builder.notesFlag = true
	return builder
}

// 流程实例 ID
//
// 示例值：6893014062142164135
func (builder *ProbationInfoBuilder) ProcessId(processId string) *ProbationInfoBuilder {
	builder.processId = processId
	builder.processIdFlag = true
	return builder
}

// 是否通过 BPM 转正
//
// 示例值：false
func (builder *ProbationInfoBuilder) ConvertedViaBpm(convertedViaBpm bool) *ProbationInfoBuilder {
	builder.convertedViaBpm = convertedViaBpm
	builder.convertedViaBpmFlag = true
	return builder
}

// 自定义字段
//
// 示例值：
func (builder *ProbationInfoBuilder) CustomFields(customFields []*CustomFieldData) *ProbationInfoBuilder {
	builder.customFields = customFields
	builder.customFieldsFlag = true
	return builder
}

// 试用期考核最终状态
//
// 示例值：completed
func (builder *ProbationInfoBuilder) FinalAssessmentStatus(finalAssessmentStatus *Enum) *ProbationInfoBuilder {
	builder.finalAssessmentStatus = finalAssessmentStatus
	builder.finalAssessmentStatusFlag = true
	return builder
}

// 试用期考核最终结果
//
// 示例值：approved
func (builder *ProbationInfoBuilder) FinalAssessmentResult(finalAssessmentResult *Enum) *ProbationInfoBuilder {
	builder.finalAssessmentResult = finalAssessmentResult
	builder.finalAssessmentResultFlag = true
	return builder
}

// 试用期考核最终得分
//
// 示例值：99.9
func (builder *ProbationInfoBuilder) FinalAssessmentScore(finalAssessmentScore float64) *ProbationInfoBuilder {
	builder.finalAssessmentScore = finalAssessmentScore
	builder.finalAssessmentScoreFlag = true
	return builder
}

// 试用期考核最终等级
//
// 示例值：grade_a
func (builder *ProbationInfoBuilder) FinalAssessmentGrade(finalAssessmentGrade *Enum) *ProbationInfoBuilder {
	builder.finalAssessmentGrade = finalAssessmentGrade
	builder.finalAssessmentGradeFlag = true
	return builder
}

// 试用期考核最终评语
//
// 示例值：超出预期
func (builder *ProbationInfoBuilder) FinalAssessmentComment(finalAssessmentComment string) *ProbationInfoBuilder {
	builder.finalAssessmentComment = finalAssessmentComment
	builder.finalAssessmentCommentFlag = true
	return builder
}

// 最终考核结果页面超链接
//
// 示例值：https://qwe112233.feishuapp.bytedance.net/ae/ui/apps//122265873393330/recordPages/1/records/1767139312?objectId=17661180522543&recordPageId=173330728118312
func (builder *ProbationInfoBuilder) FinalAssessmentDetail(finalAssessmentDetail string) *ProbationInfoBuilder {
	builder.finalAssessmentDetail = finalAssessmentDetail
	builder.finalAssessmentDetailFlag = true
	return builder
}

// 试用期考核结果列表
//
// 示例值：
func (builder *ProbationInfoBuilder) Assessments(assessments []*Assessment) *ProbationInfoBuilder {
	builder.assessments = assessments
	builder.assessmentsFlag = true
	return builder
}

func (builder *ProbationInfoBuilder) Build() *ProbationInfo {
	req := &ProbationInfo{}
	if builder.employmentIdFlag {
		req.EmploymentId = &builder.employmentId

	}
	if builder.probationIdFlag {
		req.ProbationId = &builder.probationId

	}
	if builder.probationStartDateFlag {
		req.ProbationStartDate = &builder.probationStartDate

	}
	if builder.probationExpectedEndDateFlag {
		req.ProbationExpectedEndDate = &builder.probationExpectedEndDate

	}
	if builder.actualProbationEndDateFlag {
		req.ActualProbationEndDate = &builder.actualProbationEndDate

	}
	if builder.initiatingTimeFlag {
		req.InitiatingTime = &builder.initiatingTime

	}
	if builder.submissionTypeFlag {
		req.SubmissionType = builder.submissionType
	}
	if builder.initiatorIdFlag {
		req.InitiatorId = &builder.initiatorId

	}
	if builder.probationStatusFlag {
		req.ProbationStatus = builder.probationStatus
	}
	if builder.selfReviewFlag {
		req.SelfReview = &builder.selfReview

	}
	if builder.notesFlag {
		req.Notes = &builder.notes

	}
	if builder.processIdFlag {
		req.ProcessId = &builder.processId

	}
	if builder.convertedViaBpmFlag {
		req.ConvertedViaBpm = &builder.convertedViaBpm

	}
	if builder.customFieldsFlag {
		req.CustomFields = builder.customFields
	}
	if builder.finalAssessmentStatusFlag {
		req.FinalAssessmentStatus = builder.finalAssessmentStatus
	}
	if builder.finalAssessmentResultFlag {
		req.FinalAssessmentResult = builder.finalAssessmentResult
	}
	if builder.finalAssessmentScoreFlag {
		req.FinalAssessmentScore = &builder.finalAssessmentScore

	}
	if builder.finalAssessmentGradeFlag {
		req.FinalAssessmentGrade = builder.finalAssessmentGrade
	}
	if builder.finalAssessmentCommentFlag {
		req.FinalAssessmentComment = &builder.finalAssessmentComment

	}
	if builder.finalAssessmentDetailFlag {
		req.FinalAssessmentDetail = &builder.finalAssessmentDetail

	}
	if builder.assessmentsFlag {
		req.Assessments = builder.assessments
	}
	return req
}

type ProbationInfoForSubmit struct {
	EmploymentId             *string            `json:"employment_id,omitempty"`               // 雇佣 ID
	ProbationId              *string            `json:"probation_id,omitempty"`                // 试用期信息 ID
	ProbationStartDate       *string            `json:"probation_start_date,omitempty"`        // 试用期开始日期
	ProbationExpectedEndDate *string            `json:"probation_expected_end_date,omitempty"` // 试用期预计结束日期
	ActualProbationEndDate   *string            `json:"actual_probation_end_date,omitempty"`   // 试用期实际结束日期
	InitiatingTime           *string            `json:"initiating_time,omitempty"`             // 转正发起日期
	SubmissionType           *Enum              `json:"submission_type,omitempty"`             // 发起方
	InitiatorId              *string            `json:"initiator_id,omitempty"`                // 转正发起人的雇佣 ID，当系统发起转正时该字段为空
	ProbationStatus          *Enum              `json:"probation_status,omitempty"`            // 试用期状态
	SelfReview               *string            `json:"self_review,omitempty"`                 // 员工自评
	Notes                    *string            `json:"notes,omitempty"`                       // 备注
	ProcessId                *string            `json:"process_id,omitempty"`                  // 流程实例 ID
	ConvertedViaBpm          *bool              `json:"converted_via_bpm,omitempty"`           // 是否通过 BPM 转正
	CustomFields             []*CustomFieldData `json:"custom_fields,omitempty"`               // 自定义字段
	FinalAssessmentStatus    *Enum              `json:"final_assessment_status,omitempty"`     // 试用期考核最终状态
	FinalAssessmentResult    *Enum              `json:"final_assessment_result,omitempty"`     // 试用期考核最终结果
	FinalAssessmentScore     *float64           `json:"final_assessment_score,omitempty"`      // 试用期考核最终得分
	FinalAssessmentGrade     *Enum              `json:"final_assessment_grade,omitempty"`      // 试用期考核最终等级
	FinalAssessmentComment   *string            `json:"final_assessment_comment,omitempty"`    // 试用期考核最终评语
	FinalAssessmentDetail    *string            `json:"final_assessment_detail,omitempty"`     // 最终考核结果页面超链接
}

type ProbationInfoForSubmitBuilder struct {
	employmentId                 string // 雇佣 ID
	employmentIdFlag             bool
	probationId                  string // 试用期信息 ID
	probationIdFlag              bool
	probationStartDate           string // 试用期开始日期
	probationStartDateFlag       bool
	probationExpectedEndDate     string // 试用期预计结束日期
	probationExpectedEndDateFlag bool
	actualProbationEndDate       string // 试用期实际结束日期
	actualProbationEndDateFlag   bool
	initiatingTime               string // 转正发起日期
	initiatingTimeFlag           bool
	submissionType               *Enum // 发起方
	submissionTypeFlag           bool
	initiatorId                  string // 转正发起人的雇佣 ID，当系统发起转正时该字段为空
	initiatorIdFlag              bool
	probationStatus              *Enum // 试用期状态
	probationStatusFlag          bool
	selfReview                   string // 员工自评
	selfReviewFlag               bool
	notes                        string // 备注
	notesFlag                    bool
	processId                    string // 流程实例 ID
	processIdFlag                bool
	convertedViaBpm              bool // 是否通过 BPM 转正
	convertedViaBpmFlag          bool
	customFields                 []*CustomFieldData // 自定义字段
	customFieldsFlag             bool
	finalAssessmentStatus        *Enum // 试用期考核最终状态
	finalAssessmentStatusFlag    bool
	finalAssessmentResult        *Enum // 试用期考核最终结果
	finalAssessmentResultFlag    bool
	finalAssessmentScore         float64 // 试用期考核最终得分
	finalAssessmentScoreFlag     bool
	finalAssessmentGrade         *Enum // 试用期考核最终等级
	finalAssessmentGradeFlag     bool
	finalAssessmentComment       string // 试用期考核最终评语
	finalAssessmentCommentFlag   bool
	finalAssessmentDetail        string // 最终考核结果页面超链接
	finalAssessmentDetailFlag    bool
}

func NewProbationInfoForSubmitBuilder() *ProbationInfoForSubmitBuilder {
	builder := &ProbationInfoForSubmitBuilder{}
	return builder
}

// 雇佣 ID
//
// 示例值：6893014062142064135
func (builder *ProbationInfoForSubmitBuilder) EmploymentId(employmentId string) *ProbationInfoForSubmitBuilder {
	builder.employmentId = employmentId
	builder.employmentIdFlag = true
	return builder
}

// 试用期信息 ID
//
// 示例值：6893014062142064132
func (builder *ProbationInfoForSubmitBuilder) ProbationId(probationId string) *ProbationInfoForSubmitBuilder {
	builder.probationId = probationId
	builder.probationIdFlag = true
	return builder
}

// 试用期开始日期
//
// 示例值：2022-05-20
func (builder *ProbationInfoForSubmitBuilder) ProbationStartDate(probationStartDate string) *ProbationInfoForSubmitBuilder {
	builder.probationStartDate = probationStartDate
	builder.probationStartDateFlag = true
	return builder
}

// 试用期预计结束日期
//
// 示例值：2022-05-28
func (builder *ProbationInfoForSubmitBuilder) ProbationExpectedEndDate(probationExpectedEndDate string) *ProbationInfoForSubmitBuilder {
	builder.probationExpectedEndDate = probationExpectedEndDate
	builder.probationExpectedEndDateFlag = true
	return builder
}

// 试用期实际结束日期
//
// 示例值：2022-06-28
func (builder *ProbationInfoForSubmitBuilder) ActualProbationEndDate(actualProbationEndDate string) *ProbationInfoForSubmitBuilder {
	builder.actualProbationEndDate = actualProbationEndDate
	builder.actualProbationEndDateFlag = true
	return builder
}

// 转正发起日期
//
// 示例值：2022-07-28
func (builder *ProbationInfoForSubmitBuilder) InitiatingTime(initiatingTime string) *ProbationInfoForSubmitBuilder {
	builder.initiatingTime = initiatingTime
	builder.initiatingTimeFlag = true
	return builder
}

// 发起方
//
// 示例值：hr_submission
func (builder *ProbationInfoForSubmitBuilder) SubmissionType(submissionType *Enum) *ProbationInfoForSubmitBuilder {
	builder.submissionType = submissionType
	builder.submissionTypeFlag = true
	return builder
}

// 转正发起人的雇佣 ID，当系统发起转正时该字段为空
//
// 示例值：6893014062142061135
func (builder *ProbationInfoForSubmitBuilder) InitiatorId(initiatorId string) *ProbationInfoForSubmitBuilder {
	builder.initiatorId = initiatorId
	builder.initiatorIdFlag = true
	return builder
}

// 试用期状态
//
// 示例值：converted
func (builder *ProbationInfoForSubmitBuilder) ProbationStatus(probationStatus *Enum) *ProbationInfoForSubmitBuilder {
	builder.probationStatus = probationStatus
	builder.probationStatusFlag = true
	return builder
}

// 员工自评
//
// 示例值：符合预期
func (builder *ProbationInfoForSubmitBuilder) SelfReview(selfReview string) *ProbationInfoForSubmitBuilder {
	builder.selfReview = selfReview
	builder.selfReviewFlag = true
	return builder
}

// 备注
//
// 示例值：高潜
func (builder *ProbationInfoForSubmitBuilder) Notes(notes string) *ProbationInfoForSubmitBuilder {
	builder.notes = notes
	builder.notesFlag = true
	return builder
}

// 流程实例 ID
//
// 示例值：6893014062142164135
func (builder *ProbationInfoForSubmitBuilder) ProcessId(processId string) *ProbationInfoForSubmitBuilder {
	builder.processId = processId
	builder.processIdFlag = true
	return builder
}

// 是否通过 BPM 转正
//
// 示例值：false
func (builder *ProbationInfoForSubmitBuilder) ConvertedViaBpm(convertedViaBpm bool) *ProbationInfoForSubmitBuilder {
	builder.convertedViaBpm = convertedViaBpm
	builder.convertedViaBpmFlag = true
	return builder
}

// 自定义字段
//
// 示例值：
func (builder *ProbationInfoForSubmitBuilder) CustomFields(customFields []*CustomFieldData) *ProbationInfoForSubmitBuilder {
	builder.customFields = customFields
	builder.customFieldsFlag = true
	return builder
}

// 试用期考核最终状态
//
// 示例值：completed
func (builder *ProbationInfoForSubmitBuilder) FinalAssessmentStatus(finalAssessmentStatus *Enum) *ProbationInfoForSubmitBuilder {
	builder.finalAssessmentStatus = finalAssessmentStatus
	builder.finalAssessmentStatusFlag = true
	return builder
}

// 试用期考核最终结果
//
// 示例值：approved
func (builder *ProbationInfoForSubmitBuilder) FinalAssessmentResult(finalAssessmentResult *Enum) *ProbationInfoForSubmitBuilder {
	builder.finalAssessmentResult = finalAssessmentResult
	builder.finalAssessmentResultFlag = true
	return builder
}

// 试用期考核最终得分
//
// 示例值：99.9
func (builder *ProbationInfoForSubmitBuilder) FinalAssessmentScore(finalAssessmentScore float64) *ProbationInfoForSubmitBuilder {
	builder.finalAssessmentScore = finalAssessmentScore
	builder.finalAssessmentScoreFlag = true
	return builder
}

// 试用期考核最终等级
//
// 示例值：grade_a
func (builder *ProbationInfoForSubmitBuilder) FinalAssessmentGrade(finalAssessmentGrade *Enum) *ProbationInfoForSubmitBuilder {
	builder.finalAssessmentGrade = finalAssessmentGrade
	builder.finalAssessmentGradeFlag = true
	return builder
}

// 试用期考核最终评语
//
// 示例值：超出预期
func (builder *ProbationInfoForSubmitBuilder) FinalAssessmentComment(finalAssessmentComment string) *ProbationInfoForSubmitBuilder {
	builder.finalAssessmentComment = finalAssessmentComment
	builder.finalAssessmentCommentFlag = true
	return builder
}

// 最终考核结果页面超链接
//
// 示例值：暂无示例
func (builder *ProbationInfoForSubmitBuilder) FinalAssessmentDetail(finalAssessmentDetail string) *ProbationInfoForSubmitBuilder {
	builder.finalAssessmentDetail = finalAssessmentDetail
	builder.finalAssessmentDetailFlag = true
	return builder
}

func (builder *ProbationInfoForSubmitBuilder) Build() *ProbationInfoForSubmit {
	req := &ProbationInfoForSubmit{}
	if builder.employmentIdFlag {
		req.EmploymentId = &builder.employmentId

	}
	if builder.probationIdFlag {
		req.ProbationId = &builder.probationId

	}
	if builder.probationStartDateFlag {
		req.ProbationStartDate = &builder.probationStartDate

	}
	if builder.probationExpectedEndDateFlag {
		req.ProbationExpectedEndDate = &builder.probationExpectedEndDate

	}
	if builder.actualProbationEndDateFlag {
		req.ActualProbationEndDate = &builder.actualProbationEndDate

	}
	if builder.initiatingTimeFlag {
		req.InitiatingTime = &builder.initiatingTime

	}
	if builder.submissionTypeFlag {
		req.SubmissionType = builder.submissionType
	}
	if builder.initiatorIdFlag {
		req.InitiatorId = &builder.initiatorId

	}
	if builder.probationStatusFlag {
		req.ProbationStatus = builder.probationStatus
	}
	if builder.selfReviewFlag {
		req.SelfReview = &builder.selfReview

	}
	if builder.notesFlag {
		req.Notes = &builder.notes

	}
	if builder.processIdFlag {
		req.ProcessId = &builder.processId

	}
	if builder.convertedViaBpmFlag {
		req.ConvertedViaBpm = &builder.convertedViaBpm

	}
	if builder.customFieldsFlag {
		req.CustomFields = builder.customFields
	}
	if builder.finalAssessmentStatusFlag {
		req.FinalAssessmentStatus = builder.finalAssessmentStatus
	}
	if builder.finalAssessmentResultFlag {
		req.FinalAssessmentResult = builder.finalAssessmentResult
	}
	if builder.finalAssessmentScoreFlag {
		req.FinalAssessmentScore = &builder.finalAssessmentScore

	}
	if builder.finalAssessmentGradeFlag {
		req.FinalAssessmentGrade = builder.finalAssessmentGrade
	}
	if builder.finalAssessmentCommentFlag {
		req.FinalAssessmentComment = &builder.finalAssessmentComment

	}
	if builder.finalAssessmentDetailFlag {
		req.FinalAssessmentDetail = &builder.finalAssessmentDetail

	}
	return req
}

type ProcessApprover struct {
	Status         *int                   `json:"status,omitempty"`          // 将审批任务修改为同意/拒绝
	UserId         *string                `json:"user_id,omitempty"`         // 按user_id_type类型传递。如果system_approval为false，则必填。否则非必填。
	SystemApproval *bool                  `json:"system_approval,omitempty"` // true - 使用系统身份审批
	Reason         *string                `json:"reason,omitempty"`          // 通过原因，长度限制为500
	FieldValues    []*ProcessFormVariable `json:"field_values,omitempty"`    // 表单字段值
}

type ProcessApproverBuilder struct {
	status             int // 将审批任务修改为同意/拒绝
	statusFlag         bool
	userId             string // 按user_id_type类型传递。如果system_approval为false，则必填。否则非必填。
	userIdFlag         bool
	systemApproval     bool // true - 使用系统身份审批
	systemApprovalFlag bool
	reason             string // 通过原因，长度限制为500
	reasonFlag         bool
	fieldValues        []*ProcessFormVariable // 表单字段值
	fieldValuesFlag    bool
}

func NewProcessApproverBuilder() *ProcessApproverBuilder {
	builder := &ProcessApproverBuilder{}
	return builder
}

// 将审批任务修改为同意/拒绝
//
// 示例值：2
func (builder *ProcessApproverBuilder) Status(status int) *ProcessApproverBuilder {
	builder.status = status
	builder.statusFlag = true
	return builder
}

// 按user_id_type类型传递。如果system_approval为false，则必填。否则非必填。
//
// 示例值：ou_91791271921729102012
func (builder *ProcessApproverBuilder) UserId(userId string) *ProcessApproverBuilder {
	builder.userId = userId
	builder.userIdFlag = true
	return builder
}

// true - 使用系统身份审批
//
// 示例值：true
func (builder *ProcessApproverBuilder) SystemApproval(systemApproval bool) *ProcessApproverBuilder {
	builder.systemApproval = systemApproval
	builder.systemApprovalFlag = true
	return builder
}

// 通过原因，长度限制为500
//
// 示例值：原因自定义字符串
func (builder *ProcessApproverBuilder) Reason(reason string) *ProcessApproverBuilder {
	builder.reason = reason
	builder.reasonFlag = true
	return builder
}

// 表单字段值
//
// 示例值：原因自定义字符串
func (builder *ProcessApproverBuilder) FieldValues(fieldValues []*ProcessFormVariable) *ProcessApproverBuilder {
	builder.fieldValues = fieldValues
	builder.fieldValuesFlag = true
	return builder
}

func (builder *ProcessApproverBuilder) Build() *ProcessApprover {
	req := &ProcessApprover{}
	if builder.statusFlag {
		req.Status = &builder.status

	}
	if builder.userIdFlag {
		req.UserId = &builder.userId

	}
	if builder.systemApprovalFlag {
		req.SystemApproval = &builder.systemApproval

	}
	if builder.reasonFlag {
		req.Reason = &builder.reason

	}
	if builder.fieldValuesFlag {
		req.FieldValues = builder.fieldValues
	}
	return req
}

type ProcessAbstractItem struct {
	Name  *DataengineI18n `json:"name,omitempty"`  // 摘要标题
	Value *DataengineI18n `json:"value,omitempty"` // 摘要值
}

type ProcessAbstractItemBuilder struct {
	name      *DataengineI18n // 摘要标题
	nameFlag  bool
	value     *DataengineI18n // 摘要值
	valueFlag bool
}

func NewProcessAbstractItemBuilder() *ProcessAbstractItemBuilder {
	builder := &ProcessAbstractItemBuilder{}
	return builder
}

// 摘要标题
//
// 示例值：
func (builder *ProcessAbstractItemBuilder) Name(name *DataengineI18n) *ProcessAbstractItemBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}

// 摘要值
//
// 示例值：
func (builder *ProcessAbstractItemBuilder) Value(value *DataengineI18n) *ProcessAbstractItemBuilder {
	builder.value = value
	builder.valueFlag = true
	return builder
}

func (builder *ProcessAbstractItemBuilder) Build() *ProcessAbstractItem {
	req := &ProcessAbstractItem{}
	if builder.nameFlag {
		req.Name = builder.name
	}
	if builder.valueFlag {
		req.Value = builder.value
	}
	return req
}

type ProcessCcItem struct {
	ApproverId       *string         `json:"approver_id,omitempty"`        // 单据ID
	Links            *ProcessLink    `json:"links,omitempty"`              // 单据地址
	OperatorId       *string         `json:"operator_id,omitempty"`        // 抄送人ID
	OperatorName     *DataengineI18n `json:"operator_name,omitempty"`      // 抄送人姓名
	NodeName         *DataengineI18n `json:"node_name,omitempty"`          // 节点名称
	CreateTime       *string         `json:"create_time,omitempty"`        // 抄送时间，Unix毫秒时间戳
	NodeDefinitionId *string         `json:"node_definition_id,omitempty"` // 节点定义ID（注：在回退场景，同一个节点会对应多个节点实例）
}

type ProcessCcItemBuilder struct {
	approverId           string // 单据ID
	approverIdFlag       bool
	links                *ProcessLink // 单据地址
	linksFlag            bool
	operatorId           string // 抄送人ID
	operatorIdFlag       bool
	operatorName         *DataengineI18n // 抄送人姓名
	operatorNameFlag     bool
	nodeName             *DataengineI18n // 节点名称
	nodeNameFlag         bool
	createTime           string // 抄送时间，Unix毫秒时间戳
	createTimeFlag       bool
	nodeDefinitionId     string // 节点定义ID（注：在回退场景，同一个节点会对应多个节点实例）
	nodeDefinitionIdFlag bool
}

func NewProcessCcItemBuilder() *ProcessCcItemBuilder {
	builder := &ProcessCcItemBuilder{}
	return builder
}

// 单据ID
//
// 示例值：7278949005675988535
func (builder *ProcessCcItemBuilder) ApproverId(approverId string) *ProcessCcItemBuilder {
	builder.approverId = approverId
	builder.approverIdFlag = true
	return builder
}

// 单据地址
//
// 示例值：
func (builder *ProcessCcItemBuilder) Links(links *ProcessLink) *ProcessCcItemBuilder {
	builder.links = links
	builder.linksFlag = true
	return builder
}

// 抄送人ID
//
// 示例值：7124991993901827628
func (builder *ProcessCcItemBuilder) OperatorId(operatorId string) *ProcessCcItemBuilder {
	builder.operatorId = operatorId
	builder.operatorIdFlag = true
	return builder
}

// 抄送人姓名
//
// 示例值：
func (builder *ProcessCcItemBuilder) OperatorName(operatorName *DataengineI18n) *ProcessCcItemBuilder {
	builder.operatorName = operatorName
	builder.operatorNameFlag = true
	return builder
}

// 节点名称
//
// 示例值：
func (builder *ProcessCcItemBuilder) NodeName(nodeName *DataengineI18n) *ProcessCcItemBuilder {
	builder.nodeName = nodeName
	builder.nodeNameFlag = true
	return builder
}

// 抄送时间，Unix毫秒时间戳
//
// 示例值：1694769814036
func (builder *ProcessCcItemBuilder) CreateTime(createTime string) *ProcessCcItemBuilder {
	builder.createTime = createTime
	builder.createTimeFlag = true
	return builder
}

// 节点定义ID（注：在回退场景，同一个节点会对应多个节点实例）
//
// 示例值：approval_d25b5eddfef
func (builder *ProcessCcItemBuilder) NodeDefinitionId(nodeDefinitionId string) *ProcessCcItemBuilder {
	builder.nodeDefinitionId = nodeDefinitionId
	builder.nodeDefinitionIdFlag = true
	return builder
}

func (builder *ProcessCcItemBuilder) Build() *ProcessCcItem {
	req := &ProcessCcItem{}
	if builder.approverIdFlag {
		req.ApproverId = &builder.approverId

	}
	if builder.linksFlag {
		req.Links = builder.links
	}
	if builder.operatorIdFlag {
		req.OperatorId = &builder.operatorId

	}
	if builder.operatorNameFlag {
		req.OperatorName = builder.operatorName
	}
	if builder.nodeNameFlag {
		req.NodeName = builder.nodeName
	}
	if builder.createTimeFlag {
		req.CreateTime = &builder.createTime

	}
	if builder.nodeDefinitionIdFlag {
		req.NodeDefinitionId = &builder.nodeDefinitionId

	}
	return req
}

type ProcessDoneItem struct {
	ApproverId       *string         `json:"approver_id,omitempty"`        // 单据ID
	Type             *int            `json:"type,omitempty"`               // 单据类型
	Status           *int            `json:"status,omitempty"`             // 单据状态
	Links            *ProcessLink    `json:"links,omitempty"`              // 单据地址
	OperatorId       *string         `json:"operator_id,omitempty"`        // 操作人ID
	OperatorName     *DataengineI18n `json:"operator_name,omitempty"`      // 操作人姓名
	NodeName         *DataengineI18n `json:"node_name,omitempty"`          // 节点名称
	CreateTime       *string         `json:"create_time,omitempty"`        // 创建时间，Unix毫秒时间戳
	CompleteTime     *string         `json:"complete_time,omitempty"`      // 完成时间，Unix毫秒时间戳
	NodeDefinitionId *string         `json:"node_definition_id,omitempty"` // 节点定义ID（注：在回退场景，同一个节点会对应多个节点实例）
}

type ProcessDoneItemBuilder struct {
	approverId           string // 单据ID
	approverIdFlag       bool
	type_                int // 单据类型
	typeFlag             bool
	status               int // 单据状态
	statusFlag           bool
	links                *ProcessLink // 单据地址
	linksFlag            bool
	operatorId           string // 操作人ID
	operatorIdFlag       bool
	operatorName         *DataengineI18n // 操作人姓名
	operatorNameFlag     bool
	nodeName             *DataengineI18n // 节点名称
	nodeNameFlag         bool
	createTime           string // 创建时间，Unix毫秒时间戳
	createTimeFlag       bool
	completeTime         string // 完成时间，Unix毫秒时间戳
	completeTimeFlag     bool
	nodeDefinitionId     string // 节点定义ID（注：在回退场景，同一个节点会对应多个节点实例）
	nodeDefinitionIdFlag bool
}

func NewProcessDoneItemBuilder() *ProcessDoneItemBuilder {
	builder := &ProcessDoneItemBuilder{}
	return builder
}

// 单据ID
//
// 示例值：7278949005675988535
func (builder *ProcessDoneItemBuilder) ApproverId(approverId string) *ProcessDoneItemBuilder {
	builder.approverId = approverId
	builder.approverIdFlag = true
	return builder
}

// 单据类型
//
// 示例值：1
func (builder *ProcessDoneItemBuilder) Type(type_ int) *ProcessDoneItemBuilder {
	builder.type_ = type_
	builder.typeFlag = true
	return builder
}

// 单据状态
//
// 示例值：3
func (builder *ProcessDoneItemBuilder) Status(status int) *ProcessDoneItemBuilder {
	builder.status = status
	builder.statusFlag = true
	return builder
}

// 单据地址
//
// 示例值：
func (builder *ProcessDoneItemBuilder) Links(links *ProcessLink) *ProcessDoneItemBuilder {
	builder.links = links
	builder.linksFlag = true
	return builder
}

// 操作人ID
//
// 示例值：7124991993901827628
func (builder *ProcessDoneItemBuilder) OperatorId(operatorId string) *ProcessDoneItemBuilder {
	builder.operatorId = operatorId
	builder.operatorIdFlag = true
	return builder
}

// 操作人姓名
//
// 示例值：
func (builder *ProcessDoneItemBuilder) OperatorName(operatorName *DataengineI18n) *ProcessDoneItemBuilder {
	builder.operatorName = operatorName
	builder.operatorNameFlag = true
	return builder
}

// 节点名称
//
// 示例值：
func (builder *ProcessDoneItemBuilder) NodeName(nodeName *DataengineI18n) *ProcessDoneItemBuilder {
	builder.nodeName = nodeName
	builder.nodeNameFlag = true
	return builder
}

// 创建时间，Unix毫秒时间戳
//
// 示例值：1694769814036
func (builder *ProcessDoneItemBuilder) CreateTime(createTime string) *ProcessDoneItemBuilder {
	builder.createTime = createTime
	builder.createTimeFlag = true
	return builder
}

// 完成时间，Unix毫秒时间戳
//
// 示例值：1694769814036
func (builder *ProcessDoneItemBuilder) CompleteTime(completeTime string) *ProcessDoneItemBuilder {
	builder.completeTime = completeTime
	builder.completeTimeFlag = true
	return builder
}

// 节点定义ID（注：在回退场景，同一个节点会对应多个节点实例）
//
// 示例值：approval_d25b5eddfef
func (builder *ProcessDoneItemBuilder) NodeDefinitionId(nodeDefinitionId string) *ProcessDoneItemBuilder {
	builder.nodeDefinitionId = nodeDefinitionId
	builder.nodeDefinitionIdFlag = true
	return builder
}

func (builder *ProcessDoneItemBuilder) Build() *ProcessDoneItem {
	req := &ProcessDoneItem{}
	if builder.approverIdFlag {
		req.ApproverId = &builder.approverId

	}
	if builder.typeFlag {
		req.Type = &builder.type_

	}
	if builder.statusFlag {
		req.Status = &builder.status

	}
	if builder.linksFlag {
		req.Links = builder.links
	}
	if builder.operatorIdFlag {
		req.OperatorId = &builder.operatorId

	}
	if builder.operatorNameFlag {
		req.OperatorName = builder.operatorName
	}
	if builder.nodeNameFlag {
		req.NodeName = builder.nodeName
	}
	if builder.createTimeFlag {
		req.CreateTime = &builder.createTime

	}
	if builder.completeTimeFlag {
		req.CompleteTime = &builder.completeTime

	}
	if builder.nodeDefinitionIdFlag {
		req.NodeDefinitionId = &builder.nodeDefinitionId

	}
	return req
}

type ProcessFormVariable struct {
	VariableApiName *string                `json:"variable_api_name,omitempty"` // 变量的apiName
	VariableValue   *FormVariableValueInfo `json:"variable_value,omitempty"`    // 变量值
}

type ProcessFormVariableBuilder struct {
	variableApiName     string // 变量的apiName
	variableApiNameFlag bool
	variableValue       *FormVariableValueInfo // 变量值
	variableValueFlag   bool
}

func NewProcessFormVariableBuilder() *ProcessFormVariableBuilder {
	builder := &ProcessFormVariableBuilder{}
	return builder
}

// 变量的apiName
//
// 示例值：custom590dbafb84a
func (builder *ProcessFormVariableBuilder) VariableApiName(variableApiName string) *ProcessFormVariableBuilder {
	builder.variableApiName = variableApiName
	builder.variableApiNameFlag = true
	return builder
}

// 变量值
//
// 示例值：
func (builder *ProcessFormVariableBuilder) VariableValue(variableValue *FormVariableValueInfo) *ProcessFormVariableBuilder {
	builder.variableValue = variableValue
	builder.variableValueFlag = true
	return builder
}

func (builder *ProcessFormVariableBuilder) Build() *ProcessFormVariable {
	req := &ProcessFormVariable{}
	if builder.variableApiNameFlag {
		req.VariableApiName = &builder.variableApiName

	}
	if builder.variableValueFlag {
		req.VariableValue = builder.variableValue
	}
	return req
}

type ProcessLink struct {
	WebLink    *string `json:"web_link,omitempty"`    // web端单据详情页地址
	PcLink     *string `json:"pc_link,omitempty"`     // 飞书pc端单据详情页地址
	MobileLink *string `json:"mobile_link,omitempty"` // 飞书移动端单据详情页地址
}

type ProcessLinkBuilder struct {
	webLink        string // web端单据详情页地址
	webLinkFlag    bool
	pcLink         string // 飞书pc端单据详情页地址
	pcLinkFlag     bool
	mobileLink     string // 飞书移动端单据详情页地址
	mobileLinkFlag bool
}

func NewProcessLinkBuilder() *ProcessLinkBuilder {
	builder := &ProcessLinkBuilder{}
	return builder
}

// web端单据详情页地址
//
// 示例值：http://xxxx.com/xxx/xxx?a=b
func (builder *ProcessLinkBuilder) WebLink(webLink string) *ProcessLinkBuilder {
	builder.webLink = webLink
	builder.webLinkFlag = true
	return builder
}

// 飞书pc端单据详情页地址
//
// 示例值：https://applink.feishu.cn/client/mini_program/open?appId=xxx
func (builder *ProcessLinkBuilder) PcLink(pcLink string) *ProcessLinkBuilder {
	builder.pcLink = pcLink
	builder.pcLinkFlag = true
	return builder
}

// 飞书移动端单据详情页地址
//
// 示例值：https://applink.feishu.cn/client/mini_program/open?appId=xxx
func (builder *ProcessLinkBuilder) MobileLink(mobileLink string) *ProcessLinkBuilder {
	builder.mobileLink = mobileLink
	builder.mobileLinkFlag = true
	return builder
}

func (builder *ProcessLinkBuilder) Build() *ProcessLink {
	req := &ProcessLink{}
	if builder.webLinkFlag {
		req.WebLink = &builder.webLink

	}
	if builder.pcLinkFlag {
		req.PcLink = &builder.pcLink

	}
	if builder.mobileLinkFlag {
		req.MobileLink = &builder.mobileLink

	}
	return req
}

type ProcessTodoItem struct {
	ApproverId       *string         `json:"approver_id,omitempty"`        // 单据ID
	Type             *int            `json:"type,omitempty"`               // 单据类型
	Links            *ProcessLink    `json:"links,omitempty"`              // 单据地址
	OperatorId       *string         `json:"operator_id,omitempty"`        // 操作人ID
	OperatorName     *DataengineI18n `json:"operator_name,omitempty"`      // 操作人姓名
	NodeName         *DataengineI18n `json:"node_name,omitempty"`          // 节点名称
	CreateTime       *string         `json:"create_time,omitempty"`        // 创建时间，Unix毫秒时间戳
	NodeDefinitionId *string         `json:"node_definition_id,omitempty"` // 节点定义ID（注：在回退场景，同一个节点会对应多个节点实例）
}

type ProcessTodoItemBuilder struct {
	approverId           string // 单据ID
	approverIdFlag       bool
	type_                int // 单据类型
	typeFlag             bool
	links                *ProcessLink // 单据地址
	linksFlag            bool
	operatorId           string // 操作人ID
	operatorIdFlag       bool
	operatorName         *DataengineI18n // 操作人姓名
	operatorNameFlag     bool
	nodeName             *DataengineI18n // 节点名称
	nodeNameFlag         bool
	createTime           string // 创建时间，Unix毫秒时间戳
	createTimeFlag       bool
	nodeDefinitionId     string // 节点定义ID（注：在回退场景，同一个节点会对应多个节点实例）
	nodeDefinitionIdFlag bool
}

func NewProcessTodoItemBuilder() *ProcessTodoItemBuilder {
	builder := &ProcessTodoItemBuilder{}
	return builder
}

// 单据ID
//
// 示例值：7278949005675988535
func (builder *ProcessTodoItemBuilder) ApproverId(approverId string) *ProcessTodoItemBuilder {
	builder.approverId = approverId
	builder.approverIdFlag = true
	return builder
}

// 单据类型
//
// 示例值：1
func (builder *ProcessTodoItemBuilder) Type(type_ int) *ProcessTodoItemBuilder {
	builder.type_ = type_
	builder.typeFlag = true
	return builder
}

// 单据地址
//
// 示例值：
func (builder *ProcessTodoItemBuilder) Links(links *ProcessLink) *ProcessTodoItemBuilder {
	builder.links = links
	builder.linksFlag = true
	return builder
}

// 操作人ID
//
// 示例值：7124991993901827628
func (builder *ProcessTodoItemBuilder) OperatorId(operatorId string) *ProcessTodoItemBuilder {
	builder.operatorId = operatorId
	builder.operatorIdFlag = true
	return builder
}

// 操作人姓名
//
// 示例值：
func (builder *ProcessTodoItemBuilder) OperatorName(operatorName *DataengineI18n) *ProcessTodoItemBuilder {
	builder.operatorName = operatorName
	builder.operatorNameFlag = true
	return builder
}

// 节点名称
//
// 示例值：
func (builder *ProcessTodoItemBuilder) NodeName(nodeName *DataengineI18n) *ProcessTodoItemBuilder {
	builder.nodeName = nodeName
	builder.nodeNameFlag = true
	return builder
}

// 创建时间，Unix毫秒时间戳
//
// 示例值：1694769814036
func (builder *ProcessTodoItemBuilder) CreateTime(createTime string) *ProcessTodoItemBuilder {
	builder.createTime = createTime
	builder.createTimeFlag = true
	return builder
}

// 节点定义ID（注：在回退场景，同一个节点会对应多个节点实例）
//
// 示例值：approval_d25b5eddfef
func (builder *ProcessTodoItemBuilder) NodeDefinitionId(nodeDefinitionId string) *ProcessTodoItemBuilder {
	builder.nodeDefinitionId = nodeDefinitionId
	builder.nodeDefinitionIdFlag = true
	return builder
}

func (builder *ProcessTodoItemBuilder) Build() *ProcessTodoItem {
	req := &ProcessTodoItem{}
	if builder.approverIdFlag {
		req.ApproverId = &builder.approverId

	}
	if builder.typeFlag {
		req.Type = &builder.type_

	}
	if builder.linksFlag {
		req.Links = builder.links
	}
	if builder.operatorIdFlag {
		req.OperatorId = &builder.operatorId

	}
	if builder.operatorNameFlag {
		req.OperatorName = builder.operatorName
	}
	if builder.nodeNameFlag {
		req.NodeName = builder.nodeName
	}
	if builder.createTimeFlag {
		req.CreateTime = &builder.createTime

	}
	if builder.nodeDefinitionIdFlag {
		req.NodeDefinitionId = &builder.nodeDefinitionId

	}
	return req
}

type ProfileSettingAddress struct {
	AddressType        *string `json:"address_type,omitempty"`         // 地址类型，枚举值。 可选项可通过【获取字段详情】接口查询，查询参数如下： object_api_name = "address" custom_api_name = "address_type"
	CountryRegion      *string `json:"country_region,omitempty"`       // 国家 / 地区ID
	Region             *string `json:"region,omitempty"`               // 主要行政区ID
	RegionSubdivision1 *string `json:"region_subdivision_1,omitempty"` // 主要行政区往下细分 1 层的行政区
	RegionSubdivision2 *string `json:"region_subdivision_2,omitempty"` // 主要行政区往下细分 2 层的行政区
	CityV2             *string `json:"city_v2,omitempty"`              // 城市V2 ID
	CityText           *string `json:"city_text,omitempty"`            // 城市（文本）
	LocalCityText      *string `json:"local_city_text,omitempty"`      // 城市（仅文本，非拉丁语系的本地文字）
	CitySubdivision1   *string `json:"city_subdivision_1,omitempty"`   // 城市往下细分 1 层的行政区
	CitySubdivision2   *string `json:"city_subdivision_2,omitempty"`   // 城市往下细分 2 层的行政区
	DistrictV2         *string `json:"district_v2,omitempty"`          // 区/县V2 ID
	PostalCode         *string `json:"postal_code,omitempty"`          // 邮政编码
	AddressLine1       *string `json:"address_line_1,omitempty"`       // 地址行 1
	LocalAddressLine1  *string `json:"local_address_line_1,omitempty"` // 地址行 1（非拉丁语系的本地文字）
	AddressLine2       *string `json:"address_line_2,omitempty"`       // 地址行 2
	LocalAddressLine2  *string `json:"local_address_line_2,omitempty"` // 地址行 2（非拉丁语系的本地文字）
	AddressLine3       *string `json:"address_line_3,omitempty"`       // 地址行 3
	LocalAddressLine3  *string `json:"local_address_line_3,omitempty"` // 地址行 3（非拉丁语系的本地文字）
	AddressLine4       *string `json:"address_line_4,omitempty"`       // 地址行 4
	LocalAddressLine5  *string `json:"local_address_line_5,omitempty"` // 地址行 5（非拉丁语系的本地文字）
	AddressLine6       *string `json:"address_line_6,omitempty"`       // 地址行 6
	LocalAddressLine6  *string `json:"local_address_line_6,omitempty"` // 地址行 6（非拉丁语系的本地文字）
	AddressLine7       *string `json:"address_line_7,omitempty"`       // 地址行 7
	LocalAddressLine7  *string `json:"local_address_line_7,omitempty"` // 地址行 7（非拉丁语系的本地文字）
	AddressLine8       *string `json:"address_line_8,omitempty"`       // 地址行 8
	LocalAddressLine8  *string `json:"local_address_line_8,omitempty"` // 地址行 8（非拉丁语系的本地文字）
	AddressLine9       *string `json:"address_line_9,omitempty"`       // 地址行 9
	LocalAddressLine9  *string `json:"local_address_line_9,omitempty"` // 地址行 9（非拉丁语系的本地文字）
	LocalAddressLine4  *string `json:"local_address_line_4,omitempty"` // 地址行 4（非拉丁语系的本地文字）
	AddressLine5       *string `json:"address_line_5,omitempty"`       // 地址行 5
}

type ProfileSettingAddressBuilder struct {
	addressType            string // 地址类型，枚举值。 可选项可通过【获取字段详情】接口查询，查询参数如下： object_api_name = "address" custom_api_name = "address_type"
	addressTypeFlag        bool
	countryRegion          string // 国家 / 地区ID
	countryRegionFlag      bool
	region                 string // 主要行政区ID
	regionFlag             bool
	regionSubdivision1     string // 主要行政区往下细分 1 层的行政区
	regionSubdivision1Flag bool
	regionSubdivision2     string // 主要行政区往下细分 2 层的行政区
	regionSubdivision2Flag bool
	cityV2                 string // 城市V2 ID
	cityV2Flag             bool
	cityText               string // 城市（文本）
	cityTextFlag           bool
	localCityText          string // 城市（仅文本，非拉丁语系的本地文字）
	localCityTextFlag      bool
	citySubdivision1       string // 城市往下细分 1 层的行政区
	citySubdivision1Flag   bool
	citySubdivision2       string // 城市往下细分 2 层的行政区
	citySubdivision2Flag   bool
	districtV2             string // 区/县V2 ID
	districtV2Flag         bool
	postalCode             string // 邮政编码
	postalCodeFlag         bool
	addressLine1           string // 地址行 1
	addressLine1Flag       bool
	localAddressLine1      string // 地址行 1（非拉丁语系的本地文字）
	localAddressLine1Flag  bool
	addressLine2           string // 地址行 2
	addressLine2Flag       bool
	localAddressLine2      string // 地址行 2（非拉丁语系的本地文字）
	localAddressLine2Flag  bool
	addressLine3           string // 地址行 3
	addressLine3Flag       bool
	localAddressLine3      string // 地址行 3（非拉丁语系的本地文字）
	localAddressLine3Flag  bool
	addressLine4           string // 地址行 4
	addressLine4Flag       bool
	localAddressLine5      string // 地址行 5（非拉丁语系的本地文字）
	localAddressLine5Flag  bool
	addressLine6           string // 地址行 6
	addressLine6Flag       bool
	localAddressLine6      string // 地址行 6（非拉丁语系的本地文字）
	localAddressLine6Flag  bool
	addressLine7           string // 地址行 7
	addressLine7Flag       bool
	localAddressLine7      string // 地址行 7（非拉丁语系的本地文字）
	localAddressLine7Flag  bool
	addressLine8           string // 地址行 8
	addressLine8Flag       bool
	localAddressLine8      string // 地址行 8（非拉丁语系的本地文字）
	localAddressLine8Flag  bool
	addressLine9           string // 地址行 9
	addressLine9Flag       bool
	localAddressLine9      string // 地址行 9（非拉丁语系的本地文字）
	localAddressLine9Flag  bool
	localAddressLine4      string // 地址行 4（非拉丁语系的本地文字）
	localAddressLine4Flag  bool
	addressLine5           string // 地址行 5
	addressLine5Flag       bool
}

func NewProfileSettingAddressBuilder() *ProfileSettingAddressBuilder {
	builder := &ProfileSettingAddressBuilder{}
	return builder
}

// 地址类型，枚举值。 可选项可通过【获取字段详情】接口查询，查询参数如下： object_api_name = "address" custom_api_name = "address_type"
//
// 示例值：home_address
func (builder *ProfileSettingAddressBuilder) AddressType(addressType string) *ProfileSettingAddressBuilder {
	builder.addressType = addressType
	builder.addressTypeFlag = true
	return builder
}

// 国家 / 地区ID
//
// 示例值：6862995757234914824
func (builder *ProfileSettingAddressBuilder) CountryRegion(countryRegion string) *ProfileSettingAddressBuilder {
	builder.countryRegion = countryRegion
	builder.countryRegionFlag = true
	return builder
}

// 主要行政区ID
//
// 示例值：6863326815667095047
func (builder *ProfileSettingAddressBuilder) Region(region string) *ProfileSettingAddressBuilder {
	builder.region = region
	builder.regionFlag = true
	return builder
}

// 主要行政区往下细分 1 层的行政区
//
// 示例值：行政区1
func (builder *ProfileSettingAddressBuilder) RegionSubdivision1(regionSubdivision1 string) *ProfileSettingAddressBuilder {
	builder.regionSubdivision1 = regionSubdivision1
	builder.regionSubdivision1Flag = true
	return builder
}

// 主要行政区往下细分 2 层的行政区
//
// 示例值：行政区2
func (builder *ProfileSettingAddressBuilder) RegionSubdivision2(regionSubdivision2 string) *ProfileSettingAddressBuilder {
	builder.regionSubdivision2 = regionSubdivision2
	builder.regionSubdivision2Flag = true
	return builder
}

// 城市V2 ID
//
// 示例值：6862995757234914829
func (builder *ProfileSettingAddressBuilder) CityV2(cityV2 string) *ProfileSettingAddressBuilder {
	builder.cityV2 = cityV2
	builder.cityV2Flag = true
	return builder
}

// 城市（文本）
//
// 示例值：北京市
func (builder *ProfileSettingAddressBuilder) CityText(cityText string) *ProfileSettingAddressBuilder {
	builder.cityText = cityText
	builder.cityTextFlag = true
	return builder
}

// 城市（仅文本，非拉丁语系的本地文字）
//
// 示例值：北京市
func (builder *ProfileSettingAddressBuilder) LocalCityText(localCityText string) *ProfileSettingAddressBuilder {
	builder.localCityText = localCityText
	builder.localCityTextFlag = true
	return builder
}

// 城市往下细分 1 层的行政区
//
// 示例值：行政区1
func (builder *ProfileSettingAddressBuilder) CitySubdivision1(citySubdivision1 string) *ProfileSettingAddressBuilder {
	builder.citySubdivision1 = citySubdivision1
	builder.citySubdivision1Flag = true
	return builder
}

// 城市往下细分 2 层的行政区
//
// 示例值：行政区2
func (builder *ProfileSettingAddressBuilder) CitySubdivision2(citySubdivision2 string) *ProfileSettingAddressBuilder {
	builder.citySubdivision2 = citySubdivision2
	builder.citySubdivision2Flag = true
	return builder
}

// 区/县V2 ID
//
// 示例值：6862995757234914831
func (builder *ProfileSettingAddressBuilder) DistrictV2(districtV2 string) *ProfileSettingAddressBuilder {
	builder.districtV2 = districtV2
	builder.districtV2Flag = true
	return builder
}

// 邮政编码
//
// 示例值：611530
func (builder *ProfileSettingAddressBuilder) PostalCode(postalCode string) *ProfileSettingAddressBuilder {
	builder.postalCode = postalCode
	builder.postalCodeFlag = true
	return builder
}

// 地址行 1
//
// 示例值：丹佛测试地址-纽埃时区
func (builder *ProfileSettingAddressBuilder) AddressLine1(addressLine1 string) *ProfileSettingAddressBuilder {
	builder.addressLine1 = addressLine1
	builder.addressLine1Flag = true
	return builder
}

// 地址行 1（非拉丁语系的本地文字）
//
// 示例值：丹佛测试地址-纽埃时区
func (builder *ProfileSettingAddressBuilder) LocalAddressLine1(localAddressLine1 string) *ProfileSettingAddressBuilder {
	builder.localAddressLine1 = localAddressLine1
	builder.localAddressLine1Flag = true
	return builder
}

// 地址行 2
//
// 示例值：PoewH
func (builder *ProfileSettingAddressBuilder) AddressLine2(addressLine2 string) *ProfileSettingAddressBuilder {
	builder.addressLine2 = addressLine2
	builder.addressLine2Flag = true
	return builder
}

// 地址行 2（非拉丁语系的本地文字）
//
// 示例值：PoewH
func (builder *ProfileSettingAddressBuilder) LocalAddressLine2(localAddressLine2 string) *ProfileSettingAddressBuilder {
	builder.localAddressLine2 = localAddressLine2
	builder.localAddressLine2Flag = true
	return builder
}

// 地址行 3
//
// 示例值：PoewH
func (builder *ProfileSettingAddressBuilder) AddressLine3(addressLine3 string) *ProfileSettingAddressBuilder {
	builder.addressLine3 = addressLine3
	builder.addressLine3Flag = true
	return builder
}

// 地址行 3（非拉丁语系的本地文字）
//
// 示例值：PoewH
func (builder *ProfileSettingAddressBuilder) LocalAddressLine3(localAddressLine3 string) *ProfileSettingAddressBuilder {
	builder.localAddressLine3 = localAddressLine3
	builder.localAddressLine3Flag = true
	return builder
}

// 地址行 4
//
// 示例值：jmwJc
func (builder *ProfileSettingAddressBuilder) AddressLine4(addressLine4 string) *ProfileSettingAddressBuilder {
	builder.addressLine4 = addressLine4
	builder.addressLine4Flag = true
	return builder
}

// 地址行 5（非拉丁语系的本地文字）
//
// 示例值：jmwJc
func (builder *ProfileSettingAddressBuilder) LocalAddressLine5(localAddressLine5 string) *ProfileSettingAddressBuilder {
	builder.localAddressLine5 = localAddressLine5
	builder.localAddressLine5Flag = true
	return builder
}

// 地址行 6
//
// 示例值：jmwJc
func (builder *ProfileSettingAddressBuilder) AddressLine6(addressLine6 string) *ProfileSettingAddressBuilder {
	builder.addressLine6 = addressLine6
	builder.addressLine6Flag = true
	return builder
}

// 地址行 6（非拉丁语系的本地文字）
//
// 示例值：jmwJc
func (builder *ProfileSettingAddressBuilder) LocalAddressLine6(localAddressLine6 string) *ProfileSettingAddressBuilder {
	builder.localAddressLine6 = localAddressLine6
	builder.localAddressLine6Flag = true
	return builder
}

// 地址行 7
//
// 示例值：jmwJc
func (builder *ProfileSettingAddressBuilder) AddressLine7(addressLine7 string) *ProfileSettingAddressBuilder {
	builder.addressLine7 = addressLine7
	builder.addressLine7Flag = true
	return builder
}

// 地址行 7（非拉丁语系的本地文字）
//
// 示例值：jmwJc
func (builder *ProfileSettingAddressBuilder) LocalAddressLine7(localAddressLine7 string) *ProfileSettingAddressBuilder {
	builder.localAddressLine7 = localAddressLine7
	builder.localAddressLine7Flag = true
	return builder
}

// 地址行 8
//
// 示例值：jmwJc
func (builder *ProfileSettingAddressBuilder) AddressLine8(addressLine8 string) *ProfileSettingAddressBuilder {
	builder.addressLine8 = addressLine8
	builder.addressLine8Flag = true
	return builder
}

// 地址行 8（非拉丁语系的本地文字）
//
// 示例值：rafSu
func (builder *ProfileSettingAddressBuilder) LocalAddressLine8(localAddressLine8 string) *ProfileSettingAddressBuilder {
	builder.localAddressLine8 = localAddressLine8
	builder.localAddressLine8Flag = true
	return builder
}

// 地址行 9
//
// 示例值：McPRG
func (builder *ProfileSettingAddressBuilder) AddressLine9(addressLine9 string) *ProfileSettingAddressBuilder {
	builder.addressLine9 = addressLine9
	builder.addressLine9Flag = true
	return builder
}

// 地址行 9（非拉丁语系的本地文字）
//
// 示例值：McPRG
func (builder *ProfileSettingAddressBuilder) LocalAddressLine9(localAddressLine9 string) *ProfileSettingAddressBuilder {
	builder.localAddressLine9 = localAddressLine9
	builder.localAddressLine9Flag = true
	return builder
}

// 地址行 4（非拉丁语系的本地文字）
//
// 示例值：jmwJc
func (builder *ProfileSettingAddressBuilder) LocalAddressLine4(localAddressLine4 string) *ProfileSettingAddressBuilder {
	builder.localAddressLine4 = localAddressLine4
	builder.localAddressLine4Flag = true
	return builder
}

// 地址行 5
//
// 示例值：jmwJc
func (builder *ProfileSettingAddressBuilder) AddressLine5(addressLine5 string) *ProfileSettingAddressBuilder {
	builder.addressLine5 = addressLine5
	builder.addressLine5Flag = true
	return builder
}

func (builder *ProfileSettingAddressBuilder) Build() *ProfileSettingAddress {
	req := &ProfileSettingAddress{}
	if builder.addressTypeFlag {
		req.AddressType = &builder.addressType

	}
	if builder.countryRegionFlag {
		req.CountryRegion = &builder.countryRegion

	}
	if builder.regionFlag {
		req.Region = &builder.region

	}
	if builder.regionSubdivision1Flag {
		req.RegionSubdivision1 = &builder.regionSubdivision1

	}
	if builder.regionSubdivision2Flag {
		req.RegionSubdivision2 = &builder.regionSubdivision2

	}
	if builder.cityV2Flag {
		req.CityV2 = &builder.cityV2

	}
	if builder.cityTextFlag {
		req.CityText = &builder.cityText

	}
	if builder.localCityTextFlag {
		req.LocalCityText = &builder.localCityText

	}
	if builder.citySubdivision1Flag {
		req.CitySubdivision1 = &builder.citySubdivision1

	}
	if builder.citySubdivision2Flag {
		req.CitySubdivision2 = &builder.citySubdivision2

	}
	if builder.districtV2Flag {
		req.DistrictV2 = &builder.districtV2

	}
	if builder.postalCodeFlag {
		req.PostalCode = &builder.postalCode

	}
	if builder.addressLine1Flag {
		req.AddressLine1 = &builder.addressLine1

	}
	if builder.localAddressLine1Flag {
		req.LocalAddressLine1 = &builder.localAddressLine1

	}
	if builder.addressLine2Flag {
		req.AddressLine2 = &builder.addressLine2

	}
	if builder.localAddressLine2Flag {
		req.LocalAddressLine2 = &builder.localAddressLine2

	}
	if builder.addressLine3Flag {
		req.AddressLine3 = &builder.addressLine3

	}
	if builder.localAddressLine3Flag {
		req.LocalAddressLine3 = &builder.localAddressLine3

	}
	if builder.addressLine4Flag {
		req.AddressLine4 = &builder.addressLine4

	}
	if builder.localAddressLine5Flag {
		req.LocalAddressLine5 = &builder.localAddressLine5

	}
	if builder.addressLine6Flag {
		req.AddressLine6 = &builder.addressLine6

	}
	if builder.localAddressLine6Flag {
		req.LocalAddressLine6 = &builder.localAddressLine6

	}
	if builder.addressLine7Flag {
		req.AddressLine7 = &builder.addressLine7

	}
	if builder.localAddressLine7Flag {
		req.LocalAddressLine7 = &builder.localAddressLine7

	}
	if builder.addressLine8Flag {
		req.AddressLine8 = &builder.addressLine8

	}
	if builder.localAddressLine8Flag {
		req.LocalAddressLine8 = &builder.localAddressLine8

	}
	if builder.addressLine9Flag {
		req.AddressLine9 = &builder.addressLine9

	}
	if builder.localAddressLine9Flag {
		req.LocalAddressLine9 = &builder.localAddressLine9

	}
	if builder.localAddressLine4Flag {
		req.LocalAddressLine4 = &builder.localAddressLine4

	}
	if builder.addressLine5Flag {
		req.AddressLine5 = &builder.addressLine5

	}
	return req
}

type ProfileSettingBankAccount struct {
	CountryRegion     *string  `json:"country_region,omitempty"`      // 国家 / 地区ID
	BankName          *string  `json:"bank_name,omitempty"`           // 银行名称
	BranchName        *string  `json:"branch_name,omitempty"`         // 支行名称
	AccountHolder     *string  `json:"account_holder,omitempty"`      // 开户人姓名
	BankAccountNumber *string  `json:"bank_account_number,omitempty"` // 银行账号
	BankAccountUsages []string `json:"bank_account_usages,omitempty"` // 银行卡用途，枚举值。 可选项可通过【获取字段详情】接口查询，查询参数如下： object_api_name = "bank_account" custom_api_name = "bank_account_usage"
	BankAccountType   *string  `json:"bank_account_type,omitempty"`   // 银行卡类型，枚举值。 可选项可通过【获取字段详情】接口查询，查询参数如下： object_api_name = "bank_account" custom_api_name = "bank_account_type"
	BankId            *string  `json:"bank_id,omitempty"`             // 银行ID
	BranchId          *string  `json:"branch_id,omitempty"`           // 银行支行ID
}

type ProfileSettingBankAccountBuilder struct {
	countryRegion         string // 国家 / 地区ID
	countryRegionFlag     bool
	bankName              string // 银行名称
	bankNameFlag          bool
	branchName            string // 支行名称
	branchNameFlag        bool
	accountHolder         string // 开户人姓名
	accountHolderFlag     bool
	bankAccountNumber     string // 银行账号
	bankAccountNumberFlag bool
	bankAccountUsages     []string // 银行卡用途，枚举值。 可选项可通过【获取字段详情】接口查询，查询参数如下： object_api_name = "bank_account" custom_api_name = "bank_account_usage"
	bankAccountUsagesFlag bool
	bankAccountType       string // 银行卡类型，枚举值。 可选项可通过【获取字段详情】接口查询，查询参数如下： object_api_name = "bank_account" custom_api_name = "bank_account_type"
	bankAccountTypeFlag   bool
	bankId                string // 银行ID
	bankIdFlag            bool
	branchId              string // 银行支行ID
	branchIdFlag          bool
}

func NewProfileSettingBankAccountBuilder() *ProfileSettingBankAccountBuilder {
	builder := &ProfileSettingBankAccountBuilder{}
	return builder
}

// 国家 / 地区ID
//
// 示例值：6862995757234914824
func (builder *ProfileSettingBankAccountBuilder) CountryRegion(countryRegion string) *ProfileSettingBankAccountBuilder {
	builder.countryRegion = countryRegion
	builder.countryRegionFlag = true
	return builder
}

// 银行名称
//
// 示例值：中国农业银行
func (builder *ProfileSettingBankAccountBuilder) BankName(bankName string) *ProfileSettingBankAccountBuilder {
	builder.bankName = bankName
	builder.bankNameFlag = true
	return builder
}

// 支行名称
//
// 示例值：中国农业银行支行
func (builder *ProfileSettingBankAccountBuilder) BranchName(branchName string) *ProfileSettingBankAccountBuilder {
	builder.branchName = branchName
	builder.branchNameFlag = true
	return builder
}

// 开户人姓名
//
// 示例值：孟十五
func (builder *ProfileSettingBankAccountBuilder) AccountHolder(accountHolder string) *ProfileSettingBankAccountBuilder {
	builder.accountHolder = accountHolder
	builder.accountHolderFlag = true
	return builder
}

// 银行账号
//
// 示例值：6231200000001223
func (builder *ProfileSettingBankAccountBuilder) BankAccountNumber(bankAccountNumber string) *ProfileSettingBankAccountBuilder {
	builder.bankAccountNumber = bankAccountNumber
	builder.bankAccountNumberFlag = true
	return builder
}

// 银行卡用途，枚举值。 可选项可通过【获取字段详情】接口查询，查询参数如下： object_api_name = "bank_account" custom_api_name = "bank_account_usage"
//
// 示例值：payment
func (builder *ProfileSettingBankAccountBuilder) BankAccountUsages(bankAccountUsages []string) *ProfileSettingBankAccountBuilder {
	builder.bankAccountUsages = bankAccountUsages
	builder.bankAccountUsagesFlag = true
	return builder
}

// 银行卡类型，枚举值。 可选项可通过【获取字段详情】接口查询，查询参数如下： object_api_name = "bank_account" custom_api_name = "bank_account_type"
//
// 示例值：savings
func (builder *ProfileSettingBankAccountBuilder) BankAccountType(bankAccountType string) *ProfileSettingBankAccountBuilder {
	builder.bankAccountType = bankAccountType
	builder.bankAccountTypeFlag = true
	return builder
}

// 银行ID
//
// 示例值：6862995757234914832
func (builder *ProfileSettingBankAccountBuilder) BankId(bankId string) *ProfileSettingBankAccountBuilder {
	builder.bankId = bankId
	builder.bankIdFlag = true
	return builder
}

// 银行支行ID
//
// 示例值：6862995757234914833
func (builder *ProfileSettingBankAccountBuilder) BranchId(branchId string) *ProfileSettingBankAccountBuilder {
	builder.branchId = branchId
	builder.branchIdFlag = true
	return builder
}

func (builder *ProfileSettingBankAccountBuilder) Build() *ProfileSettingBankAccount {
	req := &ProfileSettingBankAccount{}
	if builder.countryRegionFlag {
		req.CountryRegion = &builder.countryRegion

	}
	if builder.bankNameFlag {
		req.BankName = &builder.bankName

	}
	if builder.branchNameFlag {
		req.BranchName = &builder.branchName

	}
	if builder.accountHolderFlag {
		req.AccountHolder = &builder.accountHolder

	}
	if builder.bankAccountNumberFlag {
		req.BankAccountNumber = &builder.bankAccountNumber

	}
	if builder.bankAccountUsagesFlag {
		req.BankAccountUsages = builder.bankAccountUsages
	}
	if builder.bankAccountTypeFlag {
		req.BankAccountType = &builder.bankAccountType

	}
	if builder.bankIdFlag {
		req.BankId = &builder.bankId

	}
	if builder.branchIdFlag {
		req.BranchId = &builder.branchId

	}
	return req
}

type ProfileSettingCareer struct {
	Educations      []*ProfileSettingEducation      `json:"educations,omitempty"`       // 教育经历
	WorkExperiences []*ProfileSettingWorkExperience `json:"work_experiences,omitempty"` // 工作经历
	CustomGroups    []*ProfileSettingCustomGroup    `json:"custom_groups,omitempty"`    // 自定义分组
}

type ProfileSettingCareerBuilder struct {
	educations          []*ProfileSettingEducation // 教育经历
	educationsFlag      bool
	workExperiences     []*ProfileSettingWorkExperience // 工作经历
	workExperiencesFlag bool
	customGroups        []*ProfileSettingCustomGroup // 自定义分组
	customGroupsFlag    bool
}

func NewProfileSettingCareerBuilder() *ProfileSettingCareerBuilder {
	builder := &ProfileSettingCareerBuilder{}
	return builder
}

// 教育经历
//
// 示例值：
func (builder *ProfileSettingCareerBuilder) Educations(educations []*ProfileSettingEducation) *ProfileSettingCareerBuilder {
	builder.educations = educations
	builder.educationsFlag = true
	return builder
}

// 工作经历
//
// 示例值：
func (builder *ProfileSettingCareerBuilder) WorkExperiences(workExperiences []*ProfileSettingWorkExperience) *ProfileSettingCareerBuilder {
	builder.workExperiences = workExperiences
	builder.workExperiencesFlag = true
	return builder
}

// 自定义分组
//
// 示例值：
func (builder *ProfileSettingCareerBuilder) CustomGroups(customGroups []*ProfileSettingCustomGroup) *ProfileSettingCareerBuilder {
	builder.customGroups = customGroups
	builder.customGroupsFlag = true
	return builder
}

func (builder *ProfileSettingCareerBuilder) Build() *ProfileSettingCareer {
	req := &ProfileSettingCareer{}
	if builder.educationsFlag {
		req.Educations = builder.educations
	}
	if builder.workExperiencesFlag {
		req.WorkExperiences = builder.workExperiences
	}
	if builder.customGroupsFlag {
		req.CustomGroups = builder.customGroups
	}
	return req
}

type ProfileSettingCostCenter struct {
	Id   *string `json:"id,omitempty"`   // 100
	Rate *int    `json:"rate,omitempty"` // 分摊比例
}

type ProfileSettingCostCenterBuilder struct {
	id       string // 100
	idFlag   bool
	rate     int // 分摊比例
	rateFlag bool
}

func NewProfileSettingCostCenterBuilder() *ProfileSettingCostCenterBuilder {
	builder := &ProfileSettingCostCenterBuilder{}
	return builder
}

// 100
//
// 示例值：6950635856373745165
func (builder *ProfileSettingCostCenterBuilder) Id(id string) *ProfileSettingCostCenterBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

// 分摊比例
//
// 示例值：100
func (builder *ProfileSettingCostCenterBuilder) Rate(rate int) *ProfileSettingCostCenterBuilder {
	builder.rate = rate
	builder.rateFlag = true
	return builder
}

func (builder *ProfileSettingCostCenterBuilder) Build() *ProfileSettingCostCenter {
	req := &ProfileSettingCostCenter{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.rateFlag {
		req.Rate = &builder.rate

	}
	return req
}

type ProfileSettingCustomField struct {
	FieldName *string `json:"field_name,omitempty"` // 字段名
	Value     *string `json:"value,omitempty"`      // 字段值, 是 json 转义后的字符串，根据元数据定义不同，字段格式不同。使用方式可参考【操作手册】如何通过 OpenAPI 维护自定义字段
}

type ProfileSettingCustomFieldBuilder struct {
	fieldName     string // 字段名
	fieldNameFlag bool
	value         string // 字段值, 是 json 转义后的字符串，根据元数据定义不同，字段格式不同。使用方式可参考【操作手册】如何通过 OpenAPI 维护自定义字段
	valueFlag     bool
}

func NewProfileSettingCustomFieldBuilder() *ProfileSettingCustomFieldBuilder {
	builder := &ProfileSettingCustomFieldBuilder{}
	return builder
}

// 字段名
//
// 示例值：custom_field_1__c
func (builder *ProfileSettingCustomFieldBuilder) FieldName(fieldName string) *ProfileSettingCustomFieldBuilder {
	builder.fieldName = fieldName
	builder.fieldNameFlag = true
	return builder
}

// 字段值, 是 json 转义后的字符串，根据元数据定义不同，字段格式不同。使用方式可参考【操作手册】如何通过 OpenAPI 维护自定义字段
//
// 示例值：["custom_enum_0__c"]
func (builder *ProfileSettingCustomFieldBuilder) Value(value string) *ProfileSettingCustomFieldBuilder {
	builder.value = value
	builder.valueFlag = true
	return builder
}

func (builder *ProfileSettingCustomFieldBuilder) Build() *ProfileSettingCustomField {
	req := &ProfileSettingCustomField{}
	if builder.fieldNameFlag {
		req.FieldName = &builder.fieldName

	}
	if builder.valueFlag {
		req.Value = &builder.value

	}
	return req
}

type ProfileSettingCustomGroup struct {
	GroupName *string                          `json:"group_name,omitempty"` // 分组名
	Items     []*ProfileSettingCustomGroupItem `json:"items,omitempty"`      // 分组数据
}

type ProfileSettingCustomGroupBuilder struct {
	groupName     string // 分组名
	groupNameFlag bool
	items         []*ProfileSettingCustomGroupItem // 分组数据
	itemsFlag     bool
}

func NewProfileSettingCustomGroupBuilder() *ProfileSettingCustomGroupBuilder {
	builder := &ProfileSettingCustomGroupBuilder{}
	return builder
}

// 分组名
//
// 示例值：custom_obj__c
func (builder *ProfileSettingCustomGroupBuilder) GroupName(groupName string) *ProfileSettingCustomGroupBuilder {
	builder.groupName = groupName
	builder.groupNameFlag = true
	return builder
}

// 分组数据
//
// 示例值：
func (builder *ProfileSettingCustomGroupBuilder) Items(items []*ProfileSettingCustomGroupItem) *ProfileSettingCustomGroupBuilder {
	builder.items = items
	builder.itemsFlag = true
	return builder
}

func (builder *ProfileSettingCustomGroupBuilder) Build() *ProfileSettingCustomGroup {
	req := &ProfileSettingCustomGroup{}
	if builder.groupNameFlag {
		req.GroupName = &builder.groupName

	}
	if builder.itemsFlag {
		req.Items = builder.items
	}
	return req
}

type ProfileSettingCustomGroupItem struct {
	CustomFields []*ProfileSettingCustomField `json:"custom_fields,omitempty"` // 自定义字段
}

type ProfileSettingCustomGroupItemBuilder struct {
	customFields     []*ProfileSettingCustomField // 自定义字段
	customFieldsFlag bool
}

func NewProfileSettingCustomGroupItemBuilder() *ProfileSettingCustomGroupItemBuilder {
	builder := &ProfileSettingCustomGroupItemBuilder{}
	return builder
}

// 自定义字段
//
// 示例值：
func (builder *ProfileSettingCustomGroupItemBuilder) CustomFields(customFields []*ProfileSettingCustomField) *ProfileSettingCustomGroupItemBuilder {
	builder.customFields = customFields
	builder.customFieldsFlag = true
	return builder
}

func (builder *ProfileSettingCustomGroupItemBuilder) Build() *ProfileSettingCustomGroupItem {
	req := &ProfileSettingCustomGroupItem{}
	if builder.customFieldsFlag {
		req.CustomFields = builder.customFields
	}
	return req
}

type ProfileSettingDataAttachment struct {
	PersonalRecords []*ProfileSettingPersonalRecord `json:"personal_records,omitempty"` // 资料附件记录
}

type ProfileSettingDataAttachmentBuilder struct {
	personalRecords     []*ProfileSettingPersonalRecord // 资料附件记录
	personalRecordsFlag bool
}

func NewProfileSettingDataAttachmentBuilder() *ProfileSettingDataAttachmentBuilder {
	builder := &ProfileSettingDataAttachmentBuilder{}
	return builder
}

// 资料附件记录
//
// 示例值：
func (builder *ProfileSettingDataAttachmentBuilder) PersonalRecords(personalRecords []*ProfileSettingPersonalRecord) *ProfileSettingDataAttachmentBuilder {
	builder.personalRecords = personalRecords
	builder.personalRecordsFlag = true
	return builder
}

func (builder *ProfileSettingDataAttachmentBuilder) Build() *ProfileSettingDataAttachment {
	req := &ProfileSettingDataAttachment{}
	if builder.personalRecordsFlag {
		req.PersonalRecords = builder.personalRecords
	}
	return req
}

type ProfileSettingDependent struct {
	LegalName                 *string                      `json:"legal_name,omitempty"`                  // 姓名
	DateOfBirth               *string                      `json:"date_of_birth,omitempty"`               // 生日
	RelationshipWithDependent *string                      `json:"relationship_with_dependent,omitempty"` // 关系，枚举值。 可选项可通过【获取字段详情】接口查询，查询参数如下： object_api_name = "dependent" custom_api_name ="relationship_with_dependent"
	Gender                    *string                      `json:"gender,omitempty"`                      // 性别，枚举值。 可选项可通过【获取字段详情】接口查询，查询参数如下： object_api_name = "dependent" custom_api_name = "gender"
	Phone                     *ProfileSettingPhone         `json:"phone,omitempty"`                       // 电话
	Job                       *string                      `json:"job,omitempty"`                         // 岗位
	ChildBirthCertificates    []*ProfileSettingFile        `json:"child_birth_certificates,omitempty"`    // 出生证明
	Employer                  *string                      `json:"employer,omitempty"`                    // 工作单位
	CustomFields              []*ProfileSettingCustomField `json:"custom_fields,omitempty"`               // 自定义字段
	Address                   *ProfileSettingAddress       `json:"address,omitempty"`                     // 联系地址
}

type ProfileSettingDependentBuilder struct {
	legalName                     string // 姓名
	legalNameFlag                 bool
	dateOfBirth                   string // 生日
	dateOfBirthFlag               bool
	relationshipWithDependent     string // 关系，枚举值。 可选项可通过【获取字段详情】接口查询，查询参数如下： object_api_name = "dependent" custom_api_name ="relationship_with_dependent"
	relationshipWithDependentFlag bool
	gender                        string // 性别，枚举值。 可选项可通过【获取字段详情】接口查询，查询参数如下： object_api_name = "dependent" custom_api_name = "gender"
	genderFlag                    bool
	phone                         *ProfileSettingPhone // 电话
	phoneFlag                     bool
	job                           string // 岗位
	jobFlag                       bool
	childBirthCertificates        []*ProfileSettingFile // 出生证明
	childBirthCertificatesFlag    bool
	employer                      string // 工作单位
	employerFlag                  bool
	customFields                  []*ProfileSettingCustomField // 自定义字段
	customFieldsFlag              bool
	address                       *ProfileSettingAddress // 联系地址
	addressFlag                   bool
}

func NewProfileSettingDependentBuilder() *ProfileSettingDependentBuilder {
	builder := &ProfileSettingDependentBuilder{}
	return builder
}

// 姓名
//
// 示例值：王大帅
func (builder *ProfileSettingDependentBuilder) LegalName(legalName string) *ProfileSettingDependentBuilder {
	builder.legalName = legalName
	builder.legalNameFlag = true
	return builder
}

// 生日
//
// 示例值：2006-01-02
func (builder *ProfileSettingDependentBuilder) DateOfBirth(dateOfBirth string) *ProfileSettingDependentBuilder {
	builder.dateOfBirth = dateOfBirth
	builder.dateOfBirthFlag = true
	return builder
}

// 关系，枚举值。 可选项可通过【获取字段详情】接口查询，查询参数如下： object_api_name = "dependent" custom_api_name ="relationship_with_dependent"
//
// 示例值：parent
func (builder *ProfileSettingDependentBuilder) RelationshipWithDependent(relationshipWithDependent string) *ProfileSettingDependentBuilder {
	builder.relationshipWithDependent = relationshipWithDependent
	builder.relationshipWithDependentFlag = true
	return builder
}

// 性别，枚举值。 可选项可通过【获取字段详情】接口查询，查询参数如下： object_api_name = "dependent" custom_api_name = "gender"
//
// 示例值：female
func (builder *ProfileSettingDependentBuilder) Gender(gender string) *ProfileSettingDependentBuilder {
	builder.gender = gender
	builder.genderFlag = true
	return builder
}

// 电话
//
// 示例值：
func (builder *ProfileSettingDependentBuilder) Phone(phone *ProfileSettingPhone) *ProfileSettingDependentBuilder {
	builder.phone = phone
	builder.phoneFlag = true
	return builder
}

// 岗位
//
// 示例值：岗位
func (builder *ProfileSettingDependentBuilder) Job(job string) *ProfileSettingDependentBuilder {
	builder.job = job
	builder.jobFlag = true
	return builder
}

// 出生证明
//
// 示例值：
func (builder *ProfileSettingDependentBuilder) ChildBirthCertificates(childBirthCertificates []*ProfileSettingFile) *ProfileSettingDependentBuilder {
	builder.childBirthCertificates = childBirthCertificates
	builder.childBirthCertificatesFlag = true
	return builder
}

// 工作单位
//
// 示例值：飞书
func (builder *ProfileSettingDependentBuilder) Employer(employer string) *ProfileSettingDependentBuilder {
	builder.employer = employer
	builder.employerFlag = true
	return builder
}

// 自定义字段
//
// 示例值：
func (builder *ProfileSettingDependentBuilder) CustomFields(customFields []*ProfileSettingCustomField) *ProfileSettingDependentBuilder {
	builder.customFields = customFields
	builder.customFieldsFlag = true
	return builder
}

// 联系地址
//
// 示例值：
func (builder *ProfileSettingDependentBuilder) Address(address *ProfileSettingAddress) *ProfileSettingDependentBuilder {
	builder.address = address
	builder.addressFlag = true
	return builder
}

func (builder *ProfileSettingDependentBuilder) Build() *ProfileSettingDependent {
	req := &ProfileSettingDependent{}
	if builder.legalNameFlag {
		req.LegalName = &builder.legalName

	}
	if builder.dateOfBirthFlag {
		req.DateOfBirth = &builder.dateOfBirth

	}
	if builder.relationshipWithDependentFlag {
		req.RelationshipWithDependent = &builder.relationshipWithDependent

	}
	if builder.genderFlag {
		req.Gender = &builder.gender

	}
	if builder.phoneFlag {
		req.Phone = builder.phone
	}
	if builder.jobFlag {
		req.Job = &builder.job

	}
	if builder.childBirthCertificatesFlag {
		req.ChildBirthCertificates = builder.childBirthCertificates
	}
	if builder.employerFlag {
		req.Employer = &builder.employer

	}
	if builder.customFieldsFlag {
		req.CustomFields = builder.customFields
	}
	if builder.addressFlag {
		req.Address = builder.address
	}
	return req
}

type ProfileSettingEducation struct {
	School           *string                      `json:"school,omitempty"`              // 学校
	SchoolEnum       *string                      `json:"school_enum,omitempty"`         // "学校, 枚举值。 可选项可通过【获取字段详情】接口查询，查询参数如下： object_api_name = ""education"" custom_api_name = ""school_name"""
	StartDate        *string                      `json:"start_date,omitempty"`          // 开始日期
	EndDate          *string                      `json:"end_date,omitempty"`            // 结束日期
	LevelOfEducation *string                      `json:"level_of_education,omitempty"`  // 学历, 枚举值。 可选项可通过【获取字段详情】接口查询，查询参数如下： object_api_name = "education" custom_api_name = "level_of_education"
	FieldOfStudy     *string                      `json:"field_of_study,omitempty"`      // 专业
	Degree           *string                      `json:"degree,omitempty"`              // 学位,枚举值。 可选项可通过【获取字段详情】接口查询，查询参数如下： object_api_name = "education" custom_api_name = "degree"
	FieldOfStudyEnum *string                      `json:"field_of_study_enum,omitempty"` // "专业，枚举值。 可选项可通过【获取字段详情】接口查询，查询参数如下： object_api_name = ""education"" custom_api_name = ""field_of_study_name"""
	CustomFields     []*ProfileSettingCustomField `json:"custom_fields,omitempty"`       // 自定义字段
}

type ProfileSettingEducationBuilder struct {
	school               string // 学校
	schoolFlag           bool
	schoolEnum           string // "学校, 枚举值。 可选项可通过【获取字段详情】接口查询，查询参数如下： object_api_name = ""education"" custom_api_name = ""school_name"""
	schoolEnumFlag       bool
	startDate            string // 开始日期
	startDateFlag        bool
	endDate              string // 结束日期
	endDateFlag          bool
	levelOfEducation     string // 学历, 枚举值。 可选项可通过【获取字段详情】接口查询，查询参数如下： object_api_name = "education" custom_api_name = "level_of_education"
	levelOfEducationFlag bool
	fieldOfStudy         string // 专业
	fieldOfStudyFlag     bool
	degree               string // 学位,枚举值。 可选项可通过【获取字段详情】接口查询，查询参数如下： object_api_name = "education" custom_api_name = "degree"
	degreeFlag           bool
	fieldOfStudyEnum     string // "专业，枚举值。 可选项可通过【获取字段详情】接口查询，查询参数如下： object_api_name = ""education"" custom_api_name = ""field_of_study_name"""
	fieldOfStudyEnumFlag bool
	customFields         []*ProfileSettingCustomField // 自定义字段
	customFieldsFlag     bool
}

func NewProfileSettingEducationBuilder() *ProfileSettingEducationBuilder {
	builder := &ProfileSettingEducationBuilder{}
	return builder
}

// 学校
//
// 示例值：北京大学
func (builder *ProfileSettingEducationBuilder) School(school string) *ProfileSettingEducationBuilder {
	builder.school = school
	builder.schoolFlag = true
	return builder
}

// "学校, 枚举值。 可选项可通过【获取字段详情】接口查询，查询参数如下： object_api_name = ""education"" custom_api_name = ""school_name"""
//
// 示例值：school-177
func (builder *ProfileSettingEducationBuilder) SchoolEnum(schoolEnum string) *ProfileSettingEducationBuilder {
	builder.schoolEnum = schoolEnum
	builder.schoolEnumFlag = true
	return builder
}

// 开始日期
//
// 示例值：2011-09-01
func (builder *ProfileSettingEducationBuilder) StartDate(startDate string) *ProfileSettingEducationBuilder {
	builder.startDate = startDate
	builder.startDateFlag = true
	return builder
}

// 结束日期
//
// 示例值：2015-06-30
func (builder *ProfileSettingEducationBuilder) EndDate(endDate string) *ProfileSettingEducationBuilder {
	builder.endDate = endDate
	builder.endDateFlag = true
	return builder
}

// 学历, 枚举值。 可选项可通过【获取字段详情】接口查询，查询参数如下： object_api_name = "education" custom_api_name = "level_of_education"
//
// 示例值：masters_degree
func (builder *ProfileSettingEducationBuilder) LevelOfEducation(levelOfEducation string) *ProfileSettingEducationBuilder {
	builder.levelOfEducation = levelOfEducation
	builder.levelOfEducationFlag = true
	return builder
}

// 专业
//
// 示例值：软件工程
func (builder *ProfileSettingEducationBuilder) FieldOfStudy(fieldOfStudy string) *ProfileSettingEducationBuilder {
	builder.fieldOfStudy = fieldOfStudy
	builder.fieldOfStudyFlag = true
	return builder
}

// 学位,枚举值。 可选项可通过【获取字段详情】接口查询，查询参数如下： object_api_name = "education" custom_api_name = "degree"
//
// 示例值：bachelors_degree
func (builder *ProfileSettingEducationBuilder) Degree(degree string) *ProfileSettingEducationBuilder {
	builder.degree = degree
	builder.degreeFlag = true
	return builder
}

// "专业，枚举值。 可选项可通过【获取字段详情】接口查询，查询参数如下： object_api_name = ""education"" custom_api_name = ""field_of_study_name"""
//
// 示例值：field_of_study-2
func (builder *ProfileSettingEducationBuilder) FieldOfStudyEnum(fieldOfStudyEnum string) *ProfileSettingEducationBuilder {
	builder.fieldOfStudyEnum = fieldOfStudyEnum
	builder.fieldOfStudyEnumFlag = true
	return builder
}

// 自定义字段
//
// 示例值：
func (builder *ProfileSettingEducationBuilder) CustomFields(customFields []*ProfileSettingCustomField) *ProfileSettingEducationBuilder {
	builder.customFields = customFields
	builder.customFieldsFlag = true
	return builder
}

func (builder *ProfileSettingEducationBuilder) Build() *ProfileSettingEducation {
	req := &ProfileSettingEducation{}
	if builder.schoolFlag {
		req.School = &builder.school

	}
	if builder.schoolEnumFlag {
		req.SchoolEnum = &builder.schoolEnum

	}
	if builder.startDateFlag {
		req.StartDate = &builder.startDate

	}
	if builder.endDateFlag {
		req.EndDate = &builder.endDate

	}
	if builder.levelOfEducationFlag {
		req.LevelOfEducation = &builder.levelOfEducation

	}
	if builder.fieldOfStudyFlag {
		req.FieldOfStudy = &builder.fieldOfStudy

	}
	if builder.degreeFlag {
		req.Degree = &builder.degree

	}
	if builder.fieldOfStudyEnumFlag {
		req.FieldOfStudyEnum = &builder.fieldOfStudyEnum

	}
	if builder.customFieldsFlag {
		req.CustomFields = builder.customFields
	}
	return req
}

type ProfileSettingEmergencyContact struct {
	LegalName    *string                      `json:"legal_name,omitempty"`    // 姓名
	Relationship *string                      `json:"relationship,omitempty"`  // 关系，枚举值。 可选项可通过【获取字段详情】接口查询，查询参数如下： object_api_name = "emergency_contract" custom_api_name = "relationship"
	IsPrimary    *bool                        `json:"is_primary,omitempty"`    // 主要联系人
	Phone        *ProfileSettingPhone         `json:"phone,omitempty"`         // 电话
	Email        *string                      `json:"email,omitempty"`         // 邮箱
	Address      *ProfileSettingAddress       `json:"address,omitempty"`       // 地址
	CustomFields []*ProfileSettingCustomField `json:"custom_fields,omitempty"` // 自定义字段
}

type ProfileSettingEmergencyContactBuilder struct {
	legalName        string // 姓名
	legalNameFlag    bool
	relationship     string // 关系，枚举值。 可选项可通过【获取字段详情】接口查询，查询参数如下： object_api_name = "emergency_contract" custom_api_name = "relationship"
	relationshipFlag bool
	isPrimary        bool // 主要联系人
	isPrimaryFlag    bool
	phone            *ProfileSettingPhone // 电话
	phoneFlag        bool
	email            string // 邮箱
	emailFlag        bool
	address          *ProfileSettingAddress // 地址
	addressFlag      bool
	customFields     []*ProfileSettingCustomField // 自定义字段
	customFieldsFlag bool
}

func NewProfileSettingEmergencyContactBuilder() *ProfileSettingEmergencyContactBuilder {
	builder := &ProfileSettingEmergencyContactBuilder{}
	return builder
}

// 姓名
//
// 示例值：王大帅
func (builder *ProfileSettingEmergencyContactBuilder) LegalName(legalName string) *ProfileSettingEmergencyContactBuilder {
	builder.legalName = legalName
	builder.legalNameFlag = true
	return builder
}

// 关系，枚举值。 可选项可通过【获取字段详情】接口查询，查询参数如下： object_api_name = "emergency_contract" custom_api_name = "relationship"
//
// 示例值：parent
func (builder *ProfileSettingEmergencyContactBuilder) Relationship(relationship string) *ProfileSettingEmergencyContactBuilder {
	builder.relationship = relationship
	builder.relationshipFlag = true
	return builder
}

// 主要联系人
//
// 示例值：true
func (builder *ProfileSettingEmergencyContactBuilder) IsPrimary(isPrimary bool) *ProfileSettingEmergencyContactBuilder {
	builder.isPrimary = isPrimary
	builder.isPrimaryFlag = true
	return builder
}

// 电话
//
// 示例值：
func (builder *ProfileSettingEmergencyContactBuilder) Phone(phone *ProfileSettingPhone) *ProfileSettingEmergencyContactBuilder {
	builder.phone = phone
	builder.phoneFlag = true
	return builder
}

// 邮箱
//
// 示例值：1234567@example.feishu.cn
func (builder *ProfileSettingEmergencyContactBuilder) Email(email string) *ProfileSettingEmergencyContactBuilder {
	builder.email = email
	builder.emailFlag = true
	return builder
}

// 地址
//
// 示例值：
func (builder *ProfileSettingEmergencyContactBuilder) Address(address *ProfileSettingAddress) *ProfileSettingEmergencyContactBuilder {
	builder.address = address
	builder.addressFlag = true
	return builder
}

// 自定义字段
//
// 示例值：
func (builder *ProfileSettingEmergencyContactBuilder) CustomFields(customFields []*ProfileSettingCustomField) *ProfileSettingEmergencyContactBuilder {
	builder.customFields = customFields
	builder.customFieldsFlag = true
	return builder
}

func (builder *ProfileSettingEmergencyContactBuilder) Build() *ProfileSettingEmergencyContact {
	req := &ProfileSettingEmergencyContact{}
	if builder.legalNameFlag {
		req.LegalName = &builder.legalName

	}
	if builder.relationshipFlag {
		req.Relationship = &builder.relationship

	}
	if builder.isPrimaryFlag {
		req.IsPrimary = &builder.isPrimary

	}
	if builder.phoneFlag {
		req.Phone = builder.phone
	}
	if builder.emailFlag {
		req.Email = &builder.email

	}
	if builder.addressFlag {
		req.Address = builder.address
	}
	if builder.customFieldsFlag {
		req.CustomFields = builder.customFields
	}
	return req
}

type ProfileSettingEmpBasicInfoForUpdate struct {
	EmployeeNumber           *string                      `json:"employee_number,omitempty"`             // 员工工号
	RegularEmployeeStartDate *string                      `json:"regular_employee_start_date,omitempty"` // 转正式员工日期
	SeniorityDate            *string                      `json:"seniority_date,omitempty"`              // 资历起算日期
	WorkEmail                *string                      `json:"work_email,omitempty"`                  // 工作邮箱
	Phone                    *ProfileSettingPhone         `json:"phone,omitempty"`                       // 工作电话
	CustomFields             []*ProfileSettingCustomField `json:"custom_fields,omitempty"`               // 自定义字段
}

type ProfileSettingEmpBasicInfoForUpdateBuilder struct {
	employeeNumber               string // 员工工号
	employeeNumberFlag           bool
	regularEmployeeStartDate     string // 转正式员工日期
	regularEmployeeStartDateFlag bool
	seniorityDate                string // 资历起算日期
	seniorityDateFlag            bool
	workEmail                    string // 工作邮箱
	workEmailFlag                bool
	phone                        *ProfileSettingPhone // 工作电话
	phoneFlag                    bool
	customFields                 []*ProfileSettingCustomField // 自定义字段
	customFieldsFlag             bool
}

func NewProfileSettingEmpBasicInfoForUpdateBuilder() *ProfileSettingEmpBasicInfoForUpdateBuilder {
	builder := &ProfileSettingEmpBasicInfoForUpdateBuilder{}
	return builder
}

// 员工工号
//
// 示例值：1000000
func (builder *ProfileSettingEmpBasicInfoForUpdateBuilder) EmployeeNumber(employeeNumber string) *ProfileSettingEmpBasicInfoForUpdateBuilder {
	builder.employeeNumber = employeeNumber
	builder.employeeNumberFlag = true
	return builder
}

// 转正式员工日期
//
// 示例值：2021-02-01
func (builder *ProfileSettingEmpBasicInfoForUpdateBuilder) RegularEmployeeStartDate(regularEmployeeStartDate string) *ProfileSettingEmpBasicInfoForUpdateBuilder {
	builder.regularEmployeeStartDate = regularEmployeeStartDate
	builder.regularEmployeeStartDateFlag = true
	return builder
}

// 资历起算日期
//
// 示例值：2021-02-01
func (builder *ProfileSettingEmpBasicInfoForUpdateBuilder) SeniorityDate(seniorityDate string) *ProfileSettingEmpBasicInfoForUpdateBuilder {
	builder.seniorityDate = seniorityDate
	builder.seniorityDateFlag = true
	return builder
}

// 工作邮箱
//
// 示例值：12456@test.com
func (builder *ProfileSettingEmpBasicInfoForUpdateBuilder) WorkEmail(workEmail string) *ProfileSettingEmpBasicInfoForUpdateBuilder {
	builder.workEmail = workEmail
	builder.workEmailFlag = true
	return builder
}

// 工作电话
//
// 示例值：
func (builder *ProfileSettingEmpBasicInfoForUpdateBuilder) Phone(phone *ProfileSettingPhone) *ProfileSettingEmpBasicInfoForUpdateBuilder {
	builder.phone = phone
	builder.phoneFlag = true
	return builder
}

// 自定义字段
//
// 示例值：
func (builder *ProfileSettingEmpBasicInfoForUpdateBuilder) CustomFields(customFields []*ProfileSettingCustomField) *ProfileSettingEmpBasicInfoForUpdateBuilder {
	builder.customFields = customFields
	builder.customFieldsFlag = true
	return builder
}

func (builder *ProfileSettingEmpBasicInfoForUpdateBuilder) Build() *ProfileSettingEmpBasicInfoForUpdate {
	req := &ProfileSettingEmpBasicInfoForUpdate{}
	if builder.employeeNumberFlag {
		req.EmployeeNumber = &builder.employeeNumber

	}
	if builder.regularEmployeeStartDateFlag {
		req.RegularEmployeeStartDate = &builder.regularEmployeeStartDate

	}
	if builder.seniorityDateFlag {
		req.SeniorityDate = &builder.seniorityDate

	}
	if builder.workEmailFlag {
		req.WorkEmail = &builder.workEmail

	}
	if builder.phoneFlag {
		req.Phone = builder.phone
	}
	if builder.customFieldsFlag {
		req.CustomFields = builder.customFields
	}
	return req
}

type ProfileSettingEmpContractRecord struct {
	ContractNumber  *string `json:"contract_number,omitempty"`   // 合同协议编号
	ContractType    *string `json:"contract_type,omitempty"`     // 合同类型，枚举值可选项 可通过【获取字段详情】接口查询，查询参数如下： object_api_name = "contract" custom_api_name = "contract_type"
	FirstParty      *string `json:"first_party,omitempty"`       // 甲方公司 ID, 引用Company的ID，详细信息可通过【查询单个公司】接口查询获得
	EffectiveTime   *string `json:"effective_time,omitempty"`    // 合同开始日期
	DurationType    *string `json:"duration_type,omitempty"`     // 期限类型，枚举值可选项 可通过【获取字段详情】接口查询，查询参数如下： object_api_name = "contract" custom_api_name = "duration_type"
	ContractEndDate *string `json:"contract_end_date,omitempty"` // 合同结束日期
}

type ProfileSettingEmpContractRecordBuilder struct {
	contractNumber      string // 合同协议编号
	contractNumberFlag  bool
	contractType        string // 合同类型，枚举值可选项 可通过【获取字段详情】接口查询，查询参数如下： object_api_name = "contract" custom_api_name = "contract_type"
	contractTypeFlag    bool
	firstParty          string // 甲方公司 ID, 引用Company的ID，详细信息可通过【查询单个公司】接口查询获得
	firstPartyFlag      bool
	effectiveTime       string // 合同开始日期
	effectiveTimeFlag   bool
	durationType        string // 期限类型，枚举值可选项 可通过【获取字段详情】接口查询，查询参数如下： object_api_name = "contract" custom_api_name = "duration_type"
	durationTypeFlag    bool
	contractEndDate     string // 合同结束日期
	contractEndDateFlag bool
}

func NewProfileSettingEmpContractRecordBuilder() *ProfileSettingEmpContractRecordBuilder {
	builder := &ProfileSettingEmpContractRecordBuilder{}
	return builder
}

// 合同协议编号
//
// 示例值：6919737965274990093
func (builder *ProfileSettingEmpContractRecordBuilder) ContractNumber(contractNumber string) *ProfileSettingEmpContractRecordBuilder {
	builder.contractNumber = contractNumber
	builder.contractNumberFlag = true
	return builder
}

// 合同类型，枚举值可选项 可通过【获取字段详情】接口查询，查询参数如下： object_api_name = "contract" custom_api_name = "contract_type"
//
// 示例值：labor_contract
func (builder *ProfileSettingEmpContractRecordBuilder) ContractType(contractType string) *ProfileSettingEmpContractRecordBuilder {
	builder.contractType = contractType
	builder.contractTypeFlag = true
	return builder
}

// 甲方公司 ID, 引用Company的ID，详细信息可通过【查询单个公司】接口查询获得
//
// 示例值：6892686614112241165
func (builder *ProfileSettingEmpContractRecordBuilder) FirstParty(firstParty string) *ProfileSettingEmpContractRecordBuilder {
	builder.firstParty = firstParty
	builder.firstPartyFlag = true
	return builder
}

// 合同开始日期
//
// 示例值：2006-01-02
func (builder *ProfileSettingEmpContractRecordBuilder) EffectiveTime(effectiveTime string) *ProfileSettingEmpContractRecordBuilder {
	builder.effectiveTime = effectiveTime
	builder.effectiveTimeFlag = true
	return builder
}

// 期限类型，枚举值可选项 可通过【获取字段详情】接口查询，查询参数如下： object_api_name = "contract" custom_api_name = "duration_type"
//
// 示例值：fixed_term
func (builder *ProfileSettingEmpContractRecordBuilder) DurationType(durationType string) *ProfileSettingEmpContractRecordBuilder {
	builder.durationType = durationType
	builder.durationTypeFlag = true
	return builder
}

// 合同结束日期
//
// 示例值：2050-01-01
func (builder *ProfileSettingEmpContractRecordBuilder) ContractEndDate(contractEndDate string) *ProfileSettingEmpContractRecordBuilder {
	builder.contractEndDate = contractEndDate
	builder.contractEndDateFlag = true
	return builder
}

func (builder *ProfileSettingEmpContractRecordBuilder) Build() *ProfileSettingEmpContractRecord {
	req := &ProfileSettingEmpContractRecord{}
	if builder.contractNumberFlag {
		req.ContractNumber = &builder.contractNumber

	}
	if builder.contractTypeFlag {
		req.ContractType = &builder.contractType

	}
	if builder.firstPartyFlag {
		req.FirstParty = &builder.firstParty

	}
	if builder.effectiveTimeFlag {
		req.EffectiveTime = &builder.effectiveTime

	}
	if builder.durationTypeFlag {
		req.DurationType = &builder.durationType

	}
	if builder.contractEndDateFlag {
		req.ContractEndDate = &builder.contractEndDate

	}
	return req
}

type ProfileSettingEmpInfoForUpdate struct {
	BasicInfo     *ProfileSettingEmpBasicInfoForUpdate `json:"basic_info,omitempty"`     // 基本信息
	ProbationInfo *ProfileSettingProbationInfo         `json:"probation_info,omitempty"` // 试用期信息
}

type ProfileSettingEmpInfoForUpdateBuilder struct {
	basicInfo         *ProfileSettingEmpBasicInfoForUpdate // 基本信息
	basicInfoFlag     bool
	probationInfo     *ProfileSettingProbationInfo // 试用期信息
	probationInfoFlag bool
}

func NewProfileSettingEmpInfoForUpdateBuilder() *ProfileSettingEmpInfoForUpdateBuilder {
	builder := &ProfileSettingEmpInfoForUpdateBuilder{}
	return builder
}

// 基本信息
//
// 示例值：
func (builder *ProfileSettingEmpInfoForUpdateBuilder) BasicInfo(basicInfo *ProfileSettingEmpBasicInfoForUpdate) *ProfileSettingEmpInfoForUpdateBuilder {
	builder.basicInfo = basicInfo
	builder.basicInfoFlag = true
	return builder
}

// 试用期信息
//
// 示例值：
func (builder *ProfileSettingEmpInfoForUpdateBuilder) ProbationInfo(probationInfo *ProfileSettingProbationInfo) *ProfileSettingEmpInfoForUpdateBuilder {
	builder.probationInfo = probationInfo
	builder.probationInfoFlag = true
	return builder
}

func (builder *ProfileSettingEmpInfoForUpdateBuilder) Build() *ProfileSettingEmpInfoForUpdate {
	req := &ProfileSettingEmpInfoForUpdate{}
	if builder.basicInfoFlag {
		req.BasicInfo = builder.basicInfo
	}
	if builder.probationInfoFlag {
		req.ProbationInfo = builder.probationInfo
	}
	return req
}

type ProfileSettingEmploymentBasicInfo struct {
	EmployeeNumber *string `json:"employee_number,omitempty"` // 员工编号

	EffectiveTime            *string                      `json:"effective_time,omitempty"`              // 入职日期
	RegularEmployeeStartDate *string                      `json:"regular_employee_start_date,omitempty"` // 转正式员工日期
	SeniorityDate            *string                      `json:"seniority_date,omitempty"`              // 资历起算日期
	WorkEmail                *string                      `json:"work_email,omitempty"`                  // 工作邮箱
	Phone                    *ProfileSettingPhone         `json:"phone,omitempty"`                       // 工作电话
	CustomFields             []*ProfileSettingCustomField `json:"custom_fields,omitempty"`               // 自定义字段
}

type ProfileSettingEmploymentBasicInfoBuilder struct {
	employeeNumber     string // 员工编号
	employeeNumberFlag bool

	effectiveTime                string // 入职日期
	effectiveTimeFlag            bool
	regularEmployeeStartDate     string // 转正式员工日期
	regularEmployeeStartDateFlag bool
	seniorityDate                string // 资历起算日期
	seniorityDateFlag            bool
	workEmail                    string // 工作邮箱
	workEmailFlag                bool
	phone                        *ProfileSettingPhone // 工作电话
	phoneFlag                    bool
	customFields                 []*ProfileSettingCustomField // 自定义字段
	customFieldsFlag             bool
}

func NewProfileSettingEmploymentBasicInfoBuilder() *ProfileSettingEmploymentBasicInfoBuilder {
	builder := &ProfileSettingEmploymentBasicInfoBuilder{}
	return builder
}

// 员工编号
//
// 示例值：1000000
func (builder *ProfileSettingEmploymentBasicInfoBuilder) EmployeeNumber(employeeNumber string) *ProfileSettingEmploymentBasicInfoBuilder {
	builder.employeeNumber = employeeNumber
	builder.employeeNumberFlag = true
	return builder
}

// 入职日期
//
// 示例值：2021-01-01
func (builder *ProfileSettingEmploymentBasicInfoBuilder) EffectiveTime(effectiveTime string) *ProfileSettingEmploymentBasicInfoBuilder {
	builder.effectiveTime = effectiveTime
	builder.effectiveTimeFlag = true
	return builder
}

// 转正式员工日期
//
// 示例值：2021-02-01
func (builder *ProfileSettingEmploymentBasicInfoBuilder) RegularEmployeeStartDate(regularEmployeeStartDate string) *ProfileSettingEmploymentBasicInfoBuilder {
	builder.regularEmployeeStartDate = regularEmployeeStartDate
	builder.regularEmployeeStartDateFlag = true
	return builder
}

// 资历起算日期
//
// 示例值：2020-01-01
func (builder *ProfileSettingEmploymentBasicInfoBuilder) SeniorityDate(seniorityDate string) *ProfileSettingEmploymentBasicInfoBuilder {
	builder.seniorityDate = seniorityDate
	builder.seniorityDateFlag = true
	return builder
}

// 工作邮箱
//
// 示例值：12456@test.com
func (builder *ProfileSettingEmploymentBasicInfoBuilder) WorkEmail(workEmail string) *ProfileSettingEmploymentBasicInfoBuilder {
	builder.workEmail = workEmail
	builder.workEmailFlag = true
	return builder
}

// 工作电话
//
// 示例值：
func (builder *ProfileSettingEmploymentBasicInfoBuilder) Phone(phone *ProfileSettingPhone) *ProfileSettingEmploymentBasicInfoBuilder {
	builder.phone = phone
	builder.phoneFlag = true
	return builder
}

// 自定义字段
//
// 示例值：
func (builder *ProfileSettingEmploymentBasicInfoBuilder) CustomFields(customFields []*ProfileSettingCustomField) *ProfileSettingEmploymentBasicInfoBuilder {
	builder.customFields = customFields
	builder.customFieldsFlag = true
	return builder
}

func (builder *ProfileSettingEmploymentBasicInfoBuilder) Build() *ProfileSettingEmploymentBasicInfo {
	req := &ProfileSettingEmploymentBasicInfo{}
	if builder.employeeNumberFlag {
		req.EmployeeNumber = &builder.employeeNumber

	}

	if builder.effectiveTimeFlag {
		req.EffectiveTime = &builder.effectiveTime

	}
	if builder.regularEmployeeStartDateFlag {
		req.RegularEmployeeStartDate = &builder.regularEmployeeStartDate

	}
	if builder.seniorityDateFlag {
		req.SeniorityDate = &builder.seniorityDate

	}
	if builder.workEmailFlag {
		req.WorkEmail = &builder.workEmail

	}
	if builder.phoneFlag {
		req.Phone = builder.phone
	}
	if builder.customFieldsFlag {
		req.CustomFields = builder.customFields
	}
	return req
}

type ProfileSettingEmploymentInfo struct {
	BasicInfo         *ProfileSettingEmploymentBasicInfo `json:"basic_info,omitempty"`          // 基本信息
	ProbationInfo     *ProfileSettingProbationInfo       `json:"probation_info,omitempty"`      // 试用期信息
	EmploymentRecord  *ProfileSettingEmploymentRecord    `json:"employment_record,omitempty"`   // 任职记录
	EmpContractRecord *ProfileSettingEmpContractRecord   `json:"emp_contract_record,omitempty"` // 合同记录
}

type ProfileSettingEmploymentInfoBuilder struct {
	basicInfo             *ProfileSettingEmploymentBasicInfo // 基本信息
	basicInfoFlag         bool
	probationInfo         *ProfileSettingProbationInfo // 试用期信息
	probationInfoFlag     bool
	employmentRecord      *ProfileSettingEmploymentRecord // 任职记录
	employmentRecordFlag  bool
	empContractRecord     *ProfileSettingEmpContractRecord // 合同记录
	empContractRecordFlag bool
}

func NewProfileSettingEmploymentInfoBuilder() *ProfileSettingEmploymentInfoBuilder {
	builder := &ProfileSettingEmploymentInfoBuilder{}
	return builder
}

// 基本信息
//
// 示例值：
func (builder *ProfileSettingEmploymentInfoBuilder) BasicInfo(basicInfo *ProfileSettingEmploymentBasicInfo) *ProfileSettingEmploymentInfoBuilder {
	builder.basicInfo = basicInfo
	builder.basicInfoFlag = true
	return builder
}

// 试用期信息
//
// 示例值：
func (builder *ProfileSettingEmploymentInfoBuilder) ProbationInfo(probationInfo *ProfileSettingProbationInfo) *ProfileSettingEmploymentInfoBuilder {
	builder.probationInfo = probationInfo
	builder.probationInfoFlag = true
	return builder
}

// 任职记录
//
// 示例值：
func (builder *ProfileSettingEmploymentInfoBuilder) EmploymentRecord(employmentRecord *ProfileSettingEmploymentRecord) *ProfileSettingEmploymentInfoBuilder {
	builder.employmentRecord = employmentRecord
	builder.employmentRecordFlag = true
	return builder
}

// 合同记录
//
// 示例值：
func (builder *ProfileSettingEmploymentInfoBuilder) EmpContractRecord(empContractRecord *ProfileSettingEmpContractRecord) *ProfileSettingEmploymentInfoBuilder {
	builder.empContractRecord = empContractRecord
	builder.empContractRecordFlag = true
	return builder
}

func (builder *ProfileSettingEmploymentInfoBuilder) Build() *ProfileSettingEmploymentInfo {
	req := &ProfileSettingEmploymentInfo{}
	if builder.basicInfoFlag {
		req.BasicInfo = builder.basicInfo
	}
	if builder.probationInfoFlag {
		req.ProbationInfo = builder.probationInfo
	}
	if builder.employmentRecordFlag {
		req.EmploymentRecord = builder.employmentRecord
	}
	if builder.empContractRecordFlag {
		req.EmpContractRecord = builder.empContractRecord
	}
	return req
}

type ProfileSettingEmploymentRecord struct {
	EmployeeType                   *string                     `json:"employee_type,omitempty"`                      // 人员类型 ID
	Department                     *string                     `json:"department,omitempty"`                         // 部门 ID
	DirectManager                  *string                     `json:"direct_manager,omitempty"`                     // 实线主管雇佣ID
	WorkingHoursType               *string                     `json:"working_hours_type,omitempty"`                 // 工时制度 ID
	CostCenters                    []*ProfileSettingCostCenter `json:"cost_centers,omitempty"`                       // 成本中心分摊信息
	DirectManagerEffectiveTime     *string                     `json:"direct_manager_effective_time,omitempty"`      // 实线主管入职日期
	DottedLineManager              *string                     `json:"dotted_line_manager,omitempty"`                // 虚线主管雇佣ID
	DottedLineManagerEffectiveTime *string                     `json:"dotted_line_manager_effective_time,omitempty"` // 虚线主管入职日期
	Job                            *string                     `json:"job,omitempty"`                                // 职务 ID
	JobFamily                      *string                     `json:"job_family,omitempty"`                         // 职务序列 ID
	JobLevel                       *string                     `json:"job_level,omitempty"`                          // 职务级别 ID
	JobGrade                       *string                     `json:"job_grade,omitempty"`                          // 职等 ID
	WorkLocation                   *string                     `json:"work_location,omitempty"`                      // 工作地点 ID
	WeeklyWorkingHours             *int                        `json:"weekly_working_hours,omitempty"`               // 周工作时长
}

type ProfileSettingEmploymentRecordBuilder struct {
	employeeType                       string // 人员类型 ID
	employeeTypeFlag                   bool
	department                         string // 部门 ID
	departmentFlag                     bool
	directManager                      string // 实线主管雇佣ID
	directManagerFlag                  bool
	workingHoursType                   string // 工时制度 ID
	workingHoursTypeFlag               bool
	costCenters                        []*ProfileSettingCostCenter // 成本中心分摊信息
	costCentersFlag                    bool
	directManagerEffectiveTime         string // 实线主管入职日期
	directManagerEffectiveTimeFlag     bool
	dottedLineManager                  string // 虚线主管雇佣ID
	dottedLineManagerFlag              bool
	dottedLineManagerEffectiveTime     string // 虚线主管入职日期
	dottedLineManagerEffectiveTimeFlag bool
	job                                string // 职务 ID
	jobFlag                            bool
	jobFamily                          string // 职务序列 ID
	jobFamilyFlag                      bool
	jobLevel                           string // 职务级别 ID
	jobLevelFlag                       bool
	jobGrade                           string // 职等 ID
	jobGradeFlag                       bool
	workLocation                       string // 工作地点 ID
	workLocationFlag                   bool
	weeklyWorkingHours                 int // 周工作时长
	weeklyWorkingHoursFlag             bool
}

func NewProfileSettingEmploymentRecordBuilder() *ProfileSettingEmploymentRecordBuilder {
	builder := &ProfileSettingEmploymentRecordBuilder{}
	return builder
}

// 人员类型 ID
//
// 示例值：6890452208593372679
func (builder *ProfileSettingEmploymentRecordBuilder) EmployeeType(employeeType string) *ProfileSettingEmploymentRecordBuilder {
	builder.employeeType = employeeType
	builder.employeeTypeFlag = true
	return builder
}

// 部门 ID
//
// 示例值：6890452208593372679
func (builder *ProfileSettingEmploymentRecordBuilder) Department(department string) *ProfileSettingEmploymentRecordBuilder {
	builder.department = department
	builder.departmentFlag = true
	return builder
}

// 实线主管雇佣ID
//
// 示例值：6893014062142064135
func (builder *ProfileSettingEmploymentRecordBuilder) DirectManager(directManager string) *ProfileSettingEmploymentRecordBuilder {
	builder.directManager = directManager
	builder.directManagerFlag = true
	return builder
}

// 工时制度 ID
//
// 示例值：6890452208593372600
func (builder *ProfileSettingEmploymentRecordBuilder) WorkingHoursType(workingHoursType string) *ProfileSettingEmploymentRecordBuilder {
	builder.workingHoursType = workingHoursType
	builder.workingHoursTypeFlag = true
	return builder
}

// 成本中心分摊信息
//
// 示例值：
func (builder *ProfileSettingEmploymentRecordBuilder) CostCenters(costCenters []*ProfileSettingCostCenter) *ProfileSettingEmploymentRecordBuilder {
	builder.costCenters = costCenters
	builder.costCentersFlag = true
	return builder
}

// 实线主管入职日期
//
// 示例值：2020-01-01
func (builder *ProfileSettingEmploymentRecordBuilder) DirectManagerEffectiveTime(directManagerEffectiveTime string) *ProfileSettingEmploymentRecordBuilder {
	builder.directManagerEffectiveTime = directManagerEffectiveTime
	builder.directManagerEffectiveTimeFlag = true
	return builder
}

// 虚线主管雇佣ID
//
// 示例值：6893014062142064136
func (builder *ProfileSettingEmploymentRecordBuilder) DottedLineManager(dottedLineManager string) *ProfileSettingEmploymentRecordBuilder {
	builder.dottedLineManager = dottedLineManager
	builder.dottedLineManagerFlag = true
	return builder
}

// 虚线主管入职日期
//
// 示例值：2020-01-01
func (builder *ProfileSettingEmploymentRecordBuilder) DottedLineManagerEffectiveTime(dottedLineManagerEffectiveTime string) *ProfileSettingEmploymentRecordBuilder {
	builder.dottedLineManagerEffectiveTime = dottedLineManagerEffectiveTime
	builder.dottedLineManagerEffectiveTimeFlag = true
	return builder
}

// 职务 ID
//
// 示例值：6890452208593372679
func (builder *ProfileSettingEmploymentRecordBuilder) Job(job string) *ProfileSettingEmploymentRecordBuilder {
	builder.job = job
	builder.jobFlag = true
	return builder
}

// 职务序列 ID
//
// 示例值：6890452208593372680
func (builder *ProfileSettingEmploymentRecordBuilder) JobFamily(jobFamily string) *ProfileSettingEmploymentRecordBuilder {
	builder.jobFamily = jobFamily
	builder.jobFamilyFlag = true
	return builder
}

// 职务级别 ID
//
// 示例值：6890452208593372681
func (builder *ProfileSettingEmploymentRecordBuilder) JobLevel(jobLevel string) *ProfileSettingEmploymentRecordBuilder {
	builder.jobLevel = jobLevel
	builder.jobLevelFlag = true
	return builder
}

// 职等 ID
//
// 示例值：6890452208593372682
func (builder *ProfileSettingEmploymentRecordBuilder) JobGrade(jobGrade string) *ProfileSettingEmploymentRecordBuilder {
	builder.jobGrade = jobGrade
	builder.jobGradeFlag = true
	return builder
}

// 工作地点 ID
//
// 示例值：6890452208593372683
func (builder *ProfileSettingEmploymentRecordBuilder) WorkLocation(workLocation string) *ProfileSettingEmploymentRecordBuilder {
	builder.workLocation = workLocation
	builder.workLocationFlag = true
	return builder
}

// 周工作时长
//
// 示例值：100
func (builder *ProfileSettingEmploymentRecordBuilder) WeeklyWorkingHours(weeklyWorkingHours int) *ProfileSettingEmploymentRecordBuilder {
	builder.weeklyWorkingHours = weeklyWorkingHours
	builder.weeklyWorkingHoursFlag = true
	return builder
}

func (builder *ProfileSettingEmploymentRecordBuilder) Build() *ProfileSettingEmploymentRecord {
	req := &ProfileSettingEmploymentRecord{}
	if builder.employeeTypeFlag {
		req.EmployeeType = &builder.employeeType

	}
	if builder.departmentFlag {
		req.Department = &builder.department

	}
	if builder.directManagerFlag {
		req.DirectManager = &builder.directManager

	}
	if builder.workingHoursTypeFlag {
		req.WorkingHoursType = &builder.workingHoursType

	}
	if builder.costCentersFlag {
		req.CostCenters = builder.costCenters
	}
	if builder.directManagerEffectiveTimeFlag {
		req.DirectManagerEffectiveTime = &builder.directManagerEffectiveTime

	}
	if builder.dottedLineManagerFlag {
		req.DottedLineManager = &builder.dottedLineManager

	}
	if builder.dottedLineManagerEffectiveTimeFlag {
		req.DottedLineManagerEffectiveTime = &builder.dottedLineManagerEffectiveTime

	}
	if builder.jobFlag {
		req.Job = &builder.job

	}
	if builder.jobFamilyFlag {
		req.JobFamily = &builder.jobFamily

	}
	if builder.jobLevelFlag {
		req.JobLevel = &builder.jobLevel

	}
	if builder.jobGradeFlag {
		req.JobGrade = &builder.jobGrade

	}
	if builder.workLocationFlag {
		req.WorkLocation = &builder.workLocation

	}
	if builder.weeklyWorkingHoursFlag {
		req.WeeklyWorkingHours = &builder.weeklyWorkingHours

	}
	return req
}

type ProfileSettingFieldError struct {
	FieldName *string `json:"field_name,omitempty"` // 字段路径
	ErrorMsg  *string `json:"error_msg,omitempty"`  // 报错信息
}

type ProfileSettingFieldErrorBuilder struct {
	fieldName     string // 字段路径
	fieldNameFlag bool
	errorMsg      string // 报错信息
	errorMsgFlag  bool
}

func NewProfileSettingFieldErrorBuilder() *ProfileSettingFieldErrorBuilder {
	builder := &ProfileSettingFieldErrorBuilder{}
	return builder
}

// 字段路径
//
// 示例值：emp_contract_record.0.effective_time
func (builder *ProfileSettingFieldErrorBuilder) FieldName(fieldName string) *ProfileSettingFieldErrorBuilder {
	builder.fieldName = fieldName
	builder.fieldNameFlag = true
	return builder
}

// 报错信息
//
// 示例值：填写过程中新增以下必填信息 effective_time 等，请填写后重试
func (builder *ProfileSettingFieldErrorBuilder) ErrorMsg(errorMsg string) *ProfileSettingFieldErrorBuilder {
	builder.errorMsg = errorMsg
	builder.errorMsgFlag = true
	return builder
}

func (builder *ProfileSettingFieldErrorBuilder) Build() *ProfileSettingFieldError {
	req := &ProfileSettingFieldError{}
	if builder.fieldNameFlag {
		req.FieldName = &builder.fieldName

	}
	if builder.errorMsgFlag {
		req.ErrorMsg = &builder.errorMsg

	}
	return req
}

type ProfileSettingFile struct {
	FileId   *string `json:"file_id,omitempty"`   // 文件ID
	MimeType *string `json:"mime_type,omitempty"` // 文件MIME类型
	Name     *string `json:"name,omitempty"`      // 文件名
	Size     *string `json:"size,omitempty"`      // 文件大小(KB)
	Token    *string `json:"token,omitempty"`     // 文件token
}

type ProfileSettingFileBuilder struct {
	fileId       string // 文件ID
	fileIdFlag   bool
	mimeType     string // 文件MIME类型
	mimeTypeFlag bool
	name         string // 文件名
	nameFlag     bool
	size         string // 文件大小(KB)
	sizeFlag     bool
	token        string // 文件token
	tokenFlag    bool
}

func NewProfileSettingFileBuilder() *ProfileSettingFileBuilder {
	builder := &ProfileSettingFileBuilder{}
	return builder
}

// 文件ID
//
// 示例值：150018109586e8ea745e47ae8feb3722dbe1d03a181336393633393133303431393831343930373235150200
func (builder *ProfileSettingFileBuilder) FileId(fileId string) *ProfileSettingFileBuilder {
	builder.fileId = fileId
	builder.fileIdFlag = true
	return builder
}

// 文件MIME类型
//
// 示例值：zip
func (builder *ProfileSettingFileBuilder) MimeType(mimeType string) *ProfileSettingFileBuilder {
	builder.mimeType = mimeType
	builder.mimeTypeFlag = true
	return builder
}

// 文件名
//
// 示例值：附件.zip
func (builder *ProfileSettingFileBuilder) Name(name string) *ProfileSettingFileBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}

// 文件大小(KB)
//
// 示例值：1000
func (builder *ProfileSettingFileBuilder) Size(size string) *ProfileSettingFileBuilder {
	builder.size = size
	builder.sizeFlag = true
	return builder
}

// 文件token
//
// 示例值：0a423bc7ea7c4a439d066bf070616782
func (builder *ProfileSettingFileBuilder) Token(token string) *ProfileSettingFileBuilder {
	builder.token = token
	builder.tokenFlag = true
	return builder
}

func (builder *ProfileSettingFileBuilder) Build() *ProfileSettingFile {
	req := &ProfileSettingFile{}
	if builder.fileIdFlag {
		req.FileId = &builder.fileId

	}
	if builder.mimeTypeFlag {
		req.MimeType = &builder.mimeType

	}
	if builder.nameFlag {
		req.Name = &builder.name

	}
	if builder.sizeFlag {
		req.Size = &builder.size

	}
	if builder.tokenFlag {
		req.Token = &builder.token

	}
	return req
}

type ProfileSettingHukou struct {
	HukouType     *string                      `json:"hukou_type,omitempty"`     // 户口类型，枚举值。 可选项可通过【获取字段详情】接口查询，查询参数如下： object_api_name = "person_info_chn" custom_api_name = "hukou_type"
	HukouLocation *string                      `json:"hukou_location,omitempty"` // 户口所在地
	CustomFields  []*ProfileSettingCustomField `json:"custom_fields,omitempty"`  // 自定义字段
}

type ProfileSettingHukouBuilder struct {
	hukouType         string // 户口类型，枚举值。 可选项可通过【获取字段详情】接口查询，查询参数如下： object_api_name = "person_info_chn" custom_api_name = "hukou_type"
	hukouTypeFlag     bool
	hukouLocation     string // 户口所在地
	hukouLocationFlag bool
	customFields      []*ProfileSettingCustomField // 自定义字段
	customFieldsFlag  bool
}

func NewProfileSettingHukouBuilder() *ProfileSettingHukouBuilder {
	builder := &ProfileSettingHukouBuilder{}
	return builder
}

// 户口类型，枚举值。 可选项可通过【获取字段详情】接口查询，查询参数如下： object_api_name = "person_info_chn" custom_api_name = "hukou_type"
//
// 示例值：local_urban_residence
func (builder *ProfileSettingHukouBuilder) HukouType(hukouType string) *ProfileSettingHukouBuilder {
	builder.hukouType = hukouType
	builder.hukouTypeFlag = true
	return builder
}

// 户口所在地
//
// 示例值：北京
func (builder *ProfileSettingHukouBuilder) HukouLocation(hukouLocation string) *ProfileSettingHukouBuilder {
	builder.hukouLocation = hukouLocation
	builder.hukouLocationFlag = true
	return builder
}

// 自定义字段
//
// 示例值：
func (builder *ProfileSettingHukouBuilder) CustomFields(customFields []*ProfileSettingCustomField) *ProfileSettingHukouBuilder {
	builder.customFields = customFields
	builder.customFieldsFlag = true
	return builder
}

func (builder *ProfileSettingHukouBuilder) Build() *ProfileSettingHukou {
	req := &ProfileSettingHukou{}
	if builder.hukouTypeFlag {
		req.HukouType = &builder.hukouType

	}
	if builder.hukouLocationFlag {
		req.HukouLocation = &builder.hukouLocation

	}
	if builder.customFieldsFlag {
		req.CustomFields = builder.customFields
	}
	return req
}

type ProfileSettingI18n struct {
	ZhCn *string `json:"zh_cn,omitempty"` // 中文
	EnUs *string `json:"en_us,omitempty"` // 英文
}

type ProfileSettingI18nBuilder struct {
	zhCn     string // 中文
	zhCnFlag bool
	enUs     string // 英文
	enUsFlag bool
}

func NewProfileSettingI18nBuilder() *ProfileSettingI18nBuilder {
	builder := &ProfileSettingI18nBuilder{}
	return builder
}

// 中文
//
// 示例值：中文名
func (builder *ProfileSettingI18nBuilder) ZhCn(zhCn string) *ProfileSettingI18nBuilder {
	builder.zhCn = zhCn
	builder.zhCnFlag = true
	return builder
}

// 英文
//
// 示例值：english name
func (builder *ProfileSettingI18nBuilder) EnUs(enUs string) *ProfileSettingI18nBuilder {
	builder.enUs = enUs
	builder.enUsFlag = true
	return builder
}

func (builder *ProfileSettingI18nBuilder) Build() *ProfileSettingI18n {
	req := &ProfileSettingI18n{}
	if builder.zhCnFlag {
		req.ZhCn = &builder.zhCn

	}
	if builder.enUsFlag {
		req.EnUs = &builder.enUs

	}
	return req
}

type ProfileSettingName struct {
	AdditionalNameType *string `json:"additional_name_type,omitempty"` // 补充姓名类型, 枚举值。可选项可以通过【获取字段详情】接口查询，查询参数如下： - object_api_name = "person_name" - custom_api_name = "additional_name_type"
	CountryRegion      *string `json:"country_region,omitempty"`       // 国家 / 地区 ID
	FullName           *string `json:"full_name,omitempty"`            // 全名
	Hereditary         *string `json:"hereditary,omitempty"`           // 姓氏称谓
	MiddleName         *string `json:"middle_name,omitempty"`          // 中间名
	Secondary          *string `json:"secondary,omitempty"`            // 第二姓氏
	Social             *string `json:"social,omitempty"`               // 尊称,枚举值。可选项可以通过【获取字段详情】接口查询，查询参数如下： - object_api_name = "person_name" - custom_api_name = "social"
	Tertiary           *string `json:"tertiary,omitempty"`             // 婚后姓氏
	LocalFirstName2    *string `json:"local_first_name_2,omitempty"`   // 名 - 第二本地文字
	LocalMiddleName    *string `json:"local_middle_name,omitempty"`    // 本地中间名
	LocalPrimary       *string `json:"local_primary,omitempty"`        // 姓 - 本地文字
	LocalPrimary2      *string `json:"local_primary_2,omitempty"`      // 姓 - 第二本地文字
	LocalSecondary     *string `json:"local_secondary,omitempty"`      // 第二姓氏 - 本地文字
	Title              *string `json:"title,omitempty"`                // 头衔, 枚举值。可选项可以通过【获取字段详情】接口查询，查询参数如下： - object_api_name = "person_name" - custom_api_name = "title"
	LocalFirstName     *string `json:"local_first_name,omitempty"`     // 名 - 本地文字
	CustomLocalName    *string `json:"custom_local_name,omitempty"`    // 自定义姓名（本地文字）
	CustomWesternName  *string `json:"custom_western_name,omitempty"`  // 自定义姓名（西方文字）
	NameType           *string `json:"name_type,omitempty"`            // 姓名类型
	FirstName          *string `json:"first_name,omitempty"`           // 名
	NamePrimary        *string `json:"name_primary,omitempty"`         // 姓
}

type ProfileSettingNameBuilder struct {
	additionalNameType     string // 补充姓名类型, 枚举值。可选项可以通过【获取字段详情】接口查询，查询参数如下： - object_api_name = "person_name" - custom_api_name = "additional_name_type"
	additionalNameTypeFlag bool
	countryRegion          string // 国家 / 地区 ID
	countryRegionFlag      bool
	fullName               string // 全名
	fullNameFlag           bool
	hereditary             string // 姓氏称谓
	hereditaryFlag         bool
	middleName             string // 中间名
	middleNameFlag         bool
	secondary              string // 第二姓氏
	secondaryFlag          bool
	social                 string // 尊称,枚举值。可选项可以通过【获取字段详情】接口查询，查询参数如下： - object_api_name = "person_name" - custom_api_name = "social"
	socialFlag             bool
	tertiary               string // 婚后姓氏
	tertiaryFlag           bool
	localFirstName2        string // 名 - 第二本地文字
	localFirstName2Flag    bool
	localMiddleName        string // 本地中间名
	localMiddleNameFlag    bool
	localPrimary           string // 姓 - 本地文字
	localPrimaryFlag       bool
	localPrimary2          string // 姓 - 第二本地文字
	localPrimary2Flag      bool
	localSecondary         string // 第二姓氏 - 本地文字
	localSecondaryFlag     bool
	title                  string // 头衔, 枚举值。可选项可以通过【获取字段详情】接口查询，查询参数如下： - object_api_name = "person_name" - custom_api_name = "title"
	titleFlag              bool
	localFirstName         string // 名 - 本地文字
	localFirstNameFlag     bool
	customLocalName        string // 自定义姓名（本地文字）
	customLocalNameFlag    bool
	customWesternName      string // 自定义姓名（西方文字）
	customWesternNameFlag  bool
	nameType               string // 姓名类型
	nameTypeFlag           bool
	firstName              string // 名
	firstNameFlag          bool
	namePrimary            string // 姓
	namePrimaryFlag        bool
}

func NewProfileSettingNameBuilder() *ProfileSettingNameBuilder {
	builder := &ProfileSettingNameBuilder{}
	return builder
}

// 补充姓名类型, 枚举值。可选项可以通过【获取字段详情】接口查询，查询参数如下： - object_api_name = "person_name" - custom_api_name = "additional_name_type"
//
// 示例值：emergency_contact_name
func (builder *ProfileSettingNameBuilder) AdditionalNameType(additionalNameType string) *ProfileSettingNameBuilder {
	builder.additionalNameType = additionalNameType
	builder.additionalNameTypeFlag = true
	return builder
}

// 国家 / 地区 ID
//
// 示例值：6862995757234914824
func (builder *ProfileSettingNameBuilder) CountryRegion(countryRegion string) *ProfileSettingNameBuilder {
	builder.countryRegion = countryRegion
	builder.countryRegionFlag = true
	return builder
}

// 全名
//
// 示例值：王大帅
func (builder *ProfileSettingNameBuilder) FullName(fullName string) *ProfileSettingNameBuilder {
	builder.fullName = fullName
	builder.fullNameFlag = true
	return builder
}

// 姓氏称谓
//
// 示例值：王
func (builder *ProfileSettingNameBuilder) Hereditary(hereditary string) *ProfileSettingNameBuilder {
	builder.hereditary = hereditary
	builder.hereditaryFlag = true
	return builder
}

// 中间名
//
// 示例值：大
func (builder *ProfileSettingNameBuilder) MiddleName(middleName string) *ProfileSettingNameBuilder {
	builder.middleName = middleName
	builder.middleNameFlag = true
	return builder
}

// 第二姓氏
//
// 示例值：王
func (builder *ProfileSettingNameBuilder) Secondary(secondary string) *ProfileSettingNameBuilder {
	builder.secondary = secondary
	builder.secondaryFlag = true
	return builder
}

// 尊称,枚举值。可选项可以通过【获取字段详情】接口查询，查询参数如下： - object_api_name = "person_name" - custom_api_name = "social"
//
// 示例值：ii
func (builder *ProfileSettingNameBuilder) Social(social string) *ProfileSettingNameBuilder {
	builder.social = social
	builder.socialFlag = true
	return builder
}

// 婚后姓氏
//
// 示例值：王
func (builder *ProfileSettingNameBuilder) Tertiary(tertiary string) *ProfileSettingNameBuilder {
	builder.tertiary = tertiary
	builder.tertiaryFlag = true
	return builder
}

// 名 - 第二本地文字
//
// 示例值：五
func (builder *ProfileSettingNameBuilder) LocalFirstName2(localFirstName2 string) *ProfileSettingNameBuilder {
	builder.localFirstName2 = localFirstName2
	builder.localFirstName2Flag = true
	return builder
}

// 本地中间名
//
// 示例值：大
func (builder *ProfileSettingNameBuilder) LocalMiddleName(localMiddleName string) *ProfileSettingNameBuilder {
	builder.localMiddleName = localMiddleName
	builder.localMiddleNameFlag = true
	return builder
}

// 姓 - 本地文字
//
// 示例值：黄
func (builder *ProfileSettingNameBuilder) LocalPrimary(localPrimary string) *ProfileSettingNameBuilder {
	builder.localPrimary = localPrimary
	builder.localPrimaryFlag = true
	return builder
}

// 姓 - 第二本地文字
//
// 示例值：王
func (builder *ProfileSettingNameBuilder) LocalPrimary2(localPrimary2 string) *ProfileSettingNameBuilder {
	builder.localPrimary2 = localPrimary2
	builder.localPrimary2Flag = true
	return builder
}

// 第二姓氏 - 本地文字
//
// 示例值：王
func (builder *ProfileSettingNameBuilder) LocalSecondary(localSecondary string) *ProfileSettingNameBuilder {
	builder.localSecondary = localSecondary
	builder.localSecondaryFlag = true
	return builder
}

// 头衔, 枚举值。可选项可以通过【获取字段详情】接口查询，查询参数如下： - object_api_name = "person_name" - custom_api_name = "title"
//
// 示例值：mr
func (builder *ProfileSettingNameBuilder) Title(title string) *ProfileSettingNameBuilder {
	builder.title = title
	builder.titleFlag = true
	return builder
}

// 名 - 本地文字
//
// 示例值：四
func (builder *ProfileSettingNameBuilder) LocalFirstName(localFirstName string) *ProfileSettingNameBuilder {
	builder.localFirstName = localFirstName
	builder.localFirstNameFlag = true
	return builder
}

// 自定义姓名（本地文字）
//
// 示例值：王大帅
func (builder *ProfileSettingNameBuilder) CustomLocalName(customLocalName string) *ProfileSettingNameBuilder {
	builder.customLocalName = customLocalName
	builder.customLocalNameFlag = true
	return builder
}

// 自定义姓名（西方文字）
//
// 示例值：王大帅
func (builder *ProfileSettingNameBuilder) CustomWesternName(customWesternName string) *ProfileSettingNameBuilder {
	builder.customWesternName = customWesternName
	builder.customWesternNameFlag = true
	return builder
}

// 姓名类型
//
// 示例值：legal_name
func (builder *ProfileSettingNameBuilder) NameType(nameType string) *ProfileSettingNameBuilder {
	builder.nameType = nameType
	builder.nameTypeFlag = true
	return builder
}

// 名
//
// 示例值：帅
func (builder *ProfileSettingNameBuilder) FirstName(firstName string) *ProfileSettingNameBuilder {
	builder.firstName = firstName
	builder.firstNameFlag = true
	return builder
}

// 姓
//
// 示例值：王
func (builder *ProfileSettingNameBuilder) NamePrimary(namePrimary string) *ProfileSettingNameBuilder {
	builder.namePrimary = namePrimary
	builder.namePrimaryFlag = true
	return builder
}

func (builder *ProfileSettingNameBuilder) Build() *ProfileSettingName {
	req := &ProfileSettingName{}
	if builder.additionalNameTypeFlag {
		req.AdditionalNameType = &builder.additionalNameType

	}
	if builder.countryRegionFlag {
		req.CountryRegion = &builder.countryRegion

	}
	if builder.fullNameFlag {
		req.FullName = &builder.fullName

	}
	if builder.hereditaryFlag {
		req.Hereditary = &builder.hereditary

	}
	if builder.middleNameFlag {
		req.MiddleName = &builder.middleName

	}
	if builder.secondaryFlag {
		req.Secondary = &builder.secondary

	}
	if builder.socialFlag {
		req.Social = &builder.social

	}
	if builder.tertiaryFlag {
		req.Tertiary = &builder.tertiary

	}
	if builder.localFirstName2Flag {
		req.LocalFirstName2 = &builder.localFirstName2

	}
	if builder.localMiddleNameFlag {
		req.LocalMiddleName = &builder.localMiddleName

	}
	if builder.localPrimaryFlag {
		req.LocalPrimary = &builder.localPrimary

	}
	if builder.localPrimary2Flag {
		req.LocalPrimary2 = &builder.localPrimary2

	}
	if builder.localSecondaryFlag {
		req.LocalSecondary = &builder.localSecondary

	}
	if builder.titleFlag {
		req.Title = &builder.title

	}
	if builder.localFirstNameFlag {
		req.LocalFirstName = &builder.localFirstName

	}
	if builder.customLocalNameFlag {
		req.CustomLocalName = &builder.customLocalName

	}
	if builder.customWesternNameFlag {
		req.CustomWesternName = &builder.customWesternName

	}
	if builder.nameTypeFlag {
		req.NameType = &builder.nameType

	}
	if builder.firstNameFlag {
		req.FirstName = &builder.firstName

	}
	if builder.namePrimaryFlag {
		req.NamePrimary = &builder.namePrimary

	}
	return req
}

type ProfileSettingNational struct {
	CountryRegion    *string                      `json:"country_region,omitempty"`     // 国家/地区ID
	NationalIdType   *string                      `json:"national_id_type,omitempty"`   // 国家证件类型ID
	NationalIdNumber *string                      `json:"national_id_number,omitempty"` // 证件号码
	IssuedDate       *string                      `json:"issued_date,omitempty"`        // 证件签发日期
	IssuedBy         *string                      `json:"issued_by,omitempty"`          // 证件签发机构
	ExpirationDate   *string                      `json:"expiration_date,omitempty"`    // 证件到期日期
	CustomFields     []*ProfileSettingCustomField `json:"custom_fields,omitempty"`      // 自定义字段
}

type ProfileSettingNationalBuilder struct {
	countryRegion        string // 国家/地区ID
	countryRegionFlag    bool
	nationalIdType       string // 国家证件类型ID
	nationalIdTypeFlag   bool
	nationalIdNumber     string // 证件号码
	nationalIdNumberFlag bool
	issuedDate           string // 证件签发日期
	issuedDateFlag       bool
	issuedBy             string // 证件签发机构
	issuedByFlag         bool
	expirationDate       string // 证件到期日期
	expirationDateFlag   bool
	customFields         []*ProfileSettingCustomField // 自定义字段
	customFieldsFlag     bool
}

func NewProfileSettingNationalBuilder() *ProfileSettingNationalBuilder {
	builder := &ProfileSettingNationalBuilder{}
	return builder
}

// 国家/地区ID
//
// 示例值：6862995757234914824
func (builder *ProfileSettingNationalBuilder) CountryRegion(countryRegion string) *ProfileSettingNationalBuilder {
	builder.countryRegion = countryRegion
	builder.countryRegionFlag = true
	return builder
}

// 国家证件类型ID
//
// 示例值：6863330041896371725
func (builder *ProfileSettingNationalBuilder) NationalIdType(nationalIdType string) *ProfileSettingNationalBuilder {
	builder.nationalIdType = nationalIdType
	builder.nationalIdTypeFlag = true
	return builder
}

// 证件号码
//
// 示例值：1231131333
func (builder *ProfileSettingNationalBuilder) NationalIdNumber(nationalIdNumber string) *ProfileSettingNationalBuilder {
	builder.nationalIdNumber = nationalIdNumber
	builder.nationalIdNumberFlag = true
	return builder
}

// 证件签发日期
//
// 示例值：2020-04-01
func (builder *ProfileSettingNationalBuilder) IssuedDate(issuedDate string) *ProfileSettingNationalBuilder {
	builder.issuedDate = issuedDate
	builder.issuedDateFlag = true
	return builder
}

// 证件签发机构
//
// 示例值：北京市公安局
func (builder *ProfileSettingNationalBuilder) IssuedBy(issuedBy string) *ProfileSettingNationalBuilder {
	builder.issuedBy = issuedBy
	builder.issuedByFlag = true
	return builder
}

// 证件到期日期
//
// 示例值：2020-05-21
func (builder *ProfileSettingNationalBuilder) ExpirationDate(expirationDate string) *ProfileSettingNationalBuilder {
	builder.expirationDate = expirationDate
	builder.expirationDateFlag = true
	return builder
}

// 自定义字段
//
// 示例值：
func (builder *ProfileSettingNationalBuilder) CustomFields(customFields []*ProfileSettingCustomField) *ProfileSettingNationalBuilder {
	builder.customFields = customFields
	builder.customFieldsFlag = true
	return builder
}

func (builder *ProfileSettingNationalBuilder) Build() *ProfileSettingNational {
	req := &ProfileSettingNational{}
	if builder.countryRegionFlag {
		req.CountryRegion = &builder.countryRegion

	}
	if builder.nationalIdTypeFlag {
		req.NationalIdType = &builder.nationalIdType

	}
	if builder.nationalIdNumberFlag {
		req.NationalIdNumber = &builder.nationalIdNumber

	}
	if builder.issuedDateFlag {
		req.IssuedDate = &builder.issuedDate

	}
	if builder.issuedByFlag {
		req.IssuedBy = &builder.issuedBy

	}
	if builder.expirationDateFlag {
		req.ExpirationDate = &builder.expirationDate

	}
	if builder.customFieldsFlag {
		req.CustomFields = builder.customFields
	}
	return req
}

type ProfileSettingPersonalBasicInfo struct {
	LegalName            *ProfileSettingName          `json:"legal_name,omitempty"`             // 法定姓名
	PreferredName        *ProfileSettingName          `json:"preferred_name,omitempty"`         // 常用姓名
	Gender               *string                      `json:"gender,omitempty"`                 // 性别，枚举值 。可选项可通过【获取字段详情】接口查询，查询参数如下： object_api_name = "person" custom_api_name = "gender"
	NationalityV2        *string                      `json:"nationality_v2,omitempty"`         // 国籍ID
	EthnicityRace        *string                      `json:"ethnicity_race,omitempty"`         // 民族 / 种族，枚举值。 可选项可通过【获取字段详情】接口查询，查询参数如下： object_api_name = "person" custom_api_name = "ethnicity_race"
	Phone                *ProfileSettingPhone         `json:"phone,omitempty"`                  // 个人电话
	Email                *string                      `json:"email,omitempty"`                  // 个人邮箱
	DateOfBirth          *string                      `json:"date_of_birth,omitempty"`          // 出生日期
	MaritalStatus        *string                      `json:"marital_status,omitempty"`         // 婚姻状况，枚举值。 可选项可通过【获取字段详情】接口查询，查询参数如下： object_api_name = "person" custom_api_name = "marital_status"
	IsDisabled           *bool                        `json:"is_disabled,omitempty"`            // 是否残疾
	DisableCardNumber    *string                      `json:"disable_card_number,omitempty"`    // 残疾证号，is_disabled 为 true 时必填
	IsMartyrFamily       *bool                        `json:"is_martyr_family,omitempty"`       // 是否为烈属
	MartyrCardNumber     *string                      `json:"martyr_card_number,omitempty"`     // 烈属证号，is_martyr_family 为 true 时必填
	IsOldAlone           *bool                        `json:"is_old_alone,omitempty"`           // 是否为孤老
	BornCountryRegion    *string                      `json:"born_country_region,omitempty"`    // 出生国家/地区
	PoliticalAffiliation *string                      `json:"political_affiliation,omitempty"`  // 政治面貌，枚举值。 可选项可通过【获取字段详情】接口查询，查询参数如下： object_api_name = "person_info_chn" custom_api_name = "political_affiliation"
	NativeRegion         *string                      `json:"native_region,omitempty"`          // 籍贯(省份/行政区ID）
	DateEnteredWorkforce *string                      `json:"date_entered_workforce,omitempty"` // 参加工作日期
	FirstEntryTime       *string                      `json:"first_entry_time,omitempty"`       // 首次入境日期
	LeaveTime            *string                      `json:"leave_time,omitempty"`             // 预计离境日期
	CustomFields         []*ProfileSettingCustomField `json:"custom_fields,omitempty"`          // 自定义字段
}

type ProfileSettingPersonalBasicInfoBuilder struct {
	legalName                *ProfileSettingName // 法定姓名
	legalNameFlag            bool
	preferredName            *ProfileSettingName // 常用姓名
	preferredNameFlag        bool
	gender                   string // 性别，枚举值 。可选项可通过【获取字段详情】接口查询，查询参数如下： object_api_name = "person" custom_api_name = "gender"
	genderFlag               bool
	nationalityV2            string // 国籍ID
	nationalityV2Flag        bool
	ethnicityRace            string // 民族 / 种族，枚举值。 可选项可通过【获取字段详情】接口查询，查询参数如下： object_api_name = "person" custom_api_name = "ethnicity_race"
	ethnicityRaceFlag        bool
	phone                    *ProfileSettingPhone // 个人电话
	phoneFlag                bool
	email                    string // 个人邮箱
	emailFlag                bool
	dateOfBirth              string // 出生日期
	dateOfBirthFlag          bool
	maritalStatus            string // 婚姻状况，枚举值。 可选项可通过【获取字段详情】接口查询，查询参数如下： object_api_name = "person" custom_api_name = "marital_status"
	maritalStatusFlag        bool
	isDisabled               bool // 是否残疾
	isDisabledFlag           bool
	disableCardNumber        string // 残疾证号，is_disabled 为 true 时必填
	disableCardNumberFlag    bool
	isMartyrFamily           bool // 是否为烈属
	isMartyrFamilyFlag       bool
	martyrCardNumber         string // 烈属证号，is_martyr_family 为 true 时必填
	martyrCardNumberFlag     bool
	isOldAlone               bool // 是否为孤老
	isOldAloneFlag           bool
	bornCountryRegion        string // 出生国家/地区
	bornCountryRegionFlag    bool
	politicalAffiliation     string // 政治面貌，枚举值。 可选项可通过【获取字段详情】接口查询，查询参数如下： object_api_name = "person_info_chn" custom_api_name = "political_affiliation"
	politicalAffiliationFlag bool
	nativeRegion             string // 籍贯(省份/行政区ID）
	nativeRegionFlag         bool
	dateEnteredWorkforce     string // 参加工作日期
	dateEnteredWorkforceFlag bool
	firstEntryTime           string // 首次入境日期
	firstEntryTimeFlag       bool
	leaveTime                string // 预计离境日期
	leaveTimeFlag            bool
	customFields             []*ProfileSettingCustomField // 自定义字段
	customFieldsFlag         bool
}

func NewProfileSettingPersonalBasicInfoBuilder() *ProfileSettingPersonalBasicInfoBuilder {
	builder := &ProfileSettingPersonalBasicInfoBuilder{}
	return builder
}

// 法定姓名
//
// 示例值：
func (builder *ProfileSettingPersonalBasicInfoBuilder) LegalName(legalName *ProfileSettingName) *ProfileSettingPersonalBasicInfoBuilder {
	builder.legalName = legalName
	builder.legalNameFlag = true
	return builder
}

// 常用姓名
//
// 示例值：
func (builder *ProfileSettingPersonalBasicInfoBuilder) PreferredName(preferredName *ProfileSettingName) *ProfileSettingPersonalBasicInfoBuilder {
	builder.preferredName = preferredName
	builder.preferredNameFlag = true
	return builder
}

// 性别，枚举值 。可选项可通过【获取字段详情】接口查询，查询参数如下： object_api_name = "person" custom_api_name = "gender"
//
// 示例值：female
func (builder *ProfileSettingPersonalBasicInfoBuilder) Gender(gender string) *ProfileSettingPersonalBasicInfoBuilder {
	builder.gender = gender
	builder.genderFlag = true
	return builder
}

// 国籍ID
//
// 示例值：6862995757234914826
func (builder *ProfileSettingPersonalBasicInfoBuilder) NationalityV2(nationalityV2 string) *ProfileSettingPersonalBasicInfoBuilder {
	builder.nationalityV2 = nationalityV2
	builder.nationalityV2Flag = true
	return builder
}

// 民族 / 种族，枚举值。 可选项可通过【获取字段详情】接口查询，查询参数如下： object_api_name = "person" custom_api_name = "ethnicity_race"
//
// 示例值：han
func (builder *ProfileSettingPersonalBasicInfoBuilder) EthnicityRace(ethnicityRace string) *ProfileSettingPersonalBasicInfoBuilder {
	builder.ethnicityRace = ethnicityRace
	builder.ethnicityRaceFlag = true
	return builder
}

// 个人电话
//
// 示例值：
func (builder *ProfileSettingPersonalBasicInfoBuilder) Phone(phone *ProfileSettingPhone) *ProfileSettingPersonalBasicInfoBuilder {
	builder.phone = phone
	builder.phoneFlag = true
	return builder
}

// 个人邮箱
//
// 示例值：1234567@example.feishu.cn
func (builder *ProfileSettingPersonalBasicInfoBuilder) Email(email string) *ProfileSettingPersonalBasicInfoBuilder {
	builder.email = email
	builder.emailFlag = true
	return builder
}

// 出生日期
//
// 示例值：2006-01-02
func (builder *ProfileSettingPersonalBasicInfoBuilder) DateOfBirth(dateOfBirth string) *ProfileSettingPersonalBasicInfoBuilder {
	builder.dateOfBirth = dateOfBirth
	builder.dateOfBirthFlag = true
	return builder
}

// 婚姻状况，枚举值。 可选项可通过【获取字段详情】接口查询，查询参数如下： object_api_name = "person" custom_api_name = "marital_status"
//
// 示例值：married
func (builder *ProfileSettingPersonalBasicInfoBuilder) MaritalStatus(maritalStatus string) *ProfileSettingPersonalBasicInfoBuilder {
	builder.maritalStatus = maritalStatus
	builder.maritalStatusFlag = true
	return builder
}

// 是否残疾
//
// 示例值：false
func (builder *ProfileSettingPersonalBasicInfoBuilder) IsDisabled(isDisabled bool) *ProfileSettingPersonalBasicInfoBuilder {
	builder.isDisabled = isDisabled
	builder.isDisabledFlag = true
	return builder
}

// 残疾证号，is_disabled 为 true 时必填
//
// 示例值：92838277746172888312
func (builder *ProfileSettingPersonalBasicInfoBuilder) DisableCardNumber(disableCardNumber string) *ProfileSettingPersonalBasicInfoBuilder {
	builder.disableCardNumber = disableCardNumber
	builder.disableCardNumberFlag = true
	return builder
}

// 是否为烈属
//
// 示例值：false
func (builder *ProfileSettingPersonalBasicInfoBuilder) IsMartyrFamily(isMartyrFamily bool) *ProfileSettingPersonalBasicInfoBuilder {
	builder.isMartyrFamily = isMartyrFamily
	builder.isMartyrFamilyFlag = true
	return builder
}

// 烈属证号，is_martyr_family 为 true 时必填
//
// 示例值：00001
func (builder *ProfileSettingPersonalBasicInfoBuilder) MartyrCardNumber(martyrCardNumber string) *ProfileSettingPersonalBasicInfoBuilder {
	builder.martyrCardNumber = martyrCardNumber
	builder.martyrCardNumberFlag = true
	return builder
}

// 是否为孤老
//
// 示例值：false
func (builder *ProfileSettingPersonalBasicInfoBuilder) IsOldAlone(isOldAlone bool) *ProfileSettingPersonalBasicInfoBuilder {
	builder.isOldAlone = isOldAlone
	builder.isOldAloneFlag = true
	return builder
}

// 出生国家/地区
//
// 示例值：6862995757234914825
func (builder *ProfileSettingPersonalBasicInfoBuilder) BornCountryRegion(bornCountryRegion string) *ProfileSettingPersonalBasicInfoBuilder {
	builder.bornCountryRegion = bornCountryRegion
	builder.bornCountryRegionFlag = true
	return builder
}

// 政治面貌，枚举值。 可选项可通过【获取字段详情】接口查询，查询参数如下： object_api_name = "person_info_chn" custom_api_name = "political_affiliation"
//
// 示例值：other
func (builder *ProfileSettingPersonalBasicInfoBuilder) PoliticalAffiliation(politicalAffiliation string) *ProfileSettingPersonalBasicInfoBuilder {
	builder.politicalAffiliation = politicalAffiliation
	builder.politicalAffiliationFlag = true
	return builder
}

// 籍贯(省份/行政区ID）
//
// 示例值：6862995757234914827
func (builder *ProfileSettingPersonalBasicInfoBuilder) NativeRegion(nativeRegion string) *ProfileSettingPersonalBasicInfoBuilder {
	builder.nativeRegion = nativeRegion
	builder.nativeRegionFlag = true
	return builder
}

// 参加工作日期
//
// 示例值：2006-01-02
func (builder *ProfileSettingPersonalBasicInfoBuilder) DateEnteredWorkforce(dateEnteredWorkforce string) *ProfileSettingPersonalBasicInfoBuilder {
	builder.dateEnteredWorkforce = dateEnteredWorkforce
	builder.dateEnteredWorkforceFlag = true
	return builder
}

// 首次入境日期
//
// 示例值：2006-01-02
func (builder *ProfileSettingPersonalBasicInfoBuilder) FirstEntryTime(firstEntryTime string) *ProfileSettingPersonalBasicInfoBuilder {
	builder.firstEntryTime = firstEntryTime
	builder.firstEntryTimeFlag = true
	return builder
}

// 预计离境日期
//
// 示例值：2006-01-02
func (builder *ProfileSettingPersonalBasicInfoBuilder) LeaveTime(leaveTime string) *ProfileSettingPersonalBasicInfoBuilder {
	builder.leaveTime = leaveTime
	builder.leaveTimeFlag = true
	return builder
}

// 自定义字段
//
// 示例值：
func (builder *ProfileSettingPersonalBasicInfoBuilder) CustomFields(customFields []*ProfileSettingCustomField) *ProfileSettingPersonalBasicInfoBuilder {
	builder.customFields = customFields
	builder.customFieldsFlag = true
	return builder
}

func (builder *ProfileSettingPersonalBasicInfoBuilder) Build() *ProfileSettingPersonalBasicInfo {
	req := &ProfileSettingPersonalBasicInfo{}
	if builder.legalNameFlag {
		req.LegalName = builder.legalName
	}
	if builder.preferredNameFlag {
		req.PreferredName = builder.preferredName
	}
	if builder.genderFlag {
		req.Gender = &builder.gender

	}
	if builder.nationalityV2Flag {
		req.NationalityV2 = &builder.nationalityV2

	}
	if builder.ethnicityRaceFlag {
		req.EthnicityRace = &builder.ethnicityRace

	}
	if builder.phoneFlag {
		req.Phone = builder.phone
	}
	if builder.emailFlag {
		req.Email = &builder.email

	}
	if builder.dateOfBirthFlag {
		req.DateOfBirth = &builder.dateOfBirth

	}
	if builder.maritalStatusFlag {
		req.MaritalStatus = &builder.maritalStatus

	}
	if builder.isDisabledFlag {
		req.IsDisabled = &builder.isDisabled

	}
	if builder.disableCardNumberFlag {
		req.DisableCardNumber = &builder.disableCardNumber

	}
	if builder.isMartyrFamilyFlag {
		req.IsMartyrFamily = &builder.isMartyrFamily

	}
	if builder.martyrCardNumberFlag {
		req.MartyrCardNumber = &builder.martyrCardNumber

	}
	if builder.isOldAloneFlag {
		req.IsOldAlone = &builder.isOldAlone

	}
	if builder.bornCountryRegionFlag {
		req.BornCountryRegion = &builder.bornCountryRegion

	}
	if builder.politicalAffiliationFlag {
		req.PoliticalAffiliation = &builder.politicalAffiliation

	}
	if builder.nativeRegionFlag {
		req.NativeRegion = &builder.nativeRegion

	}
	if builder.dateEnteredWorkforceFlag {
		req.DateEnteredWorkforce = &builder.dateEnteredWorkforce

	}
	if builder.firstEntryTimeFlag {
		req.FirstEntryTime = &builder.firstEntryTime

	}
	if builder.leaveTimeFlag {
		req.LeaveTime = &builder.leaveTime

	}
	if builder.customFieldsFlag {
		req.CustomFields = builder.customFields
	}
	return req
}

type ProfileSettingPersonalInfo struct {
	PersonalBasicInfo *ProfileSettingPersonalBasicInfo  `json:"personal_basic_info,omitempty"` // 基本信息
	EmergencyContacts []*ProfileSettingEmergencyContact `json:"emergency_contacts,omitempty"`  // 紧急联系人
	BankAccounts      []*ProfileSettingBankAccount      `json:"bank_accounts,omitempty"`       // 银行账户
	Nationals         []*ProfileSettingNational         `json:"nationals,omitempty"`           // 证件
	ResidentTaxes     []*ProfileSettingResidentTax      `json:"resident_taxes,omitempty"`      // 居民身份信息
	Dependents        []*ProfileSettingDependent        `json:"dependents,omitempty"`          // 家庭成员
	Hukou             *ProfileSettingHukou              `json:"hukou,omitempty"`               // 户口
	ContactAddresses  []*ProfileSettingAddress          `json:"contact_addresses,omitempty"`   // 联系地址
	CustomGroups      []*ProfileSettingCustomGroup      `json:"custom_groups,omitempty"`       // 自定义分组
}

type ProfileSettingPersonalInfoBuilder struct {
	personalBasicInfo     *ProfileSettingPersonalBasicInfo // 基本信息
	personalBasicInfoFlag bool
	emergencyContacts     []*ProfileSettingEmergencyContact // 紧急联系人
	emergencyContactsFlag bool
	bankAccounts          []*ProfileSettingBankAccount // 银行账户
	bankAccountsFlag      bool
	nationals             []*ProfileSettingNational // 证件
	nationalsFlag         bool
	residentTaxes         []*ProfileSettingResidentTax // 居民身份信息
	residentTaxesFlag     bool
	dependents            []*ProfileSettingDependent // 家庭成员
	dependentsFlag        bool
	hukou                 *ProfileSettingHukou // 户口
	hukouFlag             bool
	contactAddresses      []*ProfileSettingAddress // 联系地址
	contactAddressesFlag  bool
	customGroups          []*ProfileSettingCustomGroup // 自定义分组
	customGroupsFlag      bool
}

func NewProfileSettingPersonalInfoBuilder() *ProfileSettingPersonalInfoBuilder {
	builder := &ProfileSettingPersonalInfoBuilder{}
	return builder
}

// 基本信息
//
// 示例值：
func (builder *ProfileSettingPersonalInfoBuilder) PersonalBasicInfo(personalBasicInfo *ProfileSettingPersonalBasicInfo) *ProfileSettingPersonalInfoBuilder {
	builder.personalBasicInfo = personalBasicInfo
	builder.personalBasicInfoFlag = true
	return builder
}

// 紧急联系人
//
// 示例值：
func (builder *ProfileSettingPersonalInfoBuilder) EmergencyContacts(emergencyContacts []*ProfileSettingEmergencyContact) *ProfileSettingPersonalInfoBuilder {
	builder.emergencyContacts = emergencyContacts
	builder.emergencyContactsFlag = true
	return builder
}

// 银行账户
//
// 示例值：
func (builder *ProfileSettingPersonalInfoBuilder) BankAccounts(bankAccounts []*ProfileSettingBankAccount) *ProfileSettingPersonalInfoBuilder {
	builder.bankAccounts = bankAccounts
	builder.bankAccountsFlag = true
	return builder
}

// 证件
//
// 示例值：
func (builder *ProfileSettingPersonalInfoBuilder) Nationals(nationals []*ProfileSettingNational) *ProfileSettingPersonalInfoBuilder {
	builder.nationals = nationals
	builder.nationalsFlag = true
	return builder
}

// 居民身份信息
//
// 示例值：
func (builder *ProfileSettingPersonalInfoBuilder) ResidentTaxes(residentTaxes []*ProfileSettingResidentTax) *ProfileSettingPersonalInfoBuilder {
	builder.residentTaxes = residentTaxes
	builder.residentTaxesFlag = true
	return builder
}

// 家庭成员
//
// 示例值：
func (builder *ProfileSettingPersonalInfoBuilder) Dependents(dependents []*ProfileSettingDependent) *ProfileSettingPersonalInfoBuilder {
	builder.dependents = dependents
	builder.dependentsFlag = true
	return builder
}

// 户口
//
// 示例值：
func (builder *ProfileSettingPersonalInfoBuilder) Hukou(hukou *ProfileSettingHukou) *ProfileSettingPersonalInfoBuilder {
	builder.hukou = hukou
	builder.hukouFlag = true
	return builder
}

// 联系地址
//
// 示例值：
func (builder *ProfileSettingPersonalInfoBuilder) ContactAddresses(contactAddresses []*ProfileSettingAddress) *ProfileSettingPersonalInfoBuilder {
	builder.contactAddresses = contactAddresses
	builder.contactAddressesFlag = true
	return builder
}

// 自定义分组
//
// 示例值：
func (builder *ProfileSettingPersonalInfoBuilder) CustomGroups(customGroups []*ProfileSettingCustomGroup) *ProfileSettingPersonalInfoBuilder {
	builder.customGroups = customGroups
	builder.customGroupsFlag = true
	return builder
}

func (builder *ProfileSettingPersonalInfoBuilder) Build() *ProfileSettingPersonalInfo {
	req := &ProfileSettingPersonalInfo{}
	if builder.personalBasicInfoFlag {
		req.PersonalBasicInfo = builder.personalBasicInfo
	}
	if builder.emergencyContactsFlag {
		req.EmergencyContacts = builder.emergencyContacts
	}
	if builder.bankAccountsFlag {
		req.BankAccounts = builder.bankAccounts
	}
	if builder.nationalsFlag {
		req.Nationals = builder.nationals
	}
	if builder.residentTaxesFlag {
		req.ResidentTaxes = builder.residentTaxes
	}
	if builder.dependentsFlag {
		req.Dependents = builder.dependents
	}
	if builder.hukouFlag {
		req.Hukou = builder.hukou
	}
	if builder.contactAddressesFlag {
		req.ContactAddresses = builder.contactAddresses
	}
	if builder.customGroupsFlag {
		req.CustomGroups = builder.customGroups
	}
	return req
}

type ProfileSettingPersonalRecord struct {
	ProfileType *string               `json:"profile_type,omitempty"` // 资料类型，枚举值。 可选项可通过【获取字段详情】接口查询，查询参数如下： object_api_name = "personal_profile" custom_api_name = "profile_type"
	Files       []*ProfileSettingFile `json:"files,omitempty"`        // 文件列表
}

type ProfileSettingPersonalRecordBuilder struct {
	profileType     string // 资料类型，枚举值。 可选项可通过【获取字段详情】接口查询，查询参数如下： object_api_name = "personal_profile" custom_api_name = "profile_type"
	profileTypeFlag bool
	files           []*ProfileSettingFile // 文件列表
	filesFlag       bool
}

func NewProfileSettingPersonalRecordBuilder() *ProfileSettingPersonalRecordBuilder {
	builder := &ProfileSettingPersonalRecordBuilder{}
	return builder
}

// 资料类型，枚举值。 可选项可通过【获取字段详情】接口查询，查询参数如下： object_api_name = "personal_profile" custom_api_name = "profile_type"
//
// 示例值：profile_type_1
func (builder *ProfileSettingPersonalRecordBuilder) ProfileType(profileType string) *ProfileSettingPersonalRecordBuilder {
	builder.profileType = profileType
	builder.profileTypeFlag = true
	return builder
}

// 文件列表
//
// 示例值：
func (builder *ProfileSettingPersonalRecordBuilder) Files(files []*ProfileSettingFile) *ProfileSettingPersonalRecordBuilder {
	builder.files = files
	builder.filesFlag = true
	return builder
}

func (builder *ProfileSettingPersonalRecordBuilder) Build() *ProfileSettingPersonalRecord {
	req := &ProfileSettingPersonalRecord{}
	if builder.profileTypeFlag {
		req.ProfileType = &builder.profileType

	}
	if builder.filesFlag {
		req.Files = builder.files
	}
	return req
}

type ProfileSettingPhone struct {
	InternationalAreaCode *string `json:"international_area_code,omitempty"` // 国际电话区号，枚举值。 可选项可通过【获取字段详情】接口查询，查询参数如下： object_api_name = "phone" custom_api_name = "international_area_code"
	PhoneNumber           *string `json:"phone_number,omitempty"`            // 电话号码
}

type ProfileSettingPhoneBuilder struct {
	internationalAreaCode     string // 国际电话区号，枚举值。 可选项可通过【获取字段详情】接口查询，查询参数如下： object_api_name = "phone" custom_api_name = "international_area_code"
	internationalAreaCodeFlag bool
	phoneNumber               string // 电话号码
	phoneNumberFlag           bool
}

func NewProfileSettingPhoneBuilder() *ProfileSettingPhoneBuilder {
	builder := &ProfileSettingPhoneBuilder{}
	return builder
}

// 国际电话区号，枚举值。 可选项可通过【获取字段详情】接口查询，查询参数如下： object_api_name = "phone" custom_api_name = "international_area_code"
//
// 示例值：86_china
func (builder *ProfileSettingPhoneBuilder) InternationalAreaCode(internationalAreaCode string) *ProfileSettingPhoneBuilder {
	builder.internationalAreaCode = internationalAreaCode
	builder.internationalAreaCodeFlag = true
	return builder
}

// 电话号码
//
// 示例值：13000000000
func (builder *ProfileSettingPhoneBuilder) PhoneNumber(phoneNumber string) *ProfileSettingPhoneBuilder {
	builder.phoneNumber = phoneNumber
	builder.phoneNumberFlag = true
	return builder
}

func (builder *ProfileSettingPhoneBuilder) Build() *ProfileSettingPhone {
	req := &ProfileSettingPhone{}
	if builder.internationalAreaCodeFlag {
		req.InternationalAreaCode = &builder.internationalAreaCode

	}
	if builder.phoneNumberFlag {
		req.PhoneNumber = &builder.phoneNumber

	}
	return req
}

type ProfileSettingProbationInfo struct {
	ProbationStartDate       *string `json:"probation_start_date,omitempty"`        // 试用期开始日期
	ProbationExpectedEndDate *string `json:"probation_expected_end_date,omitempty"` // 试用期预计结束日期
	ActualProbationEndDate   *string `json:"actual_probation_end_date,omitempty"`   // 试用期实际结束日期
}

type ProfileSettingProbationInfoBuilder struct {
	probationStartDate           string // 试用期开始日期
	probationStartDateFlag       bool
	probationExpectedEndDate     string // 试用期预计结束日期
	probationExpectedEndDateFlag bool
	actualProbationEndDate       string // 试用期实际结束日期
	actualProbationEndDateFlag   bool
}

func NewProfileSettingProbationInfoBuilder() *ProfileSettingProbationInfoBuilder {
	builder := &ProfileSettingProbationInfoBuilder{}
	return builder
}

// 试用期开始日期
//
// 示例值：2021-01-01
func (builder *ProfileSettingProbationInfoBuilder) ProbationStartDate(probationStartDate string) *ProfileSettingProbationInfoBuilder {
	builder.probationStartDate = probationStartDate
	builder.probationStartDateFlag = true
	return builder
}

// 试用期预计结束日期
//
// 示例值：2021-02-01
func (builder *ProfileSettingProbationInfoBuilder) ProbationExpectedEndDate(probationExpectedEndDate string) *ProfileSettingProbationInfoBuilder {
	builder.probationExpectedEndDate = probationExpectedEndDate
	builder.probationExpectedEndDateFlag = true
	return builder
}

// 试用期实际结束日期
//
// 示例值：2021-02-01
func (builder *ProfileSettingProbationInfoBuilder) ActualProbationEndDate(actualProbationEndDate string) *ProfileSettingProbationInfoBuilder {
	builder.actualProbationEndDate = actualProbationEndDate
	builder.actualProbationEndDateFlag = true
	return builder
}

func (builder *ProfileSettingProbationInfoBuilder) Build() *ProfileSettingProbationInfo {
	req := &ProfileSettingProbationInfo{}
	if builder.probationStartDateFlag {
		req.ProbationStartDate = &builder.probationStartDate

	}
	if builder.probationExpectedEndDateFlag {
		req.ProbationExpectedEndDate = &builder.probationExpectedEndDate

	}
	if builder.actualProbationEndDateFlag {
		req.ActualProbationEndDate = &builder.actualProbationEndDate

	}
	return req
}

type ProfileSettingResidentTax struct {
	YearResidentTax  *string                      `json:"year_resident_tax,omitempty"`  // 年度
	TaxCountryRegion *string                      `json:"tax_country_region,omitempty"` // 国家 / 地区ID
	ResidentStatus   *string                      `json:"resident_status,omitempty"`    // 居民身份，枚举值。 可选项可通过【获取字段详情】接口查询，查询参数如下： object_api_name = "resident_tax" custom_api_name = "resident_status"
	CustomFields     []*ProfileSettingCustomField `json:"custom_fields,omitempty"`      // 自定义字段
}

type ProfileSettingResidentTaxBuilder struct {
	yearResidentTax      string // 年度
	yearResidentTaxFlag  bool
	taxCountryRegion     string // 国家 / 地区ID
	taxCountryRegionFlag bool
	residentStatus       string // 居民身份，枚举值。 可选项可通过【获取字段详情】接口查询，查询参数如下： object_api_name = "resident_tax" custom_api_name = "resident_status"
	residentStatusFlag   bool
	customFields         []*ProfileSettingCustomField // 自定义字段
	customFieldsFlag     bool
}

func NewProfileSettingResidentTaxBuilder() *ProfileSettingResidentTaxBuilder {
	builder := &ProfileSettingResidentTaxBuilder{}
	return builder
}

// 年度
//
// 示例值：2006-01-02
func (builder *ProfileSettingResidentTaxBuilder) YearResidentTax(yearResidentTax string) *ProfileSettingResidentTaxBuilder {
	builder.yearResidentTax = yearResidentTax
	builder.yearResidentTaxFlag = true
	return builder
}

// 国家 / 地区ID
//
// 示例值：6862995757234914824
func (builder *ProfileSettingResidentTaxBuilder) TaxCountryRegion(taxCountryRegion string) *ProfileSettingResidentTaxBuilder {
	builder.taxCountryRegion = taxCountryRegion
	builder.taxCountryRegionFlag = true
	return builder
}

// 居民身份，枚举值。 可选项可通过【获取字段详情】接口查询，查询参数如下： object_api_name = "resident_tax" custom_api_name = "resident_status"
//
// 示例值：tax_residence
func (builder *ProfileSettingResidentTaxBuilder) ResidentStatus(residentStatus string) *ProfileSettingResidentTaxBuilder {
	builder.residentStatus = residentStatus
	builder.residentStatusFlag = true
	return builder
}

// 自定义字段
//
// 示例值：
func (builder *ProfileSettingResidentTaxBuilder) CustomFields(customFields []*ProfileSettingCustomField) *ProfileSettingResidentTaxBuilder {
	builder.customFields = customFields
	builder.customFieldsFlag = true
	return builder
}

func (builder *ProfileSettingResidentTaxBuilder) Build() *ProfileSettingResidentTax {
	req := &ProfileSettingResidentTax{}
	if builder.yearResidentTaxFlag {
		req.YearResidentTax = &builder.yearResidentTax

	}
	if builder.taxCountryRegionFlag {
		req.TaxCountryRegion = &builder.taxCountryRegion

	}
	if builder.residentStatusFlag {
		req.ResidentStatus = &builder.residentStatus

	}
	if builder.customFieldsFlag {
		req.CustomFields = builder.customFields
	}
	return req
}

type ProfileSettingWorkExperience struct {
	CompanyOrganization *ProfileSettingI18n          `json:"company_organization,omitempty"` // 公司 / 组织
	Department          *ProfileSettingI18n          `json:"department,omitempty"`           // 部门
	StartDate           *string                      `json:"start_date,omitempty"`           // 开始日期
	EndDate             *string                      `json:"end_date,omitempty"`             // 结束日期
	Job                 *ProfileSettingI18n          `json:"job,omitempty"`                  // 岗位
	Description         *ProfileSettingI18n          `json:"description,omitempty"`          // 工作描述
	CustomFields        []*ProfileSettingCustomField `json:"custom_fields,omitempty"`        // 自定义字段
}

type ProfileSettingWorkExperienceBuilder struct {
	companyOrganization     *ProfileSettingI18n // 公司 / 组织
	companyOrganizationFlag bool
	department              *ProfileSettingI18n // 部门
	departmentFlag          bool
	startDate               string // 开始日期
	startDateFlag           bool
	endDate                 string // 结束日期
	endDateFlag             bool
	job                     *ProfileSettingI18n // 岗位
	jobFlag                 bool
	description             *ProfileSettingI18n // 工作描述
	descriptionFlag         bool
	customFields            []*ProfileSettingCustomField // 自定义字段
	customFieldsFlag        bool
}

func NewProfileSettingWorkExperienceBuilder() *ProfileSettingWorkExperienceBuilder {
	builder := &ProfileSettingWorkExperienceBuilder{}
	return builder
}

// 公司 / 组织
//
// 示例值：
func (builder *ProfileSettingWorkExperienceBuilder) CompanyOrganization(companyOrganization *ProfileSettingI18n) *ProfileSettingWorkExperienceBuilder {
	builder.companyOrganization = companyOrganization
	builder.companyOrganizationFlag = true
	return builder
}

// 部门
//
// 示例值：
func (builder *ProfileSettingWorkExperienceBuilder) Department(department *ProfileSettingI18n) *ProfileSettingWorkExperienceBuilder {
	builder.department = department
	builder.departmentFlag = true
	return builder
}

// 开始日期
//
// 示例值：2020-01-01
func (builder *ProfileSettingWorkExperienceBuilder) StartDate(startDate string) *ProfileSettingWorkExperienceBuilder {
	builder.startDate = startDate
	builder.startDateFlag = true
	return builder
}

// 结束日期
//
// 示例值：2020-02-01
func (builder *ProfileSettingWorkExperienceBuilder) EndDate(endDate string) *ProfileSettingWorkExperienceBuilder {
	builder.endDate = endDate
	builder.endDateFlag = true
	return builder
}

// 岗位
//
// 示例值：
func (builder *ProfileSettingWorkExperienceBuilder) Job(job *ProfileSettingI18n) *ProfileSettingWorkExperienceBuilder {
	builder.job = job
	builder.jobFlag = true
	return builder
}

// 工作描述
//
// 示例值：
func (builder *ProfileSettingWorkExperienceBuilder) Description(description *ProfileSettingI18n) *ProfileSettingWorkExperienceBuilder {
	builder.description = description
	builder.descriptionFlag = true
	return builder
}

// 自定义字段
//
// 示例值：
func (builder *ProfileSettingWorkExperienceBuilder) CustomFields(customFields []*ProfileSettingCustomField) *ProfileSettingWorkExperienceBuilder {
	builder.customFields = customFields
	builder.customFieldsFlag = true
	return builder
}

func (builder *ProfileSettingWorkExperienceBuilder) Build() *ProfileSettingWorkExperience {
	req := &ProfileSettingWorkExperience{}
	if builder.companyOrganizationFlag {
		req.CompanyOrganization = builder.companyOrganization
	}
	if builder.departmentFlag {
		req.Department = builder.department
	}
	if builder.startDateFlag {
		req.StartDate = &builder.startDate

	}
	if builder.endDateFlag {
		req.EndDate = &builder.endDate

	}
	if builder.jobFlag {
		req.Job = builder.job
	}
	if builder.descriptionFlag {
		req.Description = builder.description
	}
	if builder.customFieldsFlag {
		req.CustomFields = builder.customFields
	}
	return req
}

type QrCode struct {
	Id                 *string                 `json:"id,omitempty"`                   // 二维码id
	Png                *string                 `json:"png,omitempty"`                  // 二维码图片链接,文件名区分语言
	Url                *string                 `json:"url,omitempty"`                  // 二维码值链接
	Active             *bool                   `json:"active,omitempty"`               // 有效性
	CreatedBy          *string                 `json:"created_by,omitempty"`           // 创建人
	UpdatedBy          *string                 `json:"updated_by,omitempty"`           // 更新人
	CreatedAt          *int                    `json:"created_at,omitempty"`           // 创建时间
	UpdatedAt          *int                    `json:"updated_at,omitempty"`           // 更新时间
	DimensionValueList []*QrCodeDimensionValue `json:"dimension_value_list,omitempty"` // 维度值列表
}

type QrCodeBuilder struct {
	id                     string // 二维码id
	idFlag                 bool
	png                    string // 二维码图片链接,文件名区分语言
	pngFlag                bool
	url                    string // 二维码值链接
	urlFlag                bool
	active                 bool // 有效性
	activeFlag             bool
	createdBy              string // 创建人
	createdByFlag          bool
	updatedBy              string // 更新人
	updatedByFlag          bool
	createdAt              int // 创建时间
	createdAtFlag          bool
	updatedAt              int // 更新时间
	updatedAtFlag          bool
	dimensionValueList     []*QrCodeDimensionValue // 维度值列表
	dimensionValueListFlag bool
}

func NewQrCodeBuilder() *QrCodeBuilder {
	builder := &QrCodeBuilder{}
	return builder
}

// 二维码id
//
// 示例值：6892698621939026184
func (builder *QrCodeBuilder) Id(id string) *QrCodeBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

// 二维码图片链接,文件名区分语言
//
// 示例值：https://open.feishu-boe.cn
func (builder *QrCodeBuilder) Png(png string) *QrCodeBuilder {
	builder.png = png
	builder.pngFlag = true
	return builder
}

// 二维码值链接
//
// 示例值：https://open.feishu-boe.cn
func (builder *QrCodeBuilder) Url(url string) *QrCodeBuilder {
	builder.url = url
	builder.urlFlag = true
	return builder
}

// 有效性
//
// 示例值：
func (builder *QrCodeBuilder) Active(active bool) *QrCodeBuilder {
	builder.active = active
	builder.activeFlag = true
	return builder
}

// 创建人
//
// 示例值：7032210902531327521
func (builder *QrCodeBuilder) CreatedBy(createdBy string) *QrCodeBuilder {
	builder.createdBy = createdBy
	builder.createdByFlag = true
	return builder
}

// 更新人
//
// 示例值：7032210902531327521
func (builder *QrCodeBuilder) UpdatedBy(updatedBy string) *QrCodeBuilder {
	builder.updatedBy = updatedBy
	builder.updatedByFlag = true
	return builder
}

// 创建时间
//
// 示例值：1704038400
func (builder *QrCodeBuilder) CreatedAt(createdAt int) *QrCodeBuilder {
	builder.createdAt = createdAt
	builder.createdAtFlag = true
	return builder
}

// 更新时间
//
// 示例值：1704038400
func (builder *QrCodeBuilder) UpdatedAt(updatedAt int) *QrCodeBuilder {
	builder.updatedAt = updatedAt
	builder.updatedAtFlag = true
	return builder
}

// 维度值列表
//
// 示例值：
func (builder *QrCodeBuilder) DimensionValueList(dimensionValueList []*QrCodeDimensionValue) *QrCodeBuilder {
	builder.dimensionValueList = dimensionValueList
	builder.dimensionValueListFlag = true
	return builder
}

func (builder *QrCodeBuilder) Build() *QrCode {
	req := &QrCode{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.pngFlag {
		req.Png = &builder.png

	}
	if builder.urlFlag {
		req.Url = &builder.url

	}
	if builder.activeFlag {
		req.Active = &builder.active

	}
	if builder.createdByFlag {
		req.CreatedBy = &builder.createdBy

	}
	if builder.updatedByFlag {
		req.UpdatedBy = &builder.updatedBy

	}
	if builder.createdAtFlag {
		req.CreatedAt = &builder.createdAt

	}
	if builder.updatedAtFlag {
		req.UpdatedAt = &builder.updatedAt

	}
	if builder.dimensionValueListFlag {
		req.DimensionValueList = builder.dimensionValueList
	}
	return req
}

type QrCodeDimension struct {
	ApiName     *string `json:"api_name,omitempty"`     // 维度API name
	DisplayName *I18nV2 `json:"display_name,omitempty"` // 维度名称
	Type        *int    `json:"type,omitempty"`         // 维度类型
}

type QrCodeDimensionBuilder struct {
	apiName         string // 维度API name
	apiNameFlag     bool
	displayName     *I18nV2 // 维度名称
	displayNameFlag bool
	type_           int // 维度类型
	typeFlag        bool
}

func NewQrCodeDimensionBuilder() *QrCodeDimensionBuilder {
	builder := &QrCodeDimensionBuilder{}
	return builder
}

// 维度API name
//
// 示例值：company
func (builder *QrCodeDimensionBuilder) ApiName(apiName string) *QrCodeDimensionBuilder {
	builder.apiName = apiName
	builder.apiNameFlag = true
	return builder
}

// 维度名称
//
// 示例值：
func (builder *QrCodeDimensionBuilder) DisplayName(displayName *I18nV2) *QrCodeDimensionBuilder {
	builder.displayName = displayName
	builder.displayNameFlag = true
	return builder
}

// 维度类型
//
// 示例值：1
func (builder *QrCodeDimensionBuilder) Type(type_ int) *QrCodeDimensionBuilder {
	builder.type_ = type_
	builder.typeFlag = true
	return builder
}

func (builder *QrCodeDimensionBuilder) Build() *QrCodeDimension {
	req := &QrCodeDimension{}
	if builder.apiNameFlag {
		req.ApiName = &builder.apiName

	}
	if builder.displayNameFlag {
		req.DisplayName = builder.displayName
	}
	if builder.typeFlag {
		req.Type = &builder.type_

	}
	return req
}

type QrCodeDimensionValue struct {
	Dimension *QrCodeDimension `json:"dimension,omitempty"` // 维度类型
	Value     *QrCodeValue     `json:"value,omitempty"`     // 维度数据
}

type QrCodeDimensionValueBuilder struct {
	dimension     *QrCodeDimension // 维度类型
	dimensionFlag bool
	value         *QrCodeValue // 维度数据
	valueFlag     bool
}

func NewQrCodeDimensionValueBuilder() *QrCodeDimensionValueBuilder {
	builder := &QrCodeDimensionValueBuilder{}
	return builder
}

// 维度类型
//
// 示例值：
func (builder *QrCodeDimensionValueBuilder) Dimension(dimension *QrCodeDimension) *QrCodeDimensionValueBuilder {
	builder.dimension = dimension
	builder.dimensionFlag = true
	return builder
}

// 维度数据
//
// 示例值：
func (builder *QrCodeDimensionValueBuilder) Value(value *QrCodeValue) *QrCodeDimensionValueBuilder {
	builder.value = value
	builder.valueFlag = true
	return builder
}

func (builder *QrCodeDimensionValueBuilder) Build() *QrCodeDimensionValue {
	req := &QrCodeDimensionValue{}
	if builder.dimensionFlag {
		req.Dimension = builder.dimension
	}
	if builder.valueFlag {
		req.Value = builder.value
	}
	return req
}

type QrCodeValue struct {
	SelectValue      *string  `json:"select_value,omitempty"`       // 单选值
	MultiSelectValue []string `json:"multi_select_value,omitempty"` // 多选值
	BoolValue        *bool    `json:"bool_value,omitempty"`         // 布尔值
}

type QrCodeValueBuilder struct {
	selectValue          string // 单选值
	selectValueFlag      bool
	multiSelectValue     []string // 多选值
	multiSelectValueFlag bool
	boolValue            bool // 布尔值
	boolValueFlag        bool
}

func NewQrCodeValueBuilder() *QrCodeValueBuilder {
	builder := &QrCodeValueBuilder{}
	return builder
}

// 单选值
//
// 示例值：7147562782945478177
func (builder *QrCodeValueBuilder) SelectValue(selectValue string) *QrCodeValueBuilder {
	builder.selectValue = selectValue
	builder.selectValueFlag = true
	return builder
}

// 多选值
//
// 示例值：
func (builder *QrCodeValueBuilder) MultiSelectValue(multiSelectValue []string) *QrCodeValueBuilder {
	builder.multiSelectValue = multiSelectValue
	builder.multiSelectValueFlag = true
	return builder
}

// 布尔值
//
// 示例值：
func (builder *QrCodeValueBuilder) BoolValue(boolValue bool) *QrCodeValueBuilder {
	builder.boolValue = boolValue
	builder.boolValueFlag = true
	return builder
}

func (builder *QrCodeValueBuilder) Build() *QrCodeValue {
	req := &QrCodeValue{}
	if builder.selectValueFlag {
		req.SelectValue = &builder.selectValue

	}
	if builder.multiSelectValueFlag {
		req.MultiSelectValue = builder.multiSelectValue
	}
	if builder.boolValueFlag {
		req.BoolValue = &builder.boolValue

	}
	return req
}

type ReorganizationInfo struct {
	OriginalDepartmentNames       []*I18n                 `json:"original_department_names,omitempty"`         // 原部门名称
	TargetDepartmentNames         []*I18n                 `json:"target_department_names,omitempty"`           // 调整后部门名称
	OriginalDepartmentCode        *string                 `json:"original_department_code,omitempty"`          // 原部门编码
	TargetDepartmentCode          *string                 `json:"target_department_code,omitempty"`            // 调整后部门编码
	OriginalSubType               *Enum                   `json:"original_sub_type,omitempty"`                 // 原部门类型，枚举值可通过文档【飞书人事枚举常量】部门子类型（department_sub_type）枚举定义部分获得
	TargetSubType                 *Enum                   `json:"target_sub_type,omitempty"`                   // 调整后部门类型，枚举值可通过文档【飞书人事枚举常量】部门子类型（department_sub_type）枚举定义部分获得
	OriginalDepartmentManager     *string                 `json:"original_department_manager,omitempty"`       // 原部门负责人
	TargetDepartmentManager       *string                 `json:"target_department_manager,omitempty"`         // 调整后部门负责人
	OriginalDescriptions          []*I18n                 `json:"original_descriptions,omitempty"`             // 原描述
	TargetDescriptions            []*I18n                 `json:"target_descriptions,omitempty"`               // 调整后描述
	OriginalCostCenter            *CostCenter             `json:"original_cost_center,omitempty"`              // 原默认成本中心
	TargetCostCenter              *CostCenter             `json:"target_cost_center,omitempty"`                // 调整后默认成本中心
	OriginalIsConfidential        *bool                   `json:"original_is_confidential,omitempty"`          // 原是否保密
	TargetIsConfidential          *bool                   `json:"target_is_confidential,omitempty"`            // 调整后是否保密
	OriginalStaffingModel         *bool                   `json:"original_staffing_model,omitempty"`           // 原是否使用职务
	TargetStaffingModel           *bool                   `json:"target_staffing_model,omitempty"`             // 调整后是否使用职务
	OriginalParentDepartmentId    *string                 `json:"original_parent_department_id,omitempty"`     // 原上级部门
	TargetParentDepartmentId      *string                 `json:"target_parent_department_id,omitempty"`       // 调整后上级部门
	DraftTargetParentDepartmentId *string                 `json:"draft_target_parent_department_id,omitempty"` // 调整后上级部门 ID ，调整审批未生效前会返回格式为 td_xxx 的临时 ID
	OriginalDepartmentIdPath      []*OrgdraftDepartmentId `json:"original_department_id_path,omitempty"`       // 原部门全路径
	TargetDepartmentIdPath        []*OrgdraftDepartmentId `json:"target_department_id_path,omitempty"`         // 调整后部门全路径
	CustomFields                  []*ChangeFieldPair      `json:"custom_fields,omitempty"`                     // 自定义字段
}

type ReorganizationInfoBuilder struct {
	originalDepartmentNames           []*I18n // 原部门名称
	originalDepartmentNamesFlag       bool
	targetDepartmentNames             []*I18n // 调整后部门名称
	targetDepartmentNamesFlag         bool
	originalDepartmentCode            string // 原部门编码
	originalDepartmentCodeFlag        bool
	targetDepartmentCode              string // 调整后部门编码
	targetDepartmentCodeFlag          bool
	originalSubType                   *Enum // 原部门类型，枚举值可通过文档【飞书人事枚举常量】部门子类型（department_sub_type）枚举定义部分获得
	originalSubTypeFlag               bool
	targetSubType                     *Enum // 调整后部门类型，枚举值可通过文档【飞书人事枚举常量】部门子类型（department_sub_type）枚举定义部分获得
	targetSubTypeFlag                 bool
	originalDepartmentManager         string // 原部门负责人
	originalDepartmentManagerFlag     bool
	targetDepartmentManager           string // 调整后部门负责人
	targetDepartmentManagerFlag       bool
	originalDescriptions              []*I18n // 原描述
	originalDescriptionsFlag          bool
	targetDescriptions                []*I18n // 调整后描述
	targetDescriptionsFlag            bool
	originalCostCenter                *CostCenter // 原默认成本中心
	originalCostCenterFlag            bool
	targetCostCenter                  *CostCenter // 调整后默认成本中心
	targetCostCenterFlag              bool
	originalIsConfidential            bool // 原是否保密
	originalIsConfidentialFlag        bool
	targetIsConfidential              bool // 调整后是否保密
	targetIsConfidentialFlag          bool
	originalStaffingModel             bool // 原是否使用职务
	originalStaffingModelFlag         bool
	targetStaffingModel               bool // 调整后是否使用职务
	targetStaffingModelFlag           bool
	originalParentDepartmentId        string // 原上级部门
	originalParentDepartmentIdFlag    bool
	targetParentDepartmentId          string // 调整后上级部门
	targetParentDepartmentIdFlag      bool
	draftTargetParentDepartmentId     string // 调整后上级部门 ID ，调整审批未生效前会返回格式为 td_xxx 的临时 ID
	draftTargetParentDepartmentIdFlag bool
	originalDepartmentIdPath          []*OrgdraftDepartmentId // 原部门全路径
	originalDepartmentIdPathFlag      bool
	targetDepartmentIdPath            []*OrgdraftDepartmentId // 调整后部门全路径
	targetDepartmentIdPathFlag        bool
	customFields                      []*ChangeFieldPair // 自定义字段
	customFieldsFlag                  bool
}

func NewReorganizationInfoBuilder() *ReorganizationInfoBuilder {
	builder := &ReorganizationInfoBuilder{}
	return builder
}

// 原部门名称
//
// 示例值：
func (builder *ReorganizationInfoBuilder) OriginalDepartmentNames(originalDepartmentNames []*I18n) *ReorganizationInfoBuilder {
	builder.originalDepartmentNames = originalDepartmentNames
	builder.originalDepartmentNamesFlag = true
	return builder
}

// 调整后部门名称
//
// 示例值：
func (builder *ReorganizationInfoBuilder) TargetDepartmentNames(targetDepartmentNames []*I18n) *ReorganizationInfoBuilder {
	builder.targetDepartmentNames = targetDepartmentNames
	builder.targetDepartmentNamesFlag = true
	return builder
}

// 原部门编码
//
// 示例值：D00000456
func (builder *ReorganizationInfoBuilder) OriginalDepartmentCode(originalDepartmentCode string) *ReorganizationInfoBuilder {
	builder.originalDepartmentCode = originalDepartmentCode
	builder.originalDepartmentCodeFlag = true
	return builder
}

// 调整后部门编码
//
// 示例值：D00000456
func (builder *ReorganizationInfoBuilder) TargetDepartmentCode(targetDepartmentCode string) *ReorganizationInfoBuilder {
	builder.targetDepartmentCode = targetDepartmentCode
	builder.targetDepartmentCodeFlag = true
	return builder
}

// 原部门类型，枚举值可通过文档【飞书人事枚举常量】部门子类型（department_sub_type）枚举定义部分获得
//
// 示例值：
func (builder *ReorganizationInfoBuilder) OriginalSubType(originalSubType *Enum) *ReorganizationInfoBuilder {
	builder.originalSubType = originalSubType
	builder.originalSubTypeFlag = true
	return builder
}

// 调整后部门类型，枚举值可通过文档【飞书人事枚举常量】部门子类型（department_sub_type）枚举定义部分获得
//
// 示例值：
func (builder *ReorganizationInfoBuilder) TargetSubType(targetSubType *Enum) *ReorganizationInfoBuilder {
	builder.targetSubType = targetSubType
	builder.targetSubTypeFlag = true
	return builder
}

// 原部门负责人
//
// 示例值：6974648866876573198
func (builder *ReorganizationInfoBuilder) OriginalDepartmentManager(originalDepartmentManager string) *ReorganizationInfoBuilder {
	builder.originalDepartmentManager = originalDepartmentManager
	builder.originalDepartmentManagerFlag = true
	return builder
}

// 调整后部门负责人
//
// 示例值：7013328578351842852
func (builder *ReorganizationInfoBuilder) TargetDepartmentManager(targetDepartmentManager string) *ReorganizationInfoBuilder {
	builder.targetDepartmentManager = targetDepartmentManager
	builder.targetDepartmentManagerFlag = true
	return builder
}

// 原描述
//
// 示例值：
func (builder *ReorganizationInfoBuilder) OriginalDescriptions(originalDescriptions []*I18n) *ReorganizationInfoBuilder {
	builder.originalDescriptions = originalDescriptions
	builder.originalDescriptionsFlag = true
	return builder
}

// 调整后描述
//
// 示例值：
func (builder *ReorganizationInfoBuilder) TargetDescriptions(targetDescriptions []*I18n) *ReorganizationInfoBuilder {
	builder.targetDescriptions = targetDescriptions
	builder.targetDescriptionsFlag = true
	return builder
}

// 原默认成本中心
//
// 示例值：
func (builder *ReorganizationInfoBuilder) OriginalCostCenter(originalCostCenter *CostCenter) *ReorganizationInfoBuilder {
	builder.originalCostCenter = originalCostCenter
	builder.originalCostCenterFlag = true
	return builder
}

// 调整后默认成本中心
//
// 示例值：
func (builder *ReorganizationInfoBuilder) TargetCostCenter(targetCostCenter *CostCenter) *ReorganizationInfoBuilder {
	builder.targetCostCenter = targetCostCenter
	builder.targetCostCenterFlag = true
	return builder
}

// 原是否保密
//
// 示例值：true
func (builder *ReorganizationInfoBuilder) OriginalIsConfidential(originalIsConfidential bool) *ReorganizationInfoBuilder {
	builder.originalIsConfidential = originalIsConfidential
	builder.originalIsConfidentialFlag = true
	return builder
}

// 调整后是否保密
//
// 示例值：true
func (builder *ReorganizationInfoBuilder) TargetIsConfidential(targetIsConfidential bool) *ReorganizationInfoBuilder {
	builder.targetIsConfidential = targetIsConfidential
	builder.targetIsConfidentialFlag = true
	return builder
}

// 原是否使用职务
//
// 示例值：true
func (builder *ReorganizationInfoBuilder) OriginalStaffingModel(originalStaffingModel bool) *ReorganizationInfoBuilder {
	builder.originalStaffingModel = originalStaffingModel
	builder.originalStaffingModelFlag = true
	return builder
}

// 调整后是否使用职务
//
// 示例值：false
func (builder *ReorganizationInfoBuilder) TargetStaffingModel(targetStaffingModel bool) *ReorganizationInfoBuilder {
	builder.targetStaffingModel = targetStaffingModel
	builder.targetStaffingModelFlag = true
	return builder
}

// 原上级部门
//
// 示例值：6974659700705068581
func (builder *ReorganizationInfoBuilder) OriginalParentDepartmentId(originalParentDepartmentId string) *ReorganizationInfoBuilder {
	builder.originalParentDepartmentId = originalParentDepartmentId
	builder.originalParentDepartmentIdFlag = true
	return builder
}

// 调整后上级部门
//
// 示例值：6974659700705068581
func (builder *ReorganizationInfoBuilder) TargetParentDepartmentId(targetParentDepartmentId string) *ReorganizationInfoBuilder {
	builder.targetParentDepartmentId = targetParentDepartmentId
	builder.targetParentDepartmentIdFlag = true
	return builder
}

// 调整后上级部门 ID ，调整审批未生效前会返回格式为 td_xxx 的临时 ID
//
// 示例值：6966236933198579208
func (builder *ReorganizationInfoBuilder) DraftTargetParentDepartmentId(draftTargetParentDepartmentId string) *ReorganizationInfoBuilder {
	builder.draftTargetParentDepartmentId = draftTargetParentDepartmentId
	builder.draftTargetParentDepartmentIdFlag = true
	return builder
}

// 原部门全路径
//
// 示例值：
func (builder *ReorganizationInfoBuilder) OriginalDepartmentIdPath(originalDepartmentIdPath []*OrgdraftDepartmentId) *ReorganizationInfoBuilder {
	builder.originalDepartmentIdPath = originalDepartmentIdPath
	builder.originalDepartmentIdPathFlag = true
	return builder
}

// 调整后部门全路径
//
// 示例值：
func (builder *ReorganizationInfoBuilder) TargetDepartmentIdPath(targetDepartmentIdPath []*OrgdraftDepartmentId) *ReorganizationInfoBuilder {
	builder.targetDepartmentIdPath = targetDepartmentIdPath
	builder.targetDepartmentIdPathFlag = true
	return builder
}

// 自定义字段
//
// 示例值：
func (builder *ReorganizationInfoBuilder) CustomFields(customFields []*ChangeFieldPair) *ReorganizationInfoBuilder {
	builder.customFields = customFields
	builder.customFieldsFlag = true
	return builder
}

func (builder *ReorganizationInfoBuilder) Build() *ReorganizationInfo {
	req := &ReorganizationInfo{}
	if builder.originalDepartmentNamesFlag {
		req.OriginalDepartmentNames = builder.originalDepartmentNames
	}
	if builder.targetDepartmentNamesFlag {
		req.TargetDepartmentNames = builder.targetDepartmentNames
	}
	if builder.originalDepartmentCodeFlag {
		req.OriginalDepartmentCode = &builder.originalDepartmentCode

	}
	if builder.targetDepartmentCodeFlag {
		req.TargetDepartmentCode = &builder.targetDepartmentCode

	}
	if builder.originalSubTypeFlag {
		req.OriginalSubType = builder.originalSubType
	}
	if builder.targetSubTypeFlag {
		req.TargetSubType = builder.targetSubType
	}
	if builder.originalDepartmentManagerFlag {
		req.OriginalDepartmentManager = &builder.originalDepartmentManager

	}
	if builder.targetDepartmentManagerFlag {
		req.TargetDepartmentManager = &builder.targetDepartmentManager

	}
	if builder.originalDescriptionsFlag {
		req.OriginalDescriptions = builder.originalDescriptions
	}
	if builder.targetDescriptionsFlag {
		req.TargetDescriptions = builder.targetDescriptions
	}
	if builder.originalCostCenterFlag {
		req.OriginalCostCenter = builder.originalCostCenter
	}
	if builder.targetCostCenterFlag {
		req.TargetCostCenter = builder.targetCostCenter
	}
	if builder.originalIsConfidentialFlag {
		req.OriginalIsConfidential = &builder.originalIsConfidential

	}
	if builder.targetIsConfidentialFlag {
		req.TargetIsConfidential = &builder.targetIsConfidential

	}
	if builder.originalStaffingModelFlag {
		req.OriginalStaffingModel = &builder.originalStaffingModel

	}
	if builder.targetStaffingModelFlag {
		req.TargetStaffingModel = &builder.targetStaffingModel

	}
	if builder.originalParentDepartmentIdFlag {
		req.OriginalParentDepartmentId = &builder.originalParentDepartmentId

	}
	if builder.targetParentDepartmentIdFlag {
		req.TargetParentDepartmentId = &builder.targetParentDepartmentId

	}
	if builder.draftTargetParentDepartmentIdFlag {
		req.DraftTargetParentDepartmentId = &builder.draftTargetParentDepartmentId

	}
	if builder.originalDepartmentIdPathFlag {
		req.OriginalDepartmentIdPath = builder.originalDepartmentIdPath
	}
	if builder.targetDepartmentIdPathFlag {
		req.TargetDepartmentIdPath = builder.targetDepartmentIdPath
	}
	if builder.customFieldsFlag {
		req.CustomFields = builder.customFields
	}
	return req
}

type ResidentTax struct {
	YearResidentTax    *string            `json:"year_resident_tax,omitempty"`     // 年度
	ResidentStatus     *Enum              `json:"resident_status,omitempty"`       // -| 居民身份，枚举值 api_name 可通过【获取字段详情】接口查询，查询参数如下： - object_api_name = "resident_tax" - custom_api_name = "resident_status"
	TaxCountryRegionId *string            `json:"tax_country_region_id,omitempty"` // 国家/地区，可通过【查询国家/地区信息】 接口查询
	CustomFields       []*ObjectFieldData `json:"custom_fields,omitempty"`         // 自定义字段
}

type ResidentTaxBuilder struct {
	yearResidentTax        string // 年度
	yearResidentTaxFlag    bool
	residentStatus         *Enum // -| 居民身份，枚举值 api_name 可通过【获取字段详情】接口查询，查询参数如下： - object_api_name = "resident_tax" - custom_api_name = "resident_status"
	residentStatusFlag     bool
	taxCountryRegionId     string // 国家/地区，可通过【查询国家/地区信息】 接口查询
	taxCountryRegionIdFlag bool
	customFields           []*ObjectFieldData // 自定义字段
	customFieldsFlag       bool
}

func NewResidentTaxBuilder() *ResidentTaxBuilder {
	builder := &ResidentTaxBuilder{}
	return builder
}

// 年度
//
// 示例值：2023
func (builder *ResidentTaxBuilder) YearResidentTax(yearResidentTax string) *ResidentTaxBuilder {
	builder.yearResidentTax = yearResidentTax
	builder.yearResidentTaxFlag = true
	return builder
}

// -| 居民身份，枚举值 api_name 可通过【获取字段详情】接口查询，查询参数如下： - object_api_name = "resident_tax" - custom_api_name = "resident_status"
//
// 示例值：
func (builder *ResidentTaxBuilder) ResidentStatus(residentStatus *Enum) *ResidentTaxBuilder {
	builder.residentStatus = residentStatus
	builder.residentStatusFlag = true
	return builder
}

// 国家/地区，可通过【查询国家/地区信息】 接口查询
//
// 示例值：中国
func (builder *ResidentTaxBuilder) TaxCountryRegionId(taxCountryRegionId string) *ResidentTaxBuilder {
	builder.taxCountryRegionId = taxCountryRegionId
	builder.taxCountryRegionIdFlag = true
	return builder
}

// 自定义字段
//
// 示例值：
func (builder *ResidentTaxBuilder) CustomFields(customFields []*ObjectFieldData) *ResidentTaxBuilder {
	builder.customFields = customFields
	builder.customFieldsFlag = true
	return builder
}

func (builder *ResidentTaxBuilder) Build() *ResidentTax {
	req := &ResidentTax{}
	if builder.yearResidentTaxFlag {
		req.YearResidentTax = &builder.yearResidentTax

	}
	if builder.residentStatusFlag {
		req.ResidentStatus = builder.residentStatus
	}
	if builder.taxCountryRegionIdFlag {
		req.TaxCountryRegionId = &builder.taxCountryRegionId

	}
	if builder.customFieldsFlag {
		req.CustomFields = builder.customFields
	}
	return req
}

type SignatureFile struct {
	SignatureFileId    *string `json:"signature_file_id,omitempty"`    // 电子签文件ID
	Names              []*I18n `json:"names,omitempty"`                // 名称
	CreateTime         *string `json:"create_time,omitempty"`          // 创建时间
	UpdateTime         *string `json:"update_time,omitempty"`          // 更新时间
	EmploymentId       *string `json:"employment_id,omitempty"`        // 雇员 id
	SignatureFileState *Enum   `json:"signature_file_state,omitempty"` // 电子签文件状态，枚举值可通过文档【飞书人事枚举常量】电子签文件状态（signature_file_state）枚举定义部分获得
	ContractCode       *string `json:"contract_code,omitempty"`        // 供应商侧的合同编号，作为幂等key
}

type SignatureFileBuilder struct {
	signatureFileId        string // 电子签文件ID
	signatureFileIdFlag    bool
	names                  []*I18n // 名称
	namesFlag              bool
	createTime             string // 创建时间
	createTimeFlag         bool
	updateTime             string // 更新时间
	updateTimeFlag         bool
	employmentId           string // 雇员 id
	employmentIdFlag       bool
	signatureFileState     *Enum // 电子签文件状态，枚举值可通过文档【飞书人事枚举常量】电子签文件状态（signature_file_state）枚举定义部分获得
	signatureFileStateFlag bool
	contractCode           string // 供应商侧的合同编号，作为幂等key
	contractCodeFlag       bool
}

func NewSignatureFileBuilder() *SignatureFileBuilder {
	builder := &SignatureFileBuilder{}
	return builder
}

// 电子签文件ID
//
// 示例值：7147527056140813828
func (builder *SignatureFileBuilder) SignatureFileId(signatureFileId string) *SignatureFileBuilder {
	builder.signatureFileId = signatureFileId
	builder.signatureFileIdFlag = true
	return builder
}

// 名称
//
// 示例值：
func (builder *SignatureFileBuilder) Names(names []*I18n) *SignatureFileBuilder {
	builder.names = names
	builder.namesFlag = true
	return builder
}

// 创建时间
//
// 示例值：2023-01-01 00:00:00
func (builder *SignatureFileBuilder) CreateTime(createTime string) *SignatureFileBuilder {
	builder.createTime = createTime
	builder.createTimeFlag = true
	return builder
}

// 更新时间
//
// 示例值：2023-01-01 00:00:00
func (builder *SignatureFileBuilder) UpdateTime(updateTime string) *SignatureFileBuilder {
	builder.updateTime = updateTime
	builder.updateTimeFlag = true
	return builder
}

// 雇员 id
//
// 示例值：ou_a294793e8fa21529f2a60e3e9de45520
func (builder *SignatureFileBuilder) EmploymentId(employmentId string) *SignatureFileBuilder {
	builder.employmentId = employmentId
	builder.employmentIdFlag = true
	return builder
}

// 电子签文件状态，枚举值可通过文档【飞书人事枚举常量】电子签文件状态（signature_file_state）枚举定义部分获得
//
// 示例值：
func (builder *SignatureFileBuilder) SignatureFileState(signatureFileState *Enum) *SignatureFileBuilder {
	builder.signatureFileState = signatureFileState
	builder.signatureFileStateFlag = true
	return builder
}

// 供应商侧的合同编号，作为幂等key
//
// 示例值：48793beea04f4e2583d50732e481d507
func (builder *SignatureFileBuilder) ContractCode(contractCode string) *SignatureFileBuilder {
	builder.contractCode = contractCode
	builder.contractCodeFlag = true
	return builder
}

func (builder *SignatureFileBuilder) Build() *SignatureFile {
	req := &SignatureFile{}
	if builder.signatureFileIdFlag {
		req.SignatureFileId = &builder.signatureFileId

	}
	if builder.namesFlag {
		req.Names = builder.names
	}
	if builder.createTimeFlag {
		req.CreateTime = &builder.createTime

	}
	if builder.updateTimeFlag {
		req.UpdateTime = &builder.updateTime

	}
	if builder.employmentIdFlag {
		req.EmploymentId = &builder.employmentId

	}
	if builder.signatureFileStateFlag {
		req.SignatureFileState = builder.signatureFileState
	}
	if builder.contractCodeFlag {
		req.ContractCode = &builder.contractCode

	}
	return req
}

type TranferEmploymentInfo struct {
	RegularEmployeeStartDate *string            `json:"regular_employee_start_date,omitempty"` // 转正式员工日期
	SeniorityDate            *string            `json:"seniority_date,omitempty"`              // 司龄起算日期
	EmployeeNumber           *string            `json:"employee_number,omitempty"`             // 员工编号
	CustomFields             []*CustomFieldData `json:"custom_fields,omitempty"`               // 自定义字段
}

type TranferEmploymentInfoBuilder struct {
	regularEmployeeStartDate     string // 转正式员工日期
	regularEmployeeStartDateFlag bool
	seniorityDate                string // 司龄起算日期
	seniorityDateFlag            bool
	employeeNumber               string // 员工编号
	employeeNumberFlag           bool
	customFields                 []*CustomFieldData // 自定义字段
	customFieldsFlag             bool
}

func NewTranferEmploymentInfoBuilder() *TranferEmploymentInfoBuilder {
	builder := &TranferEmploymentInfoBuilder{}
	return builder
}

// 转正式员工日期
//
// 示例值：2023-01-01
func (builder *TranferEmploymentInfoBuilder) RegularEmployeeStartDate(regularEmployeeStartDate string) *TranferEmploymentInfoBuilder {
	builder.regularEmployeeStartDate = regularEmployeeStartDate
	builder.regularEmployeeStartDateFlag = true
	return builder
}

// 司龄起算日期
//
// 示例值：2023-01-01
func (builder *TranferEmploymentInfoBuilder) SeniorityDate(seniorityDate string) *TranferEmploymentInfoBuilder {
	builder.seniorityDate = seniorityDate
	builder.seniorityDateFlag = true
	return builder
}

// 员工编号
//
// 示例值：1111111
func (builder *TranferEmploymentInfoBuilder) EmployeeNumber(employeeNumber string) *TranferEmploymentInfoBuilder {
	builder.employeeNumber = employeeNumber
	builder.employeeNumberFlag = true
	return builder
}

// 自定义字段
//
// 示例值：
func (builder *TranferEmploymentInfoBuilder) CustomFields(customFields []*CustomFieldData) *TranferEmploymentInfoBuilder {
	builder.customFields = customFields
	builder.customFieldsFlag = true
	return builder
}

func (builder *TranferEmploymentInfoBuilder) Build() *TranferEmploymentInfo {
	req := &TranferEmploymentInfo{}
	if builder.regularEmployeeStartDateFlag {
		req.RegularEmployeeStartDate = &builder.regularEmployeeStartDate

	}
	if builder.seniorityDateFlag {
		req.SeniorityDate = &builder.seniorityDate

	}
	if builder.employeeNumberFlag {
		req.EmployeeNumber = &builder.employeeNumber

	}
	if builder.customFieldsFlag {
		req.CustomFields = builder.customFields
	}
	return req
}

type TransferInfo struct {
	Remark                     *string                 `json:"remark,omitempty"`                        // 备注
	OfferInfo                  *string                 `json:"offer_info,omitempty"`                    // offer信息
	TargetDottedManagerClean   *bool                   `json:"target_dotted_manager_clean,omitempty"`   // 是否撤销虚线上级
	ProbationExist             *bool                   `json:"probation_exist,omitempty"`               // 是否有试用期
	OriginalDepartment         *string                 `json:"original_department,omitempty"`           // 原部门
	TargetDepartment           *string                 `json:"target_department,omitempty"`             // 新部门
	TargetDraftDepartment      *string                 `json:"target_draft_department,omitempty"`       // 新部门，新建部门审批完成前会返回 td_xxx 的临时 ID
	OriginalDepartmentIdPath   []*OrgdraftDepartmentId `json:"original_department_id_path,omitempty"`   // 原部门全路径
	TargetDepartmentIdPath     []*OrgdraftDepartmentId `json:"target_department_id_path,omitempty"`     // 新部门全路径
	OriginalWorkLocation       *string                 `json:"original_work_location,omitempty"`        // 原工作地点
	TargetWorkLocation         *string                 `json:"target_work_location,omitempty"`          // 新工作地点
	OriginalDirectManager      *string                 `json:"original_direct_manager,omitempty"`       // 原直属上级
	TargetDirectManager        *string                 `json:"target_direct_manager,omitempty"`         // 新直属上级
	OriginalDottedManager      *string                 `json:"original_dotted_manager,omitempty"`       // 原虚线上级
	TargetDottedManager        *string                 `json:"target_dotted_manager,omitempty"`         // 新虚线上级
	OriginalJob                *string                 `json:"original_job,omitempty"`                  // 原职务
	TargetJob                  *string                 `json:"target_job,omitempty"`                    // 新职务
	OriginalJobFamily          *string                 `json:"original_job_family,omitempty"`           // 原序列
	TargetJobFamily            *string                 `json:"target_job_family,omitempty"`             // 新序列
	OriginalJobLevel           *string                 `json:"original_job_level,omitempty"`            // 原级别
	TargetJobLevel             *string                 `json:"target_job_level,omitempty"`              // 新级别
	OriginalWorkforceType      *string                 `json:"original_workforce_type,omitempty"`       // 原人员类型
	TargetWorkforceType        *string                 `json:"target_workforce_type,omitempty"`         // 新人员类型
	OriginalCompany            *string                 `json:"original_company,omitempty"`              // 原公司
	TargetCompany              *string                 `json:"target_company,omitempty"`                // 新公司
	OriginalContractNumber     *string                 `json:"original_contract_number,omitempty"`      // 原合同编号
	TargetContractNumber       *string                 `json:"target_contract_number,omitempty"`        // 新合同编号
	OriginalContractType       *string                 `json:"original_contract_type,omitempty"`        // 原合同类型
	TargetContractType         *string                 `json:"target_contract_type,omitempty"`          // 新合同类型
	OriginalDurationType       *string                 `json:"original_duration_type,omitempty"`        // 原期限类型
	TargetDurationType         *string                 `json:"target_duration_type,omitempty"`          // 新期限类型
	OriginalSigningType        *string                 `json:"original_signing_type,omitempty"`         // 原签订类型
	TargetSigningType          *string                 `json:"target_signing_type,omitempty"`           // 新签订类型
	OriginalContractStartDate  *string                 `json:"original_contract_start_date,omitempty"`  // 原合同开始日期
	TargetContractStartDate    *string                 `json:"target_contract_start_date,omitempty"`    // 新合同开始日期
	OriginalContractEndDate    *string                 `json:"original_contract_end_date,omitempty"`    // 原合同结束日期
	TargetContractEndDate      *string                 `json:"target_contract_end_date,omitempty"`      // 新合同结束日期
	OriginalWorkingHoursType   *string                 `json:"original_working_hours_type,omitempty"`   // 原工时制度
	TargetWorkingHoursType     *string                 `json:"target_working_hours_type,omitempty"`     // 新工时制度
	OriginalWorkingCalendar    *string                 `json:"original_working_calendar,omitempty"`     // 原工作日历
	TargetWorkingCalendar      *string                 `json:"target_working_calendar,omitempty"`       // 新工作日历
	OriginalProbationEndDate   *string                 `json:"original_probation_end_date,omitempty"`   // 原试用期预计结束日期
	TargetProbationEndDate     *string                 `json:"target_probation_end_date,omitempty"`     // 新试用期预计结束日期
	OriginalWeeklyWorkingHours *string                 `json:"original_weekly_working_hours,omitempty"` // 原周工作时长
	TargetWeeklyWorkingHours   *string                 `json:"target_weekly_working_hours,omitempty"`   // 新周工作时长
	OriginalWorkShift          *string                 `json:"original_work_shift,omitempty"`           // 原排班
	TargetWorkShift            *string                 `json:"target_work_shift,omitempty"`             // 新排班
	OriginalCostCenterRate     []*JobDataCostCenter    `json:"original_cost_center_rate,omitempty"`     // 原成本中心分摊方式
	TargetCostCenterRate       []*JobDataCostCenter    `json:"target_cost_center_rate,omitempty"`       // 新成本中心分摊方式
	OriginalEmploymentChange   *TranferEmploymentInfo  `json:"original_employment_change,omitempty"`    // 原工作信息
	TargetEmploymentChange     *TranferEmploymentInfo  `json:"target_employment_change,omitempty"`      // 新工作信息
	OriginalJobGrade           *string                 `json:"original_job_grade,omitempty"`            // 原职等
	TargetJobGrade             *string                 `json:"target_job_grade,omitempty"`              // 新职等
	OriginalCompensationType   *string                 `json:"original_compensation_type,omitempty"`    // 原薪资类型
	TargetCompensationType     *string                 `json:"target_compensation_type,omitempty"`      // 新薪资类型
	OriginalServiceCompany     *string                 `json:"original_service_company,omitempty"`      // 原任职公司
	TargetServiceCompany       *string                 `json:"target_service_company,omitempty"`        // 新任职公司
}

type TransferInfoBuilder struct {
	remark                         string // 备注
	remarkFlag                     bool
	offerInfo                      string // offer信息
	offerInfoFlag                  bool
	targetDottedManagerClean       bool // 是否撤销虚线上级
	targetDottedManagerCleanFlag   bool
	probationExist                 bool // 是否有试用期
	probationExistFlag             bool
	originalDepartment             string // 原部门
	originalDepartmentFlag         bool
	targetDepartment               string // 新部门
	targetDepartmentFlag           bool
	targetDraftDepartment          string // 新部门，新建部门审批完成前会返回 td_xxx 的临时 ID
	targetDraftDepartmentFlag      bool
	originalDepartmentIdPath       []*OrgdraftDepartmentId // 原部门全路径
	originalDepartmentIdPathFlag   bool
	targetDepartmentIdPath         []*OrgdraftDepartmentId // 新部门全路径
	targetDepartmentIdPathFlag     bool
	originalWorkLocation           string // 原工作地点
	originalWorkLocationFlag       bool
	targetWorkLocation             string // 新工作地点
	targetWorkLocationFlag         bool
	originalDirectManager          string // 原直属上级
	originalDirectManagerFlag      bool
	targetDirectManager            string // 新直属上级
	targetDirectManagerFlag        bool
	originalDottedManager          string // 原虚线上级
	originalDottedManagerFlag      bool
	targetDottedManager            string // 新虚线上级
	targetDottedManagerFlag        bool
	originalJob                    string // 原职务
	originalJobFlag                bool
	targetJob                      string // 新职务
	targetJobFlag                  bool
	originalJobFamily              string // 原序列
	originalJobFamilyFlag          bool
	targetJobFamily                string // 新序列
	targetJobFamilyFlag            bool
	originalJobLevel               string // 原级别
	originalJobLevelFlag           bool
	targetJobLevel                 string // 新级别
	targetJobLevelFlag             bool
	originalWorkforceType          string // 原人员类型
	originalWorkforceTypeFlag      bool
	targetWorkforceType            string // 新人员类型
	targetWorkforceTypeFlag        bool
	originalCompany                string // 原公司
	originalCompanyFlag            bool
	targetCompany                  string // 新公司
	targetCompanyFlag              bool
	originalContractNumber         string // 原合同编号
	originalContractNumberFlag     bool
	targetContractNumber           string // 新合同编号
	targetContractNumberFlag       bool
	originalContractType           string // 原合同类型
	originalContractTypeFlag       bool
	targetContractType             string // 新合同类型
	targetContractTypeFlag         bool
	originalDurationType           string // 原期限类型
	originalDurationTypeFlag       bool
	targetDurationType             string // 新期限类型
	targetDurationTypeFlag         bool
	originalSigningType            string // 原签订类型
	originalSigningTypeFlag        bool
	targetSigningType              string // 新签订类型
	targetSigningTypeFlag          bool
	originalContractStartDate      string // 原合同开始日期
	originalContractStartDateFlag  bool
	targetContractStartDate        string // 新合同开始日期
	targetContractStartDateFlag    bool
	originalContractEndDate        string // 原合同结束日期
	originalContractEndDateFlag    bool
	targetContractEndDate          string // 新合同结束日期
	targetContractEndDateFlag      bool
	originalWorkingHoursType       string // 原工时制度
	originalWorkingHoursTypeFlag   bool
	targetWorkingHoursType         string // 新工时制度
	targetWorkingHoursTypeFlag     bool
	originalWorkingCalendar        string // 原工作日历
	originalWorkingCalendarFlag    bool
	targetWorkingCalendar          string // 新工作日历
	targetWorkingCalendarFlag      bool
	originalProbationEndDate       string // 原试用期预计结束日期
	originalProbationEndDateFlag   bool
	targetProbationEndDate         string // 新试用期预计结束日期
	targetProbationEndDateFlag     bool
	originalWeeklyWorkingHours     string // 原周工作时长
	originalWeeklyWorkingHoursFlag bool
	targetWeeklyWorkingHours       string // 新周工作时长
	targetWeeklyWorkingHoursFlag   bool
	originalWorkShift              string // 原排班
	originalWorkShiftFlag          bool
	targetWorkShift                string // 新排班
	targetWorkShiftFlag            bool
	originalCostCenterRate         []*JobDataCostCenter // 原成本中心分摊方式
	originalCostCenterRateFlag     bool
	targetCostCenterRate           []*JobDataCostCenter // 新成本中心分摊方式
	targetCostCenterRateFlag       bool
	originalEmploymentChange       *TranferEmploymentInfo // 原工作信息
	originalEmploymentChangeFlag   bool
	targetEmploymentChange         *TranferEmploymentInfo // 新工作信息
	targetEmploymentChangeFlag     bool
	originalJobGrade               string // 原职等
	originalJobGradeFlag           bool
	targetJobGrade                 string // 新职等
	targetJobGradeFlag             bool
	originalCompensationType       string // 原薪资类型
	originalCompensationTypeFlag   bool
	targetCompensationType         string // 新薪资类型
	targetCompensationTypeFlag     bool
	originalServiceCompany         string // 原任职公司
	originalServiceCompanyFlag     bool
	targetServiceCompany           string // 新任职公司
	targetServiceCompanyFlag       bool
}

func NewTransferInfoBuilder() *TransferInfoBuilder {
	builder := &TransferInfoBuilder{}
	return builder
}

// 备注
//
// 示例值：异动详情
func (builder *TransferInfoBuilder) Remark(remark string) *TransferInfoBuilder {
	builder.remark = remark
	builder.remarkFlag = true
	return builder
}

// offer信息
//
// 示例值：优质人才，加急处理
func (builder *TransferInfoBuilder) OfferInfo(offerInfo string) *TransferInfoBuilder {
	builder.offerInfo = offerInfo
	builder.offerInfoFlag = true
	return builder
}

// 是否撤销虚线上级
//
// 示例值：true
func (builder *TransferInfoBuilder) TargetDottedManagerClean(targetDottedManagerClean bool) *TransferInfoBuilder {
	builder.targetDottedManagerClean = targetDottedManagerClean
	builder.targetDottedManagerCleanFlag = true
	return builder
}

// 是否有试用期
//
// 示例值：false
func (builder *TransferInfoBuilder) ProbationExist(probationExist bool) *TransferInfoBuilder {
	builder.probationExist = probationExist
	builder.probationExistFlag = true
	return builder
}

// 原部门
//
// 示例值：6966236933198579208
func (builder *TransferInfoBuilder) OriginalDepartment(originalDepartment string) *TransferInfoBuilder {
	builder.originalDepartment = originalDepartment
	builder.originalDepartmentFlag = true
	return builder
}

// 新部门
//
// 示例值：6966236933198579208
func (builder *TransferInfoBuilder) TargetDepartment(targetDepartment string) *TransferInfoBuilder {
	builder.targetDepartment = targetDepartment
	builder.targetDepartmentFlag = true
	return builder
}

// 新部门，新建部门审批完成前会返回 td_xxx 的临时 ID
//
// 示例值：6966236933198579208
func (builder *TransferInfoBuilder) TargetDraftDepartment(targetDraftDepartment string) *TransferInfoBuilder {
	builder.targetDraftDepartment = targetDraftDepartment
	builder.targetDraftDepartmentFlag = true
	return builder
}

// 原部门全路径
//
// 示例值：
func (builder *TransferInfoBuilder) OriginalDepartmentIdPath(originalDepartmentIdPath []*OrgdraftDepartmentId) *TransferInfoBuilder {
	builder.originalDepartmentIdPath = originalDepartmentIdPath
	builder.originalDepartmentIdPathFlag = true
	return builder
}

// 新部门全路径
//
// 示例值：
func (builder *TransferInfoBuilder) TargetDepartmentIdPath(targetDepartmentIdPath []*OrgdraftDepartmentId) *TransferInfoBuilder {
	builder.targetDepartmentIdPath = targetDepartmentIdPath
	builder.targetDepartmentIdPathFlag = true
	return builder
}

// 原工作地点
//
// 示例值：6967271100992587295
func (builder *TransferInfoBuilder) OriginalWorkLocation(originalWorkLocation string) *TransferInfoBuilder {
	builder.originalWorkLocation = originalWorkLocation
	builder.originalWorkLocationFlag = true
	return builder
}

// 新工作地点
//
// 示例值：6967271100992587295
func (builder *TransferInfoBuilder) TargetWorkLocation(targetWorkLocation string) *TransferInfoBuilder {
	builder.targetWorkLocation = targetWorkLocation
	builder.targetWorkLocationFlag = true
	return builder
}

// 原直属上级
//
// 示例值：6974641477444060708
func (builder *TransferInfoBuilder) OriginalDirectManager(originalDirectManager string) *TransferInfoBuilder {
	builder.originalDirectManager = originalDirectManager
	builder.originalDirectManagerFlag = true
	return builder
}

// 新直属上级
//
// 示例值：7013619729281713671
func (builder *TransferInfoBuilder) TargetDirectManager(targetDirectManager string) *TransferInfoBuilder {
	builder.targetDirectManager = targetDirectManager
	builder.targetDirectManagerFlag = true
	return builder
}

// 原虚线上级
//
// 示例值：6974648866876573198
func (builder *TransferInfoBuilder) OriginalDottedManager(originalDottedManager string) *TransferInfoBuilder {
	builder.originalDottedManager = originalDottedManager
	builder.originalDottedManagerFlag = true
	return builder
}

// 新虚线上级
//
// 示例值：7013328578351842852
func (builder *TransferInfoBuilder) TargetDottedManager(targetDottedManager string) *TransferInfoBuilder {
	builder.targetDottedManager = targetDottedManager
	builder.targetDottedManagerFlag = true
	return builder
}

// 原职务
//
// 示例值：6969469398088287751
func (builder *TransferInfoBuilder) OriginalJob(originalJob string) *TransferInfoBuilder {
	builder.originalJob = originalJob
	builder.originalJobFlag = true
	return builder
}

// 新职务
//
// 示例值：6969469557836760606
func (builder *TransferInfoBuilder) TargetJob(targetJob string) *TransferInfoBuilder {
	builder.targetJob = targetJob
	builder.targetJobFlag = true
	return builder
}

// 原序列
//
// 示例值：6967287547462419975
func (builder *TransferInfoBuilder) OriginalJobFamily(originalJobFamily string) *TransferInfoBuilder {
	builder.originalJobFamily = originalJobFamily
	builder.originalJobFamilyFlag = true
	return builder
}

// 新序列
//
// 示例值：6967287547462419975
func (builder *TransferInfoBuilder) TargetJobFamily(targetJobFamily string) *TransferInfoBuilder {
	builder.targetJobFamily = targetJobFamily
	builder.targetJobFamilyFlag = true
	return builder
}

// 原级别
//
// 示例值：6972085707674355214
func (builder *TransferInfoBuilder) OriginalJobLevel(originalJobLevel string) *TransferInfoBuilder {
	builder.originalJobLevel = originalJobLevel
	builder.originalJobLevelFlag = true
	return builder
}

// 新级别
//
// 示例值：6972085707674355214
func (builder *TransferInfoBuilder) TargetJobLevel(targetJobLevel string) *TransferInfoBuilder {
	builder.targetJobLevel = targetJobLevel
	builder.targetJobLevelFlag = true
	return builder
}

// 原人员类型
//
// 示例值：6968386026792289828
func (builder *TransferInfoBuilder) OriginalWorkforceType(originalWorkforceType string) *TransferInfoBuilder {
	builder.originalWorkforceType = originalWorkforceType
	builder.originalWorkforceTypeFlag = true
	return builder
}

// 新人员类型
//
// 示例值：7036268995372303885
func (builder *TransferInfoBuilder) TargetWorkforceType(targetWorkforceType string) *TransferInfoBuilder {
	builder.targetWorkforceType = targetWorkforceType
	builder.targetWorkforceTypeFlag = true
	return builder
}

// 原公司
//
// 示例值：6974659700705068581
func (builder *TransferInfoBuilder) OriginalCompany(originalCompany string) *TransferInfoBuilder {
	builder.originalCompany = originalCompany
	builder.originalCompanyFlag = true
	return builder
}

// 新公司
//
// 示例值：6974659700705068581
func (builder *TransferInfoBuilder) TargetCompany(targetCompany string) *TransferInfoBuilder {
	builder.targetCompany = targetCompany
	builder.targetCompanyFlag = true
	return builder
}

// 原合同编号
//
// 示例值：55332
func (builder *TransferInfoBuilder) OriginalContractNumber(originalContractNumber string) *TransferInfoBuilder {
	builder.originalContractNumber = originalContractNumber
	builder.originalContractNumberFlag = true
	return builder
}

// 新合同编号
//
// 示例值：55333
func (builder *TransferInfoBuilder) TargetContractNumber(targetContractNumber string) *TransferInfoBuilder {
	builder.targetContractNumber = targetContractNumber
	builder.targetContractNumberFlag = true
	return builder
}

// 原合同类型
//
// 示例值：labor_contract
func (builder *TransferInfoBuilder) OriginalContractType(originalContractType string) *TransferInfoBuilder {
	builder.originalContractType = originalContractType
	builder.originalContractTypeFlag = true
	return builder
}

// 新合同类型
//
// 示例值：labor_contract
func (builder *TransferInfoBuilder) TargetContractType(targetContractType string) *TransferInfoBuilder {
	builder.targetContractType = targetContractType
	builder.targetContractTypeFlag = true
	return builder
}

// 原期限类型
//
// 示例值：fixed_term
func (builder *TransferInfoBuilder) OriginalDurationType(originalDurationType string) *TransferInfoBuilder {
	builder.originalDurationType = originalDurationType
	builder.originalDurationTypeFlag = true
	return builder
}

// 新期限类型
//
// 示例值：fixed_term
func (builder *TransferInfoBuilder) TargetDurationType(targetDurationType string) *TransferInfoBuilder {
	builder.targetDurationType = targetDurationType
	builder.targetDurationTypeFlag = true
	return builder
}

// 原签订类型
//
// 示例值：new
func (builder *TransferInfoBuilder) OriginalSigningType(originalSigningType string) *TransferInfoBuilder {
	builder.originalSigningType = originalSigningType
	builder.originalSigningTypeFlag = true
	return builder
}

// 新签订类型
//
// 示例值：new
func (builder *TransferInfoBuilder) TargetSigningType(targetSigningType string) *TransferInfoBuilder {
	builder.targetSigningType = targetSigningType
	builder.targetSigningTypeFlag = true
	return builder
}

// 原合同开始日期
//
// 示例值：2021-07-01
func (builder *TransferInfoBuilder) OriginalContractStartDate(originalContractStartDate string) *TransferInfoBuilder {
	builder.originalContractStartDate = originalContractStartDate
	builder.originalContractStartDateFlag = true
	return builder
}

// 新合同开始日期
//
// 示例值：2021-07-01
func (builder *TransferInfoBuilder) TargetContractStartDate(targetContractStartDate string) *TransferInfoBuilder {
	builder.targetContractStartDate = targetContractStartDate
	builder.targetContractStartDateFlag = true
	return builder
}

// 原合同结束日期
//
// 示例值：2024-07-01
func (builder *TransferInfoBuilder) OriginalContractEndDate(originalContractEndDate string) *TransferInfoBuilder {
	builder.originalContractEndDate = originalContractEndDate
	builder.originalContractEndDateFlag = true
	return builder
}

// 新合同结束日期
//
// 示例值：2024-07-01
func (builder *TransferInfoBuilder) TargetContractEndDate(targetContractEndDate string) *TransferInfoBuilder {
	builder.targetContractEndDate = targetContractEndDate
	builder.targetContractEndDateFlag = true
	return builder
}

// 原工时制度
//
// 示例值：6969087376740206087
func (builder *TransferInfoBuilder) OriginalWorkingHoursType(originalWorkingHoursType string) *TransferInfoBuilder {
	builder.originalWorkingHoursType = originalWorkingHoursType
	builder.originalWorkingHoursTypeFlag = true
	return builder
}

// 新工时制度
//
// 示例值：6969087376740206087
func (builder *TransferInfoBuilder) TargetWorkingHoursType(targetWorkingHoursType string) *TransferInfoBuilder {
	builder.targetWorkingHoursType = targetWorkingHoursType
	builder.targetWorkingHoursTypeFlag = true
	return builder
}

// 原工作日历
//
// 示例值：6969087376740236087
func (builder *TransferInfoBuilder) OriginalWorkingCalendar(originalWorkingCalendar string) *TransferInfoBuilder {
	builder.originalWorkingCalendar = originalWorkingCalendar
	builder.originalWorkingCalendarFlag = true
	return builder
}

// 新工作日历
//
// 示例值：6969087376740236087
func (builder *TransferInfoBuilder) TargetWorkingCalendar(targetWorkingCalendar string) *TransferInfoBuilder {
	builder.targetWorkingCalendar = targetWorkingCalendar
	builder.targetWorkingCalendarFlag = true
	return builder
}

// 原试用期预计结束日期
//
// 示例值：2021-11-17
func (builder *TransferInfoBuilder) OriginalProbationEndDate(originalProbationEndDate string) *TransferInfoBuilder {
	builder.originalProbationEndDate = originalProbationEndDate
	builder.originalProbationEndDateFlag = true
	return builder
}

// 新试用期预计结束日期
//
// 示例值：2021-11-17
func (builder *TransferInfoBuilder) TargetProbationEndDate(targetProbationEndDate string) *TransferInfoBuilder {
	builder.targetProbationEndDate = targetProbationEndDate
	builder.targetProbationEndDateFlag = true
	return builder
}

// 原周工作时长
//
// 示例值：162
func (builder *TransferInfoBuilder) OriginalWeeklyWorkingHours(originalWeeklyWorkingHours string) *TransferInfoBuilder {
	builder.originalWeeklyWorkingHours = originalWeeklyWorkingHours
	builder.originalWeeklyWorkingHoursFlag = true
	return builder
}

// 新周工作时长
//
// 示例值：160
func (builder *TransferInfoBuilder) TargetWeeklyWorkingHours(targetWeeklyWorkingHours string) *TransferInfoBuilder {
	builder.targetWeeklyWorkingHours = targetWeeklyWorkingHours
	builder.targetWeeklyWorkingHoursFlag = true
	return builder
}

// 原排班
//
// 示例值：work_shift
func (builder *TransferInfoBuilder) OriginalWorkShift(originalWorkShift string) *TransferInfoBuilder {
	builder.originalWorkShift = originalWorkShift
	builder.originalWorkShiftFlag = true
	return builder
}

// 新排班
//
// 示例值：non_work_shift
func (builder *TransferInfoBuilder) TargetWorkShift(targetWorkShift string) *TransferInfoBuilder {
	builder.targetWorkShift = targetWorkShift
	builder.targetWorkShiftFlag = true
	return builder
}

// 原成本中心分摊方式
//
// 示例值：
func (builder *TransferInfoBuilder) OriginalCostCenterRate(originalCostCenterRate []*JobDataCostCenter) *TransferInfoBuilder {
	builder.originalCostCenterRate = originalCostCenterRate
	builder.originalCostCenterRateFlag = true
	return builder
}

// 新成本中心分摊方式
//
// 示例值：
func (builder *TransferInfoBuilder) TargetCostCenterRate(targetCostCenterRate []*JobDataCostCenter) *TransferInfoBuilder {
	builder.targetCostCenterRate = targetCostCenterRate
	builder.targetCostCenterRateFlag = true
	return builder
}

// 原工作信息
//
// 示例值：
func (builder *TransferInfoBuilder) OriginalEmploymentChange(originalEmploymentChange *TranferEmploymentInfo) *TransferInfoBuilder {
	builder.originalEmploymentChange = originalEmploymentChange
	builder.originalEmploymentChangeFlag = true
	return builder
}

// 新工作信息
//
// 示例值：
func (builder *TransferInfoBuilder) TargetEmploymentChange(targetEmploymentChange *TranferEmploymentInfo) *TransferInfoBuilder {
	builder.targetEmploymentChange = targetEmploymentChange
	builder.targetEmploymentChangeFlag = true
	return builder
}

// 原职等
//
// 示例值：7289005963599693366
func (builder *TransferInfoBuilder) OriginalJobGrade(originalJobGrade string) *TransferInfoBuilder {
	builder.originalJobGrade = originalJobGrade
	builder.originalJobGradeFlag = true
	return builder
}

// 新职等
//
// 示例值：7289005963599693366
func (builder *TransferInfoBuilder) TargetJobGrade(targetJobGrade string) *TransferInfoBuilder {
	builder.targetJobGrade = targetJobGrade
	builder.targetJobGradeFlag = true
	return builder
}

// 原薪资类型
//
// 示例值：hourly
func (builder *TransferInfoBuilder) OriginalCompensationType(originalCompensationType string) *TransferInfoBuilder {
	builder.originalCompensationType = originalCompensationType
	builder.originalCompensationTypeFlag = true
	return builder
}

// 新薪资类型
//
// 示例值：salary
func (builder *TransferInfoBuilder) TargetCompensationType(targetCompensationType string) *TransferInfoBuilder {
	builder.targetCompensationType = targetCompensationType
	builder.targetCompensationTypeFlag = true
	return builder
}

// 原任职公司
//
// 示例值：7289005963599693367
func (builder *TransferInfoBuilder) OriginalServiceCompany(originalServiceCompany string) *TransferInfoBuilder {
	builder.originalServiceCompany = originalServiceCompany
	builder.originalServiceCompanyFlag = true
	return builder
}

// 新任职公司
//
// 示例值：7289005963599693367
func (builder *TransferInfoBuilder) TargetServiceCompany(targetServiceCompany string) *TransferInfoBuilder {
	builder.targetServiceCompany = targetServiceCompany
	builder.targetServiceCompanyFlag = true
	return builder
}

func (builder *TransferInfoBuilder) Build() *TransferInfo {
	req := &TransferInfo{}
	if builder.remarkFlag {
		req.Remark = &builder.remark

	}
	if builder.offerInfoFlag {
		req.OfferInfo = &builder.offerInfo

	}
	if builder.targetDottedManagerCleanFlag {
		req.TargetDottedManagerClean = &builder.targetDottedManagerClean

	}
	if builder.probationExistFlag {
		req.ProbationExist = &builder.probationExist

	}
	if builder.originalDepartmentFlag {
		req.OriginalDepartment = &builder.originalDepartment

	}
	if builder.targetDepartmentFlag {
		req.TargetDepartment = &builder.targetDepartment

	}
	if builder.targetDraftDepartmentFlag {
		req.TargetDraftDepartment = &builder.targetDraftDepartment

	}
	if builder.originalDepartmentIdPathFlag {
		req.OriginalDepartmentIdPath = builder.originalDepartmentIdPath
	}
	if builder.targetDepartmentIdPathFlag {
		req.TargetDepartmentIdPath = builder.targetDepartmentIdPath
	}
	if builder.originalWorkLocationFlag {
		req.OriginalWorkLocation = &builder.originalWorkLocation

	}
	if builder.targetWorkLocationFlag {
		req.TargetWorkLocation = &builder.targetWorkLocation

	}
	if builder.originalDirectManagerFlag {
		req.OriginalDirectManager = &builder.originalDirectManager

	}
	if builder.targetDirectManagerFlag {
		req.TargetDirectManager = &builder.targetDirectManager

	}
	if builder.originalDottedManagerFlag {
		req.OriginalDottedManager = &builder.originalDottedManager

	}
	if builder.targetDottedManagerFlag {
		req.TargetDottedManager = &builder.targetDottedManager

	}
	if builder.originalJobFlag {
		req.OriginalJob = &builder.originalJob

	}
	if builder.targetJobFlag {
		req.TargetJob = &builder.targetJob

	}
	if builder.originalJobFamilyFlag {
		req.OriginalJobFamily = &builder.originalJobFamily

	}
	if builder.targetJobFamilyFlag {
		req.TargetJobFamily = &builder.targetJobFamily

	}
	if builder.originalJobLevelFlag {
		req.OriginalJobLevel = &builder.originalJobLevel

	}
	if builder.targetJobLevelFlag {
		req.TargetJobLevel = &builder.targetJobLevel

	}
	if builder.originalWorkforceTypeFlag {
		req.OriginalWorkforceType = &builder.originalWorkforceType

	}
	if builder.targetWorkforceTypeFlag {
		req.TargetWorkforceType = &builder.targetWorkforceType

	}
	if builder.originalCompanyFlag {
		req.OriginalCompany = &builder.originalCompany

	}
	if builder.targetCompanyFlag {
		req.TargetCompany = &builder.targetCompany

	}
	if builder.originalContractNumberFlag {
		req.OriginalContractNumber = &builder.originalContractNumber

	}
	if builder.targetContractNumberFlag {
		req.TargetContractNumber = &builder.targetContractNumber

	}
	if builder.originalContractTypeFlag {
		req.OriginalContractType = &builder.originalContractType

	}
	if builder.targetContractTypeFlag {
		req.TargetContractType = &builder.targetContractType

	}
	if builder.originalDurationTypeFlag {
		req.OriginalDurationType = &builder.originalDurationType

	}
	if builder.targetDurationTypeFlag {
		req.TargetDurationType = &builder.targetDurationType

	}
	if builder.originalSigningTypeFlag {
		req.OriginalSigningType = &builder.originalSigningType

	}
	if builder.targetSigningTypeFlag {
		req.TargetSigningType = &builder.targetSigningType

	}
	if builder.originalContractStartDateFlag {
		req.OriginalContractStartDate = &builder.originalContractStartDate

	}
	if builder.targetContractStartDateFlag {
		req.TargetContractStartDate = &builder.targetContractStartDate

	}
	if builder.originalContractEndDateFlag {
		req.OriginalContractEndDate = &builder.originalContractEndDate

	}
	if builder.targetContractEndDateFlag {
		req.TargetContractEndDate = &builder.targetContractEndDate

	}
	if builder.originalWorkingHoursTypeFlag {
		req.OriginalWorkingHoursType = &builder.originalWorkingHoursType

	}
	if builder.targetWorkingHoursTypeFlag {
		req.TargetWorkingHoursType = &builder.targetWorkingHoursType

	}
	if builder.originalWorkingCalendarFlag {
		req.OriginalWorkingCalendar = &builder.originalWorkingCalendar

	}
	if builder.targetWorkingCalendarFlag {
		req.TargetWorkingCalendar = &builder.targetWorkingCalendar

	}
	if builder.originalProbationEndDateFlag {
		req.OriginalProbationEndDate = &builder.originalProbationEndDate

	}
	if builder.targetProbationEndDateFlag {
		req.TargetProbationEndDate = &builder.targetProbationEndDate

	}
	if builder.originalWeeklyWorkingHoursFlag {
		req.OriginalWeeklyWorkingHours = &builder.originalWeeklyWorkingHours

	}
	if builder.targetWeeklyWorkingHoursFlag {
		req.TargetWeeklyWorkingHours = &builder.targetWeeklyWorkingHours

	}
	if builder.originalWorkShiftFlag {
		req.OriginalWorkShift = &builder.originalWorkShift

	}
	if builder.targetWorkShiftFlag {
		req.TargetWorkShift = &builder.targetWorkShift

	}
	if builder.originalCostCenterRateFlag {
		req.OriginalCostCenterRate = builder.originalCostCenterRate
	}
	if builder.targetCostCenterRateFlag {
		req.TargetCostCenterRate = builder.targetCostCenterRate
	}
	if builder.originalEmploymentChangeFlag {
		req.OriginalEmploymentChange = builder.originalEmploymentChange
	}
	if builder.targetEmploymentChangeFlag {
		req.TargetEmploymentChange = builder.targetEmploymentChange
	}
	if builder.originalJobGradeFlag {
		req.OriginalJobGrade = &builder.originalJobGrade

	}
	if builder.targetJobGradeFlag {
		req.TargetJobGrade = &builder.targetJobGrade

	}
	if builder.originalCompensationTypeFlag {
		req.OriginalCompensationType = &builder.originalCompensationType

	}
	if builder.targetCompensationTypeFlag {
		req.TargetCompensationType = &builder.targetCompensationType

	}
	if builder.originalServiceCompanyFlag {
		req.OriginalServiceCompany = &builder.originalServiceCompany

	}
	if builder.targetServiceCompanyFlag {
		req.TargetServiceCompany = &builder.targetServiceCompany

	}
	return req
}

type UserContact struct {
	UserIds []string `json:"user_ids,omitempty"` // 手机号对应的在离职员工id列表
	Mobile  *string  `json:"mobile,omitempty"`   // 手机号
}

type UserContactBuilder struct {
	userIds     []string // 手机号对应的在离职员工id列表
	userIdsFlag bool
	mobile      string // 手机号
	mobileFlag  bool
}

func NewUserContactBuilder() *UserContactBuilder {
	builder := &UserContactBuilder{}
	return builder
}

// 手机号对应的在离职员工id列表
//
// 示例值：
func (builder *UserContactBuilder) UserIds(userIds []string) *UserContactBuilder {
	builder.userIds = userIds
	builder.userIdsFlag = true
	return builder
}

// 手机号
//
// 示例值：13011111111
func (builder *UserContactBuilder) Mobile(mobile string) *UserContactBuilder {
	builder.mobile = mobile
	builder.mobileFlag = true
	return builder
}

func (builder *UserContactBuilder) Build() *UserContact {
	req := &UserContact{}
	if builder.userIdsFlag {
		req.UserIds = builder.userIds
	}
	if builder.mobileFlag {
		req.Mobile = &builder.mobile

	}
	return req
}

type UserInfo struct {
	UserId     *string `json:"user_id,omitempty"`     // 员工id
	Name       *string `json:"name,omitempty"`        // 用户默认名
	ZhName     *string `json:"zh_name,omitempty"`     // 中文名
	EnName     *string `json:"en_name,omitempty"`     // 英文名
	Mobile     *string `json:"mobile,omitempty"`      // 手机号
	EmployeeNo *string `json:"employee_no,omitempty"` // 员工工号
	Email      *string `json:"email,omitempty"`       // 邮箱
	IsResigned *bool   `json:"is_resigned,omitempty"` // 用户是否离职
	ResignTime *string `json:"resign_time,omitempty"` // 离职时间，时间戳格式，表示从1970年1月1日开始所经过的秒数
	ResignDate *string `json:"resign_date,omitempty"` // 离职日期
}

type UserInfoBuilder struct {
	userId         string // 员工id
	userIdFlag     bool
	name           string // 用户默认名
	nameFlag       bool
	zhName         string // 中文名
	zhNameFlag     bool
	enName         string // 英文名
	enNameFlag     bool
	mobile         string // 手机号
	mobileFlag     bool
	employeeNo     string // 员工工号
	employeeNoFlag bool
	email          string // 邮箱
	emailFlag      bool
	isResigned     bool // 用户是否离职
	isResignedFlag bool
	resignTime     string // 离职时间，时间戳格式，表示从1970年1月1日开始所经过的秒数
	resignTimeFlag bool
	resignDate     string // 离职日期
	resignDateFlag bool
}

func NewUserInfoBuilder() *UserInfoBuilder {
	builder := &UserInfoBuilder{}
	return builder
}

// 员工id
//
// 示例值：3e3cf96b
func (builder *UserInfoBuilder) UserId(userId string) *UserInfoBuilder {
	builder.userId = userId
	builder.userIdFlag = true
	return builder
}

// 用户默认名
//
// 示例值：张三
func (builder *UserInfoBuilder) Name(name string) *UserInfoBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}

// 中文名
//
// 示例值：张三
func (builder *UserInfoBuilder) ZhName(zhName string) *UserInfoBuilder {
	builder.zhName = zhName
	builder.zhNameFlag = true
	return builder
}

// 英文名
//
// 示例值：zhang san
func (builder *UserInfoBuilder) EnName(enName string) *UserInfoBuilder {
	builder.enName = enName
	builder.enNameFlag = true
	return builder
}

// 手机号
//
// 示例值：13011111111
func (builder *UserInfoBuilder) Mobile(mobile string) *UserInfoBuilder {
	builder.mobile = mobile
	builder.mobileFlag = true
	return builder
}

// 员工工号
//
// 示例值：1
func (builder *UserInfoBuilder) EmployeeNo(employeeNo string) *UserInfoBuilder {
	builder.employeeNo = employeeNo
	builder.employeeNoFlag = true
	return builder
}

// 邮箱
//
// 示例值：zhangsan@gmail.com
func (builder *UserInfoBuilder) Email(email string) *UserInfoBuilder {
	builder.email = email
	builder.emailFlag = true
	return builder
}

// 用户是否离职
//
// 示例值：true
func (builder *UserInfoBuilder) IsResigned(isResigned bool) *UserInfoBuilder {
	builder.isResigned = isResigned
	builder.isResignedFlag = true
	return builder
}

// 离职时间，时间戳格式，表示从1970年1月1日开始所经过的秒数
//
// 示例值：1672502400
func (builder *UserInfoBuilder) ResignTime(resignTime string) *UserInfoBuilder {
	builder.resignTime = resignTime
	builder.resignTimeFlag = true
	return builder
}

// 离职日期
//
// 示例值：2023-01-01
func (builder *UserInfoBuilder) ResignDate(resignDate string) *UserInfoBuilder {
	builder.resignDate = resignDate
	builder.resignDateFlag = true
	return builder
}

func (builder *UserInfoBuilder) Build() *UserInfo {
	req := &UserInfo{}
	if builder.userIdFlag {
		req.UserId = &builder.userId

	}
	if builder.nameFlag {
		req.Name = &builder.name

	}
	if builder.zhNameFlag {
		req.ZhName = &builder.zhName

	}
	if builder.enNameFlag {
		req.EnName = &builder.enName

	}
	if builder.mobileFlag {
		req.Mobile = &builder.mobile

	}
	if builder.employeeNoFlag {
		req.EmployeeNo = &builder.employeeNo

	}
	if builder.emailFlag {
		req.Email = &builder.email

	}
	if builder.isResignedFlag {
		req.IsResigned = &builder.isResigned

	}
	if builder.resignTimeFlag {
		req.ResignTime = &builder.resignTime

	}
	if builder.resignDateFlag {
		req.ResignDate = &builder.resignDate

	}
	return req
}

type WorkEmail struct {
	Email      *string `json:"email,omitempty"`       // 邮箱地址
	EmailUsage *Enum   `json:"email_usage,omitempty"` // 邮箱用途，枚举值可通过文档【飞书人事枚举常量】邮箱用途（email_usage）枚举定义获得
}

type WorkEmailBuilder struct {
	email          string // 邮箱地址
	emailFlag      bool
	emailUsage     *Enum // 邮箱用途，枚举值可通过文档【飞书人事枚举常量】邮箱用途（email_usage）枚举定义获得
	emailUsageFlag bool
}

func NewWorkEmailBuilder() *WorkEmailBuilder {
	builder := &WorkEmailBuilder{}
	return builder
}

// 邮箱地址
//
// 示例值：1234567@bytedance.com
func (builder *WorkEmailBuilder) Email(email string) *WorkEmailBuilder {
	builder.email = email
	builder.emailFlag = true
	return builder
}

// 邮箱用途，枚举值可通过文档【飞书人事枚举常量】邮箱用途（email_usage）枚举定义获得
//
// 示例值：
func (builder *WorkEmailBuilder) EmailUsage(emailUsage *Enum) *WorkEmailBuilder {
	builder.emailUsage = emailUsage
	builder.emailUsageFlag = true
	return builder
}

func (builder *WorkEmailBuilder) Build() *WorkEmail {
	req := &WorkEmail{}
	if builder.emailFlag {
		req.Email = &builder.email

	}
	if builder.emailUsageFlag {
		req.EmailUsage = builder.emailUsage
	}
	return req
}

type WorkEmailCheckResult struct {
	WorkEmail *string `json:"work_email,omitempty"` // 工作邮箱值
	Success   *bool   `json:"success,omitempty"`    // 校验结果是否通过
}

type WorkEmailCheckResultBuilder struct {
	workEmail     string // 工作邮箱值
	workEmailFlag bool
	success       bool // 校验结果是否通过
	successFlag   bool
}

func NewWorkEmailCheckResultBuilder() *WorkEmailCheckResultBuilder {
	builder := &WorkEmailCheckResultBuilder{}
	return builder
}

// 工作邮箱值
//
// 示例值：zhangsan.123@bytedance.com
func (builder *WorkEmailCheckResultBuilder) WorkEmail(workEmail string) *WorkEmailCheckResultBuilder {
	builder.workEmail = workEmail
	builder.workEmailFlag = true
	return builder
}

// 校验结果是否通过
//
// 示例值：true
func (builder *WorkEmailCheckResultBuilder) Success(success bool) *WorkEmailCheckResultBuilder {
	builder.success = success
	builder.successFlag = true
	return builder
}

func (builder *WorkEmailCheckResultBuilder) Build() *WorkEmailCheckResult {
	req := &WorkEmailCheckResult{}
	if builder.workEmailFlag {
		req.WorkEmail = &builder.workEmail

	}
	if builder.successFlag {
		req.Success = &builder.success

	}
	return req
}

type WorkEmailInfoList struct {
	WorkEmail               *string `json:"work_email,omitempty"`                  // 工作邮箱值
	CountryRegionAlpha3Code *string `json:"country_region_alpha_3_code,omitempty"` // 国家地区三字码
	Pinyin                  *string `json:"pinyin,omitempty"`                      // 姓名拼音
}

type WorkEmailInfoListBuilder struct {
	workEmail                   string // 工作邮箱值
	workEmailFlag               bool
	countryRegionAlpha3Code     string // 国家地区三字码
	countryRegionAlpha3CodeFlag bool
	pinyin                      string // 姓名拼音
	pinyinFlag                  bool
}

func NewWorkEmailInfoListBuilder() *WorkEmailInfoListBuilder {
	builder := &WorkEmailInfoListBuilder{}
	return builder
}

// 工作邮箱值
//
// 示例值：zhangsan.123@bytedance.com
func (builder *WorkEmailInfoListBuilder) WorkEmail(workEmail string) *WorkEmailInfoListBuilder {
	builder.workEmail = workEmail
	builder.workEmailFlag = true
	return builder
}

// 国家地区三字码
//
// 示例值：CHN
func (builder *WorkEmailInfoListBuilder) CountryRegionAlpha3Code(countryRegionAlpha3Code string) *WorkEmailInfoListBuilder {
	builder.countryRegionAlpha3Code = countryRegionAlpha3Code
	builder.countryRegionAlpha3CodeFlag = true
	return builder
}

// 姓名拼音
//
// 示例值：zhangsan
func (builder *WorkEmailInfoListBuilder) Pinyin(pinyin string) *WorkEmailInfoListBuilder {
	builder.pinyin = pinyin
	builder.pinyinFlag = true
	return builder
}

func (builder *WorkEmailInfoListBuilder) Build() *WorkEmailInfoList {
	req := &WorkEmailInfoList{}
	if builder.workEmailFlag {
		req.WorkEmail = &builder.workEmail

	}
	if builder.countryRegionAlpha3CodeFlag {
		req.CountryRegionAlpha3Code = &builder.countryRegionAlpha3Code

	}
	if builder.pinyinFlag {
		req.Pinyin = &builder.pinyin

	}
	return req
}

type WorkExperience struct {
	CompanyName *string `json:"company_name,omitempty"` // 公司名称
	StartTime   *string `json:"start_time,omitempty"`   // 开始时间
	EndTime     *string `json:"end_time,omitempty"`     // 结束时间
	JobTitle    *string `json:"job_title,omitempty"`    // 岗位
	Description *string `json:"description,omitempty"`  // 工作描述
}

type WorkExperienceBuilder struct {
	companyName     string // 公司名称
	companyNameFlag bool
	startTime       string // 开始时间
	startTimeFlag   bool
	endTime         string // 结束时间
	endTimeFlag     bool
	jobTitle        string // 岗位
	jobTitleFlag    bool
	description     string // 工作描述
	descriptionFlag bool
}

func NewWorkExperienceBuilder() *WorkExperienceBuilder {
	builder := &WorkExperienceBuilder{}
	return builder
}

// 公司名称
//
// 示例值：猎豹
func (builder *WorkExperienceBuilder) CompanyName(companyName string) *WorkExperienceBuilder {
	builder.companyName = companyName
	builder.companyNameFlag = true
	return builder
}

// 开始时间
//
// 示例值：2015-02-01
func (builder *WorkExperienceBuilder) StartTime(startTime string) *WorkExperienceBuilder {
	builder.startTime = startTime
	builder.startTimeFlag = true
	return builder
}

// 结束时间
//
// 示例值：2017-02-01
func (builder *WorkExperienceBuilder) EndTime(endTime string) *WorkExperienceBuilder {
	builder.endTime = endTime
	builder.endTimeFlag = true
	return builder
}

// 岗位
//
// 示例值：产品经理
func (builder *WorkExperienceBuilder) JobTitle(jobTitle string) *WorkExperienceBuilder {
	builder.jobTitle = jobTitle
	builder.jobTitleFlag = true
	return builder
}

// 工作描述
//
// 示例值：app
func (builder *WorkExperienceBuilder) Description(description string) *WorkExperienceBuilder {
	builder.description = description
	builder.descriptionFlag = true
	return builder
}

func (builder *WorkExperienceBuilder) Build() *WorkExperience {
	req := &WorkExperience{}
	if builder.companyNameFlag {
		req.CompanyName = &builder.companyName

	}
	if builder.startTimeFlag {
		req.StartTime = &builder.startTime

	}
	if builder.endTimeFlag {
		req.EndTime = &builder.endTime

	}
	if builder.jobTitleFlag {
		req.JobTitle = &builder.jobTitle

	}
	if builder.descriptionFlag {
		req.Description = &builder.description

	}
	return req
}

type WorkExperienceInfo struct {
	CompanyOrganization []*I18n            `json:"company_organization,omitempty"` // 公司 / 组织
	Department          []*I18n            `json:"department,omitempty"`           // 部门
	Job                 []*I18n            `json:"job,omitempty"`                  // 岗位
	Description         []*I18n            `json:"description,omitempty"`          // 工作描述
	StartDate           *string            `json:"start_date,omitempty"`           // 开始日期
	EndDate             *string            `json:"end_date,omitempty"`             // 结束日期
	CustomFields        []*CustomFieldData `json:"custom_fields,omitempty"`        // 自定义字段
}

type WorkExperienceInfoBuilder struct {
	companyOrganization     []*I18n // 公司 / 组织
	companyOrganizationFlag bool
	department              []*I18n // 部门
	departmentFlag          bool
	job                     []*I18n // 岗位
	jobFlag                 bool
	description             []*I18n // 工作描述
	descriptionFlag         bool
	startDate               string // 开始日期
	startDateFlag           bool
	endDate                 string // 结束日期
	endDateFlag             bool
	customFields            []*CustomFieldData // 自定义字段
	customFieldsFlag        bool
}

func NewWorkExperienceInfoBuilder() *WorkExperienceInfoBuilder {
	builder := &WorkExperienceInfoBuilder{}
	return builder
}

// 公司 / 组织
//
// 示例值：
func (builder *WorkExperienceInfoBuilder) CompanyOrganization(companyOrganization []*I18n) *WorkExperienceInfoBuilder {
	builder.companyOrganization = companyOrganization
	builder.companyOrganizationFlag = true
	return builder
}

// 部门
//
// 示例值：
func (builder *WorkExperienceInfoBuilder) Department(department []*I18n) *WorkExperienceInfoBuilder {
	builder.department = department
	builder.departmentFlag = true
	return builder
}

// 岗位
//
// 示例值：
func (builder *WorkExperienceInfoBuilder) Job(job []*I18n) *WorkExperienceInfoBuilder {
	builder.job = job
	builder.jobFlag = true
	return builder
}

// 工作描述
//
// 示例值：
func (builder *WorkExperienceInfoBuilder) Description(description []*I18n) *WorkExperienceInfoBuilder {
	builder.description = description
	builder.descriptionFlag = true
	return builder
}

// 开始日期
//
// 示例值：2020-01-01
func (builder *WorkExperienceInfoBuilder) StartDate(startDate string) *WorkExperienceInfoBuilder {
	builder.startDate = startDate
	builder.startDateFlag = true
	return builder
}

// 结束日期
//
// 示例值：2020-01-01
func (builder *WorkExperienceInfoBuilder) EndDate(endDate string) *WorkExperienceInfoBuilder {
	builder.endDate = endDate
	builder.endDateFlag = true
	return builder
}

// 自定义字段
//
// 示例值：
func (builder *WorkExperienceInfoBuilder) CustomFields(customFields []*CustomFieldData) *WorkExperienceInfoBuilder {
	builder.customFields = customFields
	builder.customFieldsFlag = true
	return builder
}

func (builder *WorkExperienceInfoBuilder) Build() *WorkExperienceInfo {
	req := &WorkExperienceInfo{}
	if builder.companyOrganizationFlag {
		req.CompanyOrganization = builder.companyOrganization
	}
	if builder.departmentFlag {
		req.Department = builder.department
	}
	if builder.jobFlag {
		req.Job = builder.job
	}
	if builder.descriptionFlag {
		req.Description = builder.description
	}
	if builder.startDateFlag {
		req.StartDate = &builder.startDate

	}
	if builder.endDateFlag {
		req.EndDate = &builder.endDate

	}
	if builder.customFieldsFlag {
		req.CustomFields = builder.customFields
	}
	return req
}

type WorkforcePlan struct {
	WorkforcePlanId   *string `json:"workforce_plan_id,omitempty"`   // 编制规划方案 ID
	WorkforcePlanName []*I18n `json:"workforce_plan_name,omitempty"` // 编制规划方案名称
	StartDate         *string `json:"start_date,omitempty"`          // 开始日期
	EndDate           *string `json:"end_date,omitempty"`            // 结束日期
	Active            *bool   `json:"active,omitempty"`              // 是否启用
}

type WorkforcePlanBuilder struct {
	workforcePlanId       string // 编制规划方案 ID
	workforcePlanIdFlag   bool
	workforcePlanName     []*I18n // 编制规划方案名称
	workforcePlanNameFlag bool
	startDate             string // 开始日期
	startDateFlag         bool
	endDate               string // 结束日期
	endDateFlag           bool
	active                bool // 是否启用
	activeFlag            bool
}

func NewWorkforcePlanBuilder() *WorkforcePlanBuilder {
	builder := &WorkforcePlanBuilder{}
	return builder
}

// 编制规划方案 ID
//
// 示例值："123456"
func (builder *WorkforcePlanBuilder) WorkforcePlanId(workforcePlanId string) *WorkforcePlanBuilder {
	builder.workforcePlanId = workforcePlanId
	builder.workforcePlanIdFlag = true
	return builder
}

// 编制规划方案名称
//
// 示例值：
func (builder *WorkforcePlanBuilder) WorkforcePlanName(workforcePlanName []*I18n) *WorkforcePlanBuilder {
	builder.workforcePlanName = workforcePlanName
	builder.workforcePlanNameFlag = true
	return builder
}

// 开始日期
//
// 示例值："2020-10-01"
func (builder *WorkforcePlanBuilder) StartDate(startDate string) *WorkforcePlanBuilder {
	builder.startDate = startDate
	builder.startDateFlag = true
	return builder
}

// 结束日期
//
// 示例值："2020-10-31"
func (builder *WorkforcePlanBuilder) EndDate(endDate string) *WorkforcePlanBuilder {
	builder.endDate = endDate
	builder.endDateFlag = true
	return builder
}

// 是否启用
//
// 示例值：true
func (builder *WorkforcePlanBuilder) Active(active bool) *WorkforcePlanBuilder {
	builder.active = active
	builder.activeFlag = true
	return builder
}

func (builder *WorkforcePlanBuilder) Build() *WorkforcePlan {
	req := &WorkforcePlan{}
	if builder.workforcePlanIdFlag {
		req.WorkforcePlanId = &builder.workforcePlanId

	}
	if builder.workforcePlanNameFlag {
		req.WorkforcePlanName = builder.workforcePlanName
	}
	if builder.startDateFlag {
		req.StartDate = &builder.startDate

	}
	if builder.endDateFlag {
		req.EndDate = &builder.endDate

	}
	if builder.activeFlag {
		req.Active = &builder.active

	}
	return req
}

type WorkforcePlanDetail struct {
	WorkforcePlanDetailId *string        `json:"workforce_plan_detail_id,omitempty"` // 编制规划明细 ID
	Department            *DimensionInfo `json:"department,omitempty"`               // 部门信息
	EmployeeType          *DimensionInfo `json:"employee_type,omitempty"`            // 人员类型信息
	WorkLocation          *DimensionInfo `json:"work_location,omitempty"`            // 工作地点信息
	JobFamily             *DimensionInfo `json:"job_family,omitempty"`               // 序列信息
	JobLevel              *DimensionInfo `json:"job_level,omitempty"`                // 职级信息
	Job                   *DimensionInfo `json:"job,omitempty"`                      // 职务信息
	CostCenter            *DimensionInfo `json:"cost_center,omitempty"`              // 成本中心信息
	WorkforcePlan         *string        `json:"workforce_plan,omitempty"`           // 编制规划值

	EstimatedActiveIndividualsDetail []*WorkforcePlanEaiDetail `json:"estimated_active_individuals_detail,omitempty"` // 预估在职人数明细
}

type WorkforcePlanDetailBuilder struct {
	workforcePlanDetailId     string // 编制规划明细 ID
	workforcePlanDetailIdFlag bool
	department                *DimensionInfo // 部门信息
	departmentFlag            bool
	employeeType              *DimensionInfo // 人员类型信息
	employeeTypeFlag          bool
	workLocation              *DimensionInfo // 工作地点信息
	workLocationFlag          bool
	jobFamily                 *DimensionInfo // 序列信息
	jobFamilyFlag             bool
	jobLevel                  *DimensionInfo // 职级信息
	jobLevelFlag              bool
	job                       *DimensionInfo // 职务信息
	jobFlag                   bool
	costCenter                *DimensionInfo // 成本中心信息
	costCenterFlag            bool
	workforcePlan             string // 编制规划值
	workforcePlanFlag         bool

	estimatedActiveIndividualsDetail     []*WorkforcePlanEaiDetail // 预估在职人数明细
	estimatedActiveIndividualsDetailFlag bool
}

func NewWorkforcePlanDetailBuilder() *WorkforcePlanDetailBuilder {
	builder := &WorkforcePlanDetailBuilder{}
	return builder
}

// 编制规划明细 ID
//
// 示例值："123456"
func (builder *WorkforcePlanDetailBuilder) WorkforcePlanDetailId(workforcePlanDetailId string) *WorkforcePlanDetailBuilder {
	builder.workforcePlanDetailId = workforcePlanDetailId
	builder.workforcePlanDetailIdFlag = true
	return builder
}

// 部门信息
//
// 示例值：
func (builder *WorkforcePlanDetailBuilder) Department(department *DimensionInfo) *WorkforcePlanDetailBuilder {
	builder.department = department
	builder.departmentFlag = true
	return builder
}

// 人员类型信息
//
// 示例值：
func (builder *WorkforcePlanDetailBuilder) EmployeeType(employeeType *DimensionInfo) *WorkforcePlanDetailBuilder {
	builder.employeeType = employeeType
	builder.employeeTypeFlag = true
	return builder
}

// 工作地点信息
//
// 示例值：
func (builder *WorkforcePlanDetailBuilder) WorkLocation(workLocation *DimensionInfo) *WorkforcePlanDetailBuilder {
	builder.workLocation = workLocation
	builder.workLocationFlag = true
	return builder
}

// 序列信息
//
// 示例值：
func (builder *WorkforcePlanDetailBuilder) JobFamily(jobFamily *DimensionInfo) *WorkforcePlanDetailBuilder {
	builder.jobFamily = jobFamily
	builder.jobFamilyFlag = true
	return builder
}

// 职级信息
//
// 示例值：
func (builder *WorkforcePlanDetailBuilder) JobLevel(jobLevel *DimensionInfo) *WorkforcePlanDetailBuilder {
	builder.jobLevel = jobLevel
	builder.jobLevelFlag = true
	return builder
}

// 职务信息
//
// 示例值：
func (builder *WorkforcePlanDetailBuilder) Job(job *DimensionInfo) *WorkforcePlanDetailBuilder {
	builder.job = job
	builder.jobFlag = true
	return builder
}

// 成本中心信息
//
// 示例值：
func (builder *WorkforcePlanDetailBuilder) CostCenter(costCenter *DimensionInfo) *WorkforcePlanDetailBuilder {
	builder.costCenter = costCenter
	builder.costCenterFlag = true
	return builder
}

// 编制规划值
//
// 示例值：10.00
func (builder *WorkforcePlanDetailBuilder) WorkforcePlan(workforcePlan string) *WorkforcePlanDetailBuilder {
	builder.workforcePlan = workforcePlan
	builder.workforcePlanFlag = true
	return builder
}

// 预估在职人数明细
//
// 示例值：
func (builder *WorkforcePlanDetailBuilder) EstimatedActiveIndividualsDetail(estimatedActiveIndividualsDetail []*WorkforcePlanEaiDetail) *WorkforcePlanDetailBuilder {
	builder.estimatedActiveIndividualsDetail = estimatedActiveIndividualsDetail
	builder.estimatedActiveIndividualsDetailFlag = true
	return builder
}

func (builder *WorkforcePlanDetailBuilder) Build() *WorkforcePlanDetail {
	req := &WorkforcePlanDetail{}
	if builder.workforcePlanDetailIdFlag {
		req.WorkforcePlanDetailId = &builder.workforcePlanDetailId

	}
	if builder.departmentFlag {
		req.Department = builder.department
	}
	if builder.employeeTypeFlag {
		req.EmployeeType = builder.employeeType
	}
	if builder.workLocationFlag {
		req.WorkLocation = builder.workLocation
	}
	if builder.jobFamilyFlag {
		req.JobFamily = builder.jobFamily
	}
	if builder.jobLevelFlag {
		req.JobLevel = builder.jobLevel
	}
	if builder.jobFlag {
		req.Job = builder.job
	}
	if builder.costCenterFlag {
		req.CostCenter = builder.costCenter
	}
	if builder.workforcePlanFlag {
		req.WorkforcePlan = &builder.workforcePlan

	}

	if builder.estimatedActiveIndividualsDetailFlag {
		req.EstimatedActiveIndividualsDetail = builder.estimatedActiveIndividualsDetail
	}
	return req
}

type WorkforcePlanDetailV2 struct {
	WorkforcePlanDetailId *string              `json:"workforce_plan_detail_id,omitempty"` // 编制规划明细 ID
	DimensionInfoDatas    []*DimensionInfoData `json:"dimension_info_datas,omitempty"`     // 维度信息
	WorkforcePlan         *string              `json:"workforce_plan,omitempty"`           // 编制规划值

	EstimatedActiveIndividualsDetails []*WorkforcePlanEaiDetail `json:"estimated_active_individuals_details,omitempty"` // 预估在职人数明细
}

type WorkforcePlanDetailV2Builder struct {
	workforcePlanDetailId     string // 编制规划明细 ID
	workforcePlanDetailIdFlag bool
	dimensionInfoDatas        []*DimensionInfoData // 维度信息
	dimensionInfoDatasFlag    bool
	workforcePlan             string // 编制规划值
	workforcePlanFlag         bool

	estimatedActiveIndividualsDetails     []*WorkforcePlanEaiDetail // 预估在职人数明细
	estimatedActiveIndividualsDetailsFlag bool
}

func NewWorkforcePlanDetailV2Builder() *WorkforcePlanDetailV2Builder {
	builder := &WorkforcePlanDetailV2Builder{}
	return builder
}

// 编制规划明细 ID
//
// 示例值："123456"
func (builder *WorkforcePlanDetailV2Builder) WorkforcePlanDetailId(workforcePlanDetailId string) *WorkforcePlanDetailV2Builder {
	builder.workforcePlanDetailId = workforcePlanDetailId
	builder.workforcePlanDetailIdFlag = true
	return builder
}

// 维度信息
//
// 示例值：
func (builder *WorkforcePlanDetailV2Builder) DimensionInfoDatas(dimensionInfoDatas []*DimensionInfoData) *WorkforcePlanDetailV2Builder {
	builder.dimensionInfoDatas = dimensionInfoDatas
	builder.dimensionInfoDatasFlag = true
	return builder
}

// 编制规划值
//
// 示例值：10.00
func (builder *WorkforcePlanDetailV2Builder) WorkforcePlan(workforcePlan string) *WorkforcePlanDetailV2Builder {
	builder.workforcePlan = workforcePlan
	builder.workforcePlanFlag = true
	return builder
}

// 预估在职人数明细
//
// 示例值：
func (builder *WorkforcePlanDetailV2Builder) EstimatedActiveIndividualsDetails(estimatedActiveIndividualsDetails []*WorkforcePlanEaiDetail) *WorkforcePlanDetailV2Builder {
	builder.estimatedActiveIndividualsDetails = estimatedActiveIndividualsDetails
	builder.estimatedActiveIndividualsDetailsFlag = true
	return builder
}

func (builder *WorkforcePlanDetailV2Builder) Build() *WorkforcePlanDetailV2 {
	req := &WorkforcePlanDetailV2{}
	if builder.workforcePlanDetailIdFlag {
		req.WorkforcePlanDetailId = &builder.workforcePlanDetailId

	}
	if builder.dimensionInfoDatasFlag {
		req.DimensionInfoDatas = builder.dimensionInfoDatas
	}
	if builder.workforcePlanFlag {
		req.WorkforcePlan = &builder.workforcePlan

	}

	if builder.estimatedActiveIndividualsDetailsFlag {
		req.EstimatedActiveIndividualsDetails = builder.estimatedActiveIndividualsDetails
	}
	return req
}

type WorkforcePlanEaiDetail struct {
	Date                       *string `json:"date,omitempty"`                         // 预估月份
	EstimatedActiveIndividuals *string `json:"estimated_active_individuals,omitempty"` // 预估在职人数
}

type WorkforcePlanEaiDetailBuilder struct {
	date                           string // 预估月份
	dateFlag                       bool
	estimatedActiveIndividuals     string // 预估在职人数
	estimatedActiveIndividualsFlag bool
}

func NewWorkforcePlanEaiDetailBuilder() *WorkforcePlanEaiDetailBuilder {
	builder := &WorkforcePlanEaiDetailBuilder{}
	return builder
}

// 预估月份
//
// 示例值：“2020-10-31”
func (builder *WorkforcePlanEaiDetailBuilder) Date(date string) *WorkforcePlanEaiDetailBuilder {
	builder.date = date
	builder.dateFlag = true
	return builder
}

// 预估在职人数
//
// 示例值：“10.00”
func (builder *WorkforcePlanEaiDetailBuilder) EstimatedActiveIndividuals(estimatedActiveIndividuals string) *WorkforcePlanEaiDetailBuilder {
	builder.estimatedActiveIndividuals = estimatedActiveIndividuals
	builder.estimatedActiveIndividualsFlag = true
	return builder
}

func (builder *WorkforcePlanEaiDetailBuilder) Build() *WorkforcePlanEaiDetail {
	req := &WorkforcePlanEaiDetail{}
	if builder.dateFlag {
		req.Date = &builder.date

	}
	if builder.estimatedActiveIndividualsFlag {
		req.EstimatedActiveIndividuals = &builder.estimatedActiveIndividuals

	}
	return req
}

type SearchBasicInfoBankReqBodyBuilder struct {
	bankIdList          []string // 银行 ID 列表
	bankIdListFlag      bool
	bankNameList        []string // 银行名称列表，支持对银行名称精确搜索
	bankNameListFlag    bool
	statusList          []int // 状态列表
	statusListFlag      bool
	updateStartTime     string // 最早更新时间
	updateStartTimeFlag bool
	updateEndTime       string // 最晚更新时间
	updateEndTimeFlag   bool
}

func NewSearchBasicInfoBankReqBodyBuilder() *SearchBasicInfoBankReqBodyBuilder {
	builder := &SearchBasicInfoBankReqBodyBuilder{}
	return builder
}

// 银行 ID 列表
//
// 示例值：
func (builder *SearchBasicInfoBankReqBodyBuilder) BankIdList(bankIdList []string) *SearchBasicInfoBankReqBodyBuilder {
	builder.bankIdList = bankIdList
	builder.bankIdListFlag = true
	return builder
}

// 银行名称列表，支持对银行名称精确搜索
//
// 示例值：
func (builder *SearchBasicInfoBankReqBodyBuilder) BankNameList(bankNameList []string) *SearchBasicInfoBankReqBodyBuilder {
	builder.bankNameList = bankNameList
	builder.bankNameListFlag = true
	return builder
}

// 状态列表
//
// 示例值：
func (builder *SearchBasicInfoBankReqBodyBuilder) StatusList(statusList []int) *SearchBasicInfoBankReqBodyBuilder {
	builder.statusList = statusList
	builder.statusListFlag = true
	return builder
}

// 最早更新时间
//
// 示例值：2024-01-01 00:00:00
func (builder *SearchBasicInfoBankReqBodyBuilder) UpdateStartTime(updateStartTime string) *SearchBasicInfoBankReqBodyBuilder {
	builder.updateStartTime = updateStartTime
	builder.updateStartTimeFlag = true
	return builder
}

// 最晚更新时间
//
// 示例值：2024-01-01 00:00:00
func (builder *SearchBasicInfoBankReqBodyBuilder) UpdateEndTime(updateEndTime string) *SearchBasicInfoBankReqBodyBuilder {
	builder.updateEndTime = updateEndTime
	builder.updateEndTimeFlag = true
	return builder
}

func (builder *SearchBasicInfoBankReqBodyBuilder) Build() *SearchBasicInfoBankReqBody {
	req := &SearchBasicInfoBankReqBody{}
	if builder.bankIdListFlag {
		req.BankIdList = builder.bankIdList
	}
	if builder.bankNameListFlag {
		req.BankNameList = builder.bankNameList
	}
	if builder.statusListFlag {
		req.StatusList = builder.statusList
	}
	if builder.updateStartTimeFlag {
		req.UpdateStartTime = &builder.updateStartTime
	}
	if builder.updateEndTimeFlag {
		req.UpdateEndTime = &builder.updateEndTime
	}
	return req
}

type SearchBasicInfoBankPathReqBodyBuilder struct {
	bankIdList          []string
	bankIdListFlag      bool
	bankNameList        []string
	bankNameListFlag    bool
	statusList          []int
	statusListFlag      bool
	updateStartTime     string
	updateStartTimeFlag bool
	updateEndTime       string
	updateEndTimeFlag   bool
}

func NewSearchBasicInfoBankPathReqBodyBuilder() *SearchBasicInfoBankPathReqBodyBuilder {
	builder := &SearchBasicInfoBankPathReqBodyBuilder{}
	return builder
}

// 银行 ID 列表
//
// 示例值：
func (builder *SearchBasicInfoBankPathReqBodyBuilder) BankIdList(bankIdList []string) *SearchBasicInfoBankPathReqBodyBuilder {
	builder.bankIdList = bankIdList
	builder.bankIdListFlag = true
	return builder
}

// 银行名称列表，支持对银行名称精确搜索
//
// 示例值：
func (builder *SearchBasicInfoBankPathReqBodyBuilder) BankNameList(bankNameList []string) *SearchBasicInfoBankPathReqBodyBuilder {
	builder.bankNameList = bankNameList
	builder.bankNameListFlag = true
	return builder
}

// 状态列表
//
// 示例值：
func (builder *SearchBasicInfoBankPathReqBodyBuilder) StatusList(statusList []int) *SearchBasicInfoBankPathReqBodyBuilder {
	builder.statusList = statusList
	builder.statusListFlag = true
	return builder
}

// 最早更新时间
//
// 示例值：2024-01-01 00:00:00
func (builder *SearchBasicInfoBankPathReqBodyBuilder) UpdateStartTime(updateStartTime string) *SearchBasicInfoBankPathReqBodyBuilder {
	builder.updateStartTime = updateStartTime
	builder.updateStartTimeFlag = true
	return builder
}

// 最晚更新时间
//
// 示例值：2024-01-01 00:00:00
func (builder *SearchBasicInfoBankPathReqBodyBuilder) UpdateEndTime(updateEndTime string) *SearchBasicInfoBankPathReqBodyBuilder {
	builder.updateEndTime = updateEndTime
	builder.updateEndTimeFlag = true
	return builder
}

func (builder *SearchBasicInfoBankPathReqBodyBuilder) Build() (*SearchBasicInfoBankReqBody, error) {
	req := &SearchBasicInfoBankReqBody{}
	if builder.bankIdListFlag {
		req.BankIdList = builder.bankIdList
	}
	if builder.bankNameListFlag {
		req.BankNameList = builder.bankNameList
	}
	if builder.statusListFlag {
		req.StatusList = builder.statusList
	}
	if builder.updateStartTimeFlag {
		req.UpdateStartTime = &builder.updateStartTime
	}
	if builder.updateEndTimeFlag {
		req.UpdateEndTime = &builder.updateEndTime
	}
	return req, nil
}

type SearchBasicInfoBankReqBuilder struct {
	apiReq *larkcore.ApiReq
	body   *SearchBasicInfoBankReqBody
	limit  int // 最大返回多少记录，当使用迭代器访问时才有效
}

func NewSearchBasicInfoBankReqBuilder() *SearchBasicInfoBankReqBuilder {
	builder := &SearchBasicInfoBankReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 最大返回多少记录，当使用迭代器访问时才有效
func (builder *SearchBasicInfoBankReqBuilder) Limit(limit int) *SearchBasicInfoBankReqBuilder {
	builder.limit = limit
	return builder
}

// 分页大小，最大 100
//
// 示例值：100
func (builder *SearchBasicInfoBankReqBuilder) PageSize(pageSize int) *SearchBasicInfoBankReqBuilder {
	builder.apiReq.QueryParams.Set("page_size", fmt.Sprint(pageSize))
	return builder
}

// 分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果
//
// 示例值：6891251722631890445
func (builder *SearchBasicInfoBankReqBuilder) PageToken(pageToken string) *SearchBasicInfoBankReqBuilder {
	builder.apiReq.QueryParams.Set("page_token", fmt.Sprint(pageToken))
	return builder
}

func (builder *SearchBasicInfoBankReqBuilder) Body(body *SearchBasicInfoBankReqBody) *SearchBasicInfoBankReqBuilder {
	builder.body = body
	return builder
}

func (builder *SearchBasicInfoBankReqBuilder) Build() *SearchBasicInfoBankReq {
	req := &SearchBasicInfoBankReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.Limit = builder.limit
	req.apiReq.QueryParams = builder.apiReq.QueryParams
	req.apiReq.Body = builder.body
	return req
}

type SearchBasicInfoBankReqBody struct {
	BankIdList      []string `json:"bank_id_list,omitempty"`      // 银行 ID 列表
	BankNameList    []string `json:"bank_name_list,omitempty"`    // 银行名称列表，支持对银行名称精确搜索
	StatusList      []int    `json:"status_list,omitempty"`       // 状态列表
	UpdateStartTime *string  `json:"update_start_time,omitempty"` // 最早更新时间
	UpdateEndTime   *string  `json:"update_end_time,omitempty"`   // 最晚更新时间
}

type SearchBasicInfoBankReq struct {
	apiReq *larkcore.ApiReq
	Body   *SearchBasicInfoBankReqBody `body:""`
	Limit  int                         // 最多返回多少记录，只有在使用迭代器访问时，才有效

}

type SearchBasicInfoBankRespData struct {
	Items     []*Bank `json:"items,omitempty"`      // 查询的银行信息
	PageToken *string `json:"page_token,omitempty"` // 下一页页码
	HasMore   *bool   `json:"has_more,omitempty"`   // 是否有下一页
}

type SearchBasicInfoBankResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *SearchBasicInfoBankRespData `json:"data"` // 业务数据
}

func (resp *SearchBasicInfoBankResp) Success() bool {
	return resp.Code == 0
}

type SearchBasicInfoBankBranchReqBodyBuilder struct {
	bankIdList             []string // 银行 ID 列表
	bankIdListFlag         bool
	bankBranchIdList       []string // 支行 ID 列表
	bankBranchIdListFlag   bool
	bankBranchNameList     []string // 支行名称列表，支持对支行名称精确搜索
	bankBranchNameListFlag bool
	statusList             []int // 状态列表
	statusListFlag         bool
	updateStartTime        string // 最早更新时间
	updateStartTimeFlag    bool
	updateEndTime          string // 最晚更新时间
	updateEndTimeFlag      bool
}

func NewSearchBasicInfoBankBranchReqBodyBuilder() *SearchBasicInfoBankBranchReqBodyBuilder {
	builder := &SearchBasicInfoBankBranchReqBodyBuilder{}
	return builder
}

// 银行 ID 列表
//
// 示例值：
func (builder *SearchBasicInfoBankBranchReqBodyBuilder) BankIdList(bankIdList []string) *SearchBasicInfoBankBranchReqBodyBuilder {
	builder.bankIdList = bankIdList
	builder.bankIdListFlag = true
	return builder
}

// 支行 ID 列表
//
// 示例值：
func (builder *SearchBasicInfoBankBranchReqBodyBuilder) BankBranchIdList(bankBranchIdList []string) *SearchBasicInfoBankBranchReqBodyBuilder {
	builder.bankBranchIdList = bankBranchIdList
	builder.bankBranchIdListFlag = true
	return builder
}

// 支行名称列表，支持对支行名称精确搜索
//
// 示例值：
func (builder *SearchBasicInfoBankBranchReqBodyBuilder) BankBranchNameList(bankBranchNameList []string) *SearchBasicInfoBankBranchReqBodyBuilder {
	builder.bankBranchNameList = bankBranchNameList
	builder.bankBranchNameListFlag = true
	return builder
}

// 状态列表
//
// 示例值：
func (builder *SearchBasicInfoBankBranchReqBodyBuilder) StatusList(statusList []int) *SearchBasicInfoBankBranchReqBodyBuilder {
	builder.statusList = statusList
	builder.statusListFlag = true
	return builder
}

// 最早更新时间
//
// 示例值：2024-01-01 00:00:00
func (builder *SearchBasicInfoBankBranchReqBodyBuilder) UpdateStartTime(updateStartTime string) *SearchBasicInfoBankBranchReqBodyBuilder {
	builder.updateStartTime = updateStartTime
	builder.updateStartTimeFlag = true
	return builder
}

// 最晚更新时间
//
// 示例值：2024-01-01 00:00:00
func (builder *SearchBasicInfoBankBranchReqBodyBuilder) UpdateEndTime(updateEndTime string) *SearchBasicInfoBankBranchReqBodyBuilder {
	builder.updateEndTime = updateEndTime
	builder.updateEndTimeFlag = true
	return builder
}

func (builder *SearchBasicInfoBankBranchReqBodyBuilder) Build() *SearchBasicInfoBankBranchReqBody {
	req := &SearchBasicInfoBankBranchReqBody{}
	if builder.bankIdListFlag {
		req.BankIdList = builder.bankIdList
	}
	if builder.bankBranchIdListFlag {
		req.BankBranchIdList = builder.bankBranchIdList
	}
	if builder.bankBranchNameListFlag {
		req.BankBranchNameList = builder.bankBranchNameList
	}
	if builder.statusListFlag {
		req.StatusList = builder.statusList
	}
	if builder.updateStartTimeFlag {
		req.UpdateStartTime = &builder.updateStartTime
	}
	if builder.updateEndTimeFlag {
		req.UpdateEndTime = &builder.updateEndTime
	}
	return req
}

type SearchBasicInfoBankBranchPathReqBodyBuilder struct {
	bankIdList             []string
	bankIdListFlag         bool
	bankBranchIdList       []string
	bankBranchIdListFlag   bool
	bankBranchNameList     []string
	bankBranchNameListFlag bool
	statusList             []int
	statusListFlag         bool
	updateStartTime        string
	updateStartTimeFlag    bool
	updateEndTime          string
	updateEndTimeFlag      bool
}

func NewSearchBasicInfoBankBranchPathReqBodyBuilder() *SearchBasicInfoBankBranchPathReqBodyBuilder {
	builder := &SearchBasicInfoBankBranchPathReqBodyBuilder{}
	return builder
}

// 银行 ID 列表
//
// 示例值：
func (builder *SearchBasicInfoBankBranchPathReqBodyBuilder) BankIdList(bankIdList []string) *SearchBasicInfoBankBranchPathReqBodyBuilder {
	builder.bankIdList = bankIdList
	builder.bankIdListFlag = true
	return builder
}

// 支行 ID 列表
//
// 示例值：
func (builder *SearchBasicInfoBankBranchPathReqBodyBuilder) BankBranchIdList(bankBranchIdList []string) *SearchBasicInfoBankBranchPathReqBodyBuilder {
	builder.bankBranchIdList = bankBranchIdList
	builder.bankBranchIdListFlag = true
	return builder
}

// 支行名称列表，支持对支行名称精确搜索
//
// 示例值：
func (builder *SearchBasicInfoBankBranchPathReqBodyBuilder) BankBranchNameList(bankBranchNameList []string) *SearchBasicInfoBankBranchPathReqBodyBuilder {
	builder.bankBranchNameList = bankBranchNameList
	builder.bankBranchNameListFlag = true
	return builder
}

// 状态列表
//
// 示例值：
func (builder *SearchBasicInfoBankBranchPathReqBodyBuilder) StatusList(statusList []int) *SearchBasicInfoBankBranchPathReqBodyBuilder {
	builder.statusList = statusList
	builder.statusListFlag = true
	return builder
}

// 最早更新时间
//
// 示例值：2024-01-01 00:00:00
func (builder *SearchBasicInfoBankBranchPathReqBodyBuilder) UpdateStartTime(updateStartTime string) *SearchBasicInfoBankBranchPathReqBodyBuilder {
	builder.updateStartTime = updateStartTime
	builder.updateStartTimeFlag = true
	return builder
}

// 最晚更新时间
//
// 示例值：2024-01-01 00:00:00
func (builder *SearchBasicInfoBankBranchPathReqBodyBuilder) UpdateEndTime(updateEndTime string) *SearchBasicInfoBankBranchPathReqBodyBuilder {
	builder.updateEndTime = updateEndTime
	builder.updateEndTimeFlag = true
	return builder
}

func (builder *SearchBasicInfoBankBranchPathReqBodyBuilder) Build() (*SearchBasicInfoBankBranchReqBody, error) {
	req := &SearchBasicInfoBankBranchReqBody{}
	if builder.bankIdListFlag {
		req.BankIdList = builder.bankIdList
	}
	if builder.bankBranchIdListFlag {
		req.BankBranchIdList = builder.bankBranchIdList
	}
	if builder.bankBranchNameListFlag {
		req.BankBranchNameList = builder.bankBranchNameList
	}
	if builder.statusListFlag {
		req.StatusList = builder.statusList
	}
	if builder.updateStartTimeFlag {
		req.UpdateStartTime = &builder.updateStartTime
	}
	if builder.updateEndTimeFlag {
		req.UpdateEndTime = &builder.updateEndTime
	}
	return req, nil
}

type SearchBasicInfoBankBranchReqBuilder struct {
	apiReq *larkcore.ApiReq
	body   *SearchBasicInfoBankBranchReqBody
	limit  int // 最大返回多少记录，当使用迭代器访问时才有效
}

func NewSearchBasicInfoBankBranchReqBuilder() *SearchBasicInfoBankBranchReqBuilder {
	builder := &SearchBasicInfoBankBranchReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 最大返回多少记录，当使用迭代器访问时才有效
func (builder *SearchBasicInfoBankBranchReqBuilder) Limit(limit int) *SearchBasicInfoBankBranchReqBuilder {
	builder.limit = limit
	return builder
}

// 分页大小，最大 100
//
// 示例值：100
func (builder *SearchBasicInfoBankBranchReqBuilder) PageSize(pageSize int) *SearchBasicInfoBankBranchReqBuilder {
	builder.apiReq.QueryParams.Set("page_size", fmt.Sprint(pageSize))
	return builder
}

// 分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果
//
// 示例值：6891251722631890445
func (builder *SearchBasicInfoBankBranchReqBuilder) PageToken(pageToken string) *SearchBasicInfoBankBranchReqBuilder {
	builder.apiReq.QueryParams.Set("page_token", fmt.Sprint(pageToken))
	return builder
}

func (builder *SearchBasicInfoBankBranchReqBuilder) Body(body *SearchBasicInfoBankBranchReqBody) *SearchBasicInfoBankBranchReqBuilder {
	builder.body = body
	return builder
}

func (builder *SearchBasicInfoBankBranchReqBuilder) Build() *SearchBasicInfoBankBranchReq {
	req := &SearchBasicInfoBankBranchReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.Limit = builder.limit
	req.apiReq.QueryParams = builder.apiReq.QueryParams
	req.apiReq.Body = builder.body
	return req
}

type SearchBasicInfoBankBranchReqBody struct {
	BankIdList         []string `json:"bank_id_list,omitempty"`          // 银行 ID 列表
	BankBranchIdList   []string `json:"bank_branch_id_list,omitempty"`   // 支行 ID 列表
	BankBranchNameList []string `json:"bank_branch_name_list,omitempty"` // 支行名称列表，支持对支行名称精确搜索
	StatusList         []int    `json:"status_list,omitempty"`           // 状态列表
	UpdateStartTime    *string  `json:"update_start_time,omitempty"`     // 最早更新时间
	UpdateEndTime      *string  `json:"update_end_time,omitempty"`       // 最晚更新时间
}

type SearchBasicInfoBankBranchReq struct {
	apiReq *larkcore.ApiReq
	Body   *SearchBasicInfoBankBranchReqBody `body:""`
	Limit  int                               // 最多返回多少记录，只有在使用迭代器访问时，才有效

}

type SearchBasicInfoBankBranchRespData struct {
	Items     []*BankBranch `json:"items,omitempty"`      // 查询的支行信息
	PageToken *string       `json:"page_token,omitempty"` // 下一页页码
	HasMore   *bool         `json:"has_more,omitempty"`   // 是否有下一页
}

type SearchBasicInfoBankBranchResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *SearchBasicInfoBankBranchRespData `json:"data"` // 业务数据
}

func (resp *SearchBasicInfoBankBranchResp) Success() bool {
	return resp.Code == 0
}

type SearchBasicInfoCityReqBodyBuilder struct {
	countryRegionSubdivisionIdList     []string // 省份/行政区 ID 列表，可通过【查询省份/行政区信息】接口获取
	countryRegionSubdivisionIdListFlag bool
	cityIdList                         []string // 城市 ID 列表
	cityIdListFlag                     bool
	statusList                         []int // 状态列表
	statusListFlag                     bool
}

func NewSearchBasicInfoCityReqBodyBuilder() *SearchBasicInfoCityReqBodyBuilder {
	builder := &SearchBasicInfoCityReqBodyBuilder{}
	return builder
}

// 省份/行政区 ID 列表，可通过【查询省份/行政区信息】接口获取
//
// 示例值：
func (builder *SearchBasicInfoCityReqBodyBuilder) CountryRegionSubdivisionIdList(countryRegionSubdivisionIdList []string) *SearchBasicInfoCityReqBodyBuilder {
	builder.countryRegionSubdivisionIdList = countryRegionSubdivisionIdList
	builder.countryRegionSubdivisionIdListFlag = true
	return builder
}

// 城市 ID 列表
//
// 示例值：
func (builder *SearchBasicInfoCityReqBodyBuilder) CityIdList(cityIdList []string) *SearchBasicInfoCityReqBodyBuilder {
	builder.cityIdList = cityIdList
	builder.cityIdListFlag = true
	return builder
}

// 状态列表
//
// 示例值：
func (builder *SearchBasicInfoCityReqBodyBuilder) StatusList(statusList []int) *SearchBasicInfoCityReqBodyBuilder {
	builder.statusList = statusList
	builder.statusListFlag = true
	return builder
}

func (builder *SearchBasicInfoCityReqBodyBuilder) Build() *SearchBasicInfoCityReqBody {
	req := &SearchBasicInfoCityReqBody{}
	if builder.countryRegionSubdivisionIdListFlag {
		req.CountryRegionSubdivisionIdList = builder.countryRegionSubdivisionIdList
	}
	if builder.cityIdListFlag {
		req.CityIdList = builder.cityIdList
	}
	if builder.statusListFlag {
		req.StatusList = builder.statusList
	}
	return req
}

type SearchBasicInfoCityPathReqBodyBuilder struct {
	countryRegionSubdivisionIdList     []string
	countryRegionSubdivisionIdListFlag bool
	cityIdList                         []string
	cityIdListFlag                     bool
	statusList                         []int
	statusListFlag                     bool
}

func NewSearchBasicInfoCityPathReqBodyBuilder() *SearchBasicInfoCityPathReqBodyBuilder {
	builder := &SearchBasicInfoCityPathReqBodyBuilder{}
	return builder
}

// 省份/行政区 ID 列表，可通过【查询省份/行政区信息】接口获取
//
// 示例值：
func (builder *SearchBasicInfoCityPathReqBodyBuilder) CountryRegionSubdivisionIdList(countryRegionSubdivisionIdList []string) *SearchBasicInfoCityPathReqBodyBuilder {
	builder.countryRegionSubdivisionIdList = countryRegionSubdivisionIdList
	builder.countryRegionSubdivisionIdListFlag = true
	return builder
}

// 城市 ID 列表
//
// 示例值：
func (builder *SearchBasicInfoCityPathReqBodyBuilder) CityIdList(cityIdList []string) *SearchBasicInfoCityPathReqBodyBuilder {
	builder.cityIdList = cityIdList
	builder.cityIdListFlag = true
	return builder
}

// 状态列表
//
// 示例值：
func (builder *SearchBasicInfoCityPathReqBodyBuilder) StatusList(statusList []int) *SearchBasicInfoCityPathReqBodyBuilder {
	builder.statusList = statusList
	builder.statusListFlag = true
	return builder
}

func (builder *SearchBasicInfoCityPathReqBodyBuilder) Build() (*SearchBasicInfoCityReqBody, error) {
	req := &SearchBasicInfoCityReqBody{}
	if builder.countryRegionSubdivisionIdListFlag {
		req.CountryRegionSubdivisionIdList = builder.countryRegionSubdivisionIdList
	}
	if builder.cityIdListFlag {
		req.CityIdList = builder.cityIdList
	}
	if builder.statusListFlag {
		req.StatusList = builder.statusList
	}
	return req, nil
}

type SearchBasicInfoCityReqBuilder struct {
	apiReq *larkcore.ApiReq
	body   *SearchBasicInfoCityReqBody
	limit  int // 最大返回多少记录，当使用迭代器访问时才有效
}

func NewSearchBasicInfoCityReqBuilder() *SearchBasicInfoCityReqBuilder {
	builder := &SearchBasicInfoCityReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 最大返回多少记录，当使用迭代器访问时才有效
func (builder *SearchBasicInfoCityReqBuilder) Limit(limit int) *SearchBasicInfoCityReqBuilder {
	builder.limit = limit
	return builder
}

// 分页大小，最大 100
//
// 示例值：100
func (builder *SearchBasicInfoCityReqBuilder) PageSize(pageSize int) *SearchBasicInfoCityReqBuilder {
	builder.apiReq.QueryParams.Set("page_size", fmt.Sprint(pageSize))
	return builder
}

// 分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果
//
// 示例值：6891251722631890445
func (builder *SearchBasicInfoCityReqBuilder) PageToken(pageToken string) *SearchBasicInfoCityReqBuilder {
	builder.apiReq.QueryParams.Set("page_token", fmt.Sprint(pageToken))
	return builder
}

func (builder *SearchBasicInfoCityReqBuilder) Body(body *SearchBasicInfoCityReqBody) *SearchBasicInfoCityReqBuilder {
	builder.body = body
	return builder
}

func (builder *SearchBasicInfoCityReqBuilder) Build() *SearchBasicInfoCityReq {
	req := &SearchBasicInfoCityReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.Limit = builder.limit
	req.apiReq.QueryParams = builder.apiReq.QueryParams
	req.apiReq.Body = builder.body
	return req
}

type SearchBasicInfoCityReqBody struct {
	CountryRegionSubdivisionIdList []string `json:"country_region_subdivision_id_list,omitempty"` // 省份/行政区 ID 列表，可通过【查询省份/行政区信息】接口获取
	CityIdList                     []string `json:"city_id_list,omitempty"`                       // 城市 ID 列表
	StatusList                     []int    `json:"status_list,omitempty"`                        // 状态列表
}

type SearchBasicInfoCityReq struct {
	apiReq *larkcore.ApiReq
	Body   *SearchBasicInfoCityReqBody `body:""`
	Limit  int                         // 最多返回多少记录，只有在使用迭代器访问时，才有效

}

type SearchBasicInfoCityRespData struct {
	Items     []*City `json:"items,omitempty"`      // 查询的城市信息
	PageToken *string `json:"page_token,omitempty"` // 下一页页码
	HasMore   *bool   `json:"has_more,omitempty"`   // 是否有下一页
}

type SearchBasicInfoCityResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *SearchBasicInfoCityRespData `json:"data"` // 业务数据
}

func (resp *SearchBasicInfoCityResp) Success() bool {
	return resp.Code == 0
}

type SearchBasicInfoCountryRegionReqBodyBuilder struct {
	countryRegionIdList     []string // 国家/地区 ID 列表
	countryRegionIdListFlag bool
	statusList              []int // 状态列表
	statusListFlag          bool
}

func NewSearchBasicInfoCountryRegionReqBodyBuilder() *SearchBasicInfoCountryRegionReqBodyBuilder {
	builder := &SearchBasicInfoCountryRegionReqBodyBuilder{}
	return builder
}

// 国家/地区 ID 列表
//
// 示例值：
func (builder *SearchBasicInfoCountryRegionReqBodyBuilder) CountryRegionIdList(countryRegionIdList []string) *SearchBasicInfoCountryRegionReqBodyBuilder {
	builder.countryRegionIdList = countryRegionIdList
	builder.countryRegionIdListFlag = true
	return builder
}

// 状态列表
//
// 示例值：
func (builder *SearchBasicInfoCountryRegionReqBodyBuilder) StatusList(statusList []int) *SearchBasicInfoCountryRegionReqBodyBuilder {
	builder.statusList = statusList
	builder.statusListFlag = true
	return builder
}

func (builder *SearchBasicInfoCountryRegionReqBodyBuilder) Build() *SearchBasicInfoCountryRegionReqBody {
	req := &SearchBasicInfoCountryRegionReqBody{}
	if builder.countryRegionIdListFlag {
		req.CountryRegionIdList = builder.countryRegionIdList
	}
	if builder.statusListFlag {
		req.StatusList = builder.statusList
	}
	return req
}

type SearchBasicInfoCountryRegionPathReqBodyBuilder struct {
	countryRegionIdList     []string
	countryRegionIdListFlag bool
	statusList              []int
	statusListFlag          bool
}

func NewSearchBasicInfoCountryRegionPathReqBodyBuilder() *SearchBasicInfoCountryRegionPathReqBodyBuilder {
	builder := &SearchBasicInfoCountryRegionPathReqBodyBuilder{}
	return builder
}

// 国家/地区 ID 列表
//
// 示例值：
func (builder *SearchBasicInfoCountryRegionPathReqBodyBuilder) CountryRegionIdList(countryRegionIdList []string) *SearchBasicInfoCountryRegionPathReqBodyBuilder {
	builder.countryRegionIdList = countryRegionIdList
	builder.countryRegionIdListFlag = true
	return builder
}

// 状态列表
//
// 示例值：
func (builder *SearchBasicInfoCountryRegionPathReqBodyBuilder) StatusList(statusList []int) *SearchBasicInfoCountryRegionPathReqBodyBuilder {
	builder.statusList = statusList
	builder.statusListFlag = true
	return builder
}

func (builder *SearchBasicInfoCountryRegionPathReqBodyBuilder) Build() (*SearchBasicInfoCountryRegionReqBody, error) {
	req := &SearchBasicInfoCountryRegionReqBody{}
	if builder.countryRegionIdListFlag {
		req.CountryRegionIdList = builder.countryRegionIdList
	}
	if builder.statusListFlag {
		req.StatusList = builder.statusList
	}
	return req, nil
}

type SearchBasicInfoCountryRegionReqBuilder struct {
	apiReq *larkcore.ApiReq
	body   *SearchBasicInfoCountryRegionReqBody
	limit  int // 最大返回多少记录，当使用迭代器访问时才有效
}

func NewSearchBasicInfoCountryRegionReqBuilder() *SearchBasicInfoCountryRegionReqBuilder {
	builder := &SearchBasicInfoCountryRegionReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 最大返回多少记录，当使用迭代器访问时才有效
func (builder *SearchBasicInfoCountryRegionReqBuilder) Limit(limit int) *SearchBasicInfoCountryRegionReqBuilder {
	builder.limit = limit
	return builder
}

// 分页大小，最大 100
//
// 示例值：100
func (builder *SearchBasicInfoCountryRegionReqBuilder) PageSize(pageSize int) *SearchBasicInfoCountryRegionReqBuilder {
	builder.apiReq.QueryParams.Set("page_size", fmt.Sprint(pageSize))
	return builder
}

// 分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果
//
// 示例值：6891251722631890445
func (builder *SearchBasicInfoCountryRegionReqBuilder) PageToken(pageToken string) *SearchBasicInfoCountryRegionReqBuilder {
	builder.apiReq.QueryParams.Set("page_token", fmt.Sprint(pageToken))
	return builder
}

func (builder *SearchBasicInfoCountryRegionReqBuilder) Body(body *SearchBasicInfoCountryRegionReqBody) *SearchBasicInfoCountryRegionReqBuilder {
	builder.body = body
	return builder
}

func (builder *SearchBasicInfoCountryRegionReqBuilder) Build() *SearchBasicInfoCountryRegionReq {
	req := &SearchBasicInfoCountryRegionReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.Limit = builder.limit
	req.apiReq.QueryParams = builder.apiReq.QueryParams
	req.apiReq.Body = builder.body
	return req
}

type SearchBasicInfoCountryRegionReqBody struct {
	CountryRegionIdList []string `json:"country_region_id_list,omitempty"` // 国家/地区 ID 列表
	StatusList          []int    `json:"status_list,omitempty"`            // 状态列表
}

type SearchBasicInfoCountryRegionReq struct {
	apiReq *larkcore.ApiReq
	Body   *SearchBasicInfoCountryRegionReqBody `body:""`
	Limit  int                                  // 最多返回多少记录，只有在使用迭代器访问时，才有效

}

type SearchBasicInfoCountryRegionRespData struct {
	Items     []*CountryRegion `json:"items,omitempty"`      // 查询的国家/地区信息
	PageToken *string          `json:"page_token,omitempty"` // 下一页页码
	HasMore   *bool            `json:"has_more,omitempty"`   // 是否有下一页
}

type SearchBasicInfoCountryRegionResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *SearchBasicInfoCountryRegionRespData `json:"data"` // 业务数据
}

func (resp *SearchBasicInfoCountryRegionResp) Success() bool {
	return resp.Code == 0
}

type SearchBasicInfoCountryRegionSubdivisionReqBodyBuilder struct {
	countryRegionIdList                []string // 国家/地区 ID 列表，可通过【查询国家/地区信息】接口获取
	countryRegionIdListFlag            bool
	countryRegionSubdivisionIdList     []string // 省份/行政区 ID 列表
	countryRegionSubdivisionIdListFlag bool
	statusList                         []int // 状态列表
	statusListFlag                     bool
}

func NewSearchBasicInfoCountryRegionSubdivisionReqBodyBuilder() *SearchBasicInfoCountryRegionSubdivisionReqBodyBuilder {
	builder := &SearchBasicInfoCountryRegionSubdivisionReqBodyBuilder{}
	return builder
}

// 国家/地区 ID 列表，可通过【查询国家/地区信息】接口获取
//
// 示例值：
func (builder *SearchBasicInfoCountryRegionSubdivisionReqBodyBuilder) CountryRegionIdList(countryRegionIdList []string) *SearchBasicInfoCountryRegionSubdivisionReqBodyBuilder {
	builder.countryRegionIdList = countryRegionIdList
	builder.countryRegionIdListFlag = true
	return builder
}

// 省份/行政区 ID 列表
//
// 示例值：
func (builder *SearchBasicInfoCountryRegionSubdivisionReqBodyBuilder) CountryRegionSubdivisionIdList(countryRegionSubdivisionIdList []string) *SearchBasicInfoCountryRegionSubdivisionReqBodyBuilder {
	builder.countryRegionSubdivisionIdList = countryRegionSubdivisionIdList
	builder.countryRegionSubdivisionIdListFlag = true
	return builder
}

// 状态列表
//
// 示例值：
func (builder *SearchBasicInfoCountryRegionSubdivisionReqBodyBuilder) StatusList(statusList []int) *SearchBasicInfoCountryRegionSubdivisionReqBodyBuilder {
	builder.statusList = statusList
	builder.statusListFlag = true
	return builder
}

func (builder *SearchBasicInfoCountryRegionSubdivisionReqBodyBuilder) Build() *SearchBasicInfoCountryRegionSubdivisionReqBody {
	req := &SearchBasicInfoCountryRegionSubdivisionReqBody{}
	if builder.countryRegionIdListFlag {
		req.CountryRegionIdList = builder.countryRegionIdList
	}
	if builder.countryRegionSubdivisionIdListFlag {
		req.CountryRegionSubdivisionIdList = builder.countryRegionSubdivisionIdList
	}
	if builder.statusListFlag {
		req.StatusList = builder.statusList
	}
	return req
}

type SearchBasicInfoCountryRegionSubdivisionPathReqBodyBuilder struct {
	countryRegionIdList                []string
	countryRegionIdListFlag            bool
	countryRegionSubdivisionIdList     []string
	countryRegionSubdivisionIdListFlag bool
	statusList                         []int
	statusListFlag                     bool
}

func NewSearchBasicInfoCountryRegionSubdivisionPathReqBodyBuilder() *SearchBasicInfoCountryRegionSubdivisionPathReqBodyBuilder {
	builder := &SearchBasicInfoCountryRegionSubdivisionPathReqBodyBuilder{}
	return builder
}

// 国家/地区 ID 列表，可通过【查询国家/地区信息】接口获取
//
// 示例值：
func (builder *SearchBasicInfoCountryRegionSubdivisionPathReqBodyBuilder) CountryRegionIdList(countryRegionIdList []string) *SearchBasicInfoCountryRegionSubdivisionPathReqBodyBuilder {
	builder.countryRegionIdList = countryRegionIdList
	builder.countryRegionIdListFlag = true
	return builder
}

// 省份/行政区 ID 列表
//
// 示例值：
func (builder *SearchBasicInfoCountryRegionSubdivisionPathReqBodyBuilder) CountryRegionSubdivisionIdList(countryRegionSubdivisionIdList []string) *SearchBasicInfoCountryRegionSubdivisionPathReqBodyBuilder {
	builder.countryRegionSubdivisionIdList = countryRegionSubdivisionIdList
	builder.countryRegionSubdivisionIdListFlag = true
	return builder
}

// 状态列表
//
// 示例值：
func (builder *SearchBasicInfoCountryRegionSubdivisionPathReqBodyBuilder) StatusList(statusList []int) *SearchBasicInfoCountryRegionSubdivisionPathReqBodyBuilder {
	builder.statusList = statusList
	builder.statusListFlag = true
	return builder
}

func (builder *SearchBasicInfoCountryRegionSubdivisionPathReqBodyBuilder) Build() (*SearchBasicInfoCountryRegionSubdivisionReqBody, error) {
	req := &SearchBasicInfoCountryRegionSubdivisionReqBody{}
	if builder.countryRegionIdListFlag {
		req.CountryRegionIdList = builder.countryRegionIdList
	}
	if builder.countryRegionSubdivisionIdListFlag {
		req.CountryRegionSubdivisionIdList = builder.countryRegionSubdivisionIdList
	}
	if builder.statusListFlag {
		req.StatusList = builder.statusList
	}
	return req, nil
}

type SearchBasicInfoCountryRegionSubdivisionReqBuilder struct {
	apiReq *larkcore.ApiReq
	body   *SearchBasicInfoCountryRegionSubdivisionReqBody
	limit  int // 最大返回多少记录，当使用迭代器访问时才有效
}

func NewSearchBasicInfoCountryRegionSubdivisionReqBuilder() *SearchBasicInfoCountryRegionSubdivisionReqBuilder {
	builder := &SearchBasicInfoCountryRegionSubdivisionReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 最大返回多少记录，当使用迭代器访问时才有效
func (builder *SearchBasicInfoCountryRegionSubdivisionReqBuilder) Limit(limit int) *SearchBasicInfoCountryRegionSubdivisionReqBuilder {
	builder.limit = limit
	return builder
}

// 分页大小，最大 100
//
// 示例值：100
func (builder *SearchBasicInfoCountryRegionSubdivisionReqBuilder) PageSize(pageSize int) *SearchBasicInfoCountryRegionSubdivisionReqBuilder {
	builder.apiReq.QueryParams.Set("page_size", fmt.Sprint(pageSize))
	return builder
}

// 分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果
//
// 示例值：6891251722631890445
func (builder *SearchBasicInfoCountryRegionSubdivisionReqBuilder) PageToken(pageToken string) *SearchBasicInfoCountryRegionSubdivisionReqBuilder {
	builder.apiReq.QueryParams.Set("page_token", fmt.Sprint(pageToken))
	return builder
}

func (builder *SearchBasicInfoCountryRegionSubdivisionReqBuilder) Body(body *SearchBasicInfoCountryRegionSubdivisionReqBody) *SearchBasicInfoCountryRegionSubdivisionReqBuilder {
	builder.body = body
	return builder
}

func (builder *SearchBasicInfoCountryRegionSubdivisionReqBuilder) Build() *SearchBasicInfoCountryRegionSubdivisionReq {
	req := &SearchBasicInfoCountryRegionSubdivisionReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.Limit = builder.limit
	req.apiReq.QueryParams = builder.apiReq.QueryParams
	req.apiReq.Body = builder.body
	return req
}

type SearchBasicInfoCountryRegionSubdivisionReqBody struct {
	CountryRegionIdList            []string `json:"country_region_id_list,omitempty"`             // 国家/地区 ID 列表，可通过【查询国家/地区信息】接口获取
	CountryRegionSubdivisionIdList []string `json:"country_region_subdivision_id_list,omitempty"` // 省份/行政区 ID 列表
	StatusList                     []int    `json:"status_list,omitempty"`                        // 状态列表
}

type SearchBasicInfoCountryRegionSubdivisionReq struct {
	apiReq *larkcore.ApiReq
	Body   *SearchBasicInfoCountryRegionSubdivisionReqBody `body:""`
	Limit  int                                             // 最多返回多少记录，只有在使用迭代器访问时，才有效

}

type SearchBasicInfoCountryRegionSubdivisionRespData struct {
	Items     []*CountryRegionSubdivision `json:"items,omitempty"`      // 查询的省份/行政区信息
	PageToken *string                     `json:"page_token,omitempty"` // 下一页页码
	HasMore   *bool                       `json:"has_more,omitempty"`   // 是否有下一页
}

type SearchBasicInfoCountryRegionSubdivisionResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *SearchBasicInfoCountryRegionSubdivisionRespData `json:"data"` // 业务数据
}

func (resp *SearchBasicInfoCountryRegionSubdivisionResp) Success() bool {
	return resp.Code == 0
}

type SearchBasicInfoCurrencyReqBodyBuilder struct {
	currencyIdList     []string // 货币 ID 列表
	currencyIdListFlag bool
	statusList         []int // 状态列表
	statusListFlag     bool
}

func NewSearchBasicInfoCurrencyReqBodyBuilder() *SearchBasicInfoCurrencyReqBodyBuilder {
	builder := &SearchBasicInfoCurrencyReqBodyBuilder{}
	return builder
}

// 货币 ID 列表
//
// 示例值：
func (builder *SearchBasicInfoCurrencyReqBodyBuilder) CurrencyIdList(currencyIdList []string) *SearchBasicInfoCurrencyReqBodyBuilder {
	builder.currencyIdList = currencyIdList
	builder.currencyIdListFlag = true
	return builder
}

// 状态列表
//
// 示例值：
func (builder *SearchBasicInfoCurrencyReqBodyBuilder) StatusList(statusList []int) *SearchBasicInfoCurrencyReqBodyBuilder {
	builder.statusList = statusList
	builder.statusListFlag = true
	return builder
}

func (builder *SearchBasicInfoCurrencyReqBodyBuilder) Build() *SearchBasicInfoCurrencyReqBody {
	req := &SearchBasicInfoCurrencyReqBody{}
	if builder.currencyIdListFlag {
		req.CurrencyIdList = builder.currencyIdList
	}
	if builder.statusListFlag {
		req.StatusList = builder.statusList
	}
	return req
}

type SearchBasicInfoCurrencyPathReqBodyBuilder struct {
	currencyIdList     []string
	currencyIdListFlag bool
	statusList         []int
	statusListFlag     bool
}

func NewSearchBasicInfoCurrencyPathReqBodyBuilder() *SearchBasicInfoCurrencyPathReqBodyBuilder {
	builder := &SearchBasicInfoCurrencyPathReqBodyBuilder{}
	return builder
}

// 货币 ID 列表
//
// 示例值：
func (builder *SearchBasicInfoCurrencyPathReqBodyBuilder) CurrencyIdList(currencyIdList []string) *SearchBasicInfoCurrencyPathReqBodyBuilder {
	builder.currencyIdList = currencyIdList
	builder.currencyIdListFlag = true
	return builder
}

// 状态列表
//
// 示例值：
func (builder *SearchBasicInfoCurrencyPathReqBodyBuilder) StatusList(statusList []int) *SearchBasicInfoCurrencyPathReqBodyBuilder {
	builder.statusList = statusList
	builder.statusListFlag = true
	return builder
}

func (builder *SearchBasicInfoCurrencyPathReqBodyBuilder) Build() (*SearchBasicInfoCurrencyReqBody, error) {
	req := &SearchBasicInfoCurrencyReqBody{}
	if builder.currencyIdListFlag {
		req.CurrencyIdList = builder.currencyIdList
	}
	if builder.statusListFlag {
		req.StatusList = builder.statusList
	}
	return req, nil
}

type SearchBasicInfoCurrencyReqBuilder struct {
	apiReq *larkcore.ApiReq
	body   *SearchBasicInfoCurrencyReqBody
	limit  int // 最大返回多少记录，当使用迭代器访问时才有效
}

func NewSearchBasicInfoCurrencyReqBuilder() *SearchBasicInfoCurrencyReqBuilder {
	builder := &SearchBasicInfoCurrencyReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 最大返回多少记录，当使用迭代器访问时才有效
func (builder *SearchBasicInfoCurrencyReqBuilder) Limit(limit int) *SearchBasicInfoCurrencyReqBuilder {
	builder.limit = limit
	return builder
}

// 分页大小，最大 100
//
// 示例值：100
func (builder *SearchBasicInfoCurrencyReqBuilder) PageSize(pageSize int) *SearchBasicInfoCurrencyReqBuilder {
	builder.apiReq.QueryParams.Set("page_size", fmt.Sprint(pageSize))
	return builder
}

// 分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果
//
// 示例值：6891251722631890445
func (builder *SearchBasicInfoCurrencyReqBuilder) PageToken(pageToken string) *SearchBasicInfoCurrencyReqBuilder {
	builder.apiReq.QueryParams.Set("page_token", fmt.Sprint(pageToken))
	return builder
}

func (builder *SearchBasicInfoCurrencyReqBuilder) Body(body *SearchBasicInfoCurrencyReqBody) *SearchBasicInfoCurrencyReqBuilder {
	builder.body = body
	return builder
}

func (builder *SearchBasicInfoCurrencyReqBuilder) Build() *SearchBasicInfoCurrencyReq {
	req := &SearchBasicInfoCurrencyReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.Limit = builder.limit
	req.apiReq.QueryParams = builder.apiReq.QueryParams
	req.apiReq.Body = builder.body
	return req
}

type SearchBasicInfoCurrencyReqBody struct {
	CurrencyIdList []string `json:"currency_id_list,omitempty"` // 货币 ID 列表
	StatusList     []int    `json:"status_list,omitempty"`      // 状态列表
}

type SearchBasicInfoCurrencyReq struct {
	apiReq *larkcore.ApiReq
	Body   *SearchBasicInfoCurrencyReqBody `body:""`
	Limit  int                             // 最多返回多少记录，只有在使用迭代器访问时，才有效

}

type SearchBasicInfoCurrencyRespData struct {
	Items     []*Currency `json:"items,omitempty"`      // 查询的货币信息
	PageToken *string     `json:"page_token,omitempty"` // 下一页页码
	HasMore   *bool       `json:"has_more,omitempty"`   // 是否有下一页
}

type SearchBasicInfoCurrencyResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *SearchBasicInfoCurrencyRespData `json:"data"` // 业务数据
}

func (resp *SearchBasicInfoCurrencyResp) Success() bool {
	return resp.Code == 0
}

type SearchBasicInfoDistrictReqBodyBuilder struct {
	cityIdList         []string // 所属城市 ID 列表，详细信息可通过【查询城市信息】接口查询获得
	cityIdListFlag     bool
	districtIdList     []string // 区/县 ID 列表
	districtIdListFlag bool
	statusList         []int // 状态列表
	statusListFlag     bool
}

func NewSearchBasicInfoDistrictReqBodyBuilder() *SearchBasicInfoDistrictReqBodyBuilder {
	builder := &SearchBasicInfoDistrictReqBodyBuilder{}
	return builder
}

// 所属城市 ID 列表，详细信息可通过【查询城市信息】接口查询获得
//
// 示例值：
func (builder *SearchBasicInfoDistrictReqBodyBuilder) CityIdList(cityIdList []string) *SearchBasicInfoDistrictReqBodyBuilder {
	builder.cityIdList = cityIdList
	builder.cityIdListFlag = true
	return builder
}

// 区/县 ID 列表
//
// 示例值：
func (builder *SearchBasicInfoDistrictReqBodyBuilder) DistrictIdList(districtIdList []string) *SearchBasicInfoDistrictReqBodyBuilder {
	builder.districtIdList = districtIdList
	builder.districtIdListFlag = true
	return builder
}

// 状态列表
//
// 示例值：
func (builder *SearchBasicInfoDistrictReqBodyBuilder) StatusList(statusList []int) *SearchBasicInfoDistrictReqBodyBuilder {
	builder.statusList = statusList
	builder.statusListFlag = true
	return builder
}

func (builder *SearchBasicInfoDistrictReqBodyBuilder) Build() *SearchBasicInfoDistrictReqBody {
	req := &SearchBasicInfoDistrictReqBody{}
	if builder.cityIdListFlag {
		req.CityIdList = builder.cityIdList
	}
	if builder.districtIdListFlag {
		req.DistrictIdList = builder.districtIdList
	}
	if builder.statusListFlag {
		req.StatusList = builder.statusList
	}
	return req
}

type SearchBasicInfoDistrictPathReqBodyBuilder struct {
	cityIdList         []string
	cityIdListFlag     bool
	districtIdList     []string
	districtIdListFlag bool
	statusList         []int
	statusListFlag     bool
}

func NewSearchBasicInfoDistrictPathReqBodyBuilder() *SearchBasicInfoDistrictPathReqBodyBuilder {
	builder := &SearchBasicInfoDistrictPathReqBodyBuilder{}
	return builder
}

// 所属城市 ID 列表，详细信息可通过【查询城市信息】接口查询获得
//
// 示例值：
func (builder *SearchBasicInfoDistrictPathReqBodyBuilder) CityIdList(cityIdList []string) *SearchBasicInfoDistrictPathReqBodyBuilder {
	builder.cityIdList = cityIdList
	builder.cityIdListFlag = true
	return builder
}

// 区/县 ID 列表
//
// 示例值：
func (builder *SearchBasicInfoDistrictPathReqBodyBuilder) DistrictIdList(districtIdList []string) *SearchBasicInfoDistrictPathReqBodyBuilder {
	builder.districtIdList = districtIdList
	builder.districtIdListFlag = true
	return builder
}

// 状态列表
//
// 示例值：
func (builder *SearchBasicInfoDistrictPathReqBodyBuilder) StatusList(statusList []int) *SearchBasicInfoDistrictPathReqBodyBuilder {
	builder.statusList = statusList
	builder.statusListFlag = true
	return builder
}

func (builder *SearchBasicInfoDistrictPathReqBodyBuilder) Build() (*SearchBasicInfoDistrictReqBody, error) {
	req := &SearchBasicInfoDistrictReqBody{}
	if builder.cityIdListFlag {
		req.CityIdList = builder.cityIdList
	}
	if builder.districtIdListFlag {
		req.DistrictIdList = builder.districtIdList
	}
	if builder.statusListFlag {
		req.StatusList = builder.statusList
	}
	return req, nil
}

type SearchBasicInfoDistrictReqBuilder struct {
	apiReq *larkcore.ApiReq
	body   *SearchBasicInfoDistrictReqBody
	limit  int // 最大返回多少记录，当使用迭代器访问时才有效
}

func NewSearchBasicInfoDistrictReqBuilder() *SearchBasicInfoDistrictReqBuilder {
	builder := &SearchBasicInfoDistrictReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 最大返回多少记录，当使用迭代器访问时才有效
func (builder *SearchBasicInfoDistrictReqBuilder) Limit(limit int) *SearchBasicInfoDistrictReqBuilder {
	builder.limit = limit
	return builder
}

// 分页大小，最大 100
//
// 示例值：100
func (builder *SearchBasicInfoDistrictReqBuilder) PageSize(pageSize int) *SearchBasicInfoDistrictReqBuilder {
	builder.apiReq.QueryParams.Set("page_size", fmt.Sprint(pageSize))
	return builder
}

// 分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果
//
// 示例值：6891251722631890445
func (builder *SearchBasicInfoDistrictReqBuilder) PageToken(pageToken string) *SearchBasicInfoDistrictReqBuilder {
	builder.apiReq.QueryParams.Set("page_token", fmt.Sprint(pageToken))
	return builder
}

func (builder *SearchBasicInfoDistrictReqBuilder) Body(body *SearchBasicInfoDistrictReqBody) *SearchBasicInfoDistrictReqBuilder {
	builder.body = body
	return builder
}

func (builder *SearchBasicInfoDistrictReqBuilder) Build() *SearchBasicInfoDistrictReq {
	req := &SearchBasicInfoDistrictReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.Limit = builder.limit
	req.apiReq.QueryParams = builder.apiReq.QueryParams
	req.apiReq.Body = builder.body
	return req
}

type SearchBasicInfoDistrictReqBody struct {
	CityIdList     []string `json:"city_id_list,omitempty"`     // 所属城市 ID 列表，详细信息可通过【查询城市信息】接口查询获得
	DistrictIdList []string `json:"district_id_list,omitempty"` // 区/县 ID 列表
	StatusList     []int    `json:"status_list,omitempty"`      // 状态列表
}

type SearchBasicInfoDistrictReq struct {
	apiReq *larkcore.ApiReq
	Body   *SearchBasicInfoDistrictReqBody `body:""`
	Limit  int                             // 最多返回多少记录，只有在使用迭代器访问时，才有效

}

type SearchBasicInfoDistrictRespData struct {
	Items     []*District `json:"items,omitempty"`      // 查询的区/县信息
	PageToken *string     `json:"page_token,omitempty"` // 下一页页码
	HasMore   *bool       `json:"has_more,omitempty"`   // 是否有下一页
}

type SearchBasicInfoDistrictResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *SearchBasicInfoDistrictRespData `json:"data"` // 业务数据
}

func (resp *SearchBasicInfoDistrictResp) Success() bool {
	return resp.Code == 0
}

type SearchBasicInfoNationalityReqBodyBuilder struct {
	nationalityIdList       []string // 国籍 ID 列表
	nationalityIdListFlag   bool
	countryRegionIdList     []string // 国家 / 地区 ID 列表
	countryRegionIdListFlag bool
	statusList              []int // 状态列表
	statusListFlag          bool
}

func NewSearchBasicInfoNationalityReqBodyBuilder() *SearchBasicInfoNationalityReqBodyBuilder {
	builder := &SearchBasicInfoNationalityReqBodyBuilder{}
	return builder
}

// 国籍 ID 列表
//
// 示例值：
func (builder *SearchBasicInfoNationalityReqBodyBuilder) NationalityIdList(nationalityIdList []string) *SearchBasicInfoNationalityReqBodyBuilder {
	builder.nationalityIdList = nationalityIdList
	builder.nationalityIdListFlag = true
	return builder
}

// 国家 / 地区 ID 列表
//
// 示例值：
func (builder *SearchBasicInfoNationalityReqBodyBuilder) CountryRegionIdList(countryRegionIdList []string) *SearchBasicInfoNationalityReqBodyBuilder {
	builder.countryRegionIdList = countryRegionIdList
	builder.countryRegionIdListFlag = true
	return builder
}

// 状态列表
//
// 示例值：
func (builder *SearchBasicInfoNationalityReqBodyBuilder) StatusList(statusList []int) *SearchBasicInfoNationalityReqBodyBuilder {
	builder.statusList = statusList
	builder.statusListFlag = true
	return builder
}

func (builder *SearchBasicInfoNationalityReqBodyBuilder) Build() *SearchBasicInfoNationalityReqBody {
	req := &SearchBasicInfoNationalityReqBody{}
	if builder.nationalityIdListFlag {
		req.NationalityIdList = builder.nationalityIdList
	}
	if builder.countryRegionIdListFlag {
		req.CountryRegionIdList = builder.countryRegionIdList
	}
	if builder.statusListFlag {
		req.StatusList = builder.statusList
	}
	return req
}

type SearchBasicInfoNationalityPathReqBodyBuilder struct {
	nationalityIdList       []string
	nationalityIdListFlag   bool
	countryRegionIdList     []string
	countryRegionIdListFlag bool
	statusList              []int
	statusListFlag          bool
}

func NewSearchBasicInfoNationalityPathReqBodyBuilder() *SearchBasicInfoNationalityPathReqBodyBuilder {
	builder := &SearchBasicInfoNationalityPathReqBodyBuilder{}
	return builder
}

// 国籍 ID 列表
//
// 示例值：
func (builder *SearchBasicInfoNationalityPathReqBodyBuilder) NationalityIdList(nationalityIdList []string) *SearchBasicInfoNationalityPathReqBodyBuilder {
	builder.nationalityIdList = nationalityIdList
	builder.nationalityIdListFlag = true
	return builder
}

// 国家 / 地区 ID 列表
//
// 示例值：
func (builder *SearchBasicInfoNationalityPathReqBodyBuilder) CountryRegionIdList(countryRegionIdList []string) *SearchBasicInfoNationalityPathReqBodyBuilder {
	builder.countryRegionIdList = countryRegionIdList
	builder.countryRegionIdListFlag = true
	return builder
}

// 状态列表
//
// 示例值：
func (builder *SearchBasicInfoNationalityPathReqBodyBuilder) StatusList(statusList []int) *SearchBasicInfoNationalityPathReqBodyBuilder {
	builder.statusList = statusList
	builder.statusListFlag = true
	return builder
}

func (builder *SearchBasicInfoNationalityPathReqBodyBuilder) Build() (*SearchBasicInfoNationalityReqBody, error) {
	req := &SearchBasicInfoNationalityReqBody{}
	if builder.nationalityIdListFlag {
		req.NationalityIdList = builder.nationalityIdList
	}
	if builder.countryRegionIdListFlag {
		req.CountryRegionIdList = builder.countryRegionIdList
	}
	if builder.statusListFlag {
		req.StatusList = builder.statusList
	}
	return req, nil
}

type SearchBasicInfoNationalityReqBuilder struct {
	apiReq *larkcore.ApiReq
	body   *SearchBasicInfoNationalityReqBody
	limit  int // 最大返回多少记录，当使用迭代器访问时才有效
}

func NewSearchBasicInfoNationalityReqBuilder() *SearchBasicInfoNationalityReqBuilder {
	builder := &SearchBasicInfoNationalityReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 最大返回多少记录，当使用迭代器访问时才有效
func (builder *SearchBasicInfoNationalityReqBuilder) Limit(limit int) *SearchBasicInfoNationalityReqBuilder {
	builder.limit = limit
	return builder
}

// 分页大小，最大 100
//
// 示例值：100
func (builder *SearchBasicInfoNationalityReqBuilder) PageSize(pageSize int) *SearchBasicInfoNationalityReqBuilder {
	builder.apiReq.QueryParams.Set("page_size", fmt.Sprint(pageSize))
	return builder
}

// 分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果
//
// 示例值：6891251722631890445
func (builder *SearchBasicInfoNationalityReqBuilder) PageToken(pageToken string) *SearchBasicInfoNationalityReqBuilder {
	builder.apiReq.QueryParams.Set("page_token", fmt.Sprint(pageToken))
	return builder
}

func (builder *SearchBasicInfoNationalityReqBuilder) Body(body *SearchBasicInfoNationalityReqBody) *SearchBasicInfoNationalityReqBuilder {
	builder.body = body
	return builder
}

func (builder *SearchBasicInfoNationalityReqBuilder) Build() *SearchBasicInfoNationalityReq {
	req := &SearchBasicInfoNationalityReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.Limit = builder.limit
	req.apiReq.QueryParams = builder.apiReq.QueryParams
	req.apiReq.Body = builder.body
	return req
}

type SearchBasicInfoNationalityReqBody struct {
	NationalityIdList   []string `json:"nationality_id_list,omitempty"`    // 国籍 ID 列表
	CountryRegionIdList []string `json:"country_region_id_list,omitempty"` // 国家 / 地区 ID 列表
	StatusList          []int    `json:"status_list,omitempty"`            // 状态列表
}

type SearchBasicInfoNationalityReq struct {
	apiReq *larkcore.ApiReq
	Body   *SearchBasicInfoNationalityReqBody `body:""`
	Limit  int                                // 最多返回多少记录，只有在使用迭代器访问时，才有效

}

type SearchBasicInfoNationalityRespData struct {
	Items     []*Nationality `json:"items,omitempty"`      // 查询的国籍信息
	PageToken *string        `json:"page_token,omitempty"` // 下一页页码
	HasMore   *bool          `json:"has_more,omitempty"`   // 是否有下一页
}

type SearchBasicInfoNationalityResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *SearchBasicInfoNationalityRespData `json:"data"` // 业务数据
}

func (resp *SearchBasicInfoNationalityResp) Success() bool {
	return resp.Code == 0
}

type GetByDepartmentBpReqBodyBuilder struct {
	departmentId     string // 部门 ID
	departmentIdFlag bool
}

func NewGetByDepartmentBpReqBodyBuilder() *GetByDepartmentBpReqBodyBuilder {
	builder := &GetByDepartmentBpReqBodyBuilder{}
	return builder
}

// 部门 ID
//
// 示例值：6893014062142064111
func (builder *GetByDepartmentBpReqBodyBuilder) DepartmentId(departmentId string) *GetByDepartmentBpReqBodyBuilder {
	builder.departmentId = departmentId
	builder.departmentIdFlag = true
	return builder
}

func (builder *GetByDepartmentBpReqBodyBuilder) Build() *GetByDepartmentBpReqBody {
	req := &GetByDepartmentBpReqBody{}
	if builder.departmentIdFlag {
		req.DepartmentId = &builder.departmentId
	}
	return req
}

type GetByDepartmentBpPathReqBodyBuilder struct {
	departmentId     string
	departmentIdFlag bool
}

func NewGetByDepartmentBpPathReqBodyBuilder() *GetByDepartmentBpPathReqBodyBuilder {
	builder := &GetByDepartmentBpPathReqBodyBuilder{}
	return builder
}

// 部门 ID
//
// 示例值：6893014062142064111
func (builder *GetByDepartmentBpPathReqBodyBuilder) DepartmentId(departmentId string) *GetByDepartmentBpPathReqBodyBuilder {
	builder.departmentId = departmentId
	builder.departmentIdFlag = true
	return builder
}

func (builder *GetByDepartmentBpPathReqBodyBuilder) Build() (*GetByDepartmentBpReqBody, error) {
	req := &GetByDepartmentBpReqBody{}
	if builder.departmentIdFlag {
		req.DepartmentId = &builder.departmentId
	}
	return req, nil
}

type GetByDepartmentBpReqBuilder struct {
	apiReq *larkcore.ApiReq
	body   *GetByDepartmentBpReqBody
}

func NewGetByDepartmentBpReqBuilder() *GetByDepartmentBpReqBuilder {
	builder := &GetByDepartmentBpReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 用户 ID 类型
//
// 示例值：open_id
func (builder *GetByDepartmentBpReqBuilder) UserIdType(userIdType string) *GetByDepartmentBpReqBuilder {
	builder.apiReq.QueryParams.Set("user_id_type", fmt.Sprint(userIdType))
	return builder
}

// 此次调用中使用的部门 ID 类型
//
// 示例值：open_department_id
func (builder *GetByDepartmentBpReqBuilder) DepartmentIdType(departmentIdType string) *GetByDepartmentBpReqBuilder {
	builder.apiReq.QueryParams.Set("department_id_type", fmt.Sprint(departmentIdType))
	return builder
}

func (builder *GetByDepartmentBpReqBuilder) Body(body *GetByDepartmentBpReqBody) *GetByDepartmentBpReqBuilder {
	builder.body = body
	return builder
}

func (builder *GetByDepartmentBpReqBuilder) Build() *GetByDepartmentBpReq {
	req := &GetByDepartmentBpReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.QueryParams = builder.apiReq.QueryParams
	req.apiReq.Body = builder.body
	return req
}

type GetByDepartmentBpReqBody struct {
	DepartmentId *string `json:"department_id,omitempty"` // 部门 ID
}

type GetByDepartmentBpReq struct {
	apiReq *larkcore.ApiReq
	Body   *GetByDepartmentBpReqBody `body:""`
}

type GetByDepartmentBpRespData struct {
	Items []*DepartmentHrbp `json:"items,omitempty"` // 部门 HRBP 信息，依次为部门及各层级上级部门
}

type GetByDepartmentBpResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *GetByDepartmentBpRespData `json:"data"` // 业务数据
}

func (resp *GetByDepartmentBpResp) Success() bool {
	return resp.Code == 0
}

type ListBpReqBuilder struct {
	apiReq *larkcore.ApiReq
	limit  int // 最大返回多少记录，当使用迭代器访问时才有效
}

func NewListBpReqBuilder() *ListBpReqBuilder {
	builder := &ListBpReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 最大返回多少记录，当使用迭代器访问时才有效
func (builder *ListBpReqBuilder) Limit(limit int) *ListBpReqBuilder {
	builder.limit = limit
	return builder
}

// 分页大小，最大 500
//
// 示例值：500
func (builder *ListBpReqBuilder) PageSize(pageSize int) *ListBpReqBuilder {
	builder.apiReq.QueryParams.Set("page_size", fmt.Sprint(pageSize))
	return builder
}

// 分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果
//
// 示例值：6891251722631890445
func (builder *ListBpReqBuilder) PageToken(pageToken string) *ListBpReqBuilder {
	builder.apiReq.QueryParams.Set("page_token", fmt.Sprint(pageToken))
	return builder
}

// 用户 ID 类型
//
// 示例值：open_id
func (builder *ListBpReqBuilder) UserIdType(userIdType string) *ListBpReqBuilder {
	builder.apiReq.QueryParams.Set("user_id_type", fmt.Sprint(userIdType))
	return builder
}

// 此次调用中使用的部门 ID 类型
//
// 示例值：open_department_id
func (builder *ListBpReqBuilder) DepartmentIdType(departmentIdType string) *ListBpReqBuilder {
	builder.apiReq.QueryParams.Set("department_id_type", fmt.Sprint(departmentIdType))
	return builder
}

func (builder *ListBpReqBuilder) Build() *ListBpReq {
	req := &ListBpReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.Limit = builder.limit
	req.apiReq.QueryParams = builder.apiReq.QueryParams
	return req
}

type ListBpReq struct {
	apiReq *larkcore.ApiReq
	Limit  int // 最多返回多少记录，只有在使用迭代器访问时，才有效

}

type ListBpRespData struct {
	Items     []*Bp   `json:"items,omitempty"`      // HRBP 信息
	PageToken *string `json:"page_token,omitempty"` // 下一页页码
	HasMore   *bool   `json:"has_more,omitempty"`   // 是否有下一页
}

type ListBpResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *ListBpRespData `json:"data"` // 业务数据
}

func (resp *ListBpResp) Success() bool {
	return resp.Code == 0
}

type BatchGetCompanyReqBodyBuilder struct {
	companyIds     []string // 公司 ID 列表
	companyIdsFlag bool
}

func NewBatchGetCompanyReqBodyBuilder() *BatchGetCompanyReqBodyBuilder {
	builder := &BatchGetCompanyReqBodyBuilder{}
	return builder
}

// 公司 ID 列表
//
// 示例值：
func (builder *BatchGetCompanyReqBodyBuilder) CompanyIds(companyIds []string) *BatchGetCompanyReqBodyBuilder {
	builder.companyIds = companyIds
	builder.companyIdsFlag = true
	return builder
}

func (builder *BatchGetCompanyReqBodyBuilder) Build() *BatchGetCompanyReqBody {
	req := &BatchGetCompanyReqBody{}
	if builder.companyIdsFlag {
		req.CompanyIds = builder.companyIds
	}
	return req
}

type BatchGetCompanyPathReqBodyBuilder struct {
	companyIds     []string
	companyIdsFlag bool
}

func NewBatchGetCompanyPathReqBodyBuilder() *BatchGetCompanyPathReqBodyBuilder {
	builder := &BatchGetCompanyPathReqBodyBuilder{}
	return builder
}

// 公司 ID 列表
//
// 示例值：
func (builder *BatchGetCompanyPathReqBodyBuilder) CompanyIds(companyIds []string) *BatchGetCompanyPathReqBodyBuilder {
	builder.companyIds = companyIds
	builder.companyIdsFlag = true
	return builder
}

func (builder *BatchGetCompanyPathReqBodyBuilder) Build() (*BatchGetCompanyReqBody, error) {
	req := &BatchGetCompanyReqBody{}
	if builder.companyIdsFlag {
		req.CompanyIds = builder.companyIds
	}
	return req, nil
}

type BatchGetCompanyReqBuilder struct {
	apiReq *larkcore.ApiReq
	body   *BatchGetCompanyReqBody
}

func NewBatchGetCompanyReqBuilder() *BatchGetCompanyReqBuilder {
	builder := &BatchGetCompanyReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 通过公司 ID 批量获取公司信息
func (builder *BatchGetCompanyReqBuilder) Body(body *BatchGetCompanyReqBody) *BatchGetCompanyReqBuilder {
	builder.body = body
	return builder
}

func (builder *BatchGetCompanyReqBuilder) Build() *BatchGetCompanyReq {
	req := &BatchGetCompanyReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.Body = builder.body
	return req
}

type BatchGetCompanyReqBody struct {
	CompanyIds []string `json:"company_ids,omitempty"` // 公司 ID 列表
}

type BatchGetCompanyReq struct {
	apiReq *larkcore.ApiReq
	Body   *BatchGetCompanyReqBody `body:""`
}

type BatchGetCompanyRespData struct {
	Items []*Company `json:"items,omitempty"` // 查询的公司信息
}

type BatchGetCompanyResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *BatchGetCompanyRespData `json:"data"` // 业务数据
}

func (resp *BatchGetCompanyResp) Success() bool {
	return resp.Code == 0
}

type SearchContractReqBodyBuilder struct {
	employmentIdList     []string // 雇佣 ID 列表
	employmentIdListFlag bool
	contractIdList       []string // 合同ID列表
	contractIdListFlag   bool
}

func NewSearchContractReqBodyBuilder() *SearchContractReqBodyBuilder {
	builder := &SearchContractReqBodyBuilder{}
	return builder
}

// 雇佣 ID 列表
//
// 示例值：
func (builder *SearchContractReqBodyBuilder) EmploymentIdList(employmentIdList []string) *SearchContractReqBodyBuilder {
	builder.employmentIdList = employmentIdList
	builder.employmentIdListFlag = true
	return builder
}

// 合同ID列表
//
// 示例值：
func (builder *SearchContractReqBodyBuilder) ContractIdList(contractIdList []string) *SearchContractReqBodyBuilder {
	builder.contractIdList = contractIdList
	builder.contractIdListFlag = true
	return builder
}

func (builder *SearchContractReqBodyBuilder) Build() *SearchContractReqBody {
	req := &SearchContractReqBody{}
	if builder.employmentIdListFlag {
		req.EmploymentIdList = builder.employmentIdList
	}
	if builder.contractIdListFlag {
		req.ContractIdList = builder.contractIdList
	}
	return req
}

type SearchContractPathReqBodyBuilder struct {
	employmentIdList     []string
	employmentIdListFlag bool
	contractIdList       []string
	contractIdListFlag   bool
}

func NewSearchContractPathReqBodyBuilder() *SearchContractPathReqBodyBuilder {
	builder := &SearchContractPathReqBodyBuilder{}
	return builder
}

// 雇佣 ID 列表
//
// 示例值：
func (builder *SearchContractPathReqBodyBuilder) EmploymentIdList(employmentIdList []string) *SearchContractPathReqBodyBuilder {
	builder.employmentIdList = employmentIdList
	builder.employmentIdListFlag = true
	return builder
}

// 合同ID列表
//
// 示例值：
func (builder *SearchContractPathReqBodyBuilder) ContractIdList(contractIdList []string) *SearchContractPathReqBodyBuilder {
	builder.contractIdList = contractIdList
	builder.contractIdListFlag = true
	return builder
}

func (builder *SearchContractPathReqBodyBuilder) Build() (*SearchContractReqBody, error) {
	req := &SearchContractReqBody{}
	if builder.employmentIdListFlag {
		req.EmploymentIdList = builder.employmentIdList
	}
	if builder.contractIdListFlag {
		req.ContractIdList = builder.contractIdList
	}
	return req, nil
}

type SearchContractReqBuilder struct {
	apiReq *larkcore.ApiReq
	body   *SearchContractReqBody
	limit  int // 最大返回多少记录，当使用迭代器访问时才有效
}

func NewSearchContractReqBuilder() *SearchContractReqBuilder {
	builder := &SearchContractReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 最大返回多少记录，当使用迭代器访问时才有效
func (builder *SearchContractReqBuilder) Limit(limit int) *SearchContractReqBuilder {
	builder.limit = limit
	return builder
}

// 分页大小，最大 100
//
// 示例值：100
func (builder *SearchContractReqBuilder) PageSize(pageSize int) *SearchContractReqBuilder {
	builder.apiReq.QueryParams.Set("page_size", fmt.Sprint(pageSize))
	return builder
}

// 分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果
//
// 示例值：6891251722631890445
func (builder *SearchContractReqBuilder) PageToken(pageToken string) *SearchContractReqBuilder {
	builder.apiReq.QueryParams.Set("page_token", fmt.Sprint(pageToken))
	return builder
}

// 用户 ID 类型
//
// 示例值：open_id
func (builder *SearchContractReqBuilder) UserIdType(userIdType string) *SearchContractReqBuilder {
	builder.apiReq.QueryParams.Set("user_id_type", fmt.Sprint(userIdType))
	return builder
}

// 根据合同 ID 、雇佣 ID 查询合同信息
func (builder *SearchContractReqBuilder) Body(body *SearchContractReqBody) *SearchContractReqBuilder {
	builder.body = body
	return builder
}

func (builder *SearchContractReqBuilder) Build() *SearchContractReq {
	req := &SearchContractReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.Limit = builder.limit
	req.apiReq.QueryParams = builder.apiReq.QueryParams
	req.apiReq.Body = builder.body
	return req
}

type SearchContractReqBody struct {
	EmploymentIdList []string `json:"employment_id_list,omitempty"` // 雇佣 ID 列表
	ContractIdList   []string `json:"contract_id_list,omitempty"`   // 合同ID列表
}

type SearchContractReq struct {
	apiReq *larkcore.ApiReq
	Body   *SearchContractReqBody `body:""`
	Limit  int                    // 最多返回多少记录，只有在使用迭代器访问时，才有效

}

type SearchContractRespData struct {
	Items     []*Contract `json:"items,omitempty"`      // 查询的合同信息
	PageToken *string     `json:"page_token,omitempty"` // 下一页页码
	HasMore   *bool       `json:"has_more,omitempty"`   // 是否有下一页
}

type SearchContractResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *SearchContractRespData `json:"data"` // 业务数据
}

func (resp *SearchContractResp) Success() bool {
	return resp.Code == 0
}

type CreateCostCenterReqBuilder struct {
	apiReq     *larkcore.ApiReq
	costCenter *CostCenter
}

func NewCreateCostCenterReqBuilder() *CreateCostCenterReqBuilder {
	builder := &CreateCostCenterReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 用户 ID 类型
//
// 示例值：people_corehr_id
func (builder *CreateCostCenterReqBuilder) UserIdType(userIdType string) *CreateCostCenterReqBuilder {
	builder.apiReq.QueryParams.Set("user_id_type", fmt.Sprint(userIdType))
	return builder
}

// 创建成本中心
func (builder *CreateCostCenterReqBuilder) CostCenter(costCenter *CostCenter) *CreateCostCenterReqBuilder {
	builder.costCenter = costCenter
	return builder
}

func (builder *CreateCostCenterReqBuilder) Build() *CreateCostCenterReq {
	req := &CreateCostCenterReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.QueryParams = builder.apiReq.QueryParams
	req.apiReq.Body = builder.costCenter
	return req
}

type CreateCostCenterReq struct {
	apiReq     *larkcore.ApiReq
	CostCenter *CostCenter `body:""`
}

type CreateCostCenterRespData struct {
	CostCenter *CostCenter `json:"cost_center,omitempty"` //
}

type CreateCostCenterResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *CreateCostCenterRespData `json:"data"` // 业务数据
}

func (resp *CreateCostCenterResp) Success() bool {
	return resp.Code == 0
}

type DeleteCostCenterReqBodyBuilder struct {
	operationReason     string // 操作原因
	operationReasonFlag bool
}

func NewDeleteCostCenterReqBodyBuilder() *DeleteCostCenterReqBodyBuilder {
	builder := &DeleteCostCenterReqBodyBuilder{}
	return builder
}

// 操作原因
//
// 示例值：随着组织架构调整，该成本中心不再使用
func (builder *DeleteCostCenterReqBodyBuilder) OperationReason(operationReason string) *DeleteCostCenterReqBodyBuilder {
	builder.operationReason = operationReason
	builder.operationReasonFlag = true
	return builder
}

func (builder *DeleteCostCenterReqBodyBuilder) Build() *DeleteCostCenterReqBody {
	req := &DeleteCostCenterReqBody{}
	if builder.operationReasonFlag {
		req.OperationReason = &builder.operationReason
	}
	return req
}

type DeleteCostCenterPathReqBodyBuilder struct {
	operationReason     string
	operationReasonFlag bool
}

func NewDeleteCostCenterPathReqBodyBuilder() *DeleteCostCenterPathReqBodyBuilder {
	builder := &DeleteCostCenterPathReqBodyBuilder{}
	return builder
}

// 操作原因
//
// 示例值：随着组织架构调整，该成本中心不再使用
func (builder *DeleteCostCenterPathReqBodyBuilder) OperationReason(operationReason string) *DeleteCostCenterPathReqBodyBuilder {
	builder.operationReason = operationReason
	builder.operationReasonFlag = true
	return builder
}

func (builder *DeleteCostCenterPathReqBodyBuilder) Build() (*DeleteCostCenterReqBody, error) {
	req := &DeleteCostCenterReqBody{}
	if builder.operationReasonFlag {
		req.OperationReason = &builder.operationReason
	}
	return req, nil
}

type DeleteCostCenterReqBuilder struct {
	apiReq *larkcore.ApiReq
	body   *DeleteCostCenterReqBody
}

func NewDeleteCostCenterReqBuilder() *DeleteCostCenterReqBuilder {
	builder := &DeleteCostCenterReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 成本中心ID
//
// 示例值：6862995757234914824
func (builder *DeleteCostCenterReqBuilder) CostCenterId(costCenterId string) *DeleteCostCenterReqBuilder {
	builder.apiReq.PathParams.Set("cost_center_id", fmt.Sprint(costCenterId))
	return builder
}

func (builder *DeleteCostCenterReqBuilder) Body(body *DeleteCostCenterReqBody) *DeleteCostCenterReqBuilder {
	builder.body = body
	return builder
}

func (builder *DeleteCostCenterReqBuilder) Build() *DeleteCostCenterReq {
	req := &DeleteCostCenterReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.PathParams = builder.apiReq.PathParams
	req.apiReq.Body = builder.body
	return req
}

type DeleteCostCenterReqBody struct {
	OperationReason *string `json:"operation_reason,omitempty"` // 操作原因
}

type DeleteCostCenterReq struct {
	apiReq *larkcore.ApiReq
	Body   *DeleteCostCenterReqBody `body:""`
}

type DeleteCostCenterResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
}

func (resp *DeleteCostCenterResp) Success() bool {
	return resp.Code == 0
}

type PatchCostCenterReqBodyBuilder struct {
	effectiveTime       string // 生效时间
	effectiveTimeFlag   bool
	active              bool // 启用停用状态
	activeFlag          bool
	operationReason     string // 操作原因
	operationReasonFlag bool
}

func NewPatchCostCenterReqBodyBuilder() *PatchCostCenterReqBodyBuilder {
	builder := &PatchCostCenterReqBodyBuilder{}
	return builder
}

// 生效时间
//
// 示例值：2020-01-01
func (builder *PatchCostCenterReqBodyBuilder) EffectiveTime(effectiveTime string) *PatchCostCenterReqBodyBuilder {
	builder.effectiveTime = effectiveTime
	builder.effectiveTimeFlag = true
	return builder
}

// 启用停用状态
//
// 示例值：true
func (builder *PatchCostCenterReqBodyBuilder) Active(active bool) *PatchCostCenterReqBodyBuilder {
	builder.active = active
	builder.activeFlag = true
	return builder
}

// 操作原因
//
// 示例值：强行操作
func (builder *PatchCostCenterReqBodyBuilder) OperationReason(operationReason string) *PatchCostCenterReqBodyBuilder {
	builder.operationReason = operationReason
	builder.operationReasonFlag = true
	return builder
}

func (builder *PatchCostCenterReqBodyBuilder) Build() *PatchCostCenterReqBody {
	req := &PatchCostCenterReqBody{}
	if builder.effectiveTimeFlag {
		req.EffectiveTime = &builder.effectiveTime
	}
	if builder.activeFlag {
		req.Active = &builder.active
	}
	if builder.operationReasonFlag {
		req.OperationReason = &builder.operationReason
	}
	return req
}

type PatchCostCenterPathReqBodyBuilder struct {
	effectiveTime       string
	effectiveTimeFlag   bool
	active              bool
	activeFlag          bool
	operationReason     string
	operationReasonFlag bool
}

func NewPatchCostCenterPathReqBodyBuilder() *PatchCostCenterPathReqBodyBuilder {
	builder := &PatchCostCenterPathReqBodyBuilder{}
	return builder
}

// 生效时间
//
// 示例值：2020-01-01
func (builder *PatchCostCenterPathReqBodyBuilder) EffectiveTime(effectiveTime string) *PatchCostCenterPathReqBodyBuilder {
	builder.effectiveTime = effectiveTime
	builder.effectiveTimeFlag = true
	return builder
}

// 启用停用状态
//
// 示例值：true
func (builder *PatchCostCenterPathReqBodyBuilder) Active(active bool) *PatchCostCenterPathReqBodyBuilder {
	builder.active = active
	builder.activeFlag = true
	return builder
}

// 操作原因
//
// 示例值：强行操作
func (builder *PatchCostCenterPathReqBodyBuilder) OperationReason(operationReason string) *PatchCostCenterPathReqBodyBuilder {
	builder.operationReason = operationReason
	builder.operationReasonFlag = true
	return builder
}

func (builder *PatchCostCenterPathReqBodyBuilder) Build() (*PatchCostCenterReqBody, error) {
	req := &PatchCostCenterReqBody{}
	if builder.effectiveTimeFlag {
		req.EffectiveTime = &builder.effectiveTime
	}
	if builder.activeFlag {
		req.Active = &builder.active
	}
	if builder.operationReasonFlag {
		req.OperationReason = &builder.operationReason
	}
	return req, nil
}

type PatchCostCenterReqBuilder struct {
	apiReq *larkcore.ApiReq
	body   *PatchCostCenterReqBody
}

func NewPatchCostCenterReqBuilder() *PatchCostCenterReqBuilder {
	builder := &PatchCostCenterReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 成本中心ID
//
// 示例值：6862995757234914824
func (builder *PatchCostCenterReqBuilder) CostCenterId(costCenterId string) *PatchCostCenterReqBuilder {
	builder.apiReq.PathParams.Set("cost_center_id", fmt.Sprint(costCenterId))
	return builder
}

// 用户 ID 类型
//
// 示例值：people_corehr_id
func (builder *PatchCostCenterReqBuilder) UserIdType(userIdType string) *PatchCostCenterReqBuilder {
	builder.apiReq.QueryParams.Set("user_id_type", fmt.Sprint(userIdType))
	return builder
}

// 创建成本中心版本
func (builder *PatchCostCenterReqBuilder) Body(body *PatchCostCenterReqBody) *PatchCostCenterReqBuilder {
	builder.body = body
	return builder
}

func (builder *PatchCostCenterReqBuilder) Build() *PatchCostCenterReq {
	req := &PatchCostCenterReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.PathParams = builder.apiReq.PathParams
	req.apiReq.QueryParams = builder.apiReq.QueryParams
	req.apiReq.Body = builder.body
	return req
}

type PatchCostCenterReqBody struct {
	EffectiveTime   *string `json:"effective_time,omitempty"`   // 生效时间
	Active          *bool   `json:"active,omitempty"`           // 启用停用状态
	OperationReason *string `json:"operation_reason,omitempty"` // 操作原因
}

type PatchCostCenterReq struct {
	apiReq *larkcore.ApiReq
	Body   *PatchCostCenterReqBody `body:""`
}

type PatchCostCenterRespData struct {
	CostCenter *CostCenter `json:"cost_center,omitempty"` //
}

type PatchCostCenterResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *PatchCostCenterRespData `json:"data"` // 业务数据
}

func (resp *PatchCostCenterResp) Success() bool {
	return resp.Code == 0
}

type SearchCostCenterReqBodyBuilder struct {
	costCenterIdList       []string // 成本中心ID 列表
	costCenterIdListFlag   bool
	nameList               []string // 成长中心名称列表，精确匹配
	nameListFlag           bool
	code                   string // 成本中心编码
	codeFlag               bool
	parentCostCenterId     string // 上级成本中心ID，可用于查询直接下级成本中心
	parentCostCenterIdFlag bool
	getAllVersion          bool // 是否获取所有陈本中心版本
	getAllVersionFlag      bool
}

func NewSearchCostCenterReqBodyBuilder() *SearchCostCenterReqBodyBuilder {
	builder := &SearchCostCenterReqBodyBuilder{}
	return builder
}

// 成本中心ID 列表
//
// 示例值：
func (builder *SearchCostCenterReqBodyBuilder) CostCenterIdList(costCenterIdList []string) *SearchCostCenterReqBodyBuilder {
	builder.costCenterIdList = costCenterIdList
	builder.costCenterIdListFlag = true
	return builder
}

// 成长中心名称列表，精确匹配
//
// 示例值：
func (builder *SearchCostCenterReqBodyBuilder) NameList(nameList []string) *SearchCostCenterReqBodyBuilder {
	builder.nameList = nameList
	builder.nameListFlag = true
	return builder
}

// 成本中心编码
//
// 示例值：MDPD00000023
func (builder *SearchCostCenterReqBodyBuilder) Code(code string) *SearchCostCenterReqBodyBuilder {
	builder.code = code
	builder.codeFlag = true
	return builder
}

// 上级成本中心ID，可用于查询直接下级成本中心
//
// 示例值：6862995757234914824
func (builder *SearchCostCenterReqBodyBuilder) ParentCostCenterId(parentCostCenterId string) *SearchCostCenterReqBodyBuilder {
	builder.parentCostCenterId = parentCostCenterId
	builder.parentCostCenterIdFlag = true
	return builder
}

// 是否获取所有陈本中心版本
//
// 示例值：true
func (builder *SearchCostCenterReqBodyBuilder) GetAllVersion(getAllVersion bool) *SearchCostCenterReqBodyBuilder {
	builder.getAllVersion = getAllVersion
	builder.getAllVersionFlag = true
	return builder
}

func (builder *SearchCostCenterReqBodyBuilder) Build() *SearchCostCenterReqBody {
	req := &SearchCostCenterReqBody{}
	if builder.costCenterIdListFlag {
		req.CostCenterIdList = builder.costCenterIdList
	}
	if builder.nameListFlag {
		req.NameList = builder.nameList
	}
	if builder.codeFlag {
		req.Code = &builder.code
	}
	if builder.parentCostCenterIdFlag {
		req.ParentCostCenterId = &builder.parentCostCenterId
	}
	if builder.getAllVersionFlag {
		req.GetAllVersion = &builder.getAllVersion
	}
	return req
}

type SearchCostCenterPathReqBodyBuilder struct {
	costCenterIdList       []string
	costCenterIdListFlag   bool
	nameList               []string
	nameListFlag           bool
	code                   string
	codeFlag               bool
	parentCostCenterId     string
	parentCostCenterIdFlag bool
	getAllVersion          bool
	getAllVersionFlag      bool
}

func NewSearchCostCenterPathReqBodyBuilder() *SearchCostCenterPathReqBodyBuilder {
	builder := &SearchCostCenterPathReqBodyBuilder{}
	return builder
}

// 成本中心ID 列表
//
// 示例值：
func (builder *SearchCostCenterPathReqBodyBuilder) CostCenterIdList(costCenterIdList []string) *SearchCostCenterPathReqBodyBuilder {
	builder.costCenterIdList = costCenterIdList
	builder.costCenterIdListFlag = true
	return builder
}

// 成长中心名称列表，精确匹配
//
// 示例值：
func (builder *SearchCostCenterPathReqBodyBuilder) NameList(nameList []string) *SearchCostCenterPathReqBodyBuilder {
	builder.nameList = nameList
	builder.nameListFlag = true
	return builder
}

// 成本中心编码
//
// 示例值：MDPD00000023
func (builder *SearchCostCenterPathReqBodyBuilder) Code(code string) *SearchCostCenterPathReqBodyBuilder {
	builder.code = code
	builder.codeFlag = true
	return builder
}

// 上级成本中心ID，可用于查询直接下级成本中心
//
// 示例值：6862995757234914824
func (builder *SearchCostCenterPathReqBodyBuilder) ParentCostCenterId(parentCostCenterId string) *SearchCostCenterPathReqBodyBuilder {
	builder.parentCostCenterId = parentCostCenterId
	builder.parentCostCenterIdFlag = true
	return builder
}

// 是否获取所有陈本中心版本
//
// 示例值：true
func (builder *SearchCostCenterPathReqBodyBuilder) GetAllVersion(getAllVersion bool) *SearchCostCenterPathReqBodyBuilder {
	builder.getAllVersion = getAllVersion
	builder.getAllVersionFlag = true
	return builder
}

func (builder *SearchCostCenterPathReqBodyBuilder) Build() (*SearchCostCenterReqBody, error) {
	req := &SearchCostCenterReqBody{}
	if builder.costCenterIdListFlag {
		req.CostCenterIdList = builder.costCenterIdList
	}
	if builder.nameListFlag {
		req.NameList = builder.nameList
	}
	if builder.codeFlag {
		req.Code = &builder.code
	}
	if builder.parentCostCenterIdFlag {
		req.ParentCostCenterId = &builder.parentCostCenterId
	}
	if builder.getAllVersionFlag {
		req.GetAllVersion = &builder.getAllVersion
	}
	return req, nil
}

type SearchCostCenterReqBuilder struct {
	apiReq *larkcore.ApiReq
	body   *SearchCostCenterReqBody
}

func NewSearchCostCenterReqBuilder() *SearchCostCenterReqBuilder {
	builder := &SearchCostCenterReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 分页大小，最大 100
//
// 示例值：100
func (builder *SearchCostCenterReqBuilder) PageSize(pageSize int) *SearchCostCenterReqBuilder {
	builder.apiReq.QueryParams.Set("page_size", fmt.Sprint(pageSize))
	return builder
}

// 分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果
//
// 示例值：6891251722631890445
func (builder *SearchCostCenterReqBuilder) PageToken(pageToken string) *SearchCostCenterReqBuilder {
	builder.apiReq.QueryParams.Set("page_token", fmt.Sprint(pageToken))
	return builder
}

// 用户 ID 类型
//
// 示例值：people_corehr_id
func (builder *SearchCostCenterReqBuilder) UserIdType(userIdType string) *SearchCostCenterReqBuilder {
	builder.apiReq.QueryParams.Set("user_id_type", fmt.Sprint(userIdType))
	return builder
}

// 查询成本中心信息
func (builder *SearchCostCenterReqBuilder) Body(body *SearchCostCenterReqBody) *SearchCostCenterReqBuilder {
	builder.body = body
	return builder
}

func (builder *SearchCostCenterReqBuilder) Build() *SearchCostCenterReq {
	req := &SearchCostCenterReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.QueryParams = builder.apiReq.QueryParams
	req.apiReq.Body = builder.body
	return req
}

type SearchCostCenterReqBody struct {
	CostCenterIdList   []string `json:"cost_center_id_list,omitempty"`   // 成本中心ID 列表
	NameList           []string `json:"name_list,omitempty"`             // 成长中心名称列表，精确匹配
	Code               *string  `json:"code,omitempty"`                  // 成本中心编码
	ParentCostCenterId *string  `json:"parent_cost_center_id,omitempty"` // 上级成本中心ID，可用于查询直接下级成本中心
	GetAllVersion      *bool    `json:"get_all_version,omitempty"`       // 是否获取所有陈本中心版本
}

type SearchCostCenterReq struct {
	apiReq *larkcore.ApiReq
	Body   *SearchCostCenterReqBody `body:""`
}

type SearchCostCenterRespData struct {
	Items     []*CostCenterVersion `json:"items,omitempty"`      // 成本中心信息
	PageToken *string              `json:"page_token,omitempty"` // 下一页页码
	HasMore   *bool                `json:"has_more,omitempty"`   // 是否有下一页
}

type SearchCostCenterResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *SearchCostCenterRespData `json:"data"` // 业务数据
}

func (resp *SearchCostCenterResp) Success() bool {
	return resp.Code == 0
}

type CreateCostCenterVersionReqBuilder struct {
	apiReq            *larkcore.ApiReq
	costCenterVersion *CostCenterVersion
}

func NewCreateCostCenterVersionReqBuilder() *CreateCostCenterVersionReqBuilder {
	builder := &CreateCostCenterVersionReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 成本中心ID
//
// 示例值：6862995757234914824
func (builder *CreateCostCenterVersionReqBuilder) CostCenterId(costCenterId string) *CreateCostCenterVersionReqBuilder {
	builder.apiReq.PathParams.Set("cost_center_id", fmt.Sprint(costCenterId))
	return builder
}

// 用户 ID 类型
//
// 示例值：people_corehr_id
func (builder *CreateCostCenterVersionReqBuilder) UserIdType(userIdType string) *CreateCostCenterVersionReqBuilder {
	builder.apiReq.QueryParams.Set("user_id_type", fmt.Sprint(userIdType))
	return builder
}

// 创建成本中心版本
func (builder *CreateCostCenterVersionReqBuilder) CostCenterVersion(costCenterVersion *CostCenterVersion) *CreateCostCenterVersionReqBuilder {
	builder.costCenterVersion = costCenterVersion
	return builder
}

func (builder *CreateCostCenterVersionReqBuilder) Build() *CreateCostCenterVersionReq {
	req := &CreateCostCenterVersionReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.PathParams = builder.apiReq.PathParams
	req.apiReq.QueryParams = builder.apiReq.QueryParams
	req.apiReq.Body = builder.costCenterVersion
	return req
}

type CreateCostCenterVersionReq struct {
	apiReq            *larkcore.ApiReq
	CostCenterVersion *CostCenterVersion `body:""`
}

type CreateCostCenterVersionRespData struct {
	Version *CostCenterVersion `json:"version,omitempty"` //
}

type CreateCostCenterVersionResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *CreateCostCenterVersionRespData `json:"data"` // 业务数据
}

func (resp *CreateCostCenterVersionResp) Success() bool {
	return resp.Code == 0
}

type DeleteCostCenterVersionReqBodyBuilder struct {
	operationReason     string // 操作原因
	operationReasonFlag bool
}

func NewDeleteCostCenterVersionReqBodyBuilder() *DeleteCostCenterVersionReqBodyBuilder {
	builder := &DeleteCostCenterVersionReqBodyBuilder{}
	return builder
}

// 操作原因
//
// 示例值：随着组织架构调整，该成本中心不再使用
func (builder *DeleteCostCenterVersionReqBodyBuilder) OperationReason(operationReason string) *DeleteCostCenterVersionReqBodyBuilder {
	builder.operationReason = operationReason
	builder.operationReasonFlag = true
	return builder
}

func (builder *DeleteCostCenterVersionReqBodyBuilder) Build() *DeleteCostCenterVersionReqBody {
	req := &DeleteCostCenterVersionReqBody{}
	if builder.operationReasonFlag {
		req.OperationReason = &builder.operationReason
	}
	return req
}

type DeleteCostCenterVersionPathReqBodyBuilder struct {
	operationReason     string
	operationReasonFlag bool
}

func NewDeleteCostCenterVersionPathReqBodyBuilder() *DeleteCostCenterVersionPathReqBodyBuilder {
	builder := &DeleteCostCenterVersionPathReqBodyBuilder{}
	return builder
}

// 操作原因
//
// 示例值：随着组织架构调整，该成本中心不再使用
func (builder *DeleteCostCenterVersionPathReqBodyBuilder) OperationReason(operationReason string) *DeleteCostCenterVersionPathReqBodyBuilder {
	builder.operationReason = operationReason
	builder.operationReasonFlag = true
	return builder
}

func (builder *DeleteCostCenterVersionPathReqBodyBuilder) Build() (*DeleteCostCenterVersionReqBody, error) {
	req := &DeleteCostCenterVersionReqBody{}
	if builder.operationReasonFlag {
		req.OperationReason = &builder.operationReason
	}
	return req, nil
}

type DeleteCostCenterVersionReqBuilder struct {
	apiReq *larkcore.ApiReq
	body   *DeleteCostCenterVersionReqBody
}

func NewDeleteCostCenterVersionReqBuilder() *DeleteCostCenterVersionReqBuilder {
	builder := &DeleteCostCenterVersionReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 成本中心ID
//
// 示例值：6862995757234914824
func (builder *DeleteCostCenterVersionReqBuilder) CostCenterId(costCenterId string) *DeleteCostCenterVersionReqBuilder {
	builder.apiReq.PathParams.Set("cost_center_id", fmt.Sprint(costCenterId))
	return builder
}

// 版本ID
//
// 示例值：6862995757234914824
func (builder *DeleteCostCenterVersionReqBuilder) VersionId(versionId string) *DeleteCostCenterVersionReqBuilder {
	builder.apiReq.PathParams.Set("version_id", fmt.Sprint(versionId))
	return builder
}

// 撤销成本中心版本
func (builder *DeleteCostCenterVersionReqBuilder) Body(body *DeleteCostCenterVersionReqBody) *DeleteCostCenterVersionReqBuilder {
	builder.body = body
	return builder
}

func (builder *DeleteCostCenterVersionReqBuilder) Build() *DeleteCostCenterVersionReq {
	req := &DeleteCostCenterVersionReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.PathParams = builder.apiReq.PathParams
	req.apiReq.Body = builder.body
	return req
}

type DeleteCostCenterVersionReqBody struct {
	OperationReason *string `json:"operation_reason,omitempty"` // 操作原因
}

type DeleteCostCenterVersionReq struct {
	apiReq *larkcore.ApiReq
	Body   *DeleteCostCenterVersionReqBody `body:""`
}

type DeleteCostCenterVersionResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
}

func (resp *DeleteCostCenterVersionResp) Success() bool {
	return resp.Code == 0
}

type PatchCostCenterVersionReqBodyBuilder struct {
	name                   []*I18n // 成本中心名称
	nameFlag               bool
	parentCostCenterId     string // 上级成本中心ID
	parentCostCenterIdFlag bool
	managers               []string // 成本中心负责人ID 列表，可通过雇佣信息接口查询获得
	managersFlag           bool
	description            []*I18n // 成本中心描述
	descriptionFlag        bool
	effectiveTime          string // 生效时间
	effectiveTimeFlag      bool
	operationReason        string // 操作原因
	operationReasonFlag    bool
}

func NewPatchCostCenterVersionReqBodyBuilder() *PatchCostCenterVersionReqBodyBuilder {
	builder := &PatchCostCenterVersionReqBodyBuilder{}
	return builder
}

// 成本中心名称
//
// 示例值：
func (builder *PatchCostCenterVersionReqBodyBuilder) Name(name []*I18n) *PatchCostCenterVersionReqBodyBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}

// 上级成本中心ID
//
// 示例值：6862995757234914824
func (builder *PatchCostCenterVersionReqBodyBuilder) ParentCostCenterId(parentCostCenterId string) *PatchCostCenterVersionReqBodyBuilder {
	builder.parentCostCenterId = parentCostCenterId
	builder.parentCostCenterIdFlag = true
	return builder
}

// 成本中心负责人ID 列表，可通过雇佣信息接口查询获得
//
// 示例值：
func (builder *PatchCostCenterVersionReqBodyBuilder) Managers(managers []string) *PatchCostCenterVersionReqBodyBuilder {
	builder.managers = managers
	builder.managersFlag = true
	return builder
}

// 成本中心描述
//
// 示例值：
func (builder *PatchCostCenterVersionReqBodyBuilder) Description(description []*I18n) *PatchCostCenterVersionReqBodyBuilder {
	builder.description = description
	builder.descriptionFlag = true
	return builder
}

// 生效时间
//
// 示例值：2020-01-01
func (builder *PatchCostCenterVersionReqBodyBuilder) EffectiveTime(effectiveTime string) *PatchCostCenterVersionReqBodyBuilder {
	builder.effectiveTime = effectiveTime
	builder.effectiveTimeFlag = true
	return builder
}

// 操作原因
//
// 示例值：强行操作
func (builder *PatchCostCenterVersionReqBodyBuilder) OperationReason(operationReason string) *PatchCostCenterVersionReqBodyBuilder {
	builder.operationReason = operationReason
	builder.operationReasonFlag = true
	return builder
}

func (builder *PatchCostCenterVersionReqBodyBuilder) Build() *PatchCostCenterVersionReqBody {
	req := &PatchCostCenterVersionReqBody{}
	if builder.nameFlag {
		req.Name = builder.name
	}
	if builder.parentCostCenterIdFlag {
		req.ParentCostCenterId = &builder.parentCostCenterId
	}
	if builder.managersFlag {
		req.Managers = builder.managers
	}
	if builder.descriptionFlag {
		req.Description = builder.description
	}
	if builder.effectiveTimeFlag {
		req.EffectiveTime = &builder.effectiveTime
	}
	if builder.operationReasonFlag {
		req.OperationReason = &builder.operationReason
	}
	return req
}

type PatchCostCenterVersionPathReqBodyBuilder struct {
	name                   []*I18n
	nameFlag               bool
	parentCostCenterId     string
	parentCostCenterIdFlag bool
	managers               []string
	managersFlag           bool
	description            []*I18n
	descriptionFlag        bool
	effectiveTime          string
	effectiveTimeFlag      bool
	operationReason        string
	operationReasonFlag    bool
}

func NewPatchCostCenterVersionPathReqBodyBuilder() *PatchCostCenterVersionPathReqBodyBuilder {
	builder := &PatchCostCenterVersionPathReqBodyBuilder{}
	return builder
}

// 成本中心名称
//
// 示例值：
func (builder *PatchCostCenterVersionPathReqBodyBuilder) Name(name []*I18n) *PatchCostCenterVersionPathReqBodyBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}

// 上级成本中心ID
//
// 示例值：6862995757234914824
func (builder *PatchCostCenterVersionPathReqBodyBuilder) ParentCostCenterId(parentCostCenterId string) *PatchCostCenterVersionPathReqBodyBuilder {
	builder.parentCostCenterId = parentCostCenterId
	builder.parentCostCenterIdFlag = true
	return builder
}

// 成本中心负责人ID 列表，可通过雇佣信息接口查询获得
//
// 示例值：
func (builder *PatchCostCenterVersionPathReqBodyBuilder) Managers(managers []string) *PatchCostCenterVersionPathReqBodyBuilder {
	builder.managers = managers
	builder.managersFlag = true
	return builder
}

// 成本中心描述
//
// 示例值：
func (builder *PatchCostCenterVersionPathReqBodyBuilder) Description(description []*I18n) *PatchCostCenterVersionPathReqBodyBuilder {
	builder.description = description
	builder.descriptionFlag = true
	return builder
}

// 生效时间
//
// 示例值：2020-01-01
func (builder *PatchCostCenterVersionPathReqBodyBuilder) EffectiveTime(effectiveTime string) *PatchCostCenterVersionPathReqBodyBuilder {
	builder.effectiveTime = effectiveTime
	builder.effectiveTimeFlag = true
	return builder
}

// 操作原因
//
// 示例值：强行操作
func (builder *PatchCostCenterVersionPathReqBodyBuilder) OperationReason(operationReason string) *PatchCostCenterVersionPathReqBodyBuilder {
	builder.operationReason = operationReason
	builder.operationReasonFlag = true
	return builder
}

func (builder *PatchCostCenterVersionPathReqBodyBuilder) Build() (*PatchCostCenterVersionReqBody, error) {
	req := &PatchCostCenterVersionReqBody{}
	if builder.nameFlag {
		req.Name = builder.name
	}
	if builder.parentCostCenterIdFlag {
		req.ParentCostCenterId = &builder.parentCostCenterId
	}
	if builder.managersFlag {
		req.Managers = builder.managers
	}
	if builder.descriptionFlag {
		req.Description = builder.description
	}
	if builder.effectiveTimeFlag {
		req.EffectiveTime = &builder.effectiveTime
	}
	if builder.operationReasonFlag {
		req.OperationReason = &builder.operationReason
	}
	return req, nil
}

type PatchCostCenterVersionReqBuilder struct {
	apiReq *larkcore.ApiReq
	body   *PatchCostCenterVersionReqBody
}

func NewPatchCostCenterVersionReqBuilder() *PatchCostCenterVersionReqBuilder {
	builder := &PatchCostCenterVersionReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 成本中心ID
//
// 示例值：6862995757234914824
func (builder *PatchCostCenterVersionReqBuilder) CostCenterId(costCenterId string) *PatchCostCenterVersionReqBuilder {
	builder.apiReq.PathParams.Set("cost_center_id", fmt.Sprint(costCenterId))
	return builder
}

// 版本ID
//
// 示例值：6862995757234914824
func (builder *PatchCostCenterVersionReqBuilder) VersionId(versionId string) *PatchCostCenterVersionReqBuilder {
	builder.apiReq.PathParams.Set("version_id", fmt.Sprint(versionId))
	return builder
}

// 用户 ID 类型
//
// 示例值：people_corehr_id
func (builder *PatchCostCenterVersionReqBuilder) UserIdType(userIdType string) *PatchCostCenterVersionReqBuilder {
	builder.apiReq.QueryParams.Set("user_id_type", fmt.Sprint(userIdType))
	return builder
}

// 创建成本中心版本
func (builder *PatchCostCenterVersionReqBuilder) Body(body *PatchCostCenterVersionReqBody) *PatchCostCenterVersionReqBuilder {
	builder.body = body
	return builder
}

func (builder *PatchCostCenterVersionReqBuilder) Build() *PatchCostCenterVersionReq {
	req := &PatchCostCenterVersionReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.PathParams = builder.apiReq.PathParams
	req.apiReq.QueryParams = builder.apiReq.QueryParams
	req.apiReq.Body = builder.body
	return req
}

type PatchCostCenterVersionReqBody struct {
	Name               []*I18n  `json:"name,omitempty"`                  // 成本中心名称
	ParentCostCenterId *string  `json:"parent_cost_center_id,omitempty"` // 上级成本中心ID
	Managers           []string `json:"managers,omitempty"`              // 成本中心负责人ID 列表，可通过雇佣信息接口查询获得
	Description        []*I18n  `json:"description,omitempty"`           // 成本中心描述
	EffectiveTime      *string  `json:"effective_time,omitempty"`        // 生效时间
	OperationReason    *string  `json:"operation_reason,omitempty"`      // 操作原因
}

type PatchCostCenterVersionReq struct {
	apiReq *larkcore.ApiReq
	Body   *PatchCostCenterVersionReqBody `body:""`
}

type PatchCostCenterVersionRespData struct {
	Version *CostCenterVersion `json:"version,omitempty"` //
}

type PatchCostCenterVersionResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *PatchCostCenterVersionRespData `json:"data"` // 业务数据
}

func (resp *PatchCostCenterVersionResp) Success() bool {
	return resp.Code == 0
}

type BatchGetDepartmentReqBodyBuilder struct {
	departmentIdList       []string // 部门 ID 列表
	departmentIdListFlag   bool
	fields                 []string // 返回数据的字段列表
	fieldsFlag             bool
	departmentNameList     []string // 部门名称精确匹配，最多传100个
	departmentNameListFlag bool
}

func NewBatchGetDepartmentReqBodyBuilder() *BatchGetDepartmentReqBodyBuilder {
	builder := &BatchGetDepartmentReqBodyBuilder{}
	return builder
}

// 部门 ID 列表
//
// 示例值：
func (builder *BatchGetDepartmentReqBodyBuilder) DepartmentIdList(departmentIdList []string) *BatchGetDepartmentReqBodyBuilder {
	builder.departmentIdList = departmentIdList
	builder.departmentIdListFlag = true
	return builder
}

// 返回数据的字段列表
//
// 示例值：
func (builder *BatchGetDepartmentReqBodyBuilder) Fields(fields []string) *BatchGetDepartmentReqBodyBuilder {
	builder.fields = fields
	builder.fieldsFlag = true
	return builder
}

// 部门名称精确匹配，最多传100个
//
// 示例值：
func (builder *BatchGetDepartmentReqBodyBuilder) DepartmentNameList(departmentNameList []string) *BatchGetDepartmentReqBodyBuilder {
	builder.departmentNameList = departmentNameList
	builder.departmentNameListFlag = true
	return builder
}

func (builder *BatchGetDepartmentReqBodyBuilder) Build() *BatchGetDepartmentReqBody {
	req := &BatchGetDepartmentReqBody{}
	if builder.departmentIdListFlag {
		req.DepartmentIdList = builder.departmentIdList
	}
	if builder.fieldsFlag {
		req.Fields = builder.fields
	}
	if builder.departmentNameListFlag {
		req.DepartmentNameList = builder.departmentNameList
	}
	return req
}

type BatchGetDepartmentPathReqBodyBuilder struct {
	departmentIdList       []string
	departmentIdListFlag   bool
	fields                 []string
	fieldsFlag             bool
	departmentNameList     []string
	departmentNameListFlag bool
}

func NewBatchGetDepartmentPathReqBodyBuilder() *BatchGetDepartmentPathReqBodyBuilder {
	builder := &BatchGetDepartmentPathReqBodyBuilder{}
	return builder
}

// 部门 ID 列表
//
// 示例值：
func (builder *BatchGetDepartmentPathReqBodyBuilder) DepartmentIdList(departmentIdList []string) *BatchGetDepartmentPathReqBodyBuilder {
	builder.departmentIdList = departmentIdList
	builder.departmentIdListFlag = true
	return builder
}

// 返回数据的字段列表
//
// 示例值：
func (builder *BatchGetDepartmentPathReqBodyBuilder) Fields(fields []string) *BatchGetDepartmentPathReqBodyBuilder {
	builder.fields = fields
	builder.fieldsFlag = true
	return builder
}

// 部门名称精确匹配，最多传100个
//
// 示例值：
func (builder *BatchGetDepartmentPathReqBodyBuilder) DepartmentNameList(departmentNameList []string) *BatchGetDepartmentPathReqBodyBuilder {
	builder.departmentNameList = departmentNameList
	builder.departmentNameListFlag = true
	return builder
}

func (builder *BatchGetDepartmentPathReqBodyBuilder) Build() (*BatchGetDepartmentReqBody, error) {
	req := &BatchGetDepartmentReqBody{}
	if builder.departmentIdListFlag {
		req.DepartmentIdList = builder.departmentIdList
	}
	if builder.fieldsFlag {
		req.Fields = builder.fields
	}
	if builder.departmentNameListFlag {
		req.DepartmentNameList = builder.departmentNameList
	}
	return req, nil
}

type BatchGetDepartmentReqBuilder struct {
	apiReq *larkcore.ApiReq
	body   *BatchGetDepartmentReqBody
}

func NewBatchGetDepartmentReqBuilder() *BatchGetDepartmentReqBuilder {
	builder := &BatchGetDepartmentReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 用户 ID 类型
//
// 示例值：open_id
func (builder *BatchGetDepartmentReqBuilder) UserIdType(userIdType string) *BatchGetDepartmentReqBuilder {
	builder.apiReq.QueryParams.Set("user_id_type", fmt.Sprint(userIdType))
	return builder
}

// 此次调用中使用的部门 ID 类型
//
// 示例值：open_department_id
func (builder *BatchGetDepartmentReqBuilder) DepartmentIdType(departmentIdType string) *BatchGetDepartmentReqBuilder {
	builder.apiReq.QueryParams.Set("department_id_type", fmt.Sprint(departmentIdType))
	return builder
}

func (builder *BatchGetDepartmentReqBuilder) Body(body *BatchGetDepartmentReqBody) *BatchGetDepartmentReqBuilder {
	builder.body = body
	return builder
}

func (builder *BatchGetDepartmentReqBuilder) Build() *BatchGetDepartmentReq {
	req := &BatchGetDepartmentReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.QueryParams = builder.apiReq.QueryParams
	req.apiReq.Body = builder.body
	return req
}

type BatchGetDepartmentReqBody struct {
	DepartmentIdList   []string `json:"department_id_list,omitempty"`   // 部门 ID 列表
	Fields             []string `json:"fields,omitempty"`               // 返回数据的字段列表
	DepartmentNameList []string `json:"department_name_list,omitempty"` // 部门名称精确匹配，最多传100个
}

type BatchGetDepartmentReq struct {
	apiReq *larkcore.ApiReq
	Body   *BatchGetDepartmentReqBody `body:""`
}

type BatchGetDepartmentRespData struct {
	Items []*Department `json:"items,omitempty"` // 查询的部门信息
}

type BatchGetDepartmentResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *BatchGetDepartmentRespData `json:"data"` // 业务数据
}

func (resp *BatchGetDepartmentResp) Success() bool {
	return resp.Code == 0
}

type ParentsDepartmentReqBodyBuilder struct {
	departmentIdList     []string // 部门 ID 列表，一次性最多传入 100 个部门 ID
	departmentIdListFlag bool
}

func NewParentsDepartmentReqBodyBuilder() *ParentsDepartmentReqBodyBuilder {
	builder := &ParentsDepartmentReqBodyBuilder{}
	return builder
}

// 部门 ID 列表，一次性最多传入 100 个部门 ID
//
// 示例值：
func (builder *ParentsDepartmentReqBodyBuilder) DepartmentIdList(departmentIdList []string) *ParentsDepartmentReqBodyBuilder {
	builder.departmentIdList = departmentIdList
	builder.departmentIdListFlag = true
	return builder
}

func (builder *ParentsDepartmentReqBodyBuilder) Build() *ParentsDepartmentReqBody {
	req := &ParentsDepartmentReqBody{}
	if builder.departmentIdListFlag {
		req.DepartmentIdList = builder.departmentIdList
	}
	return req
}

type ParentsDepartmentPathReqBodyBuilder struct {
	departmentIdList     []string
	departmentIdListFlag bool
}

func NewParentsDepartmentPathReqBodyBuilder() *ParentsDepartmentPathReqBodyBuilder {
	builder := &ParentsDepartmentPathReqBodyBuilder{}
	return builder
}

// 部门 ID 列表，一次性最多传入 100 个部门 ID
//
// 示例值：
func (builder *ParentsDepartmentPathReqBodyBuilder) DepartmentIdList(departmentIdList []string) *ParentsDepartmentPathReqBodyBuilder {
	builder.departmentIdList = departmentIdList
	builder.departmentIdListFlag = true
	return builder
}

func (builder *ParentsDepartmentPathReqBodyBuilder) Build() (*ParentsDepartmentReqBody, error) {
	req := &ParentsDepartmentReqBody{}
	if builder.departmentIdListFlag {
		req.DepartmentIdList = builder.departmentIdList
	}
	return req, nil
}

type ParentsDepartmentReqBuilder struct {
	apiReq *larkcore.ApiReq
	body   *ParentsDepartmentReqBody
}

func NewParentsDepartmentReqBuilder() *ParentsDepartmentReqBuilder {
	builder := &ParentsDepartmentReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 此次调用中使用的部门 ID 类型
//
// 示例值：open_department_id
func (builder *ParentsDepartmentReqBuilder) DepartmentIdType(departmentIdType string) *ParentsDepartmentReqBuilder {
	builder.apiReq.QueryParams.Set("department_id_type", fmt.Sprint(departmentIdType))
	return builder
}

func (builder *ParentsDepartmentReqBuilder) Body(body *ParentsDepartmentReqBody) *ParentsDepartmentReqBuilder {
	builder.body = body
	return builder
}

func (builder *ParentsDepartmentReqBuilder) Build() *ParentsDepartmentReq {
	req := &ParentsDepartmentReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.QueryParams = builder.apiReq.QueryParams
	req.apiReq.Body = builder.body
	return req
}

type ParentsDepartmentReqBody struct {
	DepartmentIdList []string `json:"department_id_list,omitempty"` // 部门 ID 列表，一次性最多传入 100 个部门 ID
}

type ParentsDepartmentReq struct {
	apiReq *larkcore.ApiReq
	Body   *ParentsDepartmentReqBody `body:""`
}

type ParentsDepartmentRespData struct {
	Items []*DepartmentParents `json:"items,omitempty"` // 父部门查询结果
}

type ParentsDepartmentResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *ParentsDepartmentRespData `json:"data"` // 业务数据
}

func (resp *ParentsDepartmentResp) Success() bool {
	return resp.Code == 0
}

type SearchDepartmentReqBodyBuilder struct {
	active                 bool // 是否启用
	activeFlag             bool
	getAllChildren         bool // 当通过上级部门 ID 查询时，填写 true 返回所有子部门，填写 false 只返回直接下级部门
	getAllChildrenFlag     bool
	managerList            []string // manager ID 列表;**字段权限要求：按照部门负责人搜索 (corehr:department.manager.search:read)**
	managerListFlag        bool
	departmentIdList       []string // 部门 ID 列表
	departmentIdListFlag   bool
	nameList               []string // 部门名称列表，需精确匹配
	nameListFlag           bool
	parentDepartmentId     string // 上级部门 ID ，可查询直接下级部门;**字段权限要求：按照上级部门搜索 (corehr:department.organize.search:read) **
	parentDepartmentIdFlag bool
	codeList               []string // 部门 code 列表
	codeListFlag           bool

	fields     []string // 返回数据的字段列表
	fieldsFlag bool
}

func NewSearchDepartmentReqBodyBuilder() *SearchDepartmentReqBodyBuilder {
	builder := &SearchDepartmentReqBodyBuilder{}
	return builder
}

// 是否启用
//
// 示例值：true
func (builder *SearchDepartmentReqBodyBuilder) Active(active bool) *SearchDepartmentReqBodyBuilder {
	builder.active = active
	builder.activeFlag = true
	return builder
}

// 当通过上级部门 ID 查询时，填写 true 返回所有子部门，填写 false 只返回直接下级部门
//
// 示例值：false
func (builder *SearchDepartmentReqBodyBuilder) GetAllChildren(getAllChildren bool) *SearchDepartmentReqBodyBuilder {
	builder.getAllChildren = getAllChildren
	builder.getAllChildrenFlag = true
	return builder
}

// manager ID 列表;**字段权限要求：按照部门负责人搜索 (corehr:department.manager.search:read)**
//
// 示例值：
func (builder *SearchDepartmentReqBodyBuilder) ManagerList(managerList []string) *SearchDepartmentReqBodyBuilder {
	builder.managerList = managerList
	builder.managerListFlag = true
	return builder
}

// 部门 ID 列表
//
// 示例值：
func (builder *SearchDepartmentReqBodyBuilder) DepartmentIdList(departmentIdList []string) *SearchDepartmentReqBodyBuilder {
	builder.departmentIdList = departmentIdList
	builder.departmentIdListFlag = true
	return builder
}

// 部门名称列表，需精确匹配
//
// 示例值：
func (builder *SearchDepartmentReqBodyBuilder) NameList(nameList []string) *SearchDepartmentReqBodyBuilder {
	builder.nameList = nameList
	builder.nameListFlag = true
	return builder
}

// 上级部门 ID ，可查询直接下级部门;**字段权限要求：按照上级部门搜索 (corehr:department.organize.search:read) **
//
// 示例值：7094136522860922222
func (builder *SearchDepartmentReqBodyBuilder) ParentDepartmentId(parentDepartmentId string) *SearchDepartmentReqBodyBuilder {
	builder.parentDepartmentId = parentDepartmentId
	builder.parentDepartmentIdFlag = true
	return builder
}

// 部门 code 列表
//
// 示例值：
func (builder *SearchDepartmentReqBodyBuilder) CodeList(codeList []string) *SearchDepartmentReqBodyBuilder {
	builder.codeList = codeList
	builder.codeListFlag = true
	return builder
}

// 返回数据的字段列表
//
// 示例值：
func (builder *SearchDepartmentReqBodyBuilder) Fields(fields []string) *SearchDepartmentReqBodyBuilder {
	builder.fields = fields
	builder.fieldsFlag = true
	return builder
}

func (builder *SearchDepartmentReqBodyBuilder) Build() *SearchDepartmentReqBody {
	req := &SearchDepartmentReqBody{}
	if builder.activeFlag {
		req.Active = &builder.active
	}
	if builder.getAllChildrenFlag {
		req.GetAllChildren = &builder.getAllChildren
	}
	if builder.managerListFlag {
		req.ManagerList = builder.managerList
	}
	if builder.departmentIdListFlag {
		req.DepartmentIdList = builder.departmentIdList
	}
	if builder.nameListFlag {
		req.NameList = builder.nameList
	}
	if builder.parentDepartmentIdFlag {
		req.ParentDepartmentId = &builder.parentDepartmentId
	}
	if builder.codeListFlag {
		req.CodeList = builder.codeList
	}
	if builder.fieldsFlag {
		req.Fields = builder.fields
	}
	return req
}

type SearchDepartmentPathReqBodyBuilder struct {
	active                 bool
	activeFlag             bool
	getAllChildren         bool
	getAllChildrenFlag     bool
	managerList            []string
	managerListFlag        bool
	departmentIdList       []string
	departmentIdListFlag   bool
	nameList               []string
	nameListFlag           bool
	parentDepartmentId     string
	parentDepartmentIdFlag bool
	codeList               []string
	codeListFlag           bool
	getAllVersion          bool
	getAllVersionFlag      bool
	fields                 []string
	fieldsFlag             bool
}

func NewSearchDepartmentPathReqBodyBuilder() *SearchDepartmentPathReqBodyBuilder {
	builder := &SearchDepartmentPathReqBodyBuilder{}
	return builder
}

// 是否启用
//
// 示例值：true
func (builder *SearchDepartmentPathReqBodyBuilder) Active(active bool) *SearchDepartmentPathReqBodyBuilder {
	builder.active = active
	builder.activeFlag = true
	return builder
}

// 当通过上级部门 ID 查询时，填写 true 返回所有子部门，填写 false 只返回直接下级部门
//
// 示例值：false
func (builder *SearchDepartmentPathReqBodyBuilder) GetAllChildren(getAllChildren bool) *SearchDepartmentPathReqBodyBuilder {
	builder.getAllChildren = getAllChildren
	builder.getAllChildrenFlag = true
	return builder
}

// manager ID 列表;**字段权限要求：按照部门负责人搜索 (corehr:department.manager.search:read)**
//
// 示例值：
func (builder *SearchDepartmentPathReqBodyBuilder) ManagerList(managerList []string) *SearchDepartmentPathReqBodyBuilder {
	builder.managerList = managerList
	builder.managerListFlag = true
	return builder
}

// 部门 ID 列表
//
// 示例值：
func (builder *SearchDepartmentPathReqBodyBuilder) DepartmentIdList(departmentIdList []string) *SearchDepartmentPathReqBodyBuilder {
	builder.departmentIdList = departmentIdList
	builder.departmentIdListFlag = true
	return builder
}

// 部门名称列表，需精确匹配
//
// 示例值：
func (builder *SearchDepartmentPathReqBodyBuilder) NameList(nameList []string) *SearchDepartmentPathReqBodyBuilder {
	builder.nameList = nameList
	builder.nameListFlag = true
	return builder
}

// 上级部门 ID ，可查询直接下级部门;**字段权限要求：按照上级部门搜索 (corehr:department.organize.search:read) **
//
// 示例值：7094136522860922222
func (builder *SearchDepartmentPathReqBodyBuilder) ParentDepartmentId(parentDepartmentId string) *SearchDepartmentPathReqBodyBuilder {
	builder.parentDepartmentId = parentDepartmentId
	builder.parentDepartmentIdFlag = true
	return builder
}

// 部门 code 列表
//
// 示例值：
func (builder *SearchDepartmentPathReqBodyBuilder) CodeList(codeList []string) *SearchDepartmentPathReqBodyBuilder {
	builder.codeList = codeList
	builder.codeListFlag = true
	return builder
}

// 返回数据的字段列表
//
// 示例值：
func (builder *SearchDepartmentPathReqBodyBuilder) Fields(fields []string) *SearchDepartmentPathReqBodyBuilder {
	builder.fields = fields
	builder.fieldsFlag = true
	return builder
}

func (builder *SearchDepartmentPathReqBodyBuilder) Build() (*SearchDepartmentReqBody, error) {
	req := &SearchDepartmentReqBody{}
	if builder.activeFlag {
		req.Active = &builder.active
	}
	if builder.getAllChildrenFlag {
		req.GetAllChildren = &builder.getAllChildren
	}
	if builder.managerListFlag {
		req.ManagerList = builder.managerList
	}
	if builder.departmentIdListFlag {
		req.DepartmentIdList = builder.departmentIdList
	}
	if builder.nameListFlag {
		req.NameList = builder.nameList
	}
	if builder.parentDepartmentIdFlag {
		req.ParentDepartmentId = &builder.parentDepartmentId
	}
	if builder.codeListFlag {
		req.CodeList = builder.codeList
	}
	if builder.fieldsFlag {
		req.Fields = builder.fields
	}
	return req, nil
}

type SearchDepartmentReqBuilder struct {
	apiReq *larkcore.ApiReq
	body   *SearchDepartmentReqBody
	limit  int // 最大返回多少记录，当使用迭代器访问时才有效
}

func NewSearchDepartmentReqBuilder() *SearchDepartmentReqBuilder {
	builder := &SearchDepartmentReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 最大返回多少记录，当使用迭代器访问时才有效
func (builder *SearchDepartmentReqBuilder) Limit(limit int) *SearchDepartmentReqBuilder {
	builder.limit = limit
	return builder
}

// 分页大小，最大 100
//
// 示例值：100
func (builder *SearchDepartmentReqBuilder) PageSize(pageSize int) *SearchDepartmentReqBuilder {
	builder.apiReq.QueryParams.Set("page_size", fmt.Sprint(pageSize))
	return builder
}

// 分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果
//
// 示例值：6891251722631890445
func (builder *SearchDepartmentReqBuilder) PageToken(pageToken string) *SearchDepartmentReqBuilder {
	builder.apiReq.QueryParams.Set("page_token", fmt.Sprint(pageToken))
	return builder
}

// 用户 ID 类型
//
// 示例值：open_id
func (builder *SearchDepartmentReqBuilder) UserIdType(userIdType string) *SearchDepartmentReqBuilder {
	builder.apiReq.QueryParams.Set("user_id_type", fmt.Sprint(userIdType))
	return builder
}

// 此次调用中使用的部门 ID 类型
//
// 示例值：open_department_id
func (builder *SearchDepartmentReqBuilder) DepartmentIdType(departmentIdType string) *SearchDepartmentReqBuilder {
	builder.apiReq.QueryParams.Set("department_id_type", fmt.Sprint(departmentIdType))
	return builder
}

// 根据部门 ID，上级部门查询部门列表
func (builder *SearchDepartmentReqBuilder) Body(body *SearchDepartmentReqBody) *SearchDepartmentReqBuilder {
	builder.body = body
	return builder
}

func (builder *SearchDepartmentReqBuilder) Build() *SearchDepartmentReq {
	req := &SearchDepartmentReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.Limit = builder.limit
	req.apiReq.QueryParams = builder.apiReq.QueryParams
	req.apiReq.Body = builder.body
	return req
}

type SearchDepartmentReqBody struct {
	Active             *bool    `json:"active,omitempty"`               // 是否启用
	GetAllChildren     *bool    `json:"get_all_children,omitempty"`     // 当通过上级部门 ID 查询时，填写 true 返回所有子部门，填写 false 只返回直接下级部门
	ManagerList        []string `json:"manager_list,omitempty"`         // manager ID 列表;**字段权限要求：按照部门负责人搜索 (corehr:department.manager.search:read)**
	DepartmentIdList   []string `json:"department_id_list,omitempty"`   // 部门 ID 列表
	NameList           []string `json:"name_list,omitempty"`            // 部门名称列表，需精确匹配
	ParentDepartmentId *string  `json:"parent_department_id,omitempty"` // 上级部门 ID ，可查询直接下级部门;**字段权限要求：按照上级部门搜索 (corehr:department.organize.search:read) **
	CodeList           []string `json:"code_list,omitempty"`            // 部门 code 列表

	Fields []string `json:"fields,omitempty"` // 返回数据的字段列表
}

type SearchDepartmentReq struct {
	apiReq *larkcore.ApiReq
	Body   *SearchDepartmentReqBody `body:""`
	Limit  int                      // 最多返回多少记录，只有在使用迭代器访问时，才有效

}

type SearchDepartmentRespData struct {
	Items     []*Department `json:"items,omitempty"`      // 查询的部门信息
	PageToken *string       `json:"page_token,omitempty"` // 下一页页码
	HasMore   *bool         `json:"has_more,omitempty"`   // 是否有下一页
}

type SearchDepartmentResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *SearchDepartmentRespData `json:"data"` // 业务数据
}

func (resp *SearchDepartmentResp) Success() bool {
	return resp.Code == 0
}

type BatchGetEmployeeReqBodyBuilder struct {
	fields            []string // 返回数据的字段列表，填写方式：为空时默认仅返回 ID
	fieldsFlag        bool
	employmentIds     []string // 雇佣 ID 列表
	employmentIdsFlag bool
	personIds         []string // 个人信息 ID 列表，employment_ids参数有值时该参数不生效
	personIdsFlag     bool
	workEmails        []string // 主工作邮箱列表
	workEmailsFlag    bool
}

func NewBatchGetEmployeeReqBodyBuilder() *BatchGetEmployeeReqBodyBuilder {
	builder := &BatchGetEmployeeReqBodyBuilder{}
	return builder
}

// 返回数据的字段列表，填写方式：为空时默认仅返回 ID
//
// 示例值：
func (builder *BatchGetEmployeeReqBodyBuilder) Fields(fields []string) *BatchGetEmployeeReqBodyBuilder {
	builder.fields = fields
	builder.fieldsFlag = true
	return builder
}

// 雇佣 ID 列表
//
// 示例值：
func (builder *BatchGetEmployeeReqBodyBuilder) EmploymentIds(employmentIds []string) *BatchGetEmployeeReqBodyBuilder {
	builder.employmentIds = employmentIds
	builder.employmentIdsFlag = true
	return builder
}

// 个人信息 ID 列表，employment_ids参数有值时该参数不生效
//
// 示例值：
func (builder *BatchGetEmployeeReqBodyBuilder) PersonIds(personIds []string) *BatchGetEmployeeReqBodyBuilder {
	builder.personIds = personIds
	builder.personIdsFlag = true
	return builder
}

// 主工作邮箱列表
//
// 示例值：
func (builder *BatchGetEmployeeReqBodyBuilder) WorkEmails(workEmails []string) *BatchGetEmployeeReqBodyBuilder {
	builder.workEmails = workEmails
	builder.workEmailsFlag = true
	return builder
}

func (builder *BatchGetEmployeeReqBodyBuilder) Build() *BatchGetEmployeeReqBody {
	req := &BatchGetEmployeeReqBody{}
	if builder.fieldsFlag {
		req.Fields = builder.fields
	}
	if builder.employmentIdsFlag {
		req.EmploymentIds = builder.employmentIds
	}
	if builder.personIdsFlag {
		req.PersonIds = builder.personIds
	}
	if builder.workEmailsFlag {
		req.WorkEmails = builder.workEmails
	}
	return req
}

type BatchGetEmployeePathReqBodyBuilder struct {
	fields            []string
	fieldsFlag        bool
	employmentIds     []string
	employmentIdsFlag bool
	personIds         []string
	personIdsFlag     bool
	workEmails        []string
	workEmailsFlag    bool
	userNames         []string
	userNamesFlag     bool
}

func NewBatchGetEmployeePathReqBodyBuilder() *BatchGetEmployeePathReqBodyBuilder {
	builder := &BatchGetEmployeePathReqBodyBuilder{}
	return builder
}

// 返回数据的字段列表，填写方式：为空时默认仅返回 ID
//
// 示例值：
func (builder *BatchGetEmployeePathReqBodyBuilder) Fields(fields []string) *BatchGetEmployeePathReqBodyBuilder {
	builder.fields = fields
	builder.fieldsFlag = true
	return builder
}

// 雇佣 ID 列表
//
// 示例值：
func (builder *BatchGetEmployeePathReqBodyBuilder) EmploymentIds(employmentIds []string) *BatchGetEmployeePathReqBodyBuilder {
	builder.employmentIds = employmentIds
	builder.employmentIdsFlag = true
	return builder
}

// 个人信息 ID 列表，employment_ids参数有值时该参数不生效
//
// 示例值：
func (builder *BatchGetEmployeePathReqBodyBuilder) PersonIds(personIds []string) *BatchGetEmployeePathReqBodyBuilder {
	builder.personIds = personIds
	builder.personIdsFlag = true
	return builder
}

// 主工作邮箱列表
//
// 示例值：
func (builder *BatchGetEmployeePathReqBodyBuilder) WorkEmails(workEmails []string) *BatchGetEmployeePathReqBodyBuilder {
	builder.workEmails = workEmails
	builder.workEmailsFlag = true
	return builder
}

func (builder *BatchGetEmployeePathReqBodyBuilder) Build() (*BatchGetEmployeeReqBody, error) {
	req := &BatchGetEmployeeReqBody{}
	if builder.fieldsFlag {
		req.Fields = builder.fields
	}
	if builder.employmentIdsFlag {
		req.EmploymentIds = builder.employmentIds
	}
	if builder.personIdsFlag {
		req.PersonIds = builder.personIds
	}
	if builder.workEmailsFlag {
		req.WorkEmails = builder.workEmails
	}
	return req, nil
}

type BatchGetEmployeeReqBuilder struct {
	apiReq *larkcore.ApiReq
	body   *BatchGetEmployeeReqBody
}

func NewBatchGetEmployeeReqBuilder() *BatchGetEmployeeReqBuilder {
	builder := &BatchGetEmployeeReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 用户 ID 类型
//
// 示例值：open_id
func (builder *BatchGetEmployeeReqBuilder) UserIdType(userIdType string) *BatchGetEmployeeReqBuilder {
	builder.apiReq.QueryParams.Set("user_id_type", fmt.Sprint(userIdType))
	return builder
}

// 此次调用中使用的部门 ID 类型
//
// 示例值：open_department_id
func (builder *BatchGetEmployeeReqBuilder) DepartmentIdType(departmentIdType string) *BatchGetEmployeeReqBuilder {
	builder.apiReq.QueryParams.Set("department_id_type", fmt.Sprint(departmentIdType))
	return builder
}

// 通过员工 ID 批量获取员工信息
func (builder *BatchGetEmployeeReqBuilder) Body(body *BatchGetEmployeeReqBody) *BatchGetEmployeeReqBuilder {
	builder.body = body
	return builder
}

func (builder *BatchGetEmployeeReqBuilder) Build() *BatchGetEmployeeReq {
	req := &BatchGetEmployeeReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.QueryParams = builder.apiReq.QueryParams
	req.apiReq.Body = builder.body
	return req
}

type BatchGetEmployeeReqBody struct {
	Fields        []string `json:"fields,omitempty"`         // 返回数据的字段列表，填写方式：为空时默认仅返回 ID
	EmploymentIds []string `json:"employment_ids,omitempty"` // 雇佣 ID 列表
	PersonIds     []string `json:"person_ids,omitempty"`     // 个人信息 ID 列表，employment_ids参数有值时该参数不生效
	WorkEmails    []string `json:"work_emails,omitempty"`    // 主工作邮箱列表

}

type BatchGetEmployeeReq struct {
	apiReq *larkcore.ApiReq
	Body   *BatchGetEmployeeReqBody `body:""`
}

type BatchGetEmployeeRespData struct {
	Items []*Employee `json:"items,omitempty"` // 查询的雇佣信息
}

type BatchGetEmployeeResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *BatchGetEmployeeRespData `json:"data"` // 业务数据
}

func (resp *BatchGetEmployeeResp) Success() bool {
	return resp.Code == 0
}

type SearchEmployeeReqBodyBuilder struct {
	fields                            []string // 返回数据的字段列表，填写方式：为空时默认仅返回 ID
	fieldsFlag                        bool
	employmentIdList                  []string // 雇佣 ID 列表
	employmentIdListFlag              bool
	employeeNumberList                []string // 工号列表
	employeeNumberListFlag            bool
	workEmail                         string // 邮箱，精确匹配查询
	workEmailFlag                     bool
	phoneNumber                       string // 个人电话，精确匹配查询
	phoneNumberFlag                   bool
	keyWord                           string // 搜索关键字，支持对邮箱、工号和姓名的模糊匹配
	keyWordFlag                       bool
	employmentStatus                  string // 雇佣状态
	employmentStatusFlag              bool
	employeeTypeId                    string // 人员类型 ID
	employeeTypeIdFlag                bool
	departmentIdList                  []string // 部门 ID，根据员工主职的直接部门查询，可以通过【查询部门】API 获取 部门 ID
	departmentIdListFlag              bool
	directManagerIdList               []string // 直接上级的雇佣 ID，根据员工主职的直接上级查询
	directManagerIdListFlag           bool
	dottedLineManagerIdList           []string // 虚线上级的雇佣 ID，根据员工主职的虚线上级查询
	dottedLineManagerIdListFlag       bool
	regularEmployeeStartDateStart     string // 转正式员工日期-搜索范围开始
	regularEmployeeStartDateStartFlag bool
	regularEmployeeStartDateEnd       string // 转正式员工日期-搜索范围结束
	regularEmployeeStartDateEndFlag   bool
	effectiveTimeStart                string // 入职日期-搜索范围开始，需要与搜索范围结束一同使用
	effectiveTimeStartFlag            bool
	effectiveTimeEnd                  string // 入职日期-搜索范围结束
	effectiveTimeEndFlag              bool
	workLocationIdListIncludeSub      []string // 工作地点 ID 列表，查询属于该工作地点及下级工作地点的员工
	workLocationIdListIncludeSubFlag  bool
	preferredEnglishFullNameList      []string // 常用英文全名精确搜索
	preferredEnglishFullNameListFlag  bool
	preferredLocalFullNameList        []string // 常用本地全名精确搜索
	preferredLocalFullNameListFlag    bool
	nationalIdNumberList              []string // 居民身份证件号码精确搜索
	nationalIdNumberListFlag          bool
	phoneNumberList                   []string // 个人电话列表，精确匹配查询
	phoneNumberListFlag               bool
	emailAddressList                  []string // 工作邮箱地址列表，精确匹配查询
	emailAddressListFlag              bool

	departmentIdListIncludeSub     []string // 部门 ID 列表，查询属于该部门及下级部门的员工
	departmentIdListIncludeSubFlag bool
}

func NewSearchEmployeeReqBodyBuilder() *SearchEmployeeReqBodyBuilder {
	builder := &SearchEmployeeReqBodyBuilder{}
	return builder
}

// 返回数据的字段列表，填写方式：为空时默认仅返回 ID
//
// 示例值：
func (builder *SearchEmployeeReqBodyBuilder) Fields(fields []string) *SearchEmployeeReqBodyBuilder {
	builder.fields = fields
	builder.fieldsFlag = true
	return builder
}

// 雇佣 ID 列表
//
// 示例值：
func (builder *SearchEmployeeReqBodyBuilder) EmploymentIdList(employmentIdList []string) *SearchEmployeeReqBodyBuilder {
	builder.employmentIdList = employmentIdList
	builder.employmentIdListFlag = true
	return builder
}

// 工号列表
//
// 示例值：
func (builder *SearchEmployeeReqBodyBuilder) EmployeeNumberList(employeeNumberList []string) *SearchEmployeeReqBodyBuilder {
	builder.employeeNumberList = employeeNumberList
	builder.employeeNumberListFlag = true
	return builder
}

// 邮箱，精确匹配查询
//
// 示例值：13312345678@qq.com
func (builder *SearchEmployeeReqBodyBuilder) WorkEmail(workEmail string) *SearchEmployeeReqBodyBuilder {
	builder.workEmail = workEmail
	builder.workEmailFlag = true
	return builder
}

// 个人电话，精确匹配查询
//
// 示例值：16760342300
func (builder *SearchEmployeeReqBodyBuilder) PhoneNumber(phoneNumber string) *SearchEmployeeReqBodyBuilder {
	builder.phoneNumber = phoneNumber
	builder.phoneNumberFlag = true
	return builder
}

// 搜索关键字，支持对邮箱、工号和姓名的模糊匹配
//
// 示例值：张三
func (builder *SearchEmployeeReqBodyBuilder) KeyWord(keyWord string) *SearchEmployeeReqBodyBuilder {
	builder.keyWord = keyWord
	builder.keyWordFlag = true
	return builder
}

// 雇佣状态
//
// 示例值：
func (builder *SearchEmployeeReqBodyBuilder) EmploymentStatus(employmentStatus string) *SearchEmployeeReqBodyBuilder {
	builder.employmentStatus = employmentStatus
	builder.employmentStatusFlag = true
	return builder
}

// 人员类型 ID
//
// 示例值：6971090097697521314
func (builder *SearchEmployeeReqBodyBuilder) EmployeeTypeId(employeeTypeId string) *SearchEmployeeReqBodyBuilder {
	builder.employeeTypeId = employeeTypeId
	builder.employeeTypeIdFlag = true
	return builder
}

// 部门 ID，根据员工主职的直接部门查询，可以通过【查询部门】API 获取 部门 ID
//
// 示例值：
func (builder *SearchEmployeeReqBodyBuilder) DepartmentIdList(departmentIdList []string) *SearchEmployeeReqBodyBuilder {
	builder.departmentIdList = departmentIdList
	builder.departmentIdListFlag = true
	return builder
}

// 直接上级的雇佣 ID，根据员工主职的直接上级查询
//
// 示例值：7027024823985447820
func (builder *SearchEmployeeReqBodyBuilder) DirectManagerIdList(directManagerIdList []string) *SearchEmployeeReqBodyBuilder {
	builder.directManagerIdList = directManagerIdList
	builder.directManagerIdListFlag = true
	return builder
}

// 虚线上级的雇佣 ID，根据员工主职的虚线上级查询
//
// 示例值：7027024823985117820
func (builder *SearchEmployeeReqBodyBuilder) DottedLineManagerIdList(dottedLineManagerIdList []string) *SearchEmployeeReqBodyBuilder {
	builder.dottedLineManagerIdList = dottedLineManagerIdList
	builder.dottedLineManagerIdListFlag = true
	return builder
}

// 转正式员工日期-搜索范围开始
//
// 示例值：2020-01-01
func (builder *SearchEmployeeReqBodyBuilder) RegularEmployeeStartDateStart(regularEmployeeStartDateStart string) *SearchEmployeeReqBodyBuilder {
	builder.regularEmployeeStartDateStart = regularEmployeeStartDateStart
	builder.regularEmployeeStartDateStartFlag = true
	return builder
}

// 转正式员工日期-搜索范围结束
//
// 示例值：2020-01-01
func (builder *SearchEmployeeReqBodyBuilder) RegularEmployeeStartDateEnd(regularEmployeeStartDateEnd string) *SearchEmployeeReqBodyBuilder {
	builder.regularEmployeeStartDateEnd = regularEmployeeStartDateEnd
	builder.regularEmployeeStartDateEndFlag = true
	return builder
}

// 入职日期-搜索范围开始，需要与搜索范围结束一同使用
//
// 示例值：2020-01-01
func (builder *SearchEmployeeReqBodyBuilder) EffectiveTimeStart(effectiveTimeStart string) *SearchEmployeeReqBodyBuilder {
	builder.effectiveTimeStart = effectiveTimeStart
	builder.effectiveTimeStartFlag = true
	return builder
}

// 入职日期-搜索范围结束
//
// 示例值：2020-01-01
func (builder *SearchEmployeeReqBodyBuilder) EffectiveTimeEnd(effectiveTimeEnd string) *SearchEmployeeReqBodyBuilder {
	builder.effectiveTimeEnd = effectiveTimeEnd
	builder.effectiveTimeEndFlag = true
	return builder
}

// 工作地点 ID 列表，查询属于该工作地点及下级工作地点的员工
//
// 示例值：
func (builder *SearchEmployeeReqBodyBuilder) WorkLocationIdListIncludeSub(workLocationIdListIncludeSub []string) *SearchEmployeeReqBodyBuilder {
	builder.workLocationIdListIncludeSub = workLocationIdListIncludeSub
	builder.workLocationIdListIncludeSubFlag = true
	return builder
}

// 常用英文全名精确搜索
//
// 示例值：
func (builder *SearchEmployeeReqBodyBuilder) PreferredEnglishFullNameList(preferredEnglishFullNameList []string) *SearchEmployeeReqBodyBuilder {
	builder.preferredEnglishFullNameList = preferredEnglishFullNameList
	builder.preferredEnglishFullNameListFlag = true
	return builder
}

// 常用本地全名精确搜索
//
// 示例值：
func (builder *SearchEmployeeReqBodyBuilder) PreferredLocalFullNameList(preferredLocalFullNameList []string) *SearchEmployeeReqBodyBuilder {
	builder.preferredLocalFullNameList = preferredLocalFullNameList
	builder.preferredLocalFullNameListFlag = true
	return builder
}

// 居民身份证件号码精确搜索
//
// 示例值：
func (builder *SearchEmployeeReqBodyBuilder) NationalIdNumberList(nationalIdNumberList []string) *SearchEmployeeReqBodyBuilder {
	builder.nationalIdNumberList = nationalIdNumberList
	builder.nationalIdNumberListFlag = true
	return builder
}

// 个人电话列表，精确匹配查询
//
// 示例值：
func (builder *SearchEmployeeReqBodyBuilder) PhoneNumberList(phoneNumberList []string) *SearchEmployeeReqBodyBuilder {
	builder.phoneNumberList = phoneNumberList
	builder.phoneNumberListFlag = true
	return builder
}

// 工作邮箱地址列表，精确匹配查询
//
// 示例值：
func (builder *SearchEmployeeReqBodyBuilder) EmailAddressList(emailAddressList []string) *SearchEmployeeReqBodyBuilder {
	builder.emailAddressList = emailAddressList
	builder.emailAddressListFlag = true
	return builder
}

// 部门 ID 列表，查询属于该部门及下级部门的员工
//
// 示例值：
func (builder *SearchEmployeeReqBodyBuilder) DepartmentIdListIncludeSub(departmentIdListIncludeSub []string) *SearchEmployeeReqBodyBuilder {
	builder.departmentIdListIncludeSub = departmentIdListIncludeSub
	builder.departmentIdListIncludeSubFlag = true
	return builder
}

func (builder *SearchEmployeeReqBodyBuilder) Build() *SearchEmployeeReqBody {
	req := &SearchEmployeeReqBody{}
	if builder.fieldsFlag {
		req.Fields = builder.fields
	}
	if builder.employmentIdListFlag {
		req.EmploymentIdList = builder.employmentIdList
	}
	if builder.employeeNumberListFlag {
		req.EmployeeNumberList = builder.employeeNumberList
	}
	if builder.workEmailFlag {
		req.WorkEmail = &builder.workEmail
	}
	if builder.phoneNumberFlag {
		req.PhoneNumber = &builder.phoneNumber
	}
	if builder.keyWordFlag {
		req.KeyWord = &builder.keyWord
	}
	if builder.employmentStatusFlag {
		req.EmploymentStatus = &builder.employmentStatus
	}
	if builder.employeeTypeIdFlag {
		req.EmployeeTypeId = &builder.employeeTypeId
	}
	if builder.departmentIdListFlag {
		req.DepartmentIdList = builder.departmentIdList
	}
	if builder.directManagerIdListFlag {
		req.DirectManagerIdList = builder.directManagerIdList
	}
	if builder.dottedLineManagerIdListFlag {
		req.DottedLineManagerIdList = builder.dottedLineManagerIdList
	}
	if builder.regularEmployeeStartDateStartFlag {
		req.RegularEmployeeStartDateStart = &builder.regularEmployeeStartDateStart
	}
	if builder.regularEmployeeStartDateEndFlag {
		req.RegularEmployeeStartDateEnd = &builder.regularEmployeeStartDateEnd
	}
	if builder.effectiveTimeStartFlag {
		req.EffectiveTimeStart = &builder.effectiveTimeStart
	}
	if builder.effectiveTimeEndFlag {
		req.EffectiveTimeEnd = &builder.effectiveTimeEnd
	}
	if builder.workLocationIdListIncludeSubFlag {
		req.WorkLocationIdListIncludeSub = builder.workLocationIdListIncludeSub
	}
	if builder.preferredEnglishFullNameListFlag {
		req.PreferredEnglishFullNameList = builder.preferredEnglishFullNameList
	}
	if builder.preferredLocalFullNameListFlag {
		req.PreferredLocalFullNameList = builder.preferredLocalFullNameList
	}
	if builder.nationalIdNumberListFlag {
		req.NationalIdNumberList = builder.nationalIdNumberList
	}
	if builder.phoneNumberListFlag {
		req.PhoneNumberList = builder.phoneNumberList
	}
	if builder.emailAddressListFlag {
		req.EmailAddressList = builder.emailAddressList
	}
	if builder.departmentIdListIncludeSubFlag {
		req.DepartmentIdListIncludeSub = builder.departmentIdListIncludeSub
	}
	return req
}

type SearchEmployeePathReqBodyBuilder struct {
	fields                            []string
	fieldsFlag                        bool
	employmentIdList                  []string
	employmentIdListFlag              bool
	employeeNumberList                []string
	employeeNumberListFlag            bool
	workEmail                         string
	workEmailFlag                     bool
	phoneNumber                       string
	phoneNumberFlag                   bool
	keyWord                           string
	keyWordFlag                       bool
	employmentStatus                  string
	employmentStatusFlag              bool
	employeeTypeId                    string
	employeeTypeIdFlag                bool
	departmentIdList                  []string
	departmentIdListFlag              bool
	directManagerIdList               []string
	directManagerIdListFlag           bool
	dottedLineManagerIdList           []string
	dottedLineManagerIdListFlag       bool
	regularEmployeeStartDateStart     string
	regularEmployeeStartDateStartFlag bool
	regularEmployeeStartDateEnd       string
	regularEmployeeStartDateEndFlag   bool
	effectiveTimeStart                string
	effectiveTimeStartFlag            bool
	effectiveTimeEnd                  string
	effectiveTimeEndFlag              bool
	workLocationIdListIncludeSub      []string
	workLocationIdListIncludeSubFlag  bool
	preferredEnglishFullNameList      []string
	preferredEnglishFullNameListFlag  bool
	preferredLocalFullNameList        []string
	preferredLocalFullNameListFlag    bool
	nationalIdNumberList              []string
	nationalIdNumberListFlag          bool
	phoneNumberList                   []string
	phoneNumberListFlag               bool
	emailAddressList                  []string
	emailAddressListFlag              bool
	userName                          string
	userNameFlag                      bool
	departmentIdListIncludeSub        []string
	departmentIdListIncludeSubFlag    bool
}

func NewSearchEmployeePathReqBodyBuilder() *SearchEmployeePathReqBodyBuilder {
	builder := &SearchEmployeePathReqBodyBuilder{}
	return builder
}

// 返回数据的字段列表，填写方式：为空时默认仅返回 ID
//
// 示例值：
func (builder *SearchEmployeePathReqBodyBuilder) Fields(fields []string) *SearchEmployeePathReqBodyBuilder {
	builder.fields = fields
	builder.fieldsFlag = true
	return builder
}

// 雇佣 ID 列表
//
// 示例值：
func (builder *SearchEmployeePathReqBodyBuilder) EmploymentIdList(employmentIdList []string) *SearchEmployeePathReqBodyBuilder {
	builder.employmentIdList = employmentIdList
	builder.employmentIdListFlag = true
	return builder
}

// 工号列表
//
// 示例值：
func (builder *SearchEmployeePathReqBodyBuilder) EmployeeNumberList(employeeNumberList []string) *SearchEmployeePathReqBodyBuilder {
	builder.employeeNumberList = employeeNumberList
	builder.employeeNumberListFlag = true
	return builder
}

// 邮箱，精确匹配查询
//
// 示例值：13312345678@qq.com
func (builder *SearchEmployeePathReqBodyBuilder) WorkEmail(workEmail string) *SearchEmployeePathReqBodyBuilder {
	builder.workEmail = workEmail
	builder.workEmailFlag = true
	return builder
}

// 个人电话，精确匹配查询
//
// 示例值：16760342300
func (builder *SearchEmployeePathReqBodyBuilder) PhoneNumber(phoneNumber string) *SearchEmployeePathReqBodyBuilder {
	builder.phoneNumber = phoneNumber
	builder.phoneNumberFlag = true
	return builder
}

// 搜索关键字，支持对邮箱、工号和姓名的模糊匹配
//
// 示例值：张三
func (builder *SearchEmployeePathReqBodyBuilder) KeyWord(keyWord string) *SearchEmployeePathReqBodyBuilder {
	builder.keyWord = keyWord
	builder.keyWordFlag = true
	return builder
}

// 雇佣状态
//
// 示例值：
func (builder *SearchEmployeePathReqBodyBuilder) EmploymentStatus(employmentStatus string) *SearchEmployeePathReqBodyBuilder {
	builder.employmentStatus = employmentStatus
	builder.employmentStatusFlag = true
	return builder
}

// 人员类型 ID
//
// 示例值：6971090097697521314
func (builder *SearchEmployeePathReqBodyBuilder) EmployeeTypeId(employeeTypeId string) *SearchEmployeePathReqBodyBuilder {
	builder.employeeTypeId = employeeTypeId
	builder.employeeTypeIdFlag = true
	return builder
}

// 部门 ID，根据员工主职的直接部门查询，可以通过【查询部门】API 获取 部门 ID
//
// 示例值：
func (builder *SearchEmployeePathReqBodyBuilder) DepartmentIdList(departmentIdList []string) *SearchEmployeePathReqBodyBuilder {
	builder.departmentIdList = departmentIdList
	builder.departmentIdListFlag = true
	return builder
}

// 直接上级的雇佣 ID，根据员工主职的直接上级查询
//
// 示例值：7027024823985447820
func (builder *SearchEmployeePathReqBodyBuilder) DirectManagerIdList(directManagerIdList []string) *SearchEmployeePathReqBodyBuilder {
	builder.directManagerIdList = directManagerIdList
	builder.directManagerIdListFlag = true
	return builder
}

// 虚线上级的雇佣 ID，根据员工主职的虚线上级查询
//
// 示例值：7027024823985117820
func (builder *SearchEmployeePathReqBodyBuilder) DottedLineManagerIdList(dottedLineManagerIdList []string) *SearchEmployeePathReqBodyBuilder {
	builder.dottedLineManagerIdList = dottedLineManagerIdList
	builder.dottedLineManagerIdListFlag = true
	return builder
}

// 转正式员工日期-搜索范围开始
//
// 示例值：2020-01-01
func (builder *SearchEmployeePathReqBodyBuilder) RegularEmployeeStartDateStart(regularEmployeeStartDateStart string) *SearchEmployeePathReqBodyBuilder {
	builder.regularEmployeeStartDateStart = regularEmployeeStartDateStart
	builder.regularEmployeeStartDateStartFlag = true
	return builder
}

// 转正式员工日期-搜索范围结束
//
// 示例值：2020-01-01
func (builder *SearchEmployeePathReqBodyBuilder) RegularEmployeeStartDateEnd(regularEmployeeStartDateEnd string) *SearchEmployeePathReqBodyBuilder {
	builder.regularEmployeeStartDateEnd = regularEmployeeStartDateEnd
	builder.regularEmployeeStartDateEndFlag = true
	return builder
}

// 入职日期-搜索范围开始，需要与搜索范围结束一同使用
//
// 示例值：2020-01-01
func (builder *SearchEmployeePathReqBodyBuilder) EffectiveTimeStart(effectiveTimeStart string) *SearchEmployeePathReqBodyBuilder {
	builder.effectiveTimeStart = effectiveTimeStart
	builder.effectiveTimeStartFlag = true
	return builder
}

// 入职日期-搜索范围结束
//
// 示例值：2020-01-01
func (builder *SearchEmployeePathReqBodyBuilder) EffectiveTimeEnd(effectiveTimeEnd string) *SearchEmployeePathReqBodyBuilder {
	builder.effectiveTimeEnd = effectiveTimeEnd
	builder.effectiveTimeEndFlag = true
	return builder
}

// 工作地点 ID 列表，查询属于该工作地点及下级工作地点的员工
//
// 示例值：
func (builder *SearchEmployeePathReqBodyBuilder) WorkLocationIdListIncludeSub(workLocationIdListIncludeSub []string) *SearchEmployeePathReqBodyBuilder {
	builder.workLocationIdListIncludeSub = workLocationIdListIncludeSub
	builder.workLocationIdListIncludeSubFlag = true
	return builder
}

// 常用英文全名精确搜索
//
// 示例值：
func (builder *SearchEmployeePathReqBodyBuilder) PreferredEnglishFullNameList(preferredEnglishFullNameList []string) *SearchEmployeePathReqBodyBuilder {
	builder.preferredEnglishFullNameList = preferredEnglishFullNameList
	builder.preferredEnglishFullNameListFlag = true
	return builder
}

// 常用本地全名精确搜索
//
// 示例值：
func (builder *SearchEmployeePathReqBodyBuilder) PreferredLocalFullNameList(preferredLocalFullNameList []string) *SearchEmployeePathReqBodyBuilder {
	builder.preferredLocalFullNameList = preferredLocalFullNameList
	builder.preferredLocalFullNameListFlag = true
	return builder
}

// 居民身份证件号码精确搜索
//
// 示例值：
func (builder *SearchEmployeePathReqBodyBuilder) NationalIdNumberList(nationalIdNumberList []string) *SearchEmployeePathReqBodyBuilder {
	builder.nationalIdNumberList = nationalIdNumberList
	builder.nationalIdNumberListFlag = true
	return builder
}

// 个人电话列表，精确匹配查询
//
// 示例值：
func (builder *SearchEmployeePathReqBodyBuilder) PhoneNumberList(phoneNumberList []string) *SearchEmployeePathReqBodyBuilder {
	builder.phoneNumberList = phoneNumberList
	builder.phoneNumberListFlag = true
	return builder
}

// 工作邮箱地址列表，精确匹配查询
//
// 示例值：
func (builder *SearchEmployeePathReqBodyBuilder) EmailAddressList(emailAddressList []string) *SearchEmployeePathReqBodyBuilder {
	builder.emailAddressList = emailAddressList
	builder.emailAddressListFlag = true
	return builder
}

// 部门 ID 列表，查询属于该部门及下级部门的员工
//
// 示例值：
func (builder *SearchEmployeePathReqBodyBuilder) DepartmentIdListIncludeSub(departmentIdListIncludeSub []string) *SearchEmployeePathReqBodyBuilder {
	builder.departmentIdListIncludeSub = departmentIdListIncludeSub
	builder.departmentIdListIncludeSubFlag = true
	return builder
}

func (builder *SearchEmployeePathReqBodyBuilder) Build() (*SearchEmployeeReqBody, error) {
	req := &SearchEmployeeReqBody{}
	if builder.fieldsFlag {
		req.Fields = builder.fields
	}
	if builder.employmentIdListFlag {
		req.EmploymentIdList = builder.employmentIdList
	}
	if builder.employeeNumberListFlag {
		req.EmployeeNumberList = builder.employeeNumberList
	}
	if builder.workEmailFlag {
		req.WorkEmail = &builder.workEmail
	}
	if builder.phoneNumberFlag {
		req.PhoneNumber = &builder.phoneNumber
	}
	if builder.keyWordFlag {
		req.KeyWord = &builder.keyWord
	}
	if builder.employmentStatusFlag {
		req.EmploymentStatus = &builder.employmentStatus
	}
	if builder.employeeTypeIdFlag {
		req.EmployeeTypeId = &builder.employeeTypeId
	}
	if builder.departmentIdListFlag {
		req.DepartmentIdList = builder.departmentIdList
	}
	if builder.directManagerIdListFlag {
		req.DirectManagerIdList = builder.directManagerIdList
	}
	if builder.dottedLineManagerIdListFlag {
		req.DottedLineManagerIdList = builder.dottedLineManagerIdList
	}
	if builder.regularEmployeeStartDateStartFlag {
		req.RegularEmployeeStartDateStart = &builder.regularEmployeeStartDateStart
	}
	if builder.regularEmployeeStartDateEndFlag {
		req.RegularEmployeeStartDateEnd = &builder.regularEmployeeStartDateEnd
	}
	if builder.effectiveTimeStartFlag {
		req.EffectiveTimeStart = &builder.effectiveTimeStart
	}
	if builder.effectiveTimeEndFlag {
		req.EffectiveTimeEnd = &builder.effectiveTimeEnd
	}
	if builder.workLocationIdListIncludeSubFlag {
		req.WorkLocationIdListIncludeSub = builder.workLocationIdListIncludeSub
	}
	if builder.preferredEnglishFullNameListFlag {
		req.PreferredEnglishFullNameList = builder.preferredEnglishFullNameList
	}
	if builder.preferredLocalFullNameListFlag {
		req.PreferredLocalFullNameList = builder.preferredLocalFullNameList
	}
	if builder.nationalIdNumberListFlag {
		req.NationalIdNumberList = builder.nationalIdNumberList
	}
	if builder.phoneNumberListFlag {
		req.PhoneNumberList = builder.phoneNumberList
	}
	if builder.emailAddressListFlag {
		req.EmailAddressList = builder.emailAddressList
	}
	if builder.departmentIdListIncludeSubFlag {
		req.DepartmentIdListIncludeSub = builder.departmentIdListIncludeSub
	}
	return req, nil
}

type SearchEmployeeReqBuilder struct {
	apiReq *larkcore.ApiReq
	body   *SearchEmployeeReqBody
	limit  int // 最大返回多少记录，当使用迭代器访问时才有效
}

func NewSearchEmployeeReqBuilder() *SearchEmployeeReqBuilder {
	builder := &SearchEmployeeReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 最大返回多少记录，当使用迭代器访问时才有效
func (builder *SearchEmployeeReqBuilder) Limit(limit int) *SearchEmployeeReqBuilder {
	builder.limit = limit
	return builder
}

// 分页大小，最大 100
//
// 示例值：100
func (builder *SearchEmployeeReqBuilder) PageSize(pageSize int) *SearchEmployeeReqBuilder {
	builder.apiReq.QueryParams.Set("page_size", fmt.Sprint(pageSize))
	return builder
}

// 分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果
//
// 示例值：6891251722631890445
func (builder *SearchEmployeeReqBuilder) PageToken(pageToken string) *SearchEmployeeReqBuilder {
	builder.apiReq.QueryParams.Set("page_token", fmt.Sprint(pageToken))
	return builder
}

// 用户 ID 类型
//
// 示例值：open_id
func (builder *SearchEmployeeReqBuilder) UserIdType(userIdType string) *SearchEmployeeReqBuilder {
	builder.apiReq.QueryParams.Set("user_id_type", fmt.Sprint(userIdType))
	return builder
}

// 此次调用中使用的部门 ID 类型
//
// 示例值：open_department_id
func (builder *SearchEmployeeReqBuilder) DepartmentIdType(departmentIdType string) *SearchEmployeeReqBuilder {
	builder.apiReq.QueryParams.Set("department_id_type", fmt.Sprint(departmentIdType))
	return builder
}

// 根据 email、工号、个人电话等条件查询员工雇佣信息以及个人基础信息
func (builder *SearchEmployeeReqBuilder) Body(body *SearchEmployeeReqBody) *SearchEmployeeReqBuilder {
	builder.body = body
	return builder
}

func (builder *SearchEmployeeReqBuilder) Build() *SearchEmployeeReq {
	req := &SearchEmployeeReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.Limit = builder.limit
	req.apiReq.QueryParams = builder.apiReq.QueryParams
	req.apiReq.Body = builder.body
	return req
}

type SearchEmployeeReqBody struct {
	Fields                        []string `json:"fields,omitempty"`                            // 返回数据的字段列表，填写方式：为空时默认仅返回 ID
	EmploymentIdList              []string `json:"employment_id_list,omitempty"`                // 雇佣 ID 列表
	EmployeeNumberList            []string `json:"employee_number_list,omitempty"`              // 工号列表
	WorkEmail                     *string  `json:"work_email,omitempty"`                        // 邮箱，精确匹配查询
	PhoneNumber                   *string  `json:"phone_number,omitempty"`                      // 个人电话，精确匹配查询
	KeyWord                       *string  `json:"key_word,omitempty"`                          // 搜索关键字，支持对邮箱、工号和姓名的模糊匹配
	EmploymentStatus              *string  `json:"employment_status,omitempty"`                 // 雇佣状态
	EmployeeTypeId                *string  `json:"employee_type_id,omitempty"`                  // 人员类型 ID
	DepartmentIdList              []string `json:"department_id_list,omitempty"`                // 部门 ID，根据员工主职的直接部门查询，可以通过【查询部门】API 获取 部门 ID
	DirectManagerIdList           []string `json:"direct_manager_id_list,omitempty"`            // 直接上级的雇佣 ID，根据员工主职的直接上级查询
	DottedLineManagerIdList       []string `json:"dotted_line_manager_id_list,omitempty"`       // 虚线上级的雇佣 ID，根据员工主职的虚线上级查询
	RegularEmployeeStartDateStart *string  `json:"regular_employee_start_date_start,omitempty"` // 转正式员工日期-搜索范围开始
	RegularEmployeeStartDateEnd   *string  `json:"regular_employee_start_date_end,omitempty"`   // 转正式员工日期-搜索范围结束
	EffectiveTimeStart            *string  `json:"effective_time_start,omitempty"`              // 入职日期-搜索范围开始，需要与搜索范围结束一同使用
	EffectiveTimeEnd              *string  `json:"effective_time_end,omitempty"`                // 入职日期-搜索范围结束
	WorkLocationIdListIncludeSub  []string `json:"work_location_id_list_include_sub,omitempty"` // 工作地点 ID 列表，查询属于该工作地点及下级工作地点的员工
	PreferredEnglishFullNameList  []string `json:"preferred_english_full_name_list,omitempty"`  // 常用英文全名精确搜索
	PreferredLocalFullNameList    []string `json:"preferred_local_full_name_list,omitempty"`    // 常用本地全名精确搜索
	NationalIdNumberList          []string `json:"national_id_number_list,omitempty"`           // 居民身份证件号码精确搜索
	PhoneNumberList               []string `json:"phone_number_list,omitempty"`                 // 个人电话列表，精确匹配查询
	EmailAddressList              []string `json:"email_address_list,omitempty"`                // 工作邮箱地址列表，精确匹配查询

	DepartmentIdListIncludeSub []string `json:"department_id_list_include_sub,omitempty"` // 部门 ID 列表，查询属于该部门及下级部门的员工
}

type SearchEmployeeReq struct {
	apiReq *larkcore.ApiReq
	Body   *SearchEmployeeReqBody `body:""`
	Limit  int                    // 最多返回多少记录，只有在使用迭代器访问时，才有效

}

type SearchEmployeeRespData struct {
	Items     []*Employee `json:"items,omitempty"`      // 查询的雇佣信息
	PageToken *string     `json:"page_token,omitempty"` // 下一页页码
	HasMore   *bool       `json:"has_more,omitempty"`   // 是否有下一页
}

type SearchEmployeeResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *SearchEmployeeRespData `json:"data"` // 业务数据
}

func (resp *SearchEmployeeResp) Success() bool {
	return resp.Code == 0
}

type BatchGetEmployeesBpReqBodyBuilder struct {
	employmentIds     []string // 员工雇佣 ID
	employmentIdsFlag bool
	getAll            bool // 是否获取全部 BP，true 为获取员工所在部门及来自上级部门的全部 HRBP 和属地 BP，false 为仅获取员工的直属 HRBP 和属地 BP（当员工所在部门、属地无 BP 时，会上钻找到最近的 BP），默认为 false
	getAllFlag        bool
}

func NewBatchGetEmployeesBpReqBodyBuilder() *BatchGetEmployeesBpReqBodyBuilder {
	builder := &BatchGetEmployeesBpReqBodyBuilder{}
	return builder
}

// 员工雇佣 ID
//
// 示例值：
func (builder *BatchGetEmployeesBpReqBodyBuilder) EmploymentIds(employmentIds []string) *BatchGetEmployeesBpReqBodyBuilder {
	builder.employmentIds = employmentIds
	builder.employmentIdsFlag = true
	return builder
}

// 是否获取全部 BP，true 为获取员工所在部门及来自上级部门的全部 HRBP 和属地 BP，false 为仅获取员工的直属 HRBP 和属地 BP（当员工所在部门、属地无 BP 时，会上钻找到最近的 BP），默认为 false
//
// 示例值：true
func (builder *BatchGetEmployeesBpReqBodyBuilder) GetAll(getAll bool) *BatchGetEmployeesBpReqBodyBuilder {
	builder.getAll = getAll
	builder.getAllFlag = true
	return builder
}

func (builder *BatchGetEmployeesBpReqBodyBuilder) Build() *BatchGetEmployeesBpReqBody {
	req := &BatchGetEmployeesBpReqBody{}
	if builder.employmentIdsFlag {
		req.EmploymentIds = builder.employmentIds
	}
	if builder.getAllFlag {
		req.GetAll = &builder.getAll
	}
	return req
}

type BatchGetEmployeesBpPathReqBodyBuilder struct {
	employmentIds     []string
	employmentIdsFlag bool
	getAll            bool
	getAllFlag        bool
}

func NewBatchGetEmployeesBpPathReqBodyBuilder() *BatchGetEmployeesBpPathReqBodyBuilder {
	builder := &BatchGetEmployeesBpPathReqBodyBuilder{}
	return builder
}

// 员工雇佣 ID
//
// 示例值：
func (builder *BatchGetEmployeesBpPathReqBodyBuilder) EmploymentIds(employmentIds []string) *BatchGetEmployeesBpPathReqBodyBuilder {
	builder.employmentIds = employmentIds
	builder.employmentIdsFlag = true
	return builder
}

// 是否获取全部 BP，true 为获取员工所在部门及来自上级部门的全部 HRBP 和属地 BP，false 为仅获取员工的直属 HRBP 和属地 BP（当员工所在部门、属地无 BP 时，会上钻找到最近的 BP），默认为 false
//
// 示例值：true
func (builder *BatchGetEmployeesBpPathReqBodyBuilder) GetAll(getAll bool) *BatchGetEmployeesBpPathReqBodyBuilder {
	builder.getAll = getAll
	builder.getAllFlag = true
	return builder
}

func (builder *BatchGetEmployeesBpPathReqBodyBuilder) Build() (*BatchGetEmployeesBpReqBody, error) {
	req := &BatchGetEmployeesBpReqBody{}
	if builder.employmentIdsFlag {
		req.EmploymentIds = builder.employmentIds
	}
	if builder.getAllFlag {
		req.GetAll = &builder.getAll
	}
	return req, nil
}

type BatchGetEmployeesBpReqBuilder struct {
	apiReq *larkcore.ApiReq
	body   *BatchGetEmployeesBpReqBody
}

func NewBatchGetEmployeesBpReqBuilder() *BatchGetEmployeesBpReqBuilder {
	builder := &BatchGetEmployeesBpReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 用户 ID 类型
//
// 示例值：open_id
func (builder *BatchGetEmployeesBpReqBuilder) UserIdType(userIdType string) *BatchGetEmployeesBpReqBuilder {
	builder.apiReq.QueryParams.Set("user_id_type", fmt.Sprint(userIdType))
	return builder
}

func (builder *BatchGetEmployeesBpReqBuilder) Body(body *BatchGetEmployeesBpReqBody) *BatchGetEmployeesBpReqBuilder {
	builder.body = body
	return builder
}

func (builder *BatchGetEmployeesBpReqBuilder) Build() *BatchGetEmployeesBpReq {
	req := &BatchGetEmployeesBpReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.QueryParams = builder.apiReq.QueryParams
	req.apiReq.Body = builder.body
	return req
}

type BatchGetEmployeesBpReqBody struct {
	EmploymentIds []string `json:"employment_ids,omitempty"` // 员工雇佣 ID
	GetAll        *bool    `json:"get_all,omitempty"`        // 是否获取全部 BP，true 为获取员工所在部门及来自上级部门的全部 HRBP 和属地 BP，false 为仅获取员工的直属 HRBP 和属地 BP（当员工所在部门、属地无 BP 时，会上钻找到最近的 BP），默认为 false
}

type BatchGetEmployeesBpReq struct {
	apiReq *larkcore.ApiReq
	Body   *BatchGetEmployeesBpReqBody `body:""`
}

type BatchGetEmployeesBpRespData struct {
	EmploymentDirectBps []*EmploymentBp `json:"employment_direct_bps,omitempty"` // 员工直属 BP 信息，当员工所在部门、属地无 BP 时，会上钻找到最近的 BP
	EmploymentAllBps    []*EmploymentBp `json:"employment_all_bps,omitempty"`    // 员工全部 BP 信息
}

type BatchGetEmployeesBpResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *BatchGetEmployeesBpRespData `json:"data"` // 业务数据
}

func (resp *BatchGetEmployeesBpResp) Success() bool {
	return resp.Code == 0
}

type BatchGetEmployeesJobDataReqBodyBuilder struct {
	employmentIds          []string // 员工雇佣 ID 列表
	employmentIdsFlag      bool
	getAllVersion          bool // 是否获取所有任职记录，true 为获取员工所有版本的任职记录，false 为仅获取当前生效的任职记录，默认为 false
	getAllVersionFlag      bool
	effectiveDateStart     string // 生效日期 - 搜索范围开始
	effectiveDateStartFlag bool
	effectiveDateEnd       string // 生效日期 - 搜索范围结束
	effectiveDateEndFlag   bool
	dataDate               string // 查看数据日期，默认为今天
	dataDateFlag           bool
}

func NewBatchGetEmployeesJobDataReqBodyBuilder() *BatchGetEmployeesJobDataReqBodyBuilder {
	builder := &BatchGetEmployeesJobDataReqBodyBuilder{}
	return builder
}

// 员工雇佣 ID 列表
//
// 示例值：
func (builder *BatchGetEmployeesJobDataReqBodyBuilder) EmploymentIds(employmentIds []string) *BatchGetEmployeesJobDataReqBodyBuilder {
	builder.employmentIds = employmentIds
	builder.employmentIdsFlag = true
	return builder
}

// 是否获取所有任职记录，true 为获取员工所有版本的任职记录，false 为仅获取当前生效的任职记录，默认为 false
//
// 示例值：false
func (builder *BatchGetEmployeesJobDataReqBodyBuilder) GetAllVersion(getAllVersion bool) *BatchGetEmployeesJobDataReqBodyBuilder {
	builder.getAllVersion = getAllVersion
	builder.getAllVersionFlag = true
	return builder
}

// 生效日期 - 搜索范围开始
//
// 示例值：2020-01-01
func (builder *BatchGetEmployeesJobDataReqBodyBuilder) EffectiveDateStart(effectiveDateStart string) *BatchGetEmployeesJobDataReqBodyBuilder {
	builder.effectiveDateStart = effectiveDateStart
	builder.effectiveDateStartFlag = true
	return builder
}

// 生效日期 - 搜索范围结束
//
// 示例值：2020-01-01
func (builder *BatchGetEmployeesJobDataReqBodyBuilder) EffectiveDateEnd(effectiveDateEnd string) *BatchGetEmployeesJobDataReqBodyBuilder {
	builder.effectiveDateEnd = effectiveDateEnd
	builder.effectiveDateEndFlag = true
	return builder
}

// 查看数据日期，默认为今天
//
// 示例值：2020-01-01
func (builder *BatchGetEmployeesJobDataReqBodyBuilder) DataDate(dataDate string) *BatchGetEmployeesJobDataReqBodyBuilder {
	builder.dataDate = dataDate
	builder.dataDateFlag = true
	return builder
}

func (builder *BatchGetEmployeesJobDataReqBodyBuilder) Build() *BatchGetEmployeesJobDataReqBody {
	req := &BatchGetEmployeesJobDataReqBody{}
	if builder.employmentIdsFlag {
		req.EmploymentIds = builder.employmentIds
	}
	if builder.getAllVersionFlag {
		req.GetAllVersion = &builder.getAllVersion
	}
	if builder.effectiveDateStartFlag {
		req.EffectiveDateStart = &builder.effectiveDateStart
	}
	if builder.effectiveDateEndFlag {
		req.EffectiveDateEnd = &builder.effectiveDateEnd
	}
	if builder.dataDateFlag {
		req.DataDate = &builder.dataDate
	}
	return req
}

type BatchGetEmployeesJobDataPathReqBodyBuilder struct {
	employmentIds          []string
	employmentIdsFlag      bool
	getAllVersion          bool
	getAllVersionFlag      bool
	effectiveDateStart     string
	effectiveDateStartFlag bool
	effectiveDateEnd       string
	effectiveDateEndFlag   bool
	dataDate               string
	dataDateFlag           bool
}

func NewBatchGetEmployeesJobDataPathReqBodyBuilder() *BatchGetEmployeesJobDataPathReqBodyBuilder {
	builder := &BatchGetEmployeesJobDataPathReqBodyBuilder{}
	return builder
}

// 员工雇佣 ID 列表
//
// 示例值：
func (builder *BatchGetEmployeesJobDataPathReqBodyBuilder) EmploymentIds(employmentIds []string) *BatchGetEmployeesJobDataPathReqBodyBuilder {
	builder.employmentIds = employmentIds
	builder.employmentIdsFlag = true
	return builder
}

// 是否获取所有任职记录，true 为获取员工所有版本的任职记录，false 为仅获取当前生效的任职记录，默认为 false
//
// 示例值：false
func (builder *BatchGetEmployeesJobDataPathReqBodyBuilder) GetAllVersion(getAllVersion bool) *BatchGetEmployeesJobDataPathReqBodyBuilder {
	builder.getAllVersion = getAllVersion
	builder.getAllVersionFlag = true
	return builder
}

// 生效日期 - 搜索范围开始
//
// 示例值：2020-01-01
func (builder *BatchGetEmployeesJobDataPathReqBodyBuilder) EffectiveDateStart(effectiveDateStart string) *BatchGetEmployeesJobDataPathReqBodyBuilder {
	builder.effectiveDateStart = effectiveDateStart
	builder.effectiveDateStartFlag = true
	return builder
}

// 生效日期 - 搜索范围结束
//
// 示例值：2020-01-01
func (builder *BatchGetEmployeesJobDataPathReqBodyBuilder) EffectiveDateEnd(effectiveDateEnd string) *BatchGetEmployeesJobDataPathReqBodyBuilder {
	builder.effectiveDateEnd = effectiveDateEnd
	builder.effectiveDateEndFlag = true
	return builder
}

// 查看数据日期，默认为今天
//
// 示例值：2020-01-01
func (builder *BatchGetEmployeesJobDataPathReqBodyBuilder) DataDate(dataDate string) *BatchGetEmployeesJobDataPathReqBodyBuilder {
	builder.dataDate = dataDate
	builder.dataDateFlag = true
	return builder
}

func (builder *BatchGetEmployeesJobDataPathReqBodyBuilder) Build() (*BatchGetEmployeesJobDataReqBody, error) {
	req := &BatchGetEmployeesJobDataReqBody{}
	if builder.employmentIdsFlag {
		req.EmploymentIds = builder.employmentIds
	}
	if builder.getAllVersionFlag {
		req.GetAllVersion = &builder.getAllVersion
	}
	if builder.effectiveDateStartFlag {
		req.EffectiveDateStart = &builder.effectiveDateStart
	}
	if builder.effectiveDateEndFlag {
		req.EffectiveDateEnd = &builder.effectiveDateEnd
	}
	if builder.dataDateFlag {
		req.DataDate = &builder.dataDate
	}
	return req, nil
}

type BatchGetEmployeesJobDataReqBuilder struct {
	apiReq *larkcore.ApiReq
	body   *BatchGetEmployeesJobDataReqBody
}

func NewBatchGetEmployeesJobDataReqBuilder() *BatchGetEmployeesJobDataReqBuilder {
	builder := &BatchGetEmployeesJobDataReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 用户 ID 类型
//
// 示例值：open_id
func (builder *BatchGetEmployeesJobDataReqBuilder) UserIdType(userIdType string) *BatchGetEmployeesJobDataReqBuilder {
	builder.apiReq.QueryParams.Set("user_id_type", fmt.Sprint(userIdType))
	return builder
}

// 此次调用中使用的部门 ID 类型
//
// 示例值：people_corehr_department_id
func (builder *BatchGetEmployeesJobDataReqBuilder) DepartmentIdType(departmentIdType string) *BatchGetEmployeesJobDataReqBuilder {
	builder.apiReq.QueryParams.Set("department_id_type", fmt.Sprint(departmentIdType))
	return builder
}

func (builder *BatchGetEmployeesJobDataReqBuilder) Body(body *BatchGetEmployeesJobDataReqBody) *BatchGetEmployeesJobDataReqBuilder {
	builder.body = body
	return builder
}

func (builder *BatchGetEmployeesJobDataReqBuilder) Build() *BatchGetEmployeesJobDataReq {
	req := &BatchGetEmployeesJobDataReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.QueryParams = builder.apiReq.QueryParams
	req.apiReq.Body = builder.body
	return req
}

type BatchGetEmployeesJobDataReqBody struct {
	EmploymentIds      []string `json:"employment_ids,omitempty"`       // 员工雇佣 ID 列表
	GetAllVersion      *bool    `json:"get_all_version,omitempty"`      // 是否获取所有任职记录，true 为获取员工所有版本的任职记录，false 为仅获取当前生效的任职记录，默认为 false
	EffectiveDateStart *string  `json:"effective_date_start,omitempty"` // 生效日期 - 搜索范围开始
	EffectiveDateEnd   *string  `json:"effective_date_end,omitempty"`   // 生效日期 - 搜索范围结束
	DataDate           *string  `json:"data_date,omitempty"`            // 查看数据日期，默认为今天
}

type BatchGetEmployeesJobDataReq struct {
	apiReq *larkcore.ApiReq
	Body   *BatchGetEmployeesJobDataReqBody `body:""`
}

type BatchGetEmployeesJobDataRespData struct {
	Items []*EmployeeJobData `json:"items,omitempty"` // 查询的雇佣信息
}

type BatchGetEmployeesJobDataResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *BatchGetEmployeesJobDataRespData `json:"data"` // 业务数据
}

func (resp *BatchGetEmployeesJobDataResp) Success() bool {
	return resp.Code == 0
}

type QueryEmployeesJobDataReqBodyBuilder struct {
	getAllVersion          bool // 是否获取所有任职记录，true 为获取员工所有版本的任职记录，false 为仅获取当前生效的任职记录，默认为 false
	getAllVersionFlag      bool
	dataDate               string // 查看数据日期
	dataDateFlag           bool
	effectiveDateStart     string // 生效日期 - 搜索范围开始
	effectiveDateStartFlag bool
	effectiveDateEnd       string // 生效日期 - 搜索范围结束
	effectiveDateEndFlag   bool
}

func NewQueryEmployeesJobDataReqBodyBuilder() *QueryEmployeesJobDataReqBodyBuilder {
	builder := &QueryEmployeesJobDataReqBodyBuilder{}
	return builder
}

// 是否获取所有任职记录，true 为获取员工所有版本的任职记录，false 为仅获取当前生效的任职记录，默认为 false
//
// 示例值：false
func (builder *QueryEmployeesJobDataReqBodyBuilder) GetAllVersion(getAllVersion bool) *QueryEmployeesJobDataReqBodyBuilder {
	builder.getAllVersion = getAllVersion
	builder.getAllVersionFlag = true
	return builder
}

// 查看数据日期
//
// 示例值：2020-01-01
func (builder *QueryEmployeesJobDataReqBodyBuilder) DataDate(dataDate string) *QueryEmployeesJobDataReqBodyBuilder {
	builder.dataDate = dataDate
	builder.dataDateFlag = true
	return builder
}

// 生效日期 - 搜索范围开始
//
// 示例值：2020-01-01
func (builder *QueryEmployeesJobDataReqBodyBuilder) EffectiveDateStart(effectiveDateStart string) *QueryEmployeesJobDataReqBodyBuilder {
	builder.effectiveDateStart = effectiveDateStart
	builder.effectiveDateStartFlag = true
	return builder
}

// 生效日期 - 搜索范围结束
//
// 示例值：2020-01-01
func (builder *QueryEmployeesJobDataReqBodyBuilder) EffectiveDateEnd(effectiveDateEnd string) *QueryEmployeesJobDataReqBodyBuilder {
	builder.effectiveDateEnd = effectiveDateEnd
	builder.effectiveDateEndFlag = true
	return builder
}

func (builder *QueryEmployeesJobDataReqBodyBuilder) Build() *QueryEmployeesJobDataReqBody {
	req := &QueryEmployeesJobDataReqBody{}
	if builder.getAllVersionFlag {
		req.GetAllVersion = &builder.getAllVersion
	}
	if builder.dataDateFlag {
		req.DataDate = &builder.dataDate
	}
	if builder.effectiveDateStartFlag {
		req.EffectiveDateStart = &builder.effectiveDateStart
	}
	if builder.effectiveDateEndFlag {
		req.EffectiveDateEnd = &builder.effectiveDateEnd
	}
	return req
}

type QueryEmployeesJobDataPathReqBodyBuilder struct {
	getAllVersion          bool
	getAllVersionFlag      bool
	dataDate               string
	dataDateFlag           bool
	effectiveDateStart     string
	effectiveDateStartFlag bool
	effectiveDateEnd       string
	effectiveDateEndFlag   bool
}

func NewQueryEmployeesJobDataPathReqBodyBuilder() *QueryEmployeesJobDataPathReqBodyBuilder {
	builder := &QueryEmployeesJobDataPathReqBodyBuilder{}
	return builder
}

// 是否获取所有任职记录，true 为获取员工所有版本的任职记录，false 为仅获取当前生效的任职记录，默认为 false
//
// 示例值：false
func (builder *QueryEmployeesJobDataPathReqBodyBuilder) GetAllVersion(getAllVersion bool) *QueryEmployeesJobDataPathReqBodyBuilder {
	builder.getAllVersion = getAllVersion
	builder.getAllVersionFlag = true
	return builder
}

// 查看数据日期
//
// 示例值：2020-01-01
func (builder *QueryEmployeesJobDataPathReqBodyBuilder) DataDate(dataDate string) *QueryEmployeesJobDataPathReqBodyBuilder {
	builder.dataDate = dataDate
	builder.dataDateFlag = true
	return builder
}

// 生效日期 - 搜索范围开始
//
// 示例值：2020-01-01
func (builder *QueryEmployeesJobDataPathReqBodyBuilder) EffectiveDateStart(effectiveDateStart string) *QueryEmployeesJobDataPathReqBodyBuilder {
	builder.effectiveDateStart = effectiveDateStart
	builder.effectiveDateStartFlag = true
	return builder
}

// 生效日期 - 搜索范围结束
//
// 示例值：2020-01-01
func (builder *QueryEmployeesJobDataPathReqBodyBuilder) EffectiveDateEnd(effectiveDateEnd string) *QueryEmployeesJobDataPathReqBodyBuilder {
	builder.effectiveDateEnd = effectiveDateEnd
	builder.effectiveDateEndFlag = true
	return builder
}

func (builder *QueryEmployeesJobDataPathReqBodyBuilder) Build() (*QueryEmployeesJobDataReqBody, error) {
	req := &QueryEmployeesJobDataReqBody{}
	if builder.getAllVersionFlag {
		req.GetAllVersion = &builder.getAllVersion
	}
	if builder.dataDateFlag {
		req.DataDate = &builder.dataDate
	}
	if builder.effectiveDateStartFlag {
		req.EffectiveDateStart = &builder.effectiveDateStart
	}
	if builder.effectiveDateEndFlag {
		req.EffectiveDateEnd = &builder.effectiveDateEnd
	}
	return req, nil
}

type QueryEmployeesJobDataReqBuilder struct {
	apiReq *larkcore.ApiReq
	body   *QueryEmployeesJobDataReqBody
}

func NewQueryEmployeesJobDataReqBuilder() *QueryEmployeesJobDataReqBuilder {
	builder := &QueryEmployeesJobDataReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 分页大小，最大 100
//
// 示例值：100
func (builder *QueryEmployeesJobDataReqBuilder) PageSize(pageSize int) *QueryEmployeesJobDataReqBuilder {
	builder.apiReq.QueryParams.Set("page_size", fmt.Sprint(pageSize))
	return builder
}

// 分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果
//
// 示例值：6891251722631890445
func (builder *QueryEmployeesJobDataReqBuilder) PageToken(pageToken string) *QueryEmployeesJobDataReqBuilder {
	builder.apiReq.QueryParams.Set("page_token", fmt.Sprint(pageToken))
	return builder
}

// 用户 ID 类型
//
// 示例值：open_id
func (builder *QueryEmployeesJobDataReqBuilder) UserIdType(userIdType string) *QueryEmployeesJobDataReqBuilder {
	builder.apiReq.QueryParams.Set("user_id_type", fmt.Sprint(userIdType))
	return builder
}

// 此次调用中使用的部门 ID 类型
//
// 示例值：people_corehr_department_id
func (builder *QueryEmployeesJobDataReqBuilder) DepartmentIdType(departmentIdType string) *QueryEmployeesJobDataReqBuilder {
	builder.apiReq.QueryParams.Set("department_id_type", fmt.Sprint(departmentIdType))
	return builder
}

func (builder *QueryEmployeesJobDataReqBuilder) Body(body *QueryEmployeesJobDataReqBody) *QueryEmployeesJobDataReqBuilder {
	builder.body = body
	return builder
}

func (builder *QueryEmployeesJobDataReqBuilder) Build() *QueryEmployeesJobDataReq {
	req := &QueryEmployeesJobDataReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.QueryParams = builder.apiReq.QueryParams
	req.apiReq.Body = builder.body
	return req
}

type QueryEmployeesJobDataReqBody struct {
	GetAllVersion      *bool   `json:"get_all_version,omitempty"`      // 是否获取所有任职记录，true 为获取员工所有版本的任职记录，false 为仅获取当前生效的任职记录，默认为 false
	DataDate           *string `json:"data_date,omitempty"`            // 查看数据日期
	EffectiveDateStart *string `json:"effective_date_start,omitempty"` // 生效日期 - 搜索范围开始
	EffectiveDateEnd   *string `json:"effective_date_end,omitempty"`   // 生效日期 - 搜索范围结束
}

type QueryEmployeesJobDataReq struct {
	apiReq *larkcore.ApiReq
	Body   *QueryEmployeesJobDataReqBody `body:""`
}

type QueryEmployeesJobDataRespData struct {
	Items     []*EmployeeJobData `json:"items,omitempty"`      // 任职信息
	PageToken *string            `json:"page_token,omitempty"` // 分页标记，当 has_more 为 true 时，会同时返回新的 page_token，否则不返回 page_token
	HasMore   *bool              `json:"has_more,omitempty"`   // 是否还有更多项
}

type QueryEmployeesJobDataResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *QueryEmployeesJobDataRespData `json:"data"` // 业务数据
}

func (resp *QueryEmployeesJobDataResp) Success() bool {
	return resp.Code == 0
}

type GetJobReqBuilder struct {
	apiReq *larkcore.ApiReq
}

func NewGetJobReqBuilder() *GetJobReqBuilder {
	builder := &GetJobReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 序列级别ID
//
// 示例值：151515
func (builder *GetJobReqBuilder) JobId(jobId string) *GetJobReqBuilder {
	builder.apiReq.PathParams.Set("job_id", fmt.Sprint(jobId))
	return builder
}

func (builder *GetJobReqBuilder) Build() *GetJobReq {
	req := &GetJobReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.PathParams = builder.apiReq.PathParams
	return req
}

type GetJobReq struct {
	apiReq *larkcore.ApiReq
}

type GetJobRespData struct {
	Job *Job `json:"job,omitempty"` // 职务信息
}

type GetJobResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *GetJobRespData `json:"data"` // 业务数据
}

func (resp *GetJobResp) Success() bool {
	return resp.Code == 0
}

type ListJobReqBuilder struct {
	apiReq *larkcore.ApiReq
}

func NewListJobReqBuilder() *ListJobReqBuilder {
	builder := &ListJobReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 页码标识，获取第一页传空，每次查询会返回下一页的page_token
//
// 示例值：1231231987
func (builder *ListJobReqBuilder) PageToken(pageToken string) *ListJobReqBuilder {
	builder.apiReq.QueryParams.Set("page_token", fmt.Sprint(pageToken))
	return builder
}

// 每页获取记录数量，最大100
//
// 示例值：100
func (builder *ListJobReqBuilder) PageSize(pageSize string) *ListJobReqBuilder {
	builder.apiReq.QueryParams.Set("page_size", fmt.Sprint(pageSize))
	return builder
}

// 名称
//
// 示例值：keyword
func (builder *ListJobReqBuilder) Name(name string) *ListJobReqBuilder {
	builder.apiReq.QueryParams.Set("name", fmt.Sprint(name))
	return builder
}

// 语言
//
// 示例值：zh
func (builder *ListJobReqBuilder) QueryLanguage(queryLanguage string) *ListJobReqBuilder {
	builder.apiReq.QueryParams.Set("query_language", fmt.Sprint(queryLanguage))
	return builder
}

func (builder *ListJobReqBuilder) Build() *ListJobReq {
	req := &ListJobReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.QueryParams = builder.apiReq.QueryParams
	return req
}

type ListJobReq struct {
	apiReq *larkcore.ApiReq
}

type ListJobRespData struct {
	Items     []*Job  `json:"items,omitempty"`      // 查询的职务信息
	HasMore   *bool   `json:"has_more,omitempty"`   // 是否有下一页
	PageToken *string `json:"page_token,omitempty"` // 下一页页码
}

type ListJobResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *ListJobRespData `json:"data"` // 业务数据
}

func (resp *ListJobResp) Success() bool {
	return resp.Code == 0
}

type SearchJobChangeReqBodyBuilder struct {
	employmentIds          []string // 雇员 ID 列表
	employmentIdsFlag      bool
	jobChangeIds           []string // 异动记录 ID 列表
	jobChangeIdsFlag       bool
	statuses               []string // 异动状态，多个状态之间为「或」的关系
	statusesFlag           bool
	effectiveDateStart     string // 异动生效日期 - 搜索范围开始，需要与搜索范围结束一同使用
	effectiveDateStartFlag bool
	effectiveDateEnd       string // 异动生效日期 - 搜索范围结束
	effectiveDateEndFlag   bool
	updatedTimeStart       string // 异动更新时间 - 搜索范围开始，需要与搜索范围结束一同使用
	updatedTimeStartFlag   bool
	updatedTimeEnd         string // 异动更新时间 - 搜索范围结束
	updatedTimeEndFlag     bool
}

func NewSearchJobChangeReqBodyBuilder() *SearchJobChangeReqBodyBuilder {
	builder := &SearchJobChangeReqBodyBuilder{}
	return builder
}

// 雇员 ID 列表
//
// 示例值：
func (builder *SearchJobChangeReqBodyBuilder) EmploymentIds(employmentIds []string) *SearchJobChangeReqBodyBuilder {
	builder.employmentIds = employmentIds
	builder.employmentIdsFlag = true
	return builder
}

// 异动记录 ID 列表
//
// 示例值：
func (builder *SearchJobChangeReqBodyBuilder) JobChangeIds(jobChangeIds []string) *SearchJobChangeReqBodyBuilder {
	builder.jobChangeIds = jobChangeIds
	builder.jobChangeIdsFlag = true
	return builder
}

// 异动状态，多个状态之间为「或」的关系
//
// 示例值：Approved
func (builder *SearchJobChangeReqBodyBuilder) Statuses(statuses []string) *SearchJobChangeReqBodyBuilder {
	builder.statuses = statuses
	builder.statusesFlag = true
	return builder
}

// 异动生效日期 - 搜索范围开始，需要与搜索范围结束一同使用
//
// 示例值：2022-01-01
func (builder *SearchJobChangeReqBodyBuilder) EffectiveDateStart(effectiveDateStart string) *SearchJobChangeReqBodyBuilder {
	builder.effectiveDateStart = effectiveDateStart
	builder.effectiveDateStartFlag = true
	return builder
}

// 异动生效日期 - 搜索范围结束
//
// 示例值：2022-01-01
func (builder *SearchJobChangeReqBodyBuilder) EffectiveDateEnd(effectiveDateEnd string) *SearchJobChangeReqBodyBuilder {
	builder.effectiveDateEnd = effectiveDateEnd
	builder.effectiveDateEndFlag = true
	return builder
}

// 异动更新时间 - 搜索范围开始，需要与搜索范围结束一同使用
//
// 示例值：1704084635000
func (builder *SearchJobChangeReqBodyBuilder) UpdatedTimeStart(updatedTimeStart string) *SearchJobChangeReqBodyBuilder {
	builder.updatedTimeStart = updatedTimeStart
	builder.updatedTimeStartFlag = true
	return builder
}

// 异动更新时间 - 搜索范围结束
//
// 示例值：1704084635000
func (builder *SearchJobChangeReqBodyBuilder) UpdatedTimeEnd(updatedTimeEnd string) *SearchJobChangeReqBodyBuilder {
	builder.updatedTimeEnd = updatedTimeEnd
	builder.updatedTimeEndFlag = true
	return builder
}

func (builder *SearchJobChangeReqBodyBuilder) Build() *SearchJobChangeReqBody {
	req := &SearchJobChangeReqBody{}
	if builder.employmentIdsFlag {
		req.EmploymentIds = builder.employmentIds
	}
	if builder.jobChangeIdsFlag {
		req.JobChangeIds = builder.jobChangeIds
	}
	if builder.statusesFlag {
		req.Statuses = builder.statuses
	}
	if builder.effectiveDateStartFlag {
		req.EffectiveDateStart = &builder.effectiveDateStart
	}
	if builder.effectiveDateEndFlag {
		req.EffectiveDateEnd = &builder.effectiveDateEnd
	}
	if builder.updatedTimeStartFlag {
		req.UpdatedTimeStart = &builder.updatedTimeStart
	}
	if builder.updatedTimeEndFlag {
		req.UpdatedTimeEnd = &builder.updatedTimeEnd
	}
	return req
}

type SearchJobChangePathReqBodyBuilder struct {
	employmentIds          []string
	employmentIdsFlag      bool
	jobChangeIds           []string
	jobChangeIdsFlag       bool
	statuses               []string
	statusesFlag           bool
	effectiveDateStart     string
	effectiveDateStartFlag bool
	effectiveDateEnd       string
	effectiveDateEndFlag   bool
	updatedTimeStart       string
	updatedTimeStartFlag   bool
	updatedTimeEnd         string
	updatedTimeEndFlag     bool
}

func NewSearchJobChangePathReqBodyBuilder() *SearchJobChangePathReqBodyBuilder {
	builder := &SearchJobChangePathReqBodyBuilder{}
	return builder
}

// 雇员 ID 列表
//
// 示例值：
func (builder *SearchJobChangePathReqBodyBuilder) EmploymentIds(employmentIds []string) *SearchJobChangePathReqBodyBuilder {
	builder.employmentIds = employmentIds
	builder.employmentIdsFlag = true
	return builder
}

// 异动记录 ID 列表
//
// 示例值：
func (builder *SearchJobChangePathReqBodyBuilder) JobChangeIds(jobChangeIds []string) *SearchJobChangePathReqBodyBuilder {
	builder.jobChangeIds = jobChangeIds
	builder.jobChangeIdsFlag = true
	return builder
}

// 异动状态，多个状态之间为「或」的关系
//
// 示例值：Approved
func (builder *SearchJobChangePathReqBodyBuilder) Statuses(statuses []string) *SearchJobChangePathReqBodyBuilder {
	builder.statuses = statuses
	builder.statusesFlag = true
	return builder
}

// 异动生效日期 - 搜索范围开始，需要与搜索范围结束一同使用
//
// 示例值：2022-01-01
func (builder *SearchJobChangePathReqBodyBuilder) EffectiveDateStart(effectiveDateStart string) *SearchJobChangePathReqBodyBuilder {
	builder.effectiveDateStart = effectiveDateStart
	builder.effectiveDateStartFlag = true
	return builder
}

// 异动生效日期 - 搜索范围结束
//
// 示例值：2022-01-01
func (builder *SearchJobChangePathReqBodyBuilder) EffectiveDateEnd(effectiveDateEnd string) *SearchJobChangePathReqBodyBuilder {
	builder.effectiveDateEnd = effectiveDateEnd
	builder.effectiveDateEndFlag = true
	return builder
}

// 异动更新时间 - 搜索范围开始，需要与搜索范围结束一同使用
//
// 示例值：1704084635000
func (builder *SearchJobChangePathReqBodyBuilder) UpdatedTimeStart(updatedTimeStart string) *SearchJobChangePathReqBodyBuilder {
	builder.updatedTimeStart = updatedTimeStart
	builder.updatedTimeStartFlag = true
	return builder
}

// 异动更新时间 - 搜索范围结束
//
// 示例值：1704084635000
func (builder *SearchJobChangePathReqBodyBuilder) UpdatedTimeEnd(updatedTimeEnd string) *SearchJobChangePathReqBodyBuilder {
	builder.updatedTimeEnd = updatedTimeEnd
	builder.updatedTimeEndFlag = true
	return builder
}

func (builder *SearchJobChangePathReqBodyBuilder) Build() (*SearchJobChangeReqBody, error) {
	req := &SearchJobChangeReqBody{}
	if builder.employmentIdsFlag {
		req.EmploymentIds = builder.employmentIds
	}
	if builder.jobChangeIdsFlag {
		req.JobChangeIds = builder.jobChangeIds
	}
	if builder.statusesFlag {
		req.Statuses = builder.statuses
	}
	if builder.effectiveDateStartFlag {
		req.EffectiveDateStart = &builder.effectiveDateStart
	}
	if builder.effectiveDateEndFlag {
		req.EffectiveDateEnd = &builder.effectiveDateEnd
	}
	if builder.updatedTimeStartFlag {
		req.UpdatedTimeStart = &builder.updatedTimeStart
	}
	if builder.updatedTimeEndFlag {
		req.UpdatedTimeEnd = &builder.updatedTimeEnd
	}
	return req, nil
}

type SearchJobChangeReqBuilder struct {
	apiReq *larkcore.ApiReq
	body   *SearchJobChangeReqBody
	limit  int // 最大返回多少记录，当使用迭代器访问时才有效
}

func NewSearchJobChangeReqBuilder() *SearchJobChangeReqBuilder {
	builder := &SearchJobChangeReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 最大返回多少记录，当使用迭代器访问时才有效
func (builder *SearchJobChangeReqBuilder) Limit(limit int) *SearchJobChangeReqBuilder {
	builder.limit = limit
	return builder
}

// 分页大小，最大 100
//
// 示例值：100
func (builder *SearchJobChangeReqBuilder) PageSize(pageSize int) *SearchJobChangeReqBuilder {
	builder.apiReq.QueryParams.Set("page_size", fmt.Sprint(pageSize))
	return builder
}

// 分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果
//
// 示例值：6891251722631890445
func (builder *SearchJobChangeReqBuilder) PageToken(pageToken string) *SearchJobChangeReqBuilder {
	builder.apiReq.QueryParams.Set("page_token", fmt.Sprint(pageToken))
	return builder
}

// 用户 ID 类型
//
// 示例值：open_id
func (builder *SearchJobChangeReqBuilder) UserIdType(userIdType string) *SearchJobChangeReqBuilder {
	builder.apiReq.QueryParams.Set("user_id_type", fmt.Sprint(userIdType))
	return builder
}

// 此次调用中使用的部门 ID 类型
//
// 示例值：open_department_id
func (builder *SearchJobChangeReqBuilder) DepartmentIdType(departmentIdType string) *SearchJobChangeReqBuilder {
	builder.apiReq.QueryParams.Set("department_id_type", fmt.Sprint(departmentIdType))
	return builder
}

// 获取员工异动列表
func (builder *SearchJobChangeReqBuilder) Body(body *SearchJobChangeReqBody) *SearchJobChangeReqBuilder {
	builder.body = body
	return builder
}

func (builder *SearchJobChangeReqBuilder) Build() *SearchJobChangeReq {
	req := &SearchJobChangeReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.Limit = builder.limit
	req.apiReq.QueryParams = builder.apiReq.QueryParams
	req.apiReq.Body = builder.body
	return req
}

type SearchJobChangeReqBody struct {
	EmploymentIds      []string `json:"employment_ids,omitempty"`       // 雇员 ID 列表
	JobChangeIds       []string `json:"job_change_ids,omitempty"`       // 异动记录 ID 列表
	Statuses           []string `json:"statuses,omitempty"`             // 异动状态，多个状态之间为「或」的关系
	EffectiveDateStart *string  `json:"effective_date_start,omitempty"` // 异动生效日期 - 搜索范围开始，需要与搜索范围结束一同使用
	EffectiveDateEnd   *string  `json:"effective_date_end,omitempty"`   // 异动生效日期 - 搜索范围结束
	UpdatedTimeStart   *string  `json:"updated_time_start,omitempty"`   // 异动更新时间 - 搜索范围开始，需要与搜索范围结束一同使用
	UpdatedTimeEnd     *string  `json:"updated_time_end,omitempty"`     // 异动更新时间 - 搜索范围结束
}

type SearchJobChangeReq struct {
	apiReq *larkcore.ApiReq
	Body   *SearchJobChangeReqBody `body:""`
	Limit  int                     // 最多返回多少记录，只有在使用迭代器访问时，才有效

}

type SearchJobChangeRespData struct {
	Items     []*JobChange `json:"items,omitempty"`      // 员工异动列表
	HasMore   *bool        `json:"has_more,omitempty"`   // 是否有下一页
	PageToken *string      `json:"page_token,omitempty"` // 下一页页码
}

type SearchJobChangeResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *SearchJobChangeRespData `json:"data"` // 业务数据
}

func (resp *SearchJobChangeResp) Success() bool {
	return resp.Code == 0
}

type BatchGetJobFamilyReqBodyBuilder struct {
	jobFamilyIds     []string // 序列 ID 列表
	jobFamilyIdsFlag bool
}

func NewBatchGetJobFamilyReqBodyBuilder() *BatchGetJobFamilyReqBodyBuilder {
	builder := &BatchGetJobFamilyReqBodyBuilder{}
	return builder
}

// 序列 ID 列表
//
// 示例值：
func (builder *BatchGetJobFamilyReqBodyBuilder) JobFamilyIds(jobFamilyIds []string) *BatchGetJobFamilyReqBodyBuilder {
	builder.jobFamilyIds = jobFamilyIds
	builder.jobFamilyIdsFlag = true
	return builder
}

func (builder *BatchGetJobFamilyReqBodyBuilder) Build() *BatchGetJobFamilyReqBody {
	req := &BatchGetJobFamilyReqBody{}
	if builder.jobFamilyIdsFlag {
		req.JobFamilyIds = builder.jobFamilyIds
	}
	return req
}

type BatchGetJobFamilyPathReqBodyBuilder struct {
	jobFamilyIds     []string
	jobFamilyIdsFlag bool
}

func NewBatchGetJobFamilyPathReqBodyBuilder() *BatchGetJobFamilyPathReqBodyBuilder {
	builder := &BatchGetJobFamilyPathReqBodyBuilder{}
	return builder
}

// 序列 ID 列表
//
// 示例值：
func (builder *BatchGetJobFamilyPathReqBodyBuilder) JobFamilyIds(jobFamilyIds []string) *BatchGetJobFamilyPathReqBodyBuilder {
	builder.jobFamilyIds = jobFamilyIds
	builder.jobFamilyIdsFlag = true
	return builder
}

func (builder *BatchGetJobFamilyPathReqBodyBuilder) Build() (*BatchGetJobFamilyReqBody, error) {
	req := &BatchGetJobFamilyReqBody{}
	if builder.jobFamilyIdsFlag {
		req.JobFamilyIds = builder.jobFamilyIds
	}
	return req, nil
}

type BatchGetJobFamilyReqBuilder struct {
	apiReq *larkcore.ApiReq
	body   *BatchGetJobFamilyReqBody
}

func NewBatchGetJobFamilyReqBuilder() *BatchGetJobFamilyReqBuilder {
	builder := &BatchGetJobFamilyReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 通过序列 ID 批量获取序列信息
func (builder *BatchGetJobFamilyReqBuilder) Body(body *BatchGetJobFamilyReqBody) *BatchGetJobFamilyReqBuilder {
	builder.body = body
	return builder
}

func (builder *BatchGetJobFamilyReqBuilder) Build() *BatchGetJobFamilyReq {
	req := &BatchGetJobFamilyReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.Body = builder.body
	return req
}

type BatchGetJobFamilyReqBody struct {
	JobFamilyIds []string `json:"job_family_ids,omitempty"` // 序列 ID 列表
}

type BatchGetJobFamilyReq struct {
	apiReq *larkcore.ApiReq
	Body   *BatchGetJobFamilyReqBody `body:""`
}

type BatchGetJobFamilyRespData struct {
	Items []*JobFamily `json:"items,omitempty"` // 查询的序列信息
}

type BatchGetJobFamilyResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *BatchGetJobFamilyRespData `json:"data"` // 业务数据
}

func (resp *BatchGetJobFamilyResp) Success() bool {
	return resp.Code == 0
}

type BatchGetJobLevelReqBodyBuilder struct {
	jobLevelIds     []string // 职级 ID 列表
	jobLevelIdsFlag bool
}

func NewBatchGetJobLevelReqBodyBuilder() *BatchGetJobLevelReqBodyBuilder {
	builder := &BatchGetJobLevelReqBodyBuilder{}
	return builder
}

// 职级 ID 列表
//
// 示例值：
func (builder *BatchGetJobLevelReqBodyBuilder) JobLevelIds(jobLevelIds []string) *BatchGetJobLevelReqBodyBuilder {
	builder.jobLevelIds = jobLevelIds
	builder.jobLevelIdsFlag = true
	return builder
}

func (builder *BatchGetJobLevelReqBodyBuilder) Build() *BatchGetJobLevelReqBody {
	req := &BatchGetJobLevelReqBody{}
	if builder.jobLevelIdsFlag {
		req.JobLevelIds = builder.jobLevelIds
	}
	return req
}

type BatchGetJobLevelPathReqBodyBuilder struct {
	jobLevelIds     []string
	jobLevelIdsFlag bool
}

func NewBatchGetJobLevelPathReqBodyBuilder() *BatchGetJobLevelPathReqBodyBuilder {
	builder := &BatchGetJobLevelPathReqBodyBuilder{}
	return builder
}

// 职级 ID 列表
//
// 示例值：
func (builder *BatchGetJobLevelPathReqBodyBuilder) JobLevelIds(jobLevelIds []string) *BatchGetJobLevelPathReqBodyBuilder {
	builder.jobLevelIds = jobLevelIds
	builder.jobLevelIdsFlag = true
	return builder
}

func (builder *BatchGetJobLevelPathReqBodyBuilder) Build() (*BatchGetJobLevelReqBody, error) {
	req := &BatchGetJobLevelReqBody{}
	if builder.jobLevelIdsFlag {
		req.JobLevelIds = builder.jobLevelIds
	}
	return req, nil
}

type BatchGetJobLevelReqBuilder struct {
	apiReq *larkcore.ApiReq
	body   *BatchGetJobLevelReqBody
}

func NewBatchGetJobLevelReqBuilder() *BatchGetJobLevelReqBuilder {
	builder := &BatchGetJobLevelReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 通过职级 ID 批量获取职级信息
func (builder *BatchGetJobLevelReqBuilder) Body(body *BatchGetJobLevelReqBody) *BatchGetJobLevelReqBuilder {
	builder.body = body
	return builder
}

func (builder *BatchGetJobLevelReqBuilder) Build() *BatchGetJobLevelReq {
	req := &BatchGetJobLevelReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.Body = builder.body
	return req
}

type BatchGetJobLevelReqBody struct {
	JobLevelIds []string `json:"job_level_ids,omitempty"` // 职级 ID 列表
}

type BatchGetJobLevelReq struct {
	apiReq *larkcore.ApiReq
	Body   *BatchGetJobLevelReqBody `body:""`
}

type BatchGetJobLevelRespData struct {
	Items []*JobLevel `json:"items,omitempty"` // 查询的职级信息
}

type BatchGetJobLevelResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *BatchGetJobLevelRespData `json:"data"` // 业务数据
}

func (resp *BatchGetJobLevelResp) Success() bool {
	return resp.Code == 0
}

type BatchGetLocationReqBodyBuilder struct {
	locationIds     []string // 地点 ID 列表
	locationIdsFlag bool
}

func NewBatchGetLocationReqBodyBuilder() *BatchGetLocationReqBodyBuilder {
	builder := &BatchGetLocationReqBodyBuilder{}
	return builder
}

// 地点 ID 列表
//
// 示例值：
func (builder *BatchGetLocationReqBodyBuilder) LocationIds(locationIds []string) *BatchGetLocationReqBodyBuilder {
	builder.locationIds = locationIds
	builder.locationIdsFlag = true
	return builder
}

func (builder *BatchGetLocationReqBodyBuilder) Build() *BatchGetLocationReqBody {
	req := &BatchGetLocationReqBody{}
	if builder.locationIdsFlag {
		req.LocationIds = builder.locationIds
	}
	return req
}

type BatchGetLocationPathReqBodyBuilder struct {
	locationIds     []string
	locationIdsFlag bool
}

func NewBatchGetLocationPathReqBodyBuilder() *BatchGetLocationPathReqBodyBuilder {
	builder := &BatchGetLocationPathReqBodyBuilder{}
	return builder
}

// 地点 ID 列表
//
// 示例值：
func (builder *BatchGetLocationPathReqBodyBuilder) LocationIds(locationIds []string) *BatchGetLocationPathReqBodyBuilder {
	builder.locationIds = locationIds
	builder.locationIdsFlag = true
	return builder
}

func (builder *BatchGetLocationPathReqBodyBuilder) Build() (*BatchGetLocationReqBody, error) {
	req := &BatchGetLocationReqBody{}
	if builder.locationIdsFlag {
		req.LocationIds = builder.locationIds
	}
	return req, nil
}

type BatchGetLocationReqBuilder struct {
	apiReq *larkcore.ApiReq
	body   *BatchGetLocationReqBody
}

func NewBatchGetLocationReqBuilder() *BatchGetLocationReqBuilder {
	builder := &BatchGetLocationReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 通过地点 ID 批量获取地点信息
func (builder *BatchGetLocationReqBuilder) Body(body *BatchGetLocationReqBody) *BatchGetLocationReqBuilder {
	builder.body = body
	return builder
}

func (builder *BatchGetLocationReqBuilder) Build() *BatchGetLocationReq {
	req := &BatchGetLocationReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.Body = builder.body
	return req
}

type BatchGetLocationReqBody struct {
	LocationIds []string `json:"location_ids,omitempty"` // 地点 ID 列表
}

type BatchGetLocationReq struct {
	apiReq *larkcore.ApiReq
	Body   *BatchGetLocationReqBody `body:""`
}

type BatchGetLocationRespData struct {
	Items []*Location `json:"items,omitempty"` // 查询的地点信息
}

type BatchGetLocationResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *BatchGetLocationRespData `json:"data"` // 业务数据
}

func (resp *BatchGetLocationResp) Success() bool {
	return resp.Code == 0
}

type CreatePersonReqBuilder struct {
	apiReq     *larkcore.ApiReq
	personInfo *PersonInfo
}

func NewCreatePersonReqBuilder() *CreatePersonReqBuilder {
	builder := &CreatePersonReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 根据client_token是否一致来判断是否为同一请求
//
// 示例值：12454646
func (builder *CreatePersonReqBuilder) ClientToken(clientToken string) *CreatePersonReqBuilder {
	builder.apiReq.QueryParams.Set("client_token", fmt.Sprint(clientToken))
	return builder
}

// 创建个人信息数据
func (builder *CreatePersonReqBuilder) PersonInfo(personInfo *PersonInfo) *CreatePersonReqBuilder {
	builder.personInfo = personInfo
	return builder
}

func (builder *CreatePersonReqBuilder) Build() *CreatePersonReq {
	req := &CreatePersonReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.QueryParams = builder.apiReq.QueryParams
	req.apiReq.Body = builder.personInfo
	return req
}

type CreatePersonReq struct {
	apiReq     *larkcore.ApiReq
	PersonInfo *PersonInfo `body:""`
}

type CreatePersonRespData struct {
	Person *PersonInfo `json:"person,omitempty"` //
}

type CreatePersonResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *CreatePersonRespData `json:"data"` // 业务数据
}

func (resp *CreatePersonResp) Success() bool {
	return resp.Code == 0
}

type PatchPersonReqBuilder struct {
	apiReq     *larkcore.ApiReq
	personInfo *PersonInfo
}

func NewPatchPersonReqBuilder() *PatchPersonReqBuilder {
	builder := &PatchPersonReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// person的ID
//
// 示例值：12454646
func (builder *PatchPersonReqBuilder) PersonId(personId string) *PatchPersonReqBuilder {
	builder.apiReq.PathParams.Set("person_id", fmt.Sprint(personId))
	return builder
}

// 根据client_token是否一致来判断是否为同一请求
//
// 示例值：12454646
func (builder *PatchPersonReqBuilder) ClientToken(clientToken string) *PatchPersonReqBuilder {
	builder.apiReq.QueryParams.Set("client_token", fmt.Sprint(clientToken))
	return builder
}

// 根据no_need_query判断更新后是否做查询请求并返回个人信息
//
// 示例值：false
func (builder *PatchPersonReqBuilder) NoNeedQuery(noNeedQuery bool) *PatchPersonReqBuilder {
	builder.apiReq.QueryParams.Set("no_need_query", fmt.Sprint(noNeedQuery))
	return builder
}

func (builder *PatchPersonReqBuilder) PersonInfo(personInfo *PersonInfo) *PatchPersonReqBuilder {
	builder.personInfo = personInfo
	return builder
}

func (builder *PatchPersonReqBuilder) Build() *PatchPersonReq {
	req := &PatchPersonReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.PathParams = builder.apiReq.PathParams
	req.apiReq.QueryParams = builder.apiReq.QueryParams
	req.apiReq.Body = builder.personInfo
	return req
}

type PatchPersonReq struct {
	apiReq     *larkcore.ApiReq
	PersonInfo *PersonInfo `body:""`
}

type PatchPersonRespData struct {
	Person *PersonInfo `json:"person,omitempty"` //
}

type PatchPersonResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *PatchPersonRespData `json:"data"` // 业务数据
}

func (resp *PatchPersonResp) Success() bool {
	return resp.Code == 0
}

type CreatePreHireReqBuilder struct {
	apiReq        *larkcore.ApiReq
	prehireCreate *PrehireCreate
}

func NewCreatePreHireReqBuilder() *CreatePreHireReqBuilder {
	builder := &CreatePreHireReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 创建待入职人员
func (builder *CreatePreHireReqBuilder) PrehireCreate(prehireCreate *PrehireCreate) *CreatePreHireReqBuilder {
	builder.prehireCreate = prehireCreate
	return builder
}

func (builder *CreatePreHireReqBuilder) Build() *CreatePreHireReq {
	req := &CreatePreHireReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.Body = builder.prehireCreate
	return req
}

type CreatePreHireReq struct {
	apiReq        *larkcore.ApiReq
	PrehireCreate *PrehireCreate `body:""`
}

type CreatePreHireRespData struct {
	PreHireId *string `json:"pre_hire_id,omitempty"` // 待入职 ID
}

type CreatePreHireResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *CreatePreHireRespData `json:"data"` // 业务数据
}

func (resp *CreatePreHireResp) Success() bool {
	return resp.Code == 0
}

type SearchPreHireReqBodyBuilder struct {
	workerIds               []string // 待入职人员工号列表
	workerIdsFlag           bool
	preHireIds              []string // 待入职人员 ID 列表
	preHireIdsFlag          bool
	onboardingDateStart     string // 入职日期-搜索范围开始，需要与搜索范围结束一同使用
	onboardingDateStartFlag bool
	onboardingDateEnd       string // 入职日期-搜索范围结束
	onboardingDateEndFlag   bool

	onboardingLocationIds     []string // 入职地点 ID 列表
	onboardingLocationIdsFlag bool
	onboardingStatus          string // 入职状态
	onboardingStatusFlag      bool
	departmentIds             []string // 部门 ID 列表
	departmentIdsFlag         bool
	directManagerIds          []string // 直接上级的雇佣 ID 列表
	directManagerIdsFlag      bool
	employeeTypeIds           []string // 人员类型 ID 列表
	employeeTypeIdsFlag       bool
	jobFamilyIds              []string // 序列 ID 列表
	jobFamilyIdsFlag          bool
	keyWord                   string // 搜索关键字，支持对常用名模糊搜索 + 工号精确搜索
	keyWordFlag               bool
	rehire                    string // 是否离职重聘
	rehireFlag                bool
	fields                    []string // 返回数据的字段列表，填写方式：;- 为空时只返回 pre_hire_id;- 不为空时按照传入的字段返回数据，格式如下：;	- person_info 字段：person_info.gender，person_info.age;	- employment_info 字段：employment_info.department;	- onboarding_info 字段：onboarding_info.onboarding_date;	- probation_info 字段：probation_info.probation_period;	- contract_info 字段：contract_info.contract_type;- 如果要返回所有下级，只用传上级结构体名称，例如 person_info;- 返回数据越多，查询接口性能越慢，请按需填写返回字段
	fieldsFlag                bool
}

func NewSearchPreHireReqBodyBuilder() *SearchPreHireReqBodyBuilder {
	builder := &SearchPreHireReqBodyBuilder{}
	return builder
}

// 待入职人员工号列表
//
// 示例值：
func (builder *SearchPreHireReqBodyBuilder) WorkerIds(workerIds []string) *SearchPreHireReqBodyBuilder {
	builder.workerIds = workerIds
	builder.workerIdsFlag = true
	return builder
}

// 待入职人员 ID 列表
//
// 示例值：
func (builder *SearchPreHireReqBodyBuilder) PreHireIds(preHireIds []string) *SearchPreHireReqBodyBuilder {
	builder.preHireIds = preHireIds
	builder.preHireIdsFlag = true
	return builder
}

// 入职日期-搜索范围开始，需要与搜索范围结束一同使用
//
// 示例值：2006-01-02
func (builder *SearchPreHireReqBodyBuilder) OnboardingDateStart(onboardingDateStart string) *SearchPreHireReqBodyBuilder {
	builder.onboardingDateStart = onboardingDateStart
	builder.onboardingDateStartFlag = true
	return builder
}

// 入职日期-搜索范围结束
//
// 示例值：2006-01-02
func (builder *SearchPreHireReqBodyBuilder) OnboardingDateEnd(onboardingDateEnd string) *SearchPreHireReqBodyBuilder {
	builder.onboardingDateEnd = onboardingDateEnd
	builder.onboardingDateEndFlag = true
	return builder
}

// 入职地点 ID 列表
//
// 示例值：
func (builder *SearchPreHireReqBodyBuilder) OnboardingLocationIds(onboardingLocationIds []string) *SearchPreHireReqBodyBuilder {
	builder.onboardingLocationIds = onboardingLocationIds
	builder.onboardingLocationIdsFlag = true
	return builder
}

// 入职状态
//
// 示例值：待入职(preboarding)
func (builder *SearchPreHireReqBodyBuilder) OnboardingStatus(onboardingStatus string) *SearchPreHireReqBodyBuilder {
	builder.onboardingStatus = onboardingStatus
	builder.onboardingStatusFlag = true
	return builder
}

// 部门 ID 列表
//
// 示例值：
func (builder *SearchPreHireReqBodyBuilder) DepartmentIds(departmentIds []string) *SearchPreHireReqBodyBuilder {
	builder.departmentIds = departmentIds
	builder.departmentIdsFlag = true
	return builder
}

// 直接上级的雇佣 ID 列表
//
// 示例值：
func (builder *SearchPreHireReqBodyBuilder) DirectManagerIds(directManagerIds []string) *SearchPreHireReqBodyBuilder {
	builder.directManagerIds = directManagerIds
	builder.directManagerIdsFlag = true
	return builder
}

// 人员类型 ID 列表
//
// 示例值：
func (builder *SearchPreHireReqBodyBuilder) EmployeeTypeIds(employeeTypeIds []string) *SearchPreHireReqBodyBuilder {
	builder.employeeTypeIds = employeeTypeIds
	builder.employeeTypeIdsFlag = true
	return builder
}

// 序列 ID 列表
//
// 示例值：
func (builder *SearchPreHireReqBodyBuilder) JobFamilyIds(jobFamilyIds []string) *SearchPreHireReqBodyBuilder {
	builder.jobFamilyIds = jobFamilyIds
	builder.jobFamilyIdsFlag = true
	return builder
}

// 搜索关键字，支持对常用名模糊搜索 + 工号精确搜索
//
// 示例值：张三
func (builder *SearchPreHireReqBodyBuilder) KeyWord(keyWord string) *SearchPreHireReqBodyBuilder {
	builder.keyWord = keyWord
	builder.keyWordFlag = true
	return builder
}

// 是否离职重聘
//
// 示例值：张三
func (builder *SearchPreHireReqBodyBuilder) Rehire(rehire string) *SearchPreHireReqBodyBuilder {
	builder.rehire = rehire
	builder.rehireFlag = true
	return builder
}

// 返回数据的字段列表，填写方式：;- 为空时只返回 pre_hire_id;- 不为空时按照传入的字段返回数据，格式如下：;	- person_info 字段：person_info.gender，person_info.age;	- employment_info 字段：employment_info.department;	- onboarding_info 字段：onboarding_info.onboarding_date;	- probation_info 字段：probation_info.probation_period;	- contract_info 字段：contract_info.contract_type;- 如果要返回所有下级，只用传上级结构体名称，例如 person_info;- 返回数据越多，查询接口性能越慢，请按需填写返回字段
//
// 示例值：\["person_info","employment_info.department","probation_info.probation_period"\]
func (builder *SearchPreHireReqBodyBuilder) Fields(fields []string) *SearchPreHireReqBodyBuilder {
	builder.fields = fields
	builder.fieldsFlag = true
	return builder
}

func (builder *SearchPreHireReqBodyBuilder) Build() *SearchPreHireReqBody {
	req := &SearchPreHireReqBody{}
	if builder.workerIdsFlag {
		req.WorkerIds = builder.workerIds
	}
	if builder.preHireIdsFlag {
		req.PreHireIds = builder.preHireIds
	}
	if builder.onboardingDateStartFlag {
		req.OnboardingDateStart = &builder.onboardingDateStart
	}
	if builder.onboardingDateEndFlag {
		req.OnboardingDateEnd = &builder.onboardingDateEnd
	}
	if builder.onboardingLocationIdsFlag {
		req.OnboardingLocationIds = builder.onboardingLocationIds
	}
	if builder.onboardingStatusFlag {
		req.OnboardingStatus = &builder.onboardingStatus
	}
	if builder.departmentIdsFlag {
		req.DepartmentIds = builder.departmentIds
	}
	if builder.directManagerIdsFlag {
		req.DirectManagerIds = builder.directManagerIds
	}
	if builder.employeeTypeIdsFlag {
		req.EmployeeTypeIds = builder.employeeTypeIds
	}
	if builder.jobFamilyIdsFlag {
		req.JobFamilyIds = builder.jobFamilyIds
	}
	if builder.keyWordFlag {
		req.KeyWord = &builder.keyWord
	}
	if builder.rehireFlag {
		req.Rehire = &builder.rehire
	}
	if builder.fieldsFlag {
		req.Fields = builder.fields
	}
	return req
}

type SearchPreHirePathReqBodyBuilder struct {
	workerIds                 []string
	workerIdsFlag             bool
	preHireIds                []string
	preHireIdsFlag            bool
	onboardingDateStart       string
	onboardingDateStartFlag   bool
	onboardingDateEnd         string
	onboardingDateEndFlag     bool
	updatedDateStart          string
	updatedDateStartFlag      bool
	updatedDateEnd            string
	updatedDateEndFlag        bool
	onboardingLocationIds     []string
	onboardingLocationIdsFlag bool
	onboardingStatus          string
	onboardingStatusFlag      bool
	departmentIds             []string
	departmentIdsFlag         bool
	directManagerIds          []string
	directManagerIdsFlag      bool
	employeeTypeIds           []string
	employeeTypeIdsFlag       bool
	jobFamilyIds              []string
	jobFamilyIdsFlag          bool
	keyWord                   string
	keyWordFlag               bool
	rehire                    string
	rehireFlag                bool
	fields                    []string
	fieldsFlag                bool
}

func NewSearchPreHirePathReqBodyBuilder() *SearchPreHirePathReqBodyBuilder {
	builder := &SearchPreHirePathReqBodyBuilder{}
	return builder
}

// 待入职人员工号列表
//
// 示例值：
func (builder *SearchPreHirePathReqBodyBuilder) WorkerIds(workerIds []string) *SearchPreHirePathReqBodyBuilder {
	builder.workerIds = workerIds
	builder.workerIdsFlag = true
	return builder
}

// 待入职人员 ID 列表
//
// 示例值：
func (builder *SearchPreHirePathReqBodyBuilder) PreHireIds(preHireIds []string) *SearchPreHirePathReqBodyBuilder {
	builder.preHireIds = preHireIds
	builder.preHireIdsFlag = true
	return builder
}

// 入职日期-搜索范围开始，需要与搜索范围结束一同使用
//
// 示例值：2006-01-02
func (builder *SearchPreHirePathReqBodyBuilder) OnboardingDateStart(onboardingDateStart string) *SearchPreHirePathReqBodyBuilder {
	builder.onboardingDateStart = onboardingDateStart
	builder.onboardingDateStartFlag = true
	return builder
}

// 入职日期-搜索范围结束
//
// 示例值：2006-01-02
func (builder *SearchPreHirePathReqBodyBuilder) OnboardingDateEnd(onboardingDateEnd string) *SearchPreHirePathReqBodyBuilder {
	builder.onboardingDateEnd = onboardingDateEnd
	builder.onboardingDateEndFlag = true
	return builder
}

// 入职地点 ID 列表
//
// 示例值：
func (builder *SearchPreHirePathReqBodyBuilder) OnboardingLocationIds(onboardingLocationIds []string) *SearchPreHirePathReqBodyBuilder {
	builder.onboardingLocationIds = onboardingLocationIds
	builder.onboardingLocationIdsFlag = true
	return builder
}

// 入职状态
//
// 示例值：待入职(preboarding)
func (builder *SearchPreHirePathReqBodyBuilder) OnboardingStatus(onboardingStatus string) *SearchPreHirePathReqBodyBuilder {
	builder.onboardingStatus = onboardingStatus
	builder.onboardingStatusFlag = true
	return builder
}

// 部门 ID 列表
//
// 示例值：
func (builder *SearchPreHirePathReqBodyBuilder) DepartmentIds(departmentIds []string) *SearchPreHirePathReqBodyBuilder {
	builder.departmentIds = departmentIds
	builder.departmentIdsFlag = true
	return builder
}

// 直接上级的雇佣 ID 列表
//
// 示例值：
func (builder *SearchPreHirePathReqBodyBuilder) DirectManagerIds(directManagerIds []string) *SearchPreHirePathReqBodyBuilder {
	builder.directManagerIds = directManagerIds
	builder.directManagerIdsFlag = true
	return builder
}

// 人员类型 ID 列表
//
// 示例值：
func (builder *SearchPreHirePathReqBodyBuilder) EmployeeTypeIds(employeeTypeIds []string) *SearchPreHirePathReqBodyBuilder {
	builder.employeeTypeIds = employeeTypeIds
	builder.employeeTypeIdsFlag = true
	return builder
}

// 序列 ID 列表
//
// 示例值：
func (builder *SearchPreHirePathReqBodyBuilder) JobFamilyIds(jobFamilyIds []string) *SearchPreHirePathReqBodyBuilder {
	builder.jobFamilyIds = jobFamilyIds
	builder.jobFamilyIdsFlag = true
	return builder
}

// 搜索关键字，支持对常用名模糊搜索 + 工号精确搜索
//
// 示例值：张三
func (builder *SearchPreHirePathReqBodyBuilder) KeyWord(keyWord string) *SearchPreHirePathReqBodyBuilder {
	builder.keyWord = keyWord
	builder.keyWordFlag = true
	return builder
}

// 是否离职重聘
//
// 示例值：张三
func (builder *SearchPreHirePathReqBodyBuilder) Rehire(rehire string) *SearchPreHirePathReqBodyBuilder {
	builder.rehire = rehire
	builder.rehireFlag = true
	return builder
}

// 返回数据的字段列表，填写方式：;- 为空时只返回 pre_hire_id;- 不为空时按照传入的字段返回数据，格式如下：;	- person_info 字段：person_info.gender，person_info.age;	- employment_info 字段：employment_info.department;	- onboarding_info 字段：onboarding_info.onboarding_date;	- probation_info 字段：probation_info.probation_period;	- contract_info 字段：contract_info.contract_type;- 如果要返回所有下级，只用传上级结构体名称，例如 person_info;- 返回数据越多，查询接口性能越慢，请按需填写返回字段
//
// 示例值：\["person_info","employment_info.department","probation_info.probation_period"\]
func (builder *SearchPreHirePathReqBodyBuilder) Fields(fields []string) *SearchPreHirePathReqBodyBuilder {
	builder.fields = fields
	builder.fieldsFlag = true
	return builder
}

func (builder *SearchPreHirePathReqBodyBuilder) Build() (*SearchPreHireReqBody, error) {
	req := &SearchPreHireReqBody{}
	if builder.workerIdsFlag {
		req.WorkerIds = builder.workerIds
	}
	if builder.preHireIdsFlag {
		req.PreHireIds = builder.preHireIds
	}
	if builder.onboardingDateStartFlag {
		req.OnboardingDateStart = &builder.onboardingDateStart
	}
	if builder.onboardingDateEndFlag {
		req.OnboardingDateEnd = &builder.onboardingDateEnd
	}
	if builder.onboardingLocationIdsFlag {
		req.OnboardingLocationIds = builder.onboardingLocationIds
	}
	if builder.onboardingStatusFlag {
		req.OnboardingStatus = &builder.onboardingStatus
	}
	if builder.departmentIdsFlag {
		req.DepartmentIds = builder.departmentIds
	}
	if builder.directManagerIdsFlag {
		req.DirectManagerIds = builder.directManagerIds
	}
	if builder.employeeTypeIdsFlag {
		req.EmployeeTypeIds = builder.employeeTypeIds
	}
	if builder.jobFamilyIdsFlag {
		req.JobFamilyIds = builder.jobFamilyIds
	}
	if builder.keyWordFlag {
		req.KeyWord = &builder.keyWord
	}
	if builder.rehireFlag {
		req.Rehire = &builder.rehire
	}
	if builder.fieldsFlag {
		req.Fields = builder.fields
	}
	return req, nil
}

type SearchPreHireReqBuilder struct {
	apiReq *larkcore.ApiReq
	body   *SearchPreHireReqBody
	limit  int // 最大返回多少记录，当使用迭代器访问时才有效
}

func NewSearchPreHireReqBuilder() *SearchPreHireReqBuilder {
	builder := &SearchPreHireReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 最大返回多少记录，当使用迭代器访问时才有效
func (builder *SearchPreHireReqBuilder) Limit(limit int) *SearchPreHireReqBuilder {
	builder.limit = limit
	return builder
}

// 分页大小，最大 100
//
// 示例值：100
func (builder *SearchPreHireReqBuilder) PageSize(pageSize int) *SearchPreHireReqBuilder {
	builder.apiReq.QueryParams.Set("page_size", fmt.Sprint(pageSize))
	return builder
}

// 分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果
//
// 示例值：6891251722631890445
func (builder *SearchPreHireReqBuilder) PageToken(pageToken string) *SearchPreHireReqBuilder {
	builder.apiReq.QueryParams.Set("page_token", fmt.Sprint(pageToken))
	return builder
}

// 用户 ID 类型
//
// 示例值：open_id
func (builder *SearchPreHireReqBuilder) UserIdType(userIdType string) *SearchPreHireReqBuilder {
	builder.apiReq.QueryParams.Set("user_id_type", fmt.Sprint(userIdType))
	return builder
}

// 此次调用中使用的部门 ID 类型
//
// 示例值：open_department_id
func (builder *SearchPreHireReqBuilder) DepartmentIdType(departmentIdType string) *SearchPreHireReqBuilder {
	builder.apiReq.QueryParams.Set("department_id_type", fmt.Sprint(departmentIdType))
	return builder
}

// 根据部门 ID，上级部门查询部门列表
func (builder *SearchPreHireReqBuilder) Body(body *SearchPreHireReqBody) *SearchPreHireReqBuilder {
	builder.body = body
	return builder
}

func (builder *SearchPreHireReqBuilder) Build() *SearchPreHireReq {
	req := &SearchPreHireReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.Limit = builder.limit
	req.apiReq.QueryParams = builder.apiReq.QueryParams
	req.apiReq.Body = builder.body
	return req
}

type SearchPreHireReqBody struct {
	WorkerIds           []string `json:"worker_ids,omitempty"`            // 待入职人员工号列表
	PreHireIds          []string `json:"pre_hire_ids,omitempty"`          // 待入职人员 ID 列表
	OnboardingDateStart *string  `json:"onboarding_date_start,omitempty"` // 入职日期-搜索范围开始，需要与搜索范围结束一同使用
	OnboardingDateEnd   *string  `json:"onboarding_date_end,omitempty"`   // 入职日期-搜索范围结束

	OnboardingLocationIds []string `json:"onboarding_location_ids,omitempty"` // 入职地点 ID 列表
	OnboardingStatus      *string  `json:"onboarding_status,omitempty"`       // 入职状态
	DepartmentIds         []string `json:"department_ids,omitempty"`          // 部门 ID 列表
	DirectManagerIds      []string `json:"direct_manager_ids,omitempty"`      // 直接上级的雇佣 ID 列表
	EmployeeTypeIds       []string `json:"employee_type_ids,omitempty"`       // 人员类型 ID 列表
	JobFamilyIds          []string `json:"job_family_ids,omitempty"`          // 序列 ID 列表
	KeyWord               *string  `json:"key_word,omitempty"`                // 搜索关键字，支持对常用名模糊搜索 + 工号精确搜索
	Rehire                *string  `json:"rehire,omitempty"`                  // 是否离职重聘
	Fields                []string `json:"fields,omitempty"`                  // 返回数据的字段列表，填写方式：;- 为空时只返回 pre_hire_id;- 不为空时按照传入的字段返回数据，格式如下：;	- person_info 字段：person_info.gender，person_info.age;	- employment_info 字段：employment_info.department;	- onboarding_info 字段：onboarding_info.onboarding_date;	- probation_info 字段：probation_info.probation_period;	- contract_info 字段：contract_info.contract_type;- 如果要返回所有下级，只用传上级结构体名称，例如 person_info;- 返回数据越多，查询接口性能越慢，请按需填写返回字段
}

type SearchPreHireReq struct {
	apiReq *larkcore.ApiReq
	Body   *SearchPreHireReqBody `body:""`
	Limit  int                   // 最多返回多少记录，只有在使用迭代器访问时，才有效

}

type SearchPreHireRespData struct {
	Items     []*PreHire `json:"items,omitempty"`      // 查询的部门信息
	PageToken *string    `json:"page_token,omitempty"` // 下一页页码
	HasMore   *bool      `json:"has_more,omitempty"`   // 是否有下一页
}

type SearchPreHireResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *SearchPreHireRespData `json:"data"` // 业务数据
}

func (resp *SearchPreHireResp) Success() bool {
	return resp.Code == 0
}

type EnableDisableAssessmentProbationReqBodyBuilder struct {
	active     bool // 启用 / 停用状态。启用后可在试用期管理页面中可见试用期考核相关的字段。
	activeFlag bool
	appUrl     string // 试用期考核系统入口链接，当启用功能时该字段必填。
	appUrlFlag bool
}

func NewEnableDisableAssessmentProbationReqBodyBuilder() *EnableDisableAssessmentProbationReqBodyBuilder {
	builder := &EnableDisableAssessmentProbationReqBodyBuilder{}
	return builder
}

// 启用 / 停用状态。启用后可在试用期管理页面中可见试用期考核相关的字段。
//
// 示例值：true
func (builder *EnableDisableAssessmentProbationReqBodyBuilder) Active(active bool) *EnableDisableAssessmentProbationReqBodyBuilder {
	builder.active = active
	builder.activeFlag = true
	return builder
}

// 试用期考核系统入口链接，当启用功能时该字段必填。
//
// 示例值：https://qwe111.feishuapp.bytedance.net/ae/ui/apps/176612345027111/appPages/l11bsrwss13yt?dataGrid%41pye4fsbajo21l=%7B%7D&key=ffm41o1&dataGrid%41wmv98t29vif3kj=%1B%7D
func (builder *EnableDisableAssessmentProbationReqBodyBuilder) AppUrl(appUrl string) *EnableDisableAssessmentProbationReqBodyBuilder {
	builder.appUrl = appUrl
	builder.appUrlFlag = true
	return builder
}

func (builder *EnableDisableAssessmentProbationReqBodyBuilder) Build() *EnableDisableAssessmentProbationReqBody {
	req := &EnableDisableAssessmentProbationReqBody{}
	if builder.activeFlag {
		req.Active = &builder.active
	}
	if builder.appUrlFlag {
		req.AppUrl = &builder.appUrl
	}
	return req
}

type EnableDisableAssessmentProbationPathReqBodyBuilder struct {
	active     bool
	activeFlag bool
	appUrl     string
	appUrlFlag bool
}

func NewEnableDisableAssessmentProbationPathReqBodyBuilder() *EnableDisableAssessmentProbationPathReqBodyBuilder {
	builder := &EnableDisableAssessmentProbationPathReqBodyBuilder{}
	return builder
}

// 启用 / 停用状态。启用后可在试用期管理页面中可见试用期考核相关的字段。
//
// 示例值：true
func (builder *EnableDisableAssessmentProbationPathReqBodyBuilder) Active(active bool) *EnableDisableAssessmentProbationPathReqBodyBuilder {
	builder.active = active
	builder.activeFlag = true
	return builder
}

// 试用期考核系统入口链接，当启用功能时该字段必填。
//
// 示例值：https://qwe111.feishuapp.bytedance.net/ae/ui/apps/176612345027111/appPages/l11bsrwss13yt?dataGrid%41pye4fsbajo21l=%7B%7D&key=ffm41o1&dataGrid%41wmv98t29vif3kj=%1B%7D
func (builder *EnableDisableAssessmentProbationPathReqBodyBuilder) AppUrl(appUrl string) *EnableDisableAssessmentProbationPathReqBodyBuilder {
	builder.appUrl = appUrl
	builder.appUrlFlag = true
	return builder
}

func (builder *EnableDisableAssessmentProbationPathReqBodyBuilder) Build() (*EnableDisableAssessmentProbationReqBody, error) {
	req := &EnableDisableAssessmentProbationReqBody{}
	if builder.activeFlag {
		req.Active = &builder.active
	}
	if builder.appUrlFlag {
		req.AppUrl = &builder.appUrl
	}
	return req, nil
}

type EnableDisableAssessmentProbationReqBuilder struct {
	apiReq *larkcore.ApiReq
	body   *EnableDisableAssessmentProbationReqBody
}

func NewEnableDisableAssessmentProbationReqBuilder() *EnableDisableAssessmentProbationReqBuilder {
	builder := &EnableDisableAssessmentProbationReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

func (builder *EnableDisableAssessmentProbationReqBuilder) Body(body *EnableDisableAssessmentProbationReqBody) *EnableDisableAssessmentProbationReqBuilder {
	builder.body = body
	return builder
}

func (builder *EnableDisableAssessmentProbationReqBuilder) Build() *EnableDisableAssessmentProbationReq {
	req := &EnableDisableAssessmentProbationReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.Body = builder.body
	return req
}

type EnableDisableAssessmentProbationReqBody struct {
	Active *bool   `json:"active,omitempty"`  // 启用 / 停用状态。启用后可在试用期管理页面中可见试用期考核相关的字段。
	AppUrl *string `json:"app_url,omitempty"` // 试用期考核系统入口链接，当启用功能时该字段必填。
}

type EnableDisableAssessmentProbationReq struct {
	apiReq *larkcore.ApiReq
	Body   *EnableDisableAssessmentProbationReqBody `body:""`
}

type EnableDisableAssessmentProbationResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
}

func (resp *EnableDisableAssessmentProbationResp) Success() bool {
	return resp.Code == 0
}

type SearchProbationReqBodyBuilder struct {
	employmentIds                     []string // 雇佣 ID 列表
	employmentIdsFlag                 bool
	departmentIds                     []string // 部门 ID 列表
	departmentIdsFlag                 bool
	probationStartDateStart           string // 试用期开始日期 - 搜索范围开始，需要与搜索范围结束一同使用
	probationStartDateStartFlag       bool
	probationStartDateEnd             string // 试用期开始日期 - 搜索范围结束
	probationStartDateEndFlag         bool
	probationExpectedEndDateStart     string // 试用期预计结束日期 - 搜索范围开始，需要与搜索范围结束一同使用
	probationExpectedEndDateStartFlag bool
	probationExpectedEndDateEnd       string // 试用期预计结束日期 - 搜索范围结束
	probationExpectedEndDateEndFlag   bool
	actualProbationEndDateStart       string // 试用期实际结束日期 - 搜索范围开始，需要与搜索范围结束一同使用
	actualProbationEndDateStartFlag   bool
	actualProbationEndDateEnd         string // 试用期实际结束日期 - 搜索范围结束
	actualProbationEndDateEndFlag     bool
	initiatingTimeStart               string // 转正发起日期 - 搜索范围开始，需要与搜索范围结束一同使用
	initiatingTimeStartFlag           bool
	initiatingTimeEnd                 string // 转正发起日期 - 搜索范围结束
	initiatingTimeEndFlag             bool
	probationStatus                   string // 试用期状态
	probationStatusFlag               bool
	finalAssessmentResult             string // 试用期最终考核结果
	finalAssessmentResultFlag         bool
	finalAssessmentGrade              string // 试用期最终考核等级
	finalAssessmentGradeFlag          bool
}

func NewSearchProbationReqBodyBuilder() *SearchProbationReqBodyBuilder {
	builder := &SearchProbationReqBodyBuilder{}
	return builder
}

// 雇佣 ID 列表
//
// 示例值：
func (builder *SearchProbationReqBodyBuilder) EmploymentIds(employmentIds []string) *SearchProbationReqBodyBuilder {
	builder.employmentIds = employmentIds
	builder.employmentIdsFlag = true
	return builder
}

// 部门 ID 列表
//
// 示例值：
func (builder *SearchProbationReqBodyBuilder) DepartmentIds(departmentIds []string) *SearchProbationReqBodyBuilder {
	builder.departmentIds = departmentIds
	builder.departmentIdsFlag = true
	return builder
}

// 试用期开始日期 - 搜索范围开始，需要与搜索范围结束一同使用
//
// 示例值：2022-05-18
func (builder *SearchProbationReqBodyBuilder) ProbationStartDateStart(probationStartDateStart string) *SearchProbationReqBodyBuilder {
	builder.probationStartDateStart = probationStartDateStart
	builder.probationStartDateStartFlag = true
	return builder
}

// 试用期开始日期 - 搜索范围结束
//
// 示例值：2022-05-20
func (builder *SearchProbationReqBodyBuilder) ProbationStartDateEnd(probationStartDateEnd string) *SearchProbationReqBodyBuilder {
	builder.probationStartDateEnd = probationStartDateEnd
	builder.probationStartDateEndFlag = true
	return builder
}

// 试用期预计结束日期 - 搜索范围开始，需要与搜索范围结束一同使用
//
// 示例值：2022-06-20
func (builder *SearchProbationReqBodyBuilder) ProbationExpectedEndDateStart(probationExpectedEndDateStart string) *SearchProbationReqBodyBuilder {
	builder.probationExpectedEndDateStart = probationExpectedEndDateStart
	builder.probationExpectedEndDateStartFlag = true
	return builder
}

// 试用期预计结束日期 - 搜索范围结束
//
// 示例值：2022-07-20
func (builder *SearchProbationReqBodyBuilder) ProbationExpectedEndDateEnd(probationExpectedEndDateEnd string) *SearchProbationReqBodyBuilder {
	builder.probationExpectedEndDateEnd = probationExpectedEndDateEnd
	builder.probationExpectedEndDateEndFlag = true
	return builder
}

// 试用期实际结束日期 - 搜索范围开始，需要与搜索范围结束一同使用
//
// 示例值：2022-08-20
func (builder *SearchProbationReqBodyBuilder) ActualProbationEndDateStart(actualProbationEndDateStart string) *SearchProbationReqBodyBuilder {
	builder.actualProbationEndDateStart = actualProbationEndDateStart
	builder.actualProbationEndDateStartFlag = true
	return builder
}

// 试用期实际结束日期 - 搜索范围结束
//
// 示例值：2022-09-20
func (builder *SearchProbationReqBodyBuilder) ActualProbationEndDateEnd(actualProbationEndDateEnd string) *SearchProbationReqBodyBuilder {
	builder.actualProbationEndDateEnd = actualProbationEndDateEnd
	builder.actualProbationEndDateEndFlag = true
	return builder
}

// 转正发起日期 - 搜索范围开始，需要与搜索范围结束一同使用
//
// 示例值：2022-10-20
func (builder *SearchProbationReqBodyBuilder) InitiatingTimeStart(initiatingTimeStart string) *SearchProbationReqBodyBuilder {
	builder.initiatingTimeStart = initiatingTimeStart
	builder.initiatingTimeStartFlag = true
	return builder
}

// 转正发起日期 - 搜索范围结束
//
// 示例值：2022-11-20
func (builder *SearchProbationReqBodyBuilder) InitiatingTimeEnd(initiatingTimeEnd string) *SearchProbationReqBodyBuilder {
	builder.initiatingTimeEnd = initiatingTimeEnd
	builder.initiatingTimeEndFlag = true
	return builder
}

// 试用期状态
//
// 示例值：approved
func (builder *SearchProbationReqBodyBuilder) ProbationStatus(probationStatus string) *SearchProbationReqBodyBuilder {
	builder.probationStatus = probationStatus
	builder.probationStatusFlag = true
	return builder
}

// 试用期最终考核结果
//
// 示例值：approved
func (builder *SearchProbationReqBodyBuilder) FinalAssessmentResult(finalAssessmentResult string) *SearchProbationReqBodyBuilder {
	builder.finalAssessmentResult = finalAssessmentResult
	builder.finalAssessmentResultFlag = true
	return builder
}

// 试用期最终考核等级
//
// 示例值：grade_a
func (builder *SearchProbationReqBodyBuilder) FinalAssessmentGrade(finalAssessmentGrade string) *SearchProbationReqBodyBuilder {
	builder.finalAssessmentGrade = finalAssessmentGrade
	builder.finalAssessmentGradeFlag = true
	return builder
}

func (builder *SearchProbationReqBodyBuilder) Build() *SearchProbationReqBody {
	req := &SearchProbationReqBody{}
	if builder.employmentIdsFlag {
		req.EmploymentIds = builder.employmentIds
	}
	if builder.departmentIdsFlag {
		req.DepartmentIds = builder.departmentIds
	}
	if builder.probationStartDateStartFlag {
		req.ProbationStartDateStart = &builder.probationStartDateStart
	}
	if builder.probationStartDateEndFlag {
		req.ProbationStartDateEnd = &builder.probationStartDateEnd
	}
	if builder.probationExpectedEndDateStartFlag {
		req.ProbationExpectedEndDateStart = &builder.probationExpectedEndDateStart
	}
	if builder.probationExpectedEndDateEndFlag {
		req.ProbationExpectedEndDateEnd = &builder.probationExpectedEndDateEnd
	}
	if builder.actualProbationEndDateStartFlag {
		req.ActualProbationEndDateStart = &builder.actualProbationEndDateStart
	}
	if builder.actualProbationEndDateEndFlag {
		req.ActualProbationEndDateEnd = &builder.actualProbationEndDateEnd
	}
	if builder.initiatingTimeStartFlag {
		req.InitiatingTimeStart = &builder.initiatingTimeStart
	}
	if builder.initiatingTimeEndFlag {
		req.InitiatingTimeEnd = &builder.initiatingTimeEnd
	}
	if builder.probationStatusFlag {
		req.ProbationStatus = &builder.probationStatus
	}
	if builder.finalAssessmentResultFlag {
		req.FinalAssessmentResult = &builder.finalAssessmentResult
	}
	if builder.finalAssessmentGradeFlag {
		req.FinalAssessmentGrade = &builder.finalAssessmentGrade
	}
	return req
}

type SearchProbationPathReqBodyBuilder struct {
	employmentIds                     []string
	employmentIdsFlag                 bool
	departmentIds                     []string
	departmentIdsFlag                 bool
	probationStartDateStart           string
	probationStartDateStartFlag       bool
	probationStartDateEnd             string
	probationStartDateEndFlag         bool
	probationExpectedEndDateStart     string
	probationExpectedEndDateStartFlag bool
	probationExpectedEndDateEnd       string
	probationExpectedEndDateEndFlag   bool
	actualProbationEndDateStart       string
	actualProbationEndDateStartFlag   bool
	actualProbationEndDateEnd         string
	actualProbationEndDateEndFlag     bool
	initiatingTimeStart               string
	initiatingTimeStartFlag           bool
	initiatingTimeEnd                 string
	initiatingTimeEndFlag             bool
	probationStatus                   string
	probationStatusFlag               bool
	finalAssessmentResult             string
	finalAssessmentResultFlag         bool
	finalAssessmentGrade              string
	finalAssessmentGradeFlag          bool
}

func NewSearchProbationPathReqBodyBuilder() *SearchProbationPathReqBodyBuilder {
	builder := &SearchProbationPathReqBodyBuilder{}
	return builder
}

// 雇佣 ID 列表
//
// 示例值：
func (builder *SearchProbationPathReqBodyBuilder) EmploymentIds(employmentIds []string) *SearchProbationPathReqBodyBuilder {
	builder.employmentIds = employmentIds
	builder.employmentIdsFlag = true
	return builder
}

// 部门 ID 列表
//
// 示例值：
func (builder *SearchProbationPathReqBodyBuilder) DepartmentIds(departmentIds []string) *SearchProbationPathReqBodyBuilder {
	builder.departmentIds = departmentIds
	builder.departmentIdsFlag = true
	return builder
}

// 试用期开始日期 - 搜索范围开始，需要与搜索范围结束一同使用
//
// 示例值：2022-05-18
func (builder *SearchProbationPathReqBodyBuilder) ProbationStartDateStart(probationStartDateStart string) *SearchProbationPathReqBodyBuilder {
	builder.probationStartDateStart = probationStartDateStart
	builder.probationStartDateStartFlag = true
	return builder
}

// 试用期开始日期 - 搜索范围结束
//
// 示例值：2022-05-20
func (builder *SearchProbationPathReqBodyBuilder) ProbationStartDateEnd(probationStartDateEnd string) *SearchProbationPathReqBodyBuilder {
	builder.probationStartDateEnd = probationStartDateEnd
	builder.probationStartDateEndFlag = true
	return builder
}

// 试用期预计结束日期 - 搜索范围开始，需要与搜索范围结束一同使用
//
// 示例值：2022-06-20
func (builder *SearchProbationPathReqBodyBuilder) ProbationExpectedEndDateStart(probationExpectedEndDateStart string) *SearchProbationPathReqBodyBuilder {
	builder.probationExpectedEndDateStart = probationExpectedEndDateStart
	builder.probationExpectedEndDateStartFlag = true
	return builder
}

// 试用期预计结束日期 - 搜索范围结束
//
// 示例值：2022-07-20
func (builder *SearchProbationPathReqBodyBuilder) ProbationExpectedEndDateEnd(probationExpectedEndDateEnd string) *SearchProbationPathReqBodyBuilder {
	builder.probationExpectedEndDateEnd = probationExpectedEndDateEnd
	builder.probationExpectedEndDateEndFlag = true
	return builder
}

// 试用期实际结束日期 - 搜索范围开始，需要与搜索范围结束一同使用
//
// 示例值：2022-08-20
func (builder *SearchProbationPathReqBodyBuilder) ActualProbationEndDateStart(actualProbationEndDateStart string) *SearchProbationPathReqBodyBuilder {
	builder.actualProbationEndDateStart = actualProbationEndDateStart
	builder.actualProbationEndDateStartFlag = true
	return builder
}

// 试用期实际结束日期 - 搜索范围结束
//
// 示例值：2022-09-20
func (builder *SearchProbationPathReqBodyBuilder) ActualProbationEndDateEnd(actualProbationEndDateEnd string) *SearchProbationPathReqBodyBuilder {
	builder.actualProbationEndDateEnd = actualProbationEndDateEnd
	builder.actualProbationEndDateEndFlag = true
	return builder
}

// 转正发起日期 - 搜索范围开始，需要与搜索范围结束一同使用
//
// 示例值：2022-10-20
func (builder *SearchProbationPathReqBodyBuilder) InitiatingTimeStart(initiatingTimeStart string) *SearchProbationPathReqBodyBuilder {
	builder.initiatingTimeStart = initiatingTimeStart
	builder.initiatingTimeStartFlag = true
	return builder
}

// 转正发起日期 - 搜索范围结束
//
// 示例值：2022-11-20
func (builder *SearchProbationPathReqBodyBuilder) InitiatingTimeEnd(initiatingTimeEnd string) *SearchProbationPathReqBodyBuilder {
	builder.initiatingTimeEnd = initiatingTimeEnd
	builder.initiatingTimeEndFlag = true
	return builder
}

// 试用期状态
//
// 示例值：approved
func (builder *SearchProbationPathReqBodyBuilder) ProbationStatus(probationStatus string) *SearchProbationPathReqBodyBuilder {
	builder.probationStatus = probationStatus
	builder.probationStatusFlag = true
	return builder
}

// 试用期最终考核结果
//
// 示例值：approved
func (builder *SearchProbationPathReqBodyBuilder) FinalAssessmentResult(finalAssessmentResult string) *SearchProbationPathReqBodyBuilder {
	builder.finalAssessmentResult = finalAssessmentResult
	builder.finalAssessmentResultFlag = true
	return builder
}

// 试用期最终考核等级
//
// 示例值：grade_a
func (builder *SearchProbationPathReqBodyBuilder) FinalAssessmentGrade(finalAssessmentGrade string) *SearchProbationPathReqBodyBuilder {
	builder.finalAssessmentGrade = finalAssessmentGrade
	builder.finalAssessmentGradeFlag = true
	return builder
}

func (builder *SearchProbationPathReqBodyBuilder) Build() (*SearchProbationReqBody, error) {
	req := &SearchProbationReqBody{}
	if builder.employmentIdsFlag {
		req.EmploymentIds = builder.employmentIds
	}
	if builder.departmentIdsFlag {
		req.DepartmentIds = builder.departmentIds
	}
	if builder.probationStartDateStartFlag {
		req.ProbationStartDateStart = &builder.probationStartDateStart
	}
	if builder.probationStartDateEndFlag {
		req.ProbationStartDateEnd = &builder.probationStartDateEnd
	}
	if builder.probationExpectedEndDateStartFlag {
		req.ProbationExpectedEndDateStart = &builder.probationExpectedEndDateStart
	}
	if builder.probationExpectedEndDateEndFlag {
		req.ProbationExpectedEndDateEnd = &builder.probationExpectedEndDateEnd
	}
	if builder.actualProbationEndDateStartFlag {
		req.ActualProbationEndDateStart = &builder.actualProbationEndDateStart
	}
	if builder.actualProbationEndDateEndFlag {
		req.ActualProbationEndDateEnd = &builder.actualProbationEndDateEnd
	}
	if builder.initiatingTimeStartFlag {
		req.InitiatingTimeStart = &builder.initiatingTimeStart
	}
	if builder.initiatingTimeEndFlag {
		req.InitiatingTimeEnd = &builder.initiatingTimeEnd
	}
	if builder.probationStatusFlag {
		req.ProbationStatus = &builder.probationStatus
	}
	if builder.finalAssessmentResultFlag {
		req.FinalAssessmentResult = &builder.finalAssessmentResult
	}
	if builder.finalAssessmentGradeFlag {
		req.FinalAssessmentGrade = &builder.finalAssessmentGrade
	}
	return req, nil
}

type SearchProbationReqBuilder struct {
	apiReq *larkcore.ApiReq
	body   *SearchProbationReqBody
	limit  int // 最大返回多少记录，当使用迭代器访问时才有效
}

func NewSearchProbationReqBuilder() *SearchProbationReqBuilder {
	builder := &SearchProbationReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 最大返回多少记录，当使用迭代器访问时才有效
func (builder *SearchProbationReqBuilder) Limit(limit int) *SearchProbationReqBuilder {
	builder.limit = limit
	return builder
}

// 分页大小，最大 100
//
// 示例值：100
func (builder *SearchProbationReqBuilder) PageSize(pageSize int) *SearchProbationReqBuilder {
	builder.apiReq.QueryParams.Set("page_size", fmt.Sprint(pageSize))
	return builder
}

// 分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果
//
// 示例值：6891251722631890445
func (builder *SearchProbationReqBuilder) PageToken(pageToken string) *SearchProbationReqBuilder {
	builder.apiReq.QueryParams.Set("page_token", fmt.Sprint(pageToken))
	return builder
}

// 用户 ID 类型
//
// 示例值：open_id
func (builder *SearchProbationReqBuilder) UserIdType(userIdType string) *SearchProbationReqBuilder {
	builder.apiReq.QueryParams.Set("user_id_type", fmt.Sprint(userIdType))
	return builder
}

// 此次调用中使用的部门 ID 类型
//
// 示例值：open_department_id
func (builder *SearchProbationReqBuilder) DepartmentIdType(departmentIdType string) *SearchProbationReqBuilder {
	builder.apiReq.QueryParams.Set("department_id_type", fmt.Sprint(departmentIdType))
	return builder
}

func (builder *SearchProbationReqBuilder) Body(body *SearchProbationReqBody) *SearchProbationReqBuilder {
	builder.body = body
	return builder
}

func (builder *SearchProbationReqBuilder) Build() *SearchProbationReq {
	req := &SearchProbationReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.Limit = builder.limit
	req.apiReq.QueryParams = builder.apiReq.QueryParams
	req.apiReq.Body = builder.body
	return req
}

type SearchProbationReqBody struct {
	EmploymentIds                 []string `json:"employment_ids,omitempty"`                    // 雇佣 ID 列表
	DepartmentIds                 []string `json:"department_ids,omitempty"`                    // 部门 ID 列表
	ProbationStartDateStart       *string  `json:"probation_start_date_start,omitempty"`        // 试用期开始日期 - 搜索范围开始，需要与搜索范围结束一同使用
	ProbationStartDateEnd         *string  `json:"probation_start_date_end,omitempty"`          // 试用期开始日期 - 搜索范围结束
	ProbationExpectedEndDateStart *string  `json:"probation_expected_end_date_start,omitempty"` // 试用期预计结束日期 - 搜索范围开始，需要与搜索范围结束一同使用
	ProbationExpectedEndDateEnd   *string  `json:"probation_expected_end_date_end,omitempty"`   // 试用期预计结束日期 - 搜索范围结束
	ActualProbationEndDateStart   *string  `json:"actual_probation_end_date_start,omitempty"`   // 试用期实际结束日期 - 搜索范围开始，需要与搜索范围结束一同使用
	ActualProbationEndDateEnd     *string  `json:"actual_probation_end_date_end,omitempty"`     // 试用期实际结束日期 - 搜索范围结束
	InitiatingTimeStart           *string  `json:"initiating_time_start,omitempty"`             // 转正发起日期 - 搜索范围开始，需要与搜索范围结束一同使用
	InitiatingTimeEnd             *string  `json:"initiating_time_end,omitempty"`               // 转正发起日期 - 搜索范围结束
	ProbationStatus               *string  `json:"probation_status,omitempty"`                  // 试用期状态
	FinalAssessmentResult         *string  `json:"final_assessment_result,omitempty"`           // 试用期最终考核结果
	FinalAssessmentGrade          *string  `json:"final_assessment_grade,omitempty"`            // 试用期最终考核等级
}

type SearchProbationReq struct {
	apiReq *larkcore.ApiReq
	Body   *SearchProbationReqBody `body:""`
	Limit  int                     // 最多返回多少记录，只有在使用迭代器访问时，才有效

}

type SearchProbationRespData struct {
	Items     []*ProbationInfo `json:"items,omitempty"`      // 查询的试用期信息
	PageToken *string          `json:"page_token,omitempty"` // 下一页页码
	HasMore   *bool            `json:"has_more,omitempty"`   // 是否有下一页
}

type SearchProbationResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *SearchProbationRespData `json:"data"` // 业务数据
}

func (resp *SearchProbationResp) Success() bool {
	return resp.Code == 0
}

type CreateProbationAssessmentReqBodyBuilder struct {
	employmentId     string // 试用期人员的雇佣 ID
	employmentIdFlag bool
	assessments      []*AssessmentForCreate // 试用期考核结果列表
	assessmentsFlag  bool
}

func NewCreateProbationAssessmentReqBodyBuilder() *CreateProbationAssessmentReqBodyBuilder {
	builder := &CreateProbationAssessmentReqBodyBuilder{}
	return builder
}

// 试用期人员的雇佣 ID
//
// 示例值：7140964208476371111
func (builder *CreateProbationAssessmentReqBodyBuilder) EmploymentId(employmentId string) *CreateProbationAssessmentReqBodyBuilder {
	builder.employmentId = employmentId
	builder.employmentIdFlag = true
	return builder
}

// 试用期考核结果列表
//
// 示例值：
func (builder *CreateProbationAssessmentReqBodyBuilder) Assessments(assessments []*AssessmentForCreate) *CreateProbationAssessmentReqBodyBuilder {
	builder.assessments = assessments
	builder.assessmentsFlag = true
	return builder
}

func (builder *CreateProbationAssessmentReqBodyBuilder) Build() *CreateProbationAssessmentReqBody {
	req := &CreateProbationAssessmentReqBody{}
	if builder.employmentIdFlag {
		req.EmploymentId = &builder.employmentId
	}
	if builder.assessmentsFlag {
		req.Assessments = builder.assessments
	}
	return req
}

type CreateProbationAssessmentPathReqBodyBuilder struct {
	employmentId     string
	employmentIdFlag bool
	assessments      []*AssessmentForCreate
	assessmentsFlag  bool
}

func NewCreateProbationAssessmentPathReqBodyBuilder() *CreateProbationAssessmentPathReqBodyBuilder {
	builder := &CreateProbationAssessmentPathReqBodyBuilder{}
	return builder
}

// 试用期人员的雇佣 ID
//
// 示例值：7140964208476371111
func (builder *CreateProbationAssessmentPathReqBodyBuilder) EmploymentId(employmentId string) *CreateProbationAssessmentPathReqBodyBuilder {
	builder.employmentId = employmentId
	builder.employmentIdFlag = true
	return builder
}

// 试用期考核结果列表
//
// 示例值：
func (builder *CreateProbationAssessmentPathReqBodyBuilder) Assessments(assessments []*AssessmentForCreate) *CreateProbationAssessmentPathReqBodyBuilder {
	builder.assessments = assessments
	builder.assessmentsFlag = true
	return builder
}

func (builder *CreateProbationAssessmentPathReqBodyBuilder) Build() (*CreateProbationAssessmentReqBody, error) {
	req := &CreateProbationAssessmentReqBody{}
	if builder.employmentIdFlag {
		req.EmploymentId = &builder.employmentId
	}
	if builder.assessmentsFlag {
		req.Assessments = builder.assessments
	}
	return req, nil
}

type CreateProbationAssessmentReqBuilder struct {
	apiReq *larkcore.ApiReq
	body   *CreateProbationAssessmentReqBody
}

func NewCreateProbationAssessmentReqBuilder() *CreateProbationAssessmentReqBuilder {
	builder := &CreateProbationAssessmentReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 根据 client_token 是否一致来判断是否为同一请求
//
// 示例值：6822122262122064111
func (builder *CreateProbationAssessmentReqBuilder) ClientToken(clientToken string) *CreateProbationAssessmentReqBuilder {
	builder.apiReq.QueryParams.Set("client_token", fmt.Sprint(clientToken))
	return builder
}

// 用户 ID 类型
//
// 示例值：open_id
func (builder *CreateProbationAssessmentReqBuilder) UserIdType(userIdType string) *CreateProbationAssessmentReqBuilder {
	builder.apiReq.QueryParams.Set("user_id_type", fmt.Sprint(userIdType))
	return builder
}

func (builder *CreateProbationAssessmentReqBuilder) Body(body *CreateProbationAssessmentReqBody) *CreateProbationAssessmentReqBuilder {
	builder.body = body
	return builder
}

func (builder *CreateProbationAssessmentReqBuilder) Build() *CreateProbationAssessmentReq {
	req := &CreateProbationAssessmentReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.QueryParams = builder.apiReq.QueryParams
	req.apiReq.Body = builder.body
	return req
}

type CreateProbationAssessmentReqBody struct {
	EmploymentId *string                `json:"employment_id,omitempty"` // 试用期人员的雇佣 ID
	Assessments  []*AssessmentForCreate `json:"assessments,omitempty"`   // 试用期考核结果列表
}

type CreateProbationAssessmentReq struct {
	apiReq *larkcore.ApiReq
	Body   *CreateProbationAssessmentReqBody `body:""`
}

type CreateProbationAssessmentRespData struct {
	AssessmentIds []string `json:"assessment_ids,omitempty"` // 创建的试用期考核记录 ID 列表，有序返回
}

type CreateProbationAssessmentResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *CreateProbationAssessmentRespData `json:"data"` // 业务数据
}

func (resp *CreateProbationAssessmentResp) Success() bool {
	return resp.Code == 0
}

type DeleteProbationAssessmentReqBuilder struct {
	apiReq *larkcore.ApiReq
}

func NewDeleteProbationAssessmentReqBuilder() *DeleteProbationAssessmentReqBuilder {
	builder := &DeleteProbationAssessmentReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 考核结果 ID
//
// 示例值：7140964208476371331
func (builder *DeleteProbationAssessmentReqBuilder) AssessmentId(assessmentId string) *DeleteProbationAssessmentReqBuilder {
	builder.apiReq.PathParams.Set("assessment_id", fmt.Sprint(assessmentId))
	return builder
}

func (builder *DeleteProbationAssessmentReqBuilder) Build() *DeleteProbationAssessmentReq {
	req := &DeleteProbationAssessmentReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.PathParams = builder.apiReq.PathParams
	return req
}

type DeleteProbationAssessmentReq struct {
	apiReq *larkcore.ApiReq
}

type DeleteProbationAssessmentResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
}

func (resp *DeleteProbationAssessmentResp) Success() bool {
	return resp.Code == 0
}

type PatchProbationAssessmentReqBuilder struct {
	apiReq              *larkcore.ApiReq
	assessmentForCreate *AssessmentForCreate
}

func NewPatchProbationAssessmentReqBuilder() *PatchProbationAssessmentReqBuilder {
	builder := &PatchProbationAssessmentReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 考核结果 ID
//
// 示例值：7140964208476371331
func (builder *PatchProbationAssessmentReqBuilder) AssessmentId(assessmentId string) *PatchProbationAssessmentReqBuilder {
	builder.apiReq.PathParams.Set("assessment_id", fmt.Sprint(assessmentId))
	return builder
}

// 根据 client_token 是否一致来判断是否为同一请求
//
// 示例值：6822122262122064111
func (builder *PatchProbationAssessmentReqBuilder) ClientToken(clientToken string) *PatchProbationAssessmentReqBuilder {
	builder.apiReq.QueryParams.Set("client_token", fmt.Sprint(clientToken))
	return builder
}

func (builder *PatchProbationAssessmentReqBuilder) AssessmentForCreate(assessmentForCreate *AssessmentForCreate) *PatchProbationAssessmentReqBuilder {
	builder.assessmentForCreate = assessmentForCreate
	return builder
}

func (builder *PatchProbationAssessmentReqBuilder) Build() *PatchProbationAssessmentReq {
	req := &PatchProbationAssessmentReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.PathParams = builder.apiReq.PathParams
	req.apiReq.QueryParams = builder.apiReq.QueryParams
	req.apiReq.Body = builder.assessmentForCreate
	return req
}

type PatchProbationAssessmentReq struct {
	apiReq              *larkcore.ApiReq
	AssessmentForCreate *AssessmentForCreate `body:""`
}

type PatchProbationAssessmentResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
}

func (resp *PatchProbationAssessmentResp) Success() bool {
	return resp.Code == 0
}

type GetProcessReqBuilder struct {
	apiReq *larkcore.ApiReq
}

func NewGetProcessReqBuilder() *GetProcessReqBuilder {
	builder := &GetProcessReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 流程ID
//
// 示例值：7278949005675988535
func (builder *GetProcessReqBuilder) ProcessId(processId string) *GetProcessReqBuilder {
	builder.apiReq.PathParams.Set("process_id", fmt.Sprint(processId))
	return builder
}

// 用户 ID 类型
//
// 示例值：open_id
func (builder *GetProcessReqBuilder) UserIdType(userIdType string) *GetProcessReqBuilder {
	builder.apiReq.QueryParams.Set("user_id_type", fmt.Sprint(userIdType))
	return builder
}

func (builder *GetProcessReqBuilder) Build() *GetProcessReq {
	req := &GetProcessReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.PathParams = builder.apiReq.PathParams
	req.apiReq.QueryParams = builder.apiReq.QueryParams
	return req
}

type GetProcessReq struct {
	apiReq *larkcore.ApiReq
}

type GetProcessRespData struct {
	ProcessId          *string                `json:"process_id,omitempty"`           // 流程实例ID
	Status             *int                   `json:"status,omitempty"`               // 流程状态
	FlowTemplateId     *string                `json:"flow_template_id,omitempty"`     // 业务类型ID
	FlowTemplateName   *DataengineI18n        `json:"flow_template_name,omitempty"`   // 业务类型名称
	FlowDefinitionId   *string                `json:"flow_definition_id,omitempty"`   // 流程定义ID
	FlowDefinitionName *DataengineI18n        `json:"flow_definition_name,omitempty"` // 流程定义名称
	InitiatorId        *string                `json:"initiator_id,omitempty"`         // 流程发起人ID
	InitiatorName      *DataengineI18n        `json:"initiator_name,omitempty"`       // 流程发起人姓名
	CreateTime         *string                `json:"create_time,omitempty"`          // 流程发起时间，Unix毫秒时间戳
	CompleteTime       *string                `json:"complete_time,omitempty"`        // 流程结束时间，Unix毫秒时间戳
	StartLinks         *ProcessLink           `json:"start_links,omitempty"`          // 发起单据地址
	Abstracts          []*ProcessAbstractItem `json:"abstracts,omitempty"`            // 流程摘要，会随着流程流转发生变化
	Todos              []*ProcessTodoItem     `json:"todos,omitempty"`                // 待办列表
	CcList             []*ProcessCcItem       `json:"cc_list,omitempty"`              // 抄送列表
	DoneList           []*ProcessDoneItem     `json:"done_list,omitempty"`            // 已办列表
}

type GetProcessResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *GetProcessRespData `json:"data"` // 业务数据
}

func (resp *GetProcessResp) Success() bool {
	return resp.Code == 0
}

type ListProcessReqBuilder struct {
	apiReq *larkcore.ApiReq
	limit  int // 最大返回多少记录，当使用迭代器访问时才有效
}

func NewListProcessReqBuilder() *ListProcessReqBuilder {
	builder := &ListProcessReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 最大返回多少记录，当使用迭代器访问时才有效
func (builder *ListProcessReqBuilder) Limit(limit int) *ListProcessReqBuilder {
	builder.limit = limit
	return builder
}

// 任务查询结束时间 (unix毫秒时间戳)，闭区间，开始时间和结束时间跨度不能超过31天
//
// 示例值：1547654251506
func (builder *ListProcessReqBuilder) ModifyTimeTo(modifyTimeTo string) *ListProcessReqBuilder {
	builder.apiReq.QueryParams.Set("modify_time_to", fmt.Sprint(modifyTimeTo))
	return builder
}

// 查询状态列表
//
// 示例值：
func (builder *ListProcessReqBuilder) Statuses(statuses []int) *ListProcessReqBuilder {
	for _, v := range statuses {
		builder.apiReq.QueryParams.Add("statuses", fmt.Sprint(v))
	}
	return builder
}

// 分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果
//
// 示例值：7278949005675988535
func (builder *ListProcessReqBuilder) PageToken(pageToken string) *ListProcessReqBuilder {
	builder.apiReq.QueryParams.Set("page_token", fmt.Sprint(pageToken))
	return builder
}

// 分页大小
//
// 示例值：100
func (builder *ListProcessReqBuilder) PageSize(pageSize int) *ListProcessReqBuilder {
	builder.apiReq.QueryParams.Set("page_size", fmt.Sprint(pageSize))
	return builder
}

// 查询开始时间（unix毫秒时间戳），闭区间，开始时间和结束时间跨度不能超过31天
//
// 示例值：1547654251506
func (builder *ListProcessReqBuilder) ModifyTimeFrom(modifyTimeFrom string) *ListProcessReqBuilder {
	builder.apiReq.QueryParams.Set("modify_time_from", fmt.Sprint(modifyTimeFrom))
	return builder
}

// 流程定义ID
//
// 示例值：people_6961286846093788680_7081951411982077732
func (builder *ListProcessReqBuilder) FlowDefinitionId(flowDefinitionId string) *ListProcessReqBuilder {
	builder.apiReq.QueryParams.Set("flow_definition_id", fmt.Sprint(flowDefinitionId))
	return builder
}

func (builder *ListProcessReqBuilder) Build() *ListProcessReq {
	req := &ListProcessReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.Limit = builder.limit
	req.apiReq.QueryParams = builder.apiReq.QueryParams
	return req
}

type ListProcessReq struct {
	apiReq *larkcore.ApiReq
	Limit  int // 最多返回多少记录，只有在使用迭代器访问时，才有效

}

type ListProcessRespData struct {
	ProcessIds []string `json:"process_ids,omitempty"` // 流程实例ID列表
	HasMore    *bool    `json:"has_more,omitempty"`    // 是否还有更多项
	PageToken  *string  `json:"page_token,omitempty"`  // 有更多项时的分页键
}

type ListProcessResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *ListProcessRespData `json:"data"` // 业务数据
}

func (resp *ListProcessResp) Success() bool {
	return resp.Code == 0
}

type P2ProbationUpdatedV2Data struct {
	EmploymentId           *string `json:"employment_id,omitempty"`             // 雇佣 ID
	ProbationStatus        *string `json:"probation_status,omitempty"`          // 试用期状态
	ActualProbationEndDate *string `json:"actual_probation_end_date,omitempty"` // 试用期实际结束日期
}

type P2ProbationUpdatedV2 struct {
	*larkevent.EventV2Base                           // 事件基础数据
	*larkevent.EventReq                              // 请求原生数据
	Event                  *P2ProbationUpdatedV2Data `json:"event"` // 事件内容
}

func (m *P2ProbationUpdatedV2) RawReq(req *larkevent.EventReq) {
	m.EventReq = req
}

type P2ProcessUpdatedV2Data struct {
	ProcessId *string `json:"process_id,omitempty"` // 流程实例ID
	Status    *int    `json:"status,omitempty"`     // 变更后状态：1 发起/进行中，9 完成，2拒绝，4 撤回，8 撤销
	BizType   *string `json:"biz_type,omitempty"`   // 业务类型
}

type P2ProcessUpdatedV2 struct {
	*larkevent.EventV2Base                         // 事件基础数据
	*larkevent.EventReq                            // 请求原生数据
	Event                  *P2ProcessUpdatedV2Data `json:"event"` // 事件内容
}

func (m *P2ProcessUpdatedV2) RawReq(req *larkevent.EventReq) {
	m.EventReq = req
}

type P2ProcessApproverUpdatedV2Data struct {
	ProcessId  *string `json:"process_id,omitempty"`  // 流程实例ID
	ApproverId *string `json:"approver_id,omitempty"` // 单据ID
	Type       *int    `json:"type,omitempty"`        // 单据类型
	Status     *int    `json:"status,omitempty"`      // 单据状态
	BizType    *string `json:"biz_type,omitempty"`    // 业务类型
}

type P2ProcessApproverUpdatedV2 struct {
	*larkevent.EventV2Base                                 // 事件基础数据
	*larkevent.EventReq                                    // 请求原生数据
	Event                  *P2ProcessApproverUpdatedV2Data `json:"event"` // 事件内容
}

func (m *P2ProcessApproverUpdatedV2) RawReq(req *larkevent.EventReq) {
	m.EventReq = req
}

type P2ProcessCcUpdatedV2Data struct {
	ProcessId  *string `json:"process_id,omitempty"`  // 流程实例ID
	ApproverId *string `json:"approver_id,omitempty"` // 抄送单据ID
	Status     *int    `json:"status,omitempty"`      // 单据状态
	BizType    *string `json:"biz_type,omitempty"`    // 业务类型
}

type P2ProcessCcUpdatedV2 struct {
	*larkevent.EventV2Base                           // 事件基础数据
	*larkevent.EventReq                              // 请求原生数据
	Event                  *P2ProcessCcUpdatedV2Data `json:"event"` // 事件内容
}

func (m *P2ProcessCcUpdatedV2) RawReq(req *larkevent.EventReq) {
	m.EventReq = req
}

type P2ProcessNodeUpdatedV2Data struct {
	FlowDefinitionId *string `json:"flow_definition_id,omitempty"` // 流程定义id
	NodeDefinitionId *string `json:"node_definition_id,omitempty"` // 节点定义id
	ProcessId        *string `json:"process_id,omitempty"`         // 流程运行实例id
	ProcessNodeId    *string `json:"process_node_id,omitempty"`    // 节点运行实例id
	NodeType         *int    `json:"node_type,omitempty"`          // 节点类型
	NodeStatus       *int    `json:"node_status,omitempty"`        // 单据状态
	BizType          *string `json:"biz_type,omitempty"`           // 业务类型
}

type P2ProcessNodeUpdatedV2 struct {
	*larkevent.EventV2Base                             // 事件基础数据
	*larkevent.EventReq                                // 请求原生数据
	Event                  *P2ProcessNodeUpdatedV2Data `json:"event"` // 事件内容
}

func (m *P2ProcessNodeUpdatedV2) RawReq(req *larkevent.EventReq) {
	m.EventReq = req
}

type SearchBasicInfoBankIterator struct {
	nextPageToken *string
	items         []*Bank
	index         int
	limit         int
	ctx           context.Context
	req           *SearchBasicInfoBankReq
	listFunc      func(ctx context.Context, req *SearchBasicInfoBankReq, options ...larkcore.RequestOptionFunc) (*SearchBasicInfoBankResp, error)
	options       []larkcore.RequestOptionFunc
	curlNum       int
}

func (iterator *SearchBasicInfoBankIterator) Next() (bool, *Bank, error) {
	// 达到最大量，则返回
	if iterator.limit > 0 && iterator.curlNum >= iterator.limit {
		return false, nil, nil
	}

	// 为0则拉取数据
	if iterator.index == 0 || iterator.index >= len(iterator.items) {
		if iterator.index != 0 && iterator.nextPageToken == nil {
			return false, nil, nil
		}
		if iterator.nextPageToken != nil {
			iterator.req.apiReq.QueryParams.Set("page_token", *iterator.nextPageToken)
		}
		resp, err := iterator.listFunc(iterator.ctx, iterator.req, iterator.options...)
		if err != nil {
			return false, nil, err
		}

		if resp.Code != 0 {
			return false, nil, errors.New(fmt.Sprintf("Code:%d,Msg:%s", resp.Code, resp.Msg))
		}

		if len(resp.Data.Items) == 0 {
			return false, nil, nil
		}

		iterator.nextPageToken = resp.Data.PageToken
		iterator.items = resp.Data.Items
		iterator.index = 0
	}

	block := iterator.items[iterator.index]
	iterator.index++
	iterator.curlNum++
	return true, block, nil
}

func (iterator *SearchBasicInfoBankIterator) NextPageToken() *string {
	return iterator.nextPageToken
}

type SearchBasicInfoBankBranchIterator struct {
	nextPageToken *string
	items         []*BankBranch
	index         int
	limit         int
	ctx           context.Context
	req           *SearchBasicInfoBankBranchReq
	listFunc      func(ctx context.Context, req *SearchBasicInfoBankBranchReq, options ...larkcore.RequestOptionFunc) (*SearchBasicInfoBankBranchResp, error)
	options       []larkcore.RequestOptionFunc
	curlNum       int
}

func (iterator *SearchBasicInfoBankBranchIterator) Next() (bool, *BankBranch, error) {
	// 达到最大量，则返回
	if iterator.limit > 0 && iterator.curlNum >= iterator.limit {
		return false, nil, nil
	}

	// 为0则拉取数据
	if iterator.index == 0 || iterator.index >= len(iterator.items) {
		if iterator.index != 0 && iterator.nextPageToken == nil {
			return false, nil, nil
		}
		if iterator.nextPageToken != nil {
			iterator.req.apiReq.QueryParams.Set("page_token", *iterator.nextPageToken)
		}
		resp, err := iterator.listFunc(iterator.ctx, iterator.req, iterator.options...)
		if err != nil {
			return false, nil, err
		}

		if resp.Code != 0 {
			return false, nil, errors.New(fmt.Sprintf("Code:%d,Msg:%s", resp.Code, resp.Msg))
		}

		if len(resp.Data.Items) == 0 {
			return false, nil, nil
		}

		iterator.nextPageToken = resp.Data.PageToken
		iterator.items = resp.Data.Items
		iterator.index = 0
	}

	block := iterator.items[iterator.index]
	iterator.index++
	iterator.curlNum++
	return true, block, nil
}

func (iterator *SearchBasicInfoBankBranchIterator) NextPageToken() *string {
	return iterator.nextPageToken
}

type SearchBasicInfoCityIterator struct {
	nextPageToken *string
	items         []*City
	index         int
	limit         int
	ctx           context.Context
	req           *SearchBasicInfoCityReq
	listFunc      func(ctx context.Context, req *SearchBasicInfoCityReq, options ...larkcore.RequestOptionFunc) (*SearchBasicInfoCityResp, error)
	options       []larkcore.RequestOptionFunc
	curlNum       int
}

func (iterator *SearchBasicInfoCityIterator) Next() (bool, *City, error) {
	// 达到最大量，则返回
	if iterator.limit > 0 && iterator.curlNum >= iterator.limit {
		return false, nil, nil
	}

	// 为0则拉取数据
	if iterator.index == 0 || iterator.index >= len(iterator.items) {
		if iterator.index != 0 && iterator.nextPageToken == nil {
			return false, nil, nil
		}
		if iterator.nextPageToken != nil {
			iterator.req.apiReq.QueryParams.Set("page_token", *iterator.nextPageToken)
		}
		resp, err := iterator.listFunc(iterator.ctx, iterator.req, iterator.options...)
		if err != nil {
			return false, nil, err
		}

		if resp.Code != 0 {
			return false, nil, errors.New(fmt.Sprintf("Code:%d,Msg:%s", resp.Code, resp.Msg))
		}

		if len(resp.Data.Items) == 0 {
			return false, nil, nil
		}

		iterator.nextPageToken = resp.Data.PageToken
		iterator.items = resp.Data.Items
		iterator.index = 0
	}

	block := iterator.items[iterator.index]
	iterator.index++
	iterator.curlNum++
	return true, block, nil
}

func (iterator *SearchBasicInfoCityIterator) NextPageToken() *string {
	return iterator.nextPageToken
}

type SearchBasicInfoCountryRegionIterator struct {
	nextPageToken *string
	items         []*CountryRegion
	index         int
	limit         int
	ctx           context.Context
	req           *SearchBasicInfoCountryRegionReq
	listFunc      func(ctx context.Context, req *SearchBasicInfoCountryRegionReq, options ...larkcore.RequestOptionFunc) (*SearchBasicInfoCountryRegionResp, error)
	options       []larkcore.RequestOptionFunc
	curlNum       int
}

func (iterator *SearchBasicInfoCountryRegionIterator) Next() (bool, *CountryRegion, error) {
	// 达到最大量，则返回
	if iterator.limit > 0 && iterator.curlNum >= iterator.limit {
		return false, nil, nil
	}

	// 为0则拉取数据
	if iterator.index == 0 || iterator.index >= len(iterator.items) {
		if iterator.index != 0 && iterator.nextPageToken == nil {
			return false, nil, nil
		}
		if iterator.nextPageToken != nil {
			iterator.req.apiReq.QueryParams.Set("page_token", *iterator.nextPageToken)
		}
		resp, err := iterator.listFunc(iterator.ctx, iterator.req, iterator.options...)
		if err != nil {
			return false, nil, err
		}

		if resp.Code != 0 {
			return false, nil, errors.New(fmt.Sprintf("Code:%d,Msg:%s", resp.Code, resp.Msg))
		}

		if len(resp.Data.Items) == 0 {
			return false, nil, nil
		}

		iterator.nextPageToken = resp.Data.PageToken
		iterator.items = resp.Data.Items
		iterator.index = 0
	}

	block := iterator.items[iterator.index]
	iterator.index++
	iterator.curlNum++
	return true, block, nil
}

func (iterator *SearchBasicInfoCountryRegionIterator) NextPageToken() *string {
	return iterator.nextPageToken
}

type SearchBasicInfoCountryRegionSubdivisionIterator struct {
	nextPageToken *string
	items         []*CountryRegionSubdivision
	index         int
	limit         int
	ctx           context.Context
	req           *SearchBasicInfoCountryRegionSubdivisionReq
	listFunc      func(ctx context.Context, req *SearchBasicInfoCountryRegionSubdivisionReq, options ...larkcore.RequestOptionFunc) (*SearchBasicInfoCountryRegionSubdivisionResp, error)
	options       []larkcore.RequestOptionFunc
	curlNum       int
}

func (iterator *SearchBasicInfoCountryRegionSubdivisionIterator) Next() (bool, *CountryRegionSubdivision, error) {
	// 达到最大量，则返回
	if iterator.limit > 0 && iterator.curlNum >= iterator.limit {
		return false, nil, nil
	}

	// 为0则拉取数据
	if iterator.index == 0 || iterator.index >= len(iterator.items) {
		if iterator.index != 0 && iterator.nextPageToken == nil {
			return false, nil, nil
		}
		if iterator.nextPageToken != nil {
			iterator.req.apiReq.QueryParams.Set("page_token", *iterator.nextPageToken)
		}
		resp, err := iterator.listFunc(iterator.ctx, iterator.req, iterator.options...)
		if err != nil {
			return false, nil, err
		}

		if resp.Code != 0 {
			return false, nil, errors.New(fmt.Sprintf("Code:%d,Msg:%s", resp.Code, resp.Msg))
		}

		if len(resp.Data.Items) == 0 {
			return false, nil, nil
		}

		iterator.nextPageToken = resp.Data.PageToken
		iterator.items = resp.Data.Items
		iterator.index = 0
	}

	block := iterator.items[iterator.index]
	iterator.index++
	iterator.curlNum++
	return true, block, nil
}

func (iterator *SearchBasicInfoCountryRegionSubdivisionIterator) NextPageToken() *string {
	return iterator.nextPageToken
}

type SearchBasicInfoCurrencyIterator struct {
	nextPageToken *string
	items         []*Currency
	index         int
	limit         int
	ctx           context.Context
	req           *SearchBasicInfoCurrencyReq
	listFunc      func(ctx context.Context, req *SearchBasicInfoCurrencyReq, options ...larkcore.RequestOptionFunc) (*SearchBasicInfoCurrencyResp, error)
	options       []larkcore.RequestOptionFunc
	curlNum       int
}

func (iterator *SearchBasicInfoCurrencyIterator) Next() (bool, *Currency, error) {
	// 达到最大量，则返回
	if iterator.limit > 0 && iterator.curlNum >= iterator.limit {
		return false, nil, nil
	}

	// 为0则拉取数据
	if iterator.index == 0 || iterator.index >= len(iterator.items) {
		if iterator.index != 0 && iterator.nextPageToken == nil {
			return false, nil, nil
		}
		if iterator.nextPageToken != nil {
			iterator.req.apiReq.QueryParams.Set("page_token", *iterator.nextPageToken)
		}
		resp, err := iterator.listFunc(iterator.ctx, iterator.req, iterator.options...)
		if err != nil {
			return false, nil, err
		}

		if resp.Code != 0 {
			return false, nil, errors.New(fmt.Sprintf("Code:%d,Msg:%s", resp.Code, resp.Msg))
		}

		if len(resp.Data.Items) == 0 {
			return false, nil, nil
		}

		iterator.nextPageToken = resp.Data.PageToken
		iterator.items = resp.Data.Items
		iterator.index = 0
	}

	block := iterator.items[iterator.index]
	iterator.index++
	iterator.curlNum++
	return true, block, nil
}

func (iterator *SearchBasicInfoCurrencyIterator) NextPageToken() *string {
	return iterator.nextPageToken
}

type SearchBasicInfoDistrictIterator struct {
	nextPageToken *string
	items         []*District
	index         int
	limit         int
	ctx           context.Context
	req           *SearchBasicInfoDistrictReq
	listFunc      func(ctx context.Context, req *SearchBasicInfoDistrictReq, options ...larkcore.RequestOptionFunc) (*SearchBasicInfoDistrictResp, error)
	options       []larkcore.RequestOptionFunc
	curlNum       int
}

func (iterator *SearchBasicInfoDistrictIterator) Next() (bool, *District, error) {
	// 达到最大量，则返回
	if iterator.limit > 0 && iterator.curlNum >= iterator.limit {
		return false, nil, nil
	}

	// 为0则拉取数据
	if iterator.index == 0 || iterator.index >= len(iterator.items) {
		if iterator.index != 0 && iterator.nextPageToken == nil {
			return false, nil, nil
		}
		if iterator.nextPageToken != nil {
			iterator.req.apiReq.QueryParams.Set("page_token", *iterator.nextPageToken)
		}
		resp, err := iterator.listFunc(iterator.ctx, iterator.req, iterator.options...)
		if err != nil {
			return false, nil, err
		}

		if resp.Code != 0 {
			return false, nil, errors.New(fmt.Sprintf("Code:%d,Msg:%s", resp.Code, resp.Msg))
		}

		if len(resp.Data.Items) == 0 {
			return false, nil, nil
		}

		iterator.nextPageToken = resp.Data.PageToken
		iterator.items = resp.Data.Items
		iterator.index = 0
	}

	block := iterator.items[iterator.index]
	iterator.index++
	iterator.curlNum++
	return true, block, nil
}

func (iterator *SearchBasicInfoDistrictIterator) NextPageToken() *string {
	return iterator.nextPageToken
}

type SearchBasicInfoNationalityIterator struct {
	nextPageToken *string
	items         []*Nationality
	index         int
	limit         int
	ctx           context.Context
	req           *SearchBasicInfoNationalityReq
	listFunc      func(ctx context.Context, req *SearchBasicInfoNationalityReq, options ...larkcore.RequestOptionFunc) (*SearchBasicInfoNationalityResp, error)
	options       []larkcore.RequestOptionFunc
	curlNum       int
}

func (iterator *SearchBasicInfoNationalityIterator) Next() (bool, *Nationality, error) {
	// 达到最大量，则返回
	if iterator.limit > 0 && iterator.curlNum >= iterator.limit {
		return false, nil, nil
	}

	// 为0则拉取数据
	if iterator.index == 0 || iterator.index >= len(iterator.items) {
		if iterator.index != 0 && iterator.nextPageToken == nil {
			return false, nil, nil
		}
		if iterator.nextPageToken != nil {
			iterator.req.apiReq.QueryParams.Set("page_token", *iterator.nextPageToken)
		}
		resp, err := iterator.listFunc(iterator.ctx, iterator.req, iterator.options...)
		if err != nil {
			return false, nil, err
		}

		if resp.Code != 0 {
			return false, nil, errors.New(fmt.Sprintf("Code:%d,Msg:%s", resp.Code, resp.Msg))
		}

		if len(resp.Data.Items) == 0 {
			return false, nil, nil
		}

		iterator.nextPageToken = resp.Data.PageToken
		iterator.items = resp.Data.Items
		iterator.index = 0
	}

	block := iterator.items[iterator.index]
	iterator.index++
	iterator.curlNum++
	return true, block, nil
}

func (iterator *SearchBasicInfoNationalityIterator) NextPageToken() *string {
	return iterator.nextPageToken
}

type ListBpIterator struct {
	nextPageToken *string
	items         []*Bp
	index         int
	limit         int
	ctx           context.Context
	req           *ListBpReq
	listFunc      func(ctx context.Context, req *ListBpReq, options ...larkcore.RequestOptionFunc) (*ListBpResp, error)
	options       []larkcore.RequestOptionFunc
	curlNum       int
}

func (iterator *ListBpIterator) Next() (bool, *Bp, error) {
	// 达到最大量，则返回
	if iterator.limit > 0 && iterator.curlNum >= iterator.limit {
		return false, nil, nil
	}

	// 为0则拉取数据
	if iterator.index == 0 || iterator.index >= len(iterator.items) {
		if iterator.index != 0 && iterator.nextPageToken == nil {
			return false, nil, nil
		}
		if iterator.nextPageToken != nil {
			iterator.req.apiReq.QueryParams.Set("page_token", *iterator.nextPageToken)
		}
		resp, err := iterator.listFunc(iterator.ctx, iterator.req, iterator.options...)
		if err != nil {
			return false, nil, err
		}

		if resp.Code != 0 {
			return false, nil, errors.New(fmt.Sprintf("Code:%d,Msg:%s", resp.Code, resp.Msg))
		}

		if len(resp.Data.Items) == 0 {
			return false, nil, nil
		}

		iterator.nextPageToken = resp.Data.PageToken
		iterator.items = resp.Data.Items
		iterator.index = 0
	}

	block := iterator.items[iterator.index]
	iterator.index++
	iterator.curlNum++
	return true, block, nil
}

func (iterator *ListBpIterator) NextPageToken() *string {
	return iterator.nextPageToken
}

type SearchContractIterator struct {
	nextPageToken *string
	items         []*Contract
	index         int
	limit         int
	ctx           context.Context
	req           *SearchContractReq
	listFunc      func(ctx context.Context, req *SearchContractReq, options ...larkcore.RequestOptionFunc) (*SearchContractResp, error)
	options       []larkcore.RequestOptionFunc
	curlNum       int
}

func (iterator *SearchContractIterator) Next() (bool, *Contract, error) {
	// 达到最大量，则返回
	if iterator.limit > 0 && iterator.curlNum >= iterator.limit {
		return false, nil, nil
	}

	// 为0则拉取数据
	if iterator.index == 0 || iterator.index >= len(iterator.items) {
		if iterator.index != 0 && iterator.nextPageToken == nil {
			return false, nil, nil
		}
		if iterator.nextPageToken != nil {
			iterator.req.apiReq.QueryParams.Set("page_token", *iterator.nextPageToken)
		}
		resp, err := iterator.listFunc(iterator.ctx, iterator.req, iterator.options...)
		if err != nil {
			return false, nil, err
		}

		if resp.Code != 0 {
			return false, nil, errors.New(fmt.Sprintf("Code:%d,Msg:%s", resp.Code, resp.Msg))
		}

		if len(resp.Data.Items) == 0 {
			return false, nil, nil
		}

		iterator.nextPageToken = resp.Data.PageToken
		iterator.items = resp.Data.Items
		iterator.index = 0
	}

	block := iterator.items[iterator.index]
	iterator.index++
	iterator.curlNum++
	return true, block, nil
}

func (iterator *SearchContractIterator) NextPageToken() *string {
	return iterator.nextPageToken
}

type SearchDepartmentIterator struct {
	nextPageToken *string
	items         []*Department
	index         int
	limit         int
	ctx           context.Context
	req           *SearchDepartmentReq
	listFunc      func(ctx context.Context, req *SearchDepartmentReq, options ...larkcore.RequestOptionFunc) (*SearchDepartmentResp, error)
	options       []larkcore.RequestOptionFunc
	curlNum       int
}

func (iterator *SearchDepartmentIterator) Next() (bool, *Department, error) {
	// 达到最大量，则返回
	if iterator.limit > 0 && iterator.curlNum >= iterator.limit {
		return false, nil, nil
	}

	// 为0则拉取数据
	if iterator.index == 0 || iterator.index >= len(iterator.items) {
		if iterator.index != 0 && iterator.nextPageToken == nil {
			return false, nil, nil
		}
		if iterator.nextPageToken != nil {
			iterator.req.apiReq.QueryParams.Set("page_token", *iterator.nextPageToken)
		}
		resp, err := iterator.listFunc(iterator.ctx, iterator.req, iterator.options...)
		if err != nil {
			return false, nil, err
		}

		if resp.Code != 0 {
			return false, nil, errors.New(fmt.Sprintf("Code:%d,Msg:%s", resp.Code, resp.Msg))
		}

		if len(resp.Data.Items) == 0 {
			return false, nil, nil
		}

		iterator.nextPageToken = resp.Data.PageToken
		iterator.items = resp.Data.Items
		iterator.index = 0
	}

	block := iterator.items[iterator.index]
	iterator.index++
	iterator.curlNum++
	return true, block, nil
}

func (iterator *SearchDepartmentIterator) NextPageToken() *string {
	return iterator.nextPageToken
}

type SearchEmployeeIterator struct {
	nextPageToken *string
	items         []*Employee
	index         int
	limit         int
	ctx           context.Context
	req           *SearchEmployeeReq
	listFunc      func(ctx context.Context, req *SearchEmployeeReq, options ...larkcore.RequestOptionFunc) (*SearchEmployeeResp, error)
	options       []larkcore.RequestOptionFunc
	curlNum       int
}

func (iterator *SearchEmployeeIterator) Next() (bool, *Employee, error) {
	// 达到最大量，则返回
	if iterator.limit > 0 && iterator.curlNum >= iterator.limit {
		return false, nil, nil
	}

	// 为0则拉取数据
	if iterator.index == 0 || iterator.index >= len(iterator.items) {
		if iterator.index != 0 && iterator.nextPageToken == nil {
			return false, nil, nil
		}
		if iterator.nextPageToken != nil {
			iterator.req.apiReq.QueryParams.Set("page_token", *iterator.nextPageToken)
		}
		resp, err := iterator.listFunc(iterator.ctx, iterator.req, iterator.options...)
		if err != nil {
			return false, nil, err
		}

		if resp.Code != 0 {
			return false, nil, errors.New(fmt.Sprintf("Code:%d,Msg:%s", resp.Code, resp.Msg))
		}

		if len(resp.Data.Items) == 0 {
			return false, nil, nil
		}

		iterator.nextPageToken = resp.Data.PageToken
		iterator.items = resp.Data.Items
		iterator.index = 0
	}

	block := iterator.items[iterator.index]
	iterator.index++
	iterator.curlNum++
	return true, block, nil
}

func (iterator *SearchEmployeeIterator) NextPageToken() *string {
	return iterator.nextPageToken
}

type SearchJobChangeIterator struct {
	nextPageToken *string
	items         []*JobChange
	index         int
	limit         int
	ctx           context.Context
	req           *SearchJobChangeReq
	listFunc      func(ctx context.Context, req *SearchJobChangeReq, options ...larkcore.RequestOptionFunc) (*SearchJobChangeResp, error)
	options       []larkcore.RequestOptionFunc
	curlNum       int
}

func (iterator *SearchJobChangeIterator) Next() (bool, *JobChange, error) {
	// 达到最大量，则返回
	if iterator.limit > 0 && iterator.curlNum >= iterator.limit {
		return false, nil, nil
	}

	// 为0则拉取数据
	if iterator.index == 0 || iterator.index >= len(iterator.items) {
		if iterator.index != 0 && iterator.nextPageToken == nil {
			return false, nil, nil
		}
		if iterator.nextPageToken != nil {
			iterator.req.apiReq.QueryParams.Set("page_token", *iterator.nextPageToken)
		}
		resp, err := iterator.listFunc(iterator.ctx, iterator.req, iterator.options...)
		if err != nil {
			return false, nil, err
		}

		if resp.Code != 0 {
			return false, nil, errors.New(fmt.Sprintf("Code:%d,Msg:%s", resp.Code, resp.Msg))
		}

		if len(resp.Data.Items) == 0 {
			return false, nil, nil
		}

		iterator.nextPageToken = resp.Data.PageToken
		iterator.items = resp.Data.Items
		iterator.index = 0
	}

	block := iterator.items[iterator.index]
	iterator.index++
	iterator.curlNum++
	return true, block, nil
}

func (iterator *SearchJobChangeIterator) NextPageToken() *string {
	return iterator.nextPageToken
}

type SearchPreHireIterator struct {
	nextPageToken *string
	items         []*PreHire
	index         int
	limit         int
	ctx           context.Context
	req           *SearchPreHireReq
	listFunc      func(ctx context.Context, req *SearchPreHireReq, options ...larkcore.RequestOptionFunc) (*SearchPreHireResp, error)
	options       []larkcore.RequestOptionFunc
	curlNum       int
}

func (iterator *SearchPreHireIterator) Next() (bool, *PreHire, error) {
	// 达到最大量，则返回
	if iterator.limit > 0 && iterator.curlNum >= iterator.limit {
		return false, nil, nil
	}

	// 为0则拉取数据
	if iterator.index == 0 || iterator.index >= len(iterator.items) {
		if iterator.index != 0 && iterator.nextPageToken == nil {
			return false, nil, nil
		}
		if iterator.nextPageToken != nil {
			iterator.req.apiReq.QueryParams.Set("page_token", *iterator.nextPageToken)
		}
		resp, err := iterator.listFunc(iterator.ctx, iterator.req, iterator.options...)
		if err != nil {
			return false, nil, err
		}

		if resp.Code != 0 {
			return false, nil, errors.New(fmt.Sprintf("Code:%d,Msg:%s", resp.Code, resp.Msg))
		}

		if len(resp.Data.Items) == 0 {
			return false, nil, nil
		}

		iterator.nextPageToken = resp.Data.PageToken
		iterator.items = resp.Data.Items
		iterator.index = 0
	}

	block := iterator.items[iterator.index]
	iterator.index++
	iterator.curlNum++
	return true, block, nil
}

func (iterator *SearchPreHireIterator) NextPageToken() *string {
	return iterator.nextPageToken
}

type SearchProbationIterator struct {
	nextPageToken *string
	items         []*ProbationInfo
	index         int
	limit         int
	ctx           context.Context
	req           *SearchProbationReq
	listFunc      func(ctx context.Context, req *SearchProbationReq, options ...larkcore.RequestOptionFunc) (*SearchProbationResp, error)
	options       []larkcore.RequestOptionFunc
	curlNum       int
}

func (iterator *SearchProbationIterator) Next() (bool, *ProbationInfo, error) {
	// 达到最大量，则返回
	if iterator.limit > 0 && iterator.curlNum >= iterator.limit {
		return false, nil, nil
	}

	// 为0则拉取数据
	if iterator.index == 0 || iterator.index >= len(iterator.items) {
		if iterator.index != 0 && iterator.nextPageToken == nil {
			return false, nil, nil
		}
		if iterator.nextPageToken != nil {
			iterator.req.apiReq.QueryParams.Set("page_token", *iterator.nextPageToken)
		}
		resp, err := iterator.listFunc(iterator.ctx, iterator.req, iterator.options...)
		if err != nil {
			return false, nil, err
		}

		if resp.Code != 0 {
			return false, nil, errors.New(fmt.Sprintf("Code:%d,Msg:%s", resp.Code, resp.Msg))
		}

		if len(resp.Data.Items) == 0 {
			return false, nil, nil
		}

		iterator.nextPageToken = resp.Data.PageToken
		iterator.items = resp.Data.Items
		iterator.index = 0
	}

	block := iterator.items[iterator.index]
	iterator.index++
	iterator.curlNum++
	return true, block, nil
}

func (iterator *SearchProbationIterator) NextPageToken() *string {
	return iterator.nextPageToken
}

type ListProcessIterator struct {
	nextPageToken *string
	items         []string
	index         int
	limit         int
	ctx           context.Context
	req           *ListProcessReq
	listFunc      func(ctx context.Context, req *ListProcessReq, options ...larkcore.RequestOptionFunc) (*ListProcessResp, error)
	options       []larkcore.RequestOptionFunc
	curlNum       int
}

func (iterator *ListProcessIterator) Next() (bool, string, error) {
	// 达到最大量，则返回
	if iterator.limit > 0 && iterator.curlNum >= iterator.limit {
		return false, "", nil
	}

	// 为0则拉取数据
	if iterator.index == 0 || iterator.index >= len(iterator.items) {
		if iterator.index != 0 && iterator.nextPageToken == nil {
			return false, "", nil
		}
		if iterator.nextPageToken != nil {
			iterator.req.apiReq.QueryParams.Set("page_token", *iterator.nextPageToken)
		}
		resp, err := iterator.listFunc(iterator.ctx, iterator.req, iterator.options...)
		if err != nil {
			return false, "", err
		}

		if resp.Code != 0 {
			return false, "", errors.New(fmt.Sprintf("Code:%d,Msg:%s", resp.Code, resp.Msg))
		}

		if len(resp.Data.ProcessIds) == 0 {
			return false, "", nil
		}

		iterator.nextPageToken = resp.Data.PageToken
		iterator.items = resp.Data.ProcessIds
		iterator.index = 0
	}

	block := iterator.items[iterator.index]
	iterator.index++
	iterator.curlNum++
	return true, block, nil
}

func (iterator *ListProcessIterator) NextPageToken() *string {
	return iterator.nextPageToken
}
