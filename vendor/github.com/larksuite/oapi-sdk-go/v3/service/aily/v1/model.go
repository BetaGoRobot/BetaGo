// Package aily code generated by oapi sdk gen
/*
 * MIT License
 *
 * Copyright (c) 2022 Lark Technologies Pte. Ltd.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice, shall be included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

package larkaily

import (
	"fmt"

	"context"
	"errors"

	"github.com/larksuite/oapi-sdk-go/v3/core"
)

type AilyMention struct {
	EntityId         *string `json:"entity_id,omitempty"`         // 实体 ID
	IdentityProvider *string `json:"identity_provider,omitempty"` // 身份提供者
	Key              *string `json:"key,omitempty"`               // 被@实体在消息体中的占位符
	Name             *string `json:"name,omitempty"`              // 被@实体的名称
	AilyId           *string `json:"aily_id,omitempty"`           // Aily 账号体系下的 ID
}

type AilyMentionBuilder struct {
	entityId             string // 实体 ID
	entityIdFlag         bool
	identityProvider     string // 身份提供者
	identityProviderFlag bool
	key                  string // 被@实体在消息体中的占位符
	keyFlag              bool
	name                 string // 被@实体的名称
	nameFlag             bool
	ailyId               string // Aily 账号体系下的 ID
	ailyIdFlag           bool
}

func NewAilyMentionBuilder() *AilyMentionBuilder {
	builder := &AilyMentionBuilder{}
	return builder
}

// 实体 ID
//
// 示例值：ou_5ad573a6411d72b8305fda3a9c15c70e
func (builder *AilyMentionBuilder) EntityId(entityId string) *AilyMentionBuilder {
	builder.entityId = entityId
	builder.entityIdFlag = true
	return builder
}

// 身份提供者
//
// 示例值：FEISHU
func (builder *AilyMentionBuilder) IdentityProvider(identityProvider string) *AilyMentionBuilder {
	builder.identityProvider = identityProvider
	builder.identityProviderFlag = true
	return builder
}

// 被@实体在消息体中的占位符
//
// 示例值：@_user_1
func (builder *AilyMentionBuilder) Key(key string) *AilyMentionBuilder {
	builder.key = key
	builder.keyFlag = true
	return builder
}

// 被@实体的名称
//
// 示例值：张三
func (builder *AilyMentionBuilder) Name(name string) *AilyMentionBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}

// Aily 账号体系下的 ID
//
// 示例值：1794840334557292
func (builder *AilyMentionBuilder) AilyId(ailyId string) *AilyMentionBuilder {
	builder.ailyId = ailyId
	builder.ailyIdFlag = true
	return builder
}

func (builder *AilyMentionBuilder) Build() *AilyMention {
	req := &AilyMention{}
	if builder.entityIdFlag {
		req.EntityId = &builder.entityId

	}
	if builder.identityProviderFlag {
		req.IdentityProvider = &builder.identityProvider

	}
	if builder.keyFlag {
		req.Key = &builder.key

	}
	if builder.nameFlag {
		req.Name = &builder.name

	}
	if builder.ailyIdFlag {
		req.AilyId = &builder.ailyId

	}
	return req
}

type AilyMessage struct {
	Id             *string            `json:"id,omitempty"`               // 消息 ID
	SessionId      *string            `json:"session_id,omitempty"`       // 会话 ID
	RunId          *string            `json:"run_id,omitempty"`           // 运行 ID
	ContentType    *string            `json:"content_type,omitempty"`     // 消息内容类型
	Content        *string            `json:"content,omitempty"`          // 消息内容
	Files          []*AilyMessageFile `json:"files,omitempty"`            // 消息中包含的文件
	QuoteMessageId *string            `json:"quote_message_id,omitempty"` // 引用的消息 ID
	Sender         *AilySender        `json:"sender,omitempty"`           // 发送者
	Mentions       []*AilyMention     `json:"mentions,omitempty"`         // 被@的实体
	PlainText      *string            `json:"plain_text,omitempty"`       // 消息体的纯文本表达
	CreatedAt      *string            `json:"created_at,omitempty"`       // 消息的创建时间，毫秒时间戳
	Status         *string            `json:"status,omitempty"`           // 状态
}

type AilyMessageBuilder struct {
	id                 string // 消息 ID
	idFlag             bool
	sessionId          string // 会话 ID
	sessionIdFlag      bool
	runId              string // 运行 ID
	runIdFlag          bool
	contentType        string // 消息内容类型
	contentTypeFlag    bool
	content            string // 消息内容
	contentFlag        bool
	files              []*AilyMessageFile // 消息中包含的文件
	filesFlag          bool
	quoteMessageId     string // 引用的消息 ID
	quoteMessageIdFlag bool
	sender             *AilySender // 发送者
	senderFlag         bool
	mentions           []*AilyMention // 被@的实体
	mentionsFlag       bool
	plainText          string // 消息体的纯文本表达
	plainTextFlag      bool
	createdAt          string // 消息的创建时间，毫秒时间戳
	createdAtFlag      bool
	status             string // 状态
	statusFlag         bool
}

func NewAilyMessageBuilder() *AilyMessageBuilder {
	builder := &AilyMessageBuilder{}
	return builder
}

// 消息 ID
//
// 示例值：message_4df45f2xknvcc
func (builder *AilyMessageBuilder) Id(id string) *AilyMessageBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

// 会话 ID
//
// 示例值：session_4dfunz7sp1g8m
func (builder *AilyMessageBuilder) SessionId(sessionId string) *AilyMessageBuilder {
	builder.sessionId = sessionId
	builder.sessionIdFlag = true
	return builder
}

// 运行 ID
//
// 示例值：run_4dfrxvctjqzzj
func (builder *AilyMessageBuilder) RunId(runId string) *AilyMessageBuilder {
	builder.runId = runId
	builder.runIdFlag = true
	return builder
}

// 消息内容类型
//
// 示例值：MDX
func (builder *AilyMessageBuilder) ContentType(contentType string) *AilyMessageBuilder {
	builder.contentType = contentType
	builder.contentTypeFlag = true
	return builder
}

// 消息内容
//
// 示例值：你好
func (builder *AilyMessageBuilder) Content(content string) *AilyMessageBuilder {
	builder.content = content
	builder.contentFlag = true
	return builder
}

// 消息中包含的文件
//
// 示例值：
func (builder *AilyMessageBuilder) Files(files []*AilyMessageFile) *AilyMessageBuilder {
	builder.files = files
	builder.filesFlag = true
	return builder
}

// 引用的消息 ID
//
// 示例值：message_4de9bpg70qskh
func (builder *AilyMessageBuilder) QuoteMessageId(quoteMessageId string) *AilyMessageBuilder {
	builder.quoteMessageId = quoteMessageId
	builder.quoteMessageIdFlag = true
	return builder
}

// 发送者
//
// 示例值：
func (builder *AilyMessageBuilder) Sender(sender *AilySender) *AilyMessageBuilder {
	builder.sender = sender
	builder.senderFlag = true
	return builder
}

// 被@的实体
//
// 示例值：
func (builder *AilyMessageBuilder) Mentions(mentions []*AilyMention) *AilyMessageBuilder {
	builder.mentions = mentions
	builder.mentionsFlag = true
	return builder
}

// 消息体的纯文本表达
//
// 示例值：你好
func (builder *AilyMessageBuilder) PlainText(plainText string) *AilyMessageBuilder {
	builder.plainText = plainText
	builder.plainTextFlag = true
	return builder
}

// 消息的创建时间，毫秒时间戳
//
// 示例值：1711975665710
func (builder *AilyMessageBuilder) CreatedAt(createdAt string) *AilyMessageBuilder {
	builder.createdAt = createdAt
	builder.createdAtFlag = true
	return builder
}

// 状态
//
// 示例值：IN_PROGRESS
func (builder *AilyMessageBuilder) Status(status string) *AilyMessageBuilder {
	builder.status = status
	builder.statusFlag = true
	return builder
}

func (builder *AilyMessageBuilder) Build() *AilyMessage {
	req := &AilyMessage{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.sessionIdFlag {
		req.SessionId = &builder.sessionId

	}
	if builder.runIdFlag {
		req.RunId = &builder.runId

	}
	if builder.contentTypeFlag {
		req.ContentType = &builder.contentType

	}
	if builder.contentFlag {
		req.Content = &builder.content

	}
	if builder.filesFlag {
		req.Files = builder.files
	}
	if builder.quoteMessageIdFlag {
		req.QuoteMessageId = &builder.quoteMessageId

	}
	if builder.senderFlag {
		req.Sender = builder.sender
	}
	if builder.mentionsFlag {
		req.Mentions = builder.mentions
	}
	if builder.plainTextFlag {
		req.PlainText = &builder.plainText

	}
	if builder.createdAtFlag {
		req.CreatedAt = &builder.createdAt

	}
	if builder.statusFlag {
		req.Status = &builder.status

	}
	return req
}

type AilyMessageFile struct {
	Id        *string `json:"id,omitempty"`         // 文件 ID
	MimeType  *string `json:"mime_type,omitempty"`  // 文件类型，参见 https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Basics_of_HTTP/MIME_types
	FileName  *string `json:"file_name,omitempty"`  // 文件名
	Metadata  *string `json:"metadata,omitempty"`   // 其他透传信息
	CreatedAt *string `json:"created_at,omitempty"` // 文件的创建时间，毫秒时间戳
}

type AilyMessageFileBuilder struct {
	id            string // 文件 ID
	idFlag        bool
	mimeType      string // 文件类型，参见 https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Basics_of_HTTP/MIME_types
	mimeTypeFlag  bool
	fileName      string // 文件名
	fileNameFlag  bool
	metadata      string // 其他透传信息
	metadataFlag  bool
	createdAt     string // 文件的创建时间，毫秒时间戳
	createdAtFlag bool
}

func NewAilyMessageFileBuilder() *AilyMessageFileBuilder {
	builder := &AilyMessageFileBuilder{}
	return builder
}

// 文件 ID
//
// 示例值：file_4d9nu1ev3a2rq
func (builder *AilyMessageFileBuilder) Id(id string) *AilyMessageFileBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

// 文件类型，参见 https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Basics_of_HTTP/MIME_types
//
// 示例值：image/png
func (builder *AilyMessageFileBuilder) MimeType(mimeType string) *AilyMessageFileBuilder {
	builder.mimeType = mimeType
	builder.mimeTypeFlag = true
	return builder
}

// 文件名
//
// 示例值：发票.png
func (builder *AilyMessageFileBuilder) FileName(fileName string) *AilyMessageFileBuilder {
	builder.fileName = fileName
	builder.fileNameFlag = true
	return builder
}

// 其他透传信息
//
// 示例值：{}
func (builder *AilyMessageFileBuilder) Metadata(metadata string) *AilyMessageFileBuilder {
	builder.metadata = metadata
	builder.metadataFlag = true
	return builder
}

// 文件的创建时间，毫秒时间戳
//
// 示例值：1711975665710
func (builder *AilyMessageFileBuilder) CreatedAt(createdAt string) *AilyMessageFileBuilder {
	builder.createdAt = createdAt
	builder.createdAtFlag = true
	return builder
}

func (builder *AilyMessageFileBuilder) Build() *AilyMessageFile {
	req := &AilyMessageFile{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.mimeTypeFlag {
		req.MimeType = &builder.mimeType

	}
	if builder.fileNameFlag {
		req.FileName = &builder.fileName

	}
	if builder.metadataFlag {
		req.Metadata = &builder.metadata

	}
	if builder.createdAtFlag {
		req.CreatedAt = &builder.createdAt

	}
	return req
}

type AilyMessageFilter struct {
	RunId              *string `json:"run_id,omitempty"`               // 运行 ID
	WithPartialMessage *bool   `json:"with_partial_message,omitempty"` // 返回生成中的消息
}

type AilyMessageFilterBuilder struct {
	runId                  string // 运行 ID
	runIdFlag              bool
	withPartialMessage     bool // 返回生成中的消息
	withPartialMessageFlag bool
}

func NewAilyMessageFilterBuilder() *AilyMessageFilterBuilder {
	builder := &AilyMessageFilterBuilder{}
	return builder
}

// 运行 ID
//
// 示例值：run_4dfrxvctjqzzj
func (builder *AilyMessageFilterBuilder) RunId(runId string) *AilyMessageFilterBuilder {
	builder.runId = runId
	builder.runIdFlag = true
	return builder
}

// 返回生成中的消息
//
// 示例值：false
func (builder *AilyMessageFilterBuilder) WithPartialMessage(withPartialMessage bool) *AilyMessageFilterBuilder {
	builder.withPartialMessage = withPartialMessage
	builder.withPartialMessageFlag = true
	return builder
}

func (builder *AilyMessageFilterBuilder) Build() *AilyMessageFilter {
	req := &AilyMessageFilter{}
	if builder.runIdFlag {
		req.RunId = &builder.runId

	}
	if builder.withPartialMessageFlag {
		req.WithPartialMessage = &builder.withPartialMessage

	}
	return req
}

type AilySender struct {
	EntityId         *string `json:"entity_id,omitempty"`         // 实体 ID
	IdentityProvider *string `json:"identity_provider,omitempty"` // 身份提供者
	SenderType       *string `json:"sender_type,omitempty"`       // 发送人类型
	AilyId           *string `json:"aily_id,omitempty"`           // Aily 账号体系下的 ID
}

type AilySenderBuilder struct {
	entityId             string // 实体 ID
	entityIdFlag         bool
	identityProvider     string // 身份提供者
	identityProviderFlag bool
	senderType           string // 发送人类型
	senderTypeFlag       bool
	ailyId               string // Aily 账号体系下的 ID
	ailyIdFlag           bool
}

func NewAilySenderBuilder() *AilySenderBuilder {
	builder := &AilySenderBuilder{}
	return builder
}

// 实体 ID
//
// 示例值：ou_5ad573a6411d72b8305fda3a9c15c70e
func (builder *AilySenderBuilder) EntityId(entityId string) *AilySenderBuilder {
	builder.entityId = entityId
	builder.entityIdFlag = true
	return builder
}

// 身份提供者
//
// 示例值：FEISHU
func (builder *AilySenderBuilder) IdentityProvider(identityProvider string) *AilySenderBuilder {
	builder.identityProvider = identityProvider
	builder.identityProviderFlag = true
	return builder
}

// 发送人类型
//
// 示例值：USER
func (builder *AilySenderBuilder) SenderType(senderType string) *AilySenderBuilder {
	builder.senderType = senderType
	builder.senderTypeFlag = true
	return builder
}

// Aily 账号体系下的 ID
//
// 示例值：1794840334557292
func (builder *AilySenderBuilder) AilyId(ailyId string) *AilySenderBuilder {
	builder.ailyId = ailyId
	builder.ailyIdFlag = true
	return builder
}

func (builder *AilySenderBuilder) Build() *AilySender {
	req := &AilySender{}
	if builder.entityIdFlag {
		req.EntityId = &builder.entityId

	}
	if builder.identityProviderFlag {
		req.IdentityProvider = &builder.identityProvider

	}
	if builder.senderTypeFlag {
		req.SenderType = &builder.senderType

	}
	if builder.ailyIdFlag {
		req.AilyId = &builder.ailyId

	}
	return req
}

type AilySession struct {
	Id             *string `json:"id,omitempty"`              // 会话 ID
	CreatedAt      *string `json:"created_at,omitempty"`      // 会话的创建时间，毫秒时间戳
	ModifiedAt     *string `json:"modified_at,omitempty"`     // 会话的上次更新时间，毫秒时间戳
	CreatedBy      *string `json:"created_by,omitempty"`      // 会话的创建人
	ChannelContext *string `json:"channel_context,omitempty"` // 渠道上下文
	Metadata       *string `json:"metadata,omitempty"`        // 其他透传信息
}

type AilySessionBuilder struct {
	id                 string // 会话 ID
	idFlag             bool
	createdAt          string // 会话的创建时间，毫秒时间戳
	createdAtFlag      bool
	modifiedAt         string // 会话的上次更新时间，毫秒时间戳
	modifiedAtFlag     bool
	createdBy          string // 会话的创建人
	createdByFlag      bool
	channelContext     string // 渠道上下文
	channelContextFlag bool
	metadata           string // 其他透传信息
	metadataFlag       bool
}

func NewAilySessionBuilder() *AilySessionBuilder {
	builder := &AilySessionBuilder{}
	return builder
}

// 会话 ID
//
// 示例值：session_4dfunz7sp1g8m
func (builder *AilySessionBuilder) Id(id string) *AilySessionBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

// 会话的创建时间，毫秒时间戳
//
// 示例值：1711975665710
func (builder *AilySessionBuilder) CreatedAt(createdAt string) *AilySessionBuilder {
	builder.createdAt = createdAt
	builder.createdAtFlag = true
	return builder
}

// 会话的上次更新时间，毫秒时间戳
//
// 示例值：1711975665710
func (builder *AilySessionBuilder) ModifiedAt(modifiedAt string) *AilySessionBuilder {
	builder.modifiedAt = modifiedAt
	builder.modifiedAtFlag = true
	return builder
}

// 会话的创建人
//
// 示例值：1794840334557292
func (builder *AilySessionBuilder) CreatedBy(createdBy string) *AilySessionBuilder {
	builder.createdBy = createdBy
	builder.createdByFlag = true
	return builder
}

// 渠道上下文
//
// 示例值：{}
func (builder *AilySessionBuilder) ChannelContext(channelContext string) *AilySessionBuilder {
	builder.channelContext = channelContext
	builder.channelContextFlag = true
	return builder
}

// 其他透传信息
//
// 示例值：{}
func (builder *AilySessionBuilder) Metadata(metadata string) *AilySessionBuilder {
	builder.metadata = metadata
	builder.metadataFlag = true
	return builder
}

func (builder *AilySessionBuilder) Build() *AilySession {
	req := &AilySession{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.createdAtFlag {
		req.CreatedAt = &builder.createdAt

	}
	if builder.modifiedAtFlag {
		req.ModifiedAt = &builder.modifiedAt

	}
	if builder.createdByFlag {
		req.CreatedBy = &builder.createdBy

	}
	if builder.channelContextFlag {
		req.ChannelContext = &builder.channelContext

	}
	if builder.metadataFlag {
		req.Metadata = &builder.metadata

	}
	return req
}

type App struct {
	Id    *string `json:"id,omitempty"`    // aily app_id
	Label *string `json:"label,omitempty"` // 应用名称
}

type AppBuilder struct {
	id        string // aily app_id
	idFlag    bool
	label     string // 应用名称
	labelFlag bool
}

func NewAppBuilder() *AppBuilder {
	builder := &AppBuilder{}
	return builder
}

// aily app_id
//
// 示例值：spring_xxx__c
func (builder *AppBuilder) Id(id string) *AppBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

// 应用名称
//
// 示例值：应用A
func (builder *AppBuilder) Label(label string) *AppBuilder {
	builder.label = label
	builder.labelFlag = true
	return builder
}

func (builder *AppBuilder) Build() *App {
	req := &App{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.labelFlag {
		req.Label = &builder.label

	}
	return req
}

type BuiltinAction struct {
	BuiltinActionType *string `json:"builtin_action_type,omitempty"` // 内置的消息交互类型
	Enable            *bool   `json:"enable,omitempty"`              // 是否可交互
	ActionStatus      *string `json:"action_status,omitempty"`       // action 状态
	Extra             *string `json:"extra,omitempty"`               // action 的其它信息
}

type BuiltinActionBuilder struct {
	builtinActionType     string // 内置的消息交互类型
	builtinActionTypeFlag bool
	enable                bool // 是否可交互
	enableFlag            bool
	actionStatus          string // action 状态
	actionStatusFlag      bool
	extra                 string // action 的其它信息
	extraFlag             bool
}

func NewBuiltinActionBuilder() *BuiltinActionBuilder {
	builder := &BuiltinActionBuilder{}
	return builder
}

// 内置的消息交互类型
//
// 示例值：CANCEL
func (builder *BuiltinActionBuilder) BuiltinActionType(builtinActionType string) *BuiltinActionBuilder {
	builder.builtinActionType = builtinActionType
	builder.builtinActionTypeFlag = true
	return builder
}

// 是否可交互
//
// 示例值：true
func (builder *BuiltinActionBuilder) Enable(enable bool) *BuiltinActionBuilder {
	builder.enable = enable
	builder.enableFlag = true
	return builder
}

// action 状态
//
// 示例值：DISLIKE
func (builder *BuiltinActionBuilder) ActionStatus(actionStatus string) *BuiltinActionBuilder {
	builder.actionStatus = actionStatus
	builder.actionStatusFlag = true
	return builder
}

// action 的其它信息
//
// 示例值：{}
func (builder *BuiltinActionBuilder) Extra(extra string) *BuiltinActionBuilder {
	builder.extra = extra
	builder.extraFlag = true
	return builder
}

func (builder *BuiltinActionBuilder) Build() *BuiltinAction {
	req := &BuiltinAction{}
	if builder.builtinActionTypeFlag {
		req.BuiltinActionType = &builder.builtinActionType

	}
	if builder.enableFlag {
		req.Enable = &builder.enable

	}
	if builder.actionStatusFlag {
		req.ActionStatus = &builder.actionStatus

	}
	if builder.extraFlag {
		req.Extra = &builder.extra

	}
	return req
}

type DatasetSource struct {
	Type     *string        `json:"type,omitempty"`     // 分析表类型：object/external/dataflow
	Settings *SourceSetting `json:"settings,omitempty"` // 分析表数据源信息配置
}

type DatasetSourceBuilder struct {
	type_        string // 分析表类型：object/external/dataflow
	typeFlag     bool
	settings     *SourceSetting // 分析表数据源信息配置
	settingsFlag bool
}

func NewDatasetSourceBuilder() *DatasetSourceBuilder {
	builder := &DatasetSourceBuilder{}
	return builder
}

// 分析表类型：object/external/dataflow
//
// 示例值：object
func (builder *DatasetSourceBuilder) Type(type_ string) *DatasetSourceBuilder {
	builder.type_ = type_
	builder.typeFlag = true
	return builder
}

// 分析表数据源信息配置
//
// 示例值：
func (builder *DatasetSourceBuilder) Settings(settings *SourceSetting) *DatasetSourceBuilder {
	builder.settings = settings
	builder.settingsFlag = true
	return builder
}

func (builder *DatasetSourceBuilder) Build() *DatasetSource {
	req := &DatasetSource{}
	if builder.typeFlag {
		req.Type = &builder.type_

	}
	if builder.settingsFlag {
		req.Settings = builder.settings
	}
	return req
}

type DepartmentId struct {
	DepartmentId     *string `json:"department_id,omitempty"`      //
	OpenDepartmentId *string `json:"open_department_id,omitempty"` //
}

type DepartmentIdBuilder struct {
	departmentId         string //
	departmentIdFlag     bool
	openDepartmentId     string //
	openDepartmentIdFlag bool
}

func NewDepartmentIdBuilder() *DepartmentIdBuilder {
	builder := &DepartmentIdBuilder{}
	return builder
}

// 示例值：
func (builder *DepartmentIdBuilder) DepartmentId(departmentId string) *DepartmentIdBuilder {
	builder.departmentId = departmentId
	builder.departmentIdFlag = true
	return builder
}

// 示例值：
func (builder *DepartmentIdBuilder) OpenDepartmentId(openDepartmentId string) *DepartmentIdBuilder {
	builder.openDepartmentId = openDepartmentId
	builder.openDepartmentIdFlag = true
	return builder
}

func (builder *DepartmentIdBuilder) Build() *DepartmentId {
	req := &DepartmentId{}
	if builder.departmentIdFlag {
		req.DepartmentId = &builder.departmentId

	}
	if builder.openDepartmentIdFlag {
		req.OpenDepartmentId = &builder.openDepartmentId

	}
	return req
}

type Field struct {
	ApiName       *string           `json:"api_name,omitempty"`       // 字段标识
	Label         map[string]string `json:"label,omitempty"`          // 字段名称
	AiDescription *string           `json:"ai_description,omitempty"` // 字段描述信息
	AccessItems   []string          `json:"access_items,omitempty"`   // 字段值读写权限
	TypeName      *string           `json:"type_name,omitempty"`      // 字段的类型
	FieldSetting  *FieldSetting     `json:"field_setting,omitempty"`  // 字段的属性
}

type FieldBuilder struct {
	apiName           string // 字段标识
	apiNameFlag       bool
	label             map[string]string // 字段名称
	labelFlag         bool
	aiDescription     string // 字段描述信息
	aiDescriptionFlag bool
	accessItems       []string // 字段值读写权限
	accessItemsFlag   bool
	typeName          string // 字段的类型
	typeNameFlag      bool
	fieldSetting      *FieldSetting // 字段的属性
	fieldSettingFlag  bool
}

func NewFieldBuilder() *FieldBuilder {
	builder := &FieldBuilder{}
	return builder
}

// 字段标识
//
// 示例值：object_a
func (builder *FieldBuilder) ApiName(apiName string) *FieldBuilder {
	builder.apiName = apiName
	builder.apiNameFlag = true
	return builder
}

// 字段名称
//
// 示例值：
func (builder *FieldBuilder) Label(label map[string]string) *FieldBuilder {
	builder.label = label
	builder.labelFlag = true
	return builder
}

// 字段描述信息
//
// 示例值：这是一个商品的数据表
func (builder *FieldBuilder) AiDescription(aiDescription string) *FieldBuilder {
	builder.aiDescription = aiDescription
	builder.aiDescriptionFlag = true
	return builder
}

// 字段值读写权限
//
// 示例值：
func (builder *FieldBuilder) AccessItems(accessItems []string) *FieldBuilder {
	builder.accessItems = accessItems
	builder.accessItemsFlag = true
	return builder
}

// 字段的类型
//
// 示例值：bool
func (builder *FieldBuilder) TypeName(typeName string) *FieldBuilder {
	builder.typeName = typeName
	builder.typeNameFlag = true
	return builder
}

// 字段的属性
//
// 示例值：
func (builder *FieldBuilder) FieldSetting(fieldSetting *FieldSetting) *FieldBuilder {
	builder.fieldSetting = fieldSetting
	builder.fieldSettingFlag = true
	return builder
}

func (builder *FieldBuilder) Build() *Field {
	req := &Field{}
	if builder.apiNameFlag {
		req.ApiName = &builder.apiName

	}
	if builder.labelFlag {
		req.Label = builder.label
	}
	if builder.aiDescriptionFlag {
		req.AiDescription = &builder.aiDescription

	}
	if builder.accessItemsFlag {
		req.AccessItems = builder.accessItems
	}
	if builder.typeNameFlag {
		req.TypeName = &builder.typeName

	}
	if builder.fieldSettingFlag {
		req.FieldSetting = builder.fieldSetting
	}
	return req
}

type FieldSetting struct {
	Required            *bool    `json:"required,omitempty"`               // 必填属性
	Unique              *bool    `json:"unique,omitempty"`                 // 唯一性属性
	CaseSensitive       *bool    `json:"case_sensitive,omitempty"`         // 大小写敏感的唯一性
	TextMaxLength       *int     `json:"text_max_length,omitempty"`        // 文本最大长度
	Multiple            *bool    `json:"multiple,omitempty"`               // 是否多值
	LookupObjectApiName *string  `json:"lookup_object_api_name,omitempty"` // 关联对象的标识
	Options             []string `json:"options,omitempty"`                // 选项字段的选项值
	Detail              *string  `json:"detail,omitempty"`                 // 属性扩展信息
}

type FieldSettingBuilder struct {
	required                bool // 必填属性
	requiredFlag            bool
	unique                  bool // 唯一性属性
	uniqueFlag              bool
	caseSensitive           bool // 大小写敏感的唯一性
	caseSensitiveFlag       bool
	textMaxLength           int // 文本最大长度
	textMaxLengthFlag       bool
	multiple                bool // 是否多值
	multipleFlag            bool
	lookupObjectApiName     string // 关联对象的标识
	lookupObjectApiNameFlag bool
	options                 []string // 选项字段的选项值
	optionsFlag             bool
	detail                  string // 属性扩展信息
	detailFlag              bool
}

func NewFieldSettingBuilder() *FieldSettingBuilder {
	builder := &FieldSettingBuilder{}
	return builder
}

// 必填属性
//
// 示例值：false
func (builder *FieldSettingBuilder) Required(required bool) *FieldSettingBuilder {
	builder.required = required
	builder.requiredFlag = true
	return builder
}

// 唯一性属性
//
// 示例值：
func (builder *FieldSettingBuilder) Unique(unique bool) *FieldSettingBuilder {
	builder.unique = unique
	builder.uniqueFlag = true
	return builder
}

// 大小写敏感的唯一性
//
// 示例值：
func (builder *FieldSettingBuilder) CaseSensitive(caseSensitive bool) *FieldSettingBuilder {
	builder.caseSensitive = caseSensitive
	builder.caseSensitiveFlag = true
	return builder
}

// 文本最大长度
//
// 示例值：200
func (builder *FieldSettingBuilder) TextMaxLength(textMaxLength int) *FieldSettingBuilder {
	builder.textMaxLength = textMaxLength
	builder.textMaxLengthFlag = true
	return builder
}

// 是否多值
//
// 示例值：
func (builder *FieldSettingBuilder) Multiple(multiple bool) *FieldSettingBuilder {
	builder.multiple = multiple
	builder.multipleFlag = true
	return builder
}

// 关联对象的标识
//
// 示例值：_user
func (builder *FieldSettingBuilder) LookupObjectApiName(lookupObjectApiName string) *FieldSettingBuilder {
	builder.lookupObjectApiName = lookupObjectApiName
	builder.lookupObjectApiNameFlag = true
	return builder
}

// 选项字段的选项值
//
// 示例值：
func (builder *FieldSettingBuilder) Options(options []string) *FieldSettingBuilder {
	builder.options = options
	builder.optionsFlag = true
	return builder
}

// 属性扩展信息
//
// 示例值：[	 {	   "label": {		 "zh_cn": "示例文本",		 "en_us": "Sample text"	 },	   "api_name": "optionA",	   "description":{		 "zh_cn": "示例文本",		 "en_us": "Sample text"	 },	   "color": "R",	   "active": true	 }   ]
func (builder *FieldSettingBuilder) Detail(detail string) *FieldSettingBuilder {
	builder.detail = detail
	builder.detailFlag = true
	return builder
}

func (builder *FieldSettingBuilder) Build() *FieldSetting {
	req := &FieldSetting{}
	if builder.requiredFlag {
		req.Required = &builder.required

	}
	if builder.uniqueFlag {
		req.Unique = &builder.unique

	}
	if builder.caseSensitiveFlag {
		req.CaseSensitive = &builder.caseSensitive

	}
	if builder.textMaxLengthFlag {
		req.TextMaxLength = &builder.textMaxLength

	}
	if builder.multipleFlag {
		req.Multiple = &builder.multiple

	}
	if builder.lookupObjectApiNameFlag {
		req.LookupObjectApiName = &builder.lookupObjectApiName

	}
	if builder.optionsFlag {
		req.Options = builder.options
	}
	if builder.detailFlag {
		req.Detail = &builder.detail

	}
	return req
}

type Intent struct {
	Id          *string       `json:"id,omitempty"`           // 意图 id
	CreatedAt   *string       `json:"created_at,omitempty"`   // 意图创建时间，毫秒时间戳
	SessionId   *string       `json:"session_id,omitempty"`   // 意图所属会话 id
	Status      *string       `json:"status,omitempty"`       // 意图状态
	SubStatus   *string       `json:"sub_status,omitempty"`   // 意图子状态
	ChannelType *string       `json:"channel_type,omitempty"` // 渠道类型
	Error       *MessageError `json:"error,omitempty"`        // 意图失败原因
}

type IntentBuilder struct {
	id              string // 意图 id
	idFlag          bool
	createdAt       string // 意图创建时间，毫秒时间戳
	createdAtFlag   bool
	sessionId       string // 意图所属会话 id
	sessionIdFlag   bool
	status          string // 意图状态
	statusFlag      bool
	subStatus       string // 意图子状态
	subStatusFlag   bool
	channelType     string // 渠道类型
	channelTypeFlag bool
	error           *MessageError // 意图失败原因
	errorFlag       bool
}

func NewIntentBuilder() *IntentBuilder {
	builder := &IntentBuilder{}
	return builder
}

// 意图 id
//
// 示例值：7317093049367298068
func (builder *IntentBuilder) Id(id string) *IntentBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

// 意图创建时间，毫秒时间戳
//
// 示例值：1703658042000
func (builder *IntentBuilder) CreatedAt(createdAt string) *IntentBuilder {
	builder.createdAt = createdAt
	builder.createdAtFlag = true
	return builder
}

// 意图所属会话 id
//
// 示例值：7317091019140972563
func (builder *IntentBuilder) SessionId(sessionId string) *IntentBuilder {
	builder.sessionId = sessionId
	builder.sessionIdFlag = true
	return builder
}

// 意图状态
//
// 示例值：RUNNING
func (builder *IntentBuilder) Status(status string) *IntentBuilder {
	builder.status = status
	builder.statusFlag = true
	return builder
}

// 意图子状态
//
// 示例值：WAITING_USER_RESPOND
func (builder *IntentBuilder) SubStatus(subStatus string) *IntentBuilder {
	builder.subStatus = subStatus
	builder.subStatusFlag = true
	return builder
}

// 渠道类型
//
// 示例值：LARK_OPEN_API
func (builder *IntentBuilder) ChannelType(channelType string) *IntentBuilder {
	builder.channelType = channelType
	builder.channelTypeFlag = true
	return builder
}

// 意图失败原因
//
// 示例值：
func (builder *IntentBuilder) Error(error *MessageError) *IntentBuilder {
	builder.error = error
	builder.errorFlag = true
	return builder
}

func (builder *IntentBuilder) Build() *Intent {
	req := &Intent{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.createdAtFlag {
		req.CreatedAt = &builder.createdAt

	}
	if builder.sessionIdFlag {
		req.SessionId = &builder.sessionId

	}
	if builder.statusFlag {
		req.Status = &builder.status

	}
	if builder.subStatusFlag {
		req.SubStatus = &builder.subStatus

	}
	if builder.channelTypeFlag {
		req.ChannelType = &builder.channelType

	}
	if builder.errorFlag {
		req.Error = builder.error
	}
	return req
}

type Kctx struct {
	TenantId               *int    `json:"tenant_id,omitempty"`                 // 租户 id
	UserId                 *int    `json:"user_id,omitempty"`                   // 用户 id
	TenantDomainName       *string `json:"tenant_domain_name,omitempty"`        // 租户域名
	UserSetting            *string `json:"user_setting,omitempty"`              // 用户设置
	LangId                 *int    `json:"lang_id,omitempty"`                   // 语言
	RequestId              *string `json:"request_id,omitempty"`                // 请求 id
	Host                   *string `json:"host,omitempty"`                      // 域名
	TenantResourceRouteKey *string `json:"tenant_resource_route_key,omitempty"` // 资源路由 key
	Namespace              *string `json:"namespace,omitempty"`                 // 命名空间
	TenantType             *int    `json:"tenant_type,omitempty"`               // 租户类型
	TransactionId          *int    `json:"transaction_id,omitempty"`            // 事务ID
	ConsistencyRetryType   *string `json:"ConsistencyRetryType,omitempty"`      // consistency retry type
	PsmLink                *string `json:"PsmLink,omitempty"`                   // psm link
	BreakoutRetryPsm       *string `json:"BreakoutRetryPsm,omitempty"`          // breakout retry psm
	CredentialID           *string `json:"CredentialID,omitempty"`              // credential id
	AuthenticationType     *string `json:"AuthenticationType,omitempty"`        // 鉴权类型
}

type KctxBuilder struct {
	tenantId                   int // 租户 id
	tenantIdFlag               bool
	userId                     int // 用户 id
	userIdFlag                 bool
	tenantDomainName           string // 租户域名
	tenantDomainNameFlag       bool
	userSetting                string // 用户设置
	userSettingFlag            bool
	langId                     int // 语言
	langIdFlag                 bool
	requestId                  string // 请求 id
	requestIdFlag              bool
	host                       string // 域名
	hostFlag                   bool
	tenantResourceRouteKey     string // 资源路由 key
	tenantResourceRouteKeyFlag bool
	namespace                  string // 命名空间
	namespaceFlag              bool
	tenantType                 int // 租户类型
	tenantTypeFlag             bool
	transactionId              int // 事务ID
	transactionIdFlag          bool
	consistencyRetryType       string // consistency retry type
	consistencyRetryTypeFlag   bool
	psmLink                    string // psm link
	psmLinkFlag                bool
	breakoutRetryPsm           string // breakout retry psm
	breakoutRetryPsmFlag       bool
	credentialID               string // credential id
	credentialIDFlag           bool
	authenticationType         string // 鉴权类型
	authenticationTypeFlag     bool
}

func NewKctxBuilder() *KctxBuilder {
	builder := &KctxBuilder{}
	return builder
}

// 租户 id
//
// 示例值：0
func (builder *KctxBuilder) TenantId(tenantId int) *KctxBuilder {
	builder.tenantId = tenantId
	builder.tenantIdFlag = true
	return builder
}

// 用户 id
//
// 示例值：
func (builder *KctxBuilder) UserId(userId int) *KctxBuilder {
	builder.userId = userId
	builder.userIdFlag = true
	return builder
}

// 租户域名
//
// 示例值：apaas
func (builder *KctxBuilder) TenantDomainName(tenantDomainName string) *KctxBuilder {
	builder.tenantDomainName = tenantDomainName
	builder.tenantDomainNameFlag = true
	return builder
}

// 用户设置
//
// 示例值："{}"
func (builder *KctxBuilder) UserSetting(userSetting string) *KctxBuilder {
	builder.userSetting = userSetting
	builder.userSettingFlag = true
	return builder
}

// 语言
//
// 示例值：1033
func (builder *KctxBuilder) LangId(langId int) *KctxBuilder {
	builder.langId = langId
	builder.langIdFlag = true
	return builder
}

// 请求 id
//
// 示例值：a
func (builder *KctxBuilder) RequestId(requestId string) *KctxBuilder {
	builder.requestId = requestId
	builder.requestIdFlag = true
	return builder
}

// 域名
//
// 示例值：a
func (builder *KctxBuilder) Host(host string) *KctxBuilder {
	builder.host = host
	builder.hostFlag = true
	return builder
}

// 资源路由 key
//
// 示例值："a"
func (builder *KctxBuilder) TenantResourceRouteKey(tenantResourceRouteKey string) *KctxBuilder {
	builder.tenantResourceRouteKey = tenantResourceRouteKey
	builder.tenantResourceRouteKeyFlag = true
	return builder
}

// 命名空间
//
// 示例值：package_abc
func (builder *KctxBuilder) Namespace(namespace string) *KctxBuilder {
	builder.namespace = namespace
	builder.namespaceFlag = true
	return builder
}

// 租户类型
//
// 示例值：1
func (builder *KctxBuilder) TenantType(tenantType int) *KctxBuilder {
	builder.tenantType = tenantType
	builder.tenantTypeFlag = true
	return builder
}

// 事务ID
//
// 示例值：0
func (builder *KctxBuilder) TransactionId(transactionId int) *KctxBuilder {
	builder.transactionId = transactionId
	builder.transactionIdFlag = true
	return builder
}

// consistency retry type
//
// 示例值：a
func (builder *KctxBuilder) ConsistencyRetryType(consistencyRetryType string) *KctxBuilder {
	builder.consistencyRetryType = consistencyRetryType
	builder.consistencyRetryTypeFlag = true
	return builder
}

// psm link
//
// 示例值：a
func (builder *KctxBuilder) PsmLink(psmLink string) *KctxBuilder {
	builder.psmLink = psmLink
	builder.psmLinkFlag = true
	return builder
}

// breakout retry psm
//
// 示例值：a
func (builder *KctxBuilder) BreakoutRetryPsm(breakoutRetryPsm string) *KctxBuilder {
	builder.breakoutRetryPsm = breakoutRetryPsm
	builder.breakoutRetryPsmFlag = true
	return builder
}

// credential id
//
// 示例值：a
func (builder *KctxBuilder) CredentialID(credentialID string) *KctxBuilder {
	builder.credentialID = credentialID
	builder.credentialIDFlag = true
	return builder
}

// 鉴权类型
//
// 示例值：user
func (builder *KctxBuilder) AuthenticationType(authenticationType string) *KctxBuilder {
	builder.authenticationType = authenticationType
	builder.authenticationTypeFlag = true
	return builder
}

func (builder *KctxBuilder) Build() *Kctx {
	req := &Kctx{}
	if builder.tenantIdFlag {
		req.TenantId = &builder.tenantId

	}
	if builder.userIdFlag {
		req.UserId = &builder.userId

	}
	if builder.tenantDomainNameFlag {
		req.TenantDomainName = &builder.tenantDomainName

	}
	if builder.userSettingFlag {
		req.UserSetting = &builder.userSetting

	}
	if builder.langIdFlag {
		req.LangId = &builder.langId

	}
	if builder.requestIdFlag {
		req.RequestId = &builder.requestId

	}
	if builder.hostFlag {
		req.Host = &builder.host

	}
	if builder.tenantResourceRouteKeyFlag {
		req.TenantResourceRouteKey = &builder.tenantResourceRouteKey

	}
	if builder.namespaceFlag {
		req.Namespace = &builder.namespace

	}
	if builder.tenantTypeFlag {
		req.TenantType = &builder.tenantType

	}
	if builder.transactionIdFlag {
		req.TransactionId = &builder.transactionId

	}
	if builder.consistencyRetryTypeFlag {
		req.ConsistencyRetryType = &builder.consistencyRetryType

	}
	if builder.psmLinkFlag {
		req.PsmLink = &builder.psmLink

	}
	if builder.breakoutRetryPsmFlag {
		req.BreakoutRetryPsm = &builder.breakoutRetryPsm

	}
	if builder.credentialIDFlag {
		req.CredentialID = &builder.credentialID

	}
	if builder.authenticationTypeFlag {
		req.AuthenticationType = &builder.authenticationType

	}
	return req
}

type Message struct {
	Id              *string          `json:"id,omitempty"`               // 消息 id
	Title           *string          `json:"title,omitempty"`            // 消息标题
	Content         *string          `json:"content,omitempty"`          // 消息内容
	MessageStatus   *string          `json:"message_status,omitempty"`   // 消息状态
	BuiltinActions  []*BuiltinAction `json:"builtin_actions,omitempty"`  // 消息上可接收的 action
	SkillBaseInfos  []*SkillBaseInfo `json:"skill_base_infos,omitempty"` // 使用的 skill 信息
	MessageProgress *MessageProgress `json:"message_progress,omitempty"` // 进度条消息
	Sender          *Sender          `json:"sender,omitempty"`           // 发送者信息
	Error           *MessageError    `json:"error,omitempty"`            // 错误信息
	TriggerType     *string          `json:"trigger_type,omitempty"`     // 触发类型
	Visibility      *string          `json:"visibility,omitempty"`       // 消息的可见性
}

type MessageBuilder struct {
	id                  string // 消息 id
	idFlag              bool
	title               string // 消息标题
	titleFlag           bool
	content             string // 消息内容
	contentFlag         bool
	messageStatus       string // 消息状态
	messageStatusFlag   bool
	builtinActions      []*BuiltinAction // 消息上可接收的 action
	builtinActionsFlag  bool
	skillBaseInfos      []*SkillBaseInfo // 使用的 skill 信息
	skillBaseInfosFlag  bool
	messageProgress     *MessageProgress // 进度条消息
	messageProgressFlag bool
	sender              *Sender // 发送者信息
	senderFlag          bool
	error               *MessageError // 错误信息
	errorFlag           bool
	triggerType         string // 触发类型
	triggerTypeFlag     bool
	visibility          string // 消息的可见性
	visibilityFlag      bool
}

func NewMessageBuilder() *MessageBuilder {
	builder := &MessageBuilder{}
	return builder
}

// 消息 id
//
// 示例值：7316801852719906836
func (builder *MessageBuilder) Id(id string) *MessageBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

// 消息标题
//
// 示例值：正在生成中...
func (builder *MessageBuilder) Title(title string) *MessageBuilder {
	builder.title = title
	builder.titleFlag = true
	return builder
}

// 消息内容
//
// 示例值：{}
func (builder *MessageBuilder) Content(content string) *MessageBuilder {
	builder.content = content
	builder.contentFlag = true
	return builder
}

// 消息状态
//
// 示例值：FINISHED
func (builder *MessageBuilder) MessageStatus(messageStatus string) *MessageBuilder {
	builder.messageStatus = messageStatus
	builder.messageStatusFlag = true
	return builder
}

// 消息上可接收的 action
//
// 示例值：
func (builder *MessageBuilder) BuiltinActions(builtinActions []*BuiltinAction) *MessageBuilder {
	builder.builtinActions = builtinActions
	builder.builtinActionsFlag = true
	return builder
}

// 使用的 skill 信息
//
// 示例值：
func (builder *MessageBuilder) SkillBaseInfos(skillBaseInfos []*SkillBaseInfo) *MessageBuilder {
	builder.skillBaseInfos = skillBaseInfos
	builder.skillBaseInfosFlag = true
	return builder
}

// 进度条消息
//
// 示例值：
func (builder *MessageBuilder) MessageProgress(messageProgress *MessageProgress) *MessageBuilder {
	builder.messageProgress = messageProgress
	builder.messageProgressFlag = true
	return builder
}

// 发送者信息
//
// 示例值：
func (builder *MessageBuilder) Sender(sender *Sender) *MessageBuilder {
	builder.sender = sender
	builder.senderFlag = true
	return builder
}

// 错误信息
//
// 示例值：
func (builder *MessageBuilder) Error(error *MessageError) *MessageBuilder {
	builder.error = error
	builder.errorFlag = true
	return builder
}

// 触发类型
//
// 示例值：”
func (builder *MessageBuilder) TriggerType(triggerType string) *MessageBuilder {
	builder.triggerType = triggerType
	builder.triggerTypeFlag = true
	return builder
}

// 消息的可见性
//
// 示例值：SELF
func (builder *MessageBuilder) Visibility(visibility string) *MessageBuilder {
	builder.visibility = visibility
	builder.visibilityFlag = true
	return builder
}

func (builder *MessageBuilder) Build() *Message {
	req := &Message{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.titleFlag {
		req.Title = &builder.title

	}
	if builder.contentFlag {
		req.Content = &builder.content

	}
	if builder.messageStatusFlag {
		req.MessageStatus = &builder.messageStatus

	}
	if builder.builtinActionsFlag {
		req.BuiltinActions = builder.builtinActions
	}
	if builder.skillBaseInfosFlag {
		req.SkillBaseInfos = builder.skillBaseInfos
	}
	if builder.messageProgressFlag {
		req.MessageProgress = builder.messageProgress
	}
	if builder.senderFlag {
		req.Sender = builder.sender
	}
	if builder.errorFlag {
		req.Error = builder.error
	}
	if builder.triggerTypeFlag {
		req.TriggerType = &builder.triggerType

	}
	if builder.visibilityFlag {
		req.Visibility = &builder.visibility

	}
	return req
}

type MessageError struct {
	Code      *string `json:"code,omitempty"`       // 错误码
	Message   *string `json:"message,omitempty"`    // 错误消息
	ErrorType *string `json:"error_type,omitempty"` // 错误类型
	LogId     *string `json:"log_id,omitempty"`     // 反馈码
	Title     *string `json:"title,omitempty"`      // 错误标题
}

type MessageErrorBuilder struct {
	code          string // 错误码
	codeFlag      bool
	message       string // 错误消息
	messageFlag   bool
	errorType     string // 错误类型
	errorTypeFlag bool
	logId         string // 反馈码
	logIdFlag     bool
	title         string // 错误标题
	titleFlag     bool
}

func NewMessageErrorBuilder() *MessageErrorBuilder {
	builder := &MessageErrorBuilder{}
	return builder
}

// 错误码
//
// 示例值：sp_ec_cr_200001
func (builder *MessageErrorBuilder) Code(code string) *MessageErrorBuilder {
	builder.code = code
	builder.codeFlag = true
	return builder
}

// 错误消息
//
// 示例值：意图状态不合法，当前为1，实际为4
func (builder *MessageErrorBuilder) Message(message string) *MessageErrorBuilder {
	builder.message = message
	builder.messageFlag = true
	return builder
}

// 错误类型
//
// 示例值：SYSTEM
func (builder *MessageErrorBuilder) ErrorType(errorType string) *MessageErrorBuilder {
	builder.errorType = errorType
	builder.errorTypeFlag = true
	return builder
}

// 反馈码
//
// 示例值：2023122620474996FAC90E4B49302D7C93
func (builder *MessageErrorBuilder) LogId(logId string) *MessageErrorBuilder {
	builder.logId = logId
	builder.logIdFlag = true
	return builder
}

// 错误标题
//
// 示例值：意图状态不合法
func (builder *MessageErrorBuilder) Title(title string) *MessageErrorBuilder {
	builder.title = title
	builder.titleFlag = true
	return builder
}

func (builder *MessageErrorBuilder) Build() *MessageError {
	req := &MessageError{}
	if builder.codeFlag {
		req.Code = &builder.code

	}
	if builder.messageFlag {
		req.Message = &builder.message

	}
	if builder.errorTypeFlag {
		req.ErrorType = &builder.errorType

	}
	if builder.logIdFlag {
		req.LogId = &builder.logId

	}
	if builder.titleFlag {
		req.Title = &builder.title

	}
	return req
}

type MessageProgress struct {
	ProgressType  *string         `json:"progress_type,omitempty"`  // 进度条类型
	ProgressItems []*ProgressItem `json:"progress_items,omitempty"` // 进度条项
}

type MessageProgressBuilder struct {
	progressType      string // 进度条类型
	progressTypeFlag  bool
	progressItems     []*ProgressItem // 进度条项
	progressItemsFlag bool
}

func NewMessageProgressBuilder() *MessageProgressBuilder {
	builder := &MessageProgressBuilder{}
	return builder
}

// 进度条类型
//
// 示例值：LIST
func (builder *MessageProgressBuilder) ProgressType(progressType string) *MessageProgressBuilder {
	builder.progressType = progressType
	builder.progressTypeFlag = true
	return builder
}

// 进度条项
//
// 示例值：
func (builder *MessageProgressBuilder) ProgressItems(progressItems []*ProgressItem) *MessageProgressBuilder {
	builder.progressItems = progressItems
	builder.progressItemsFlag = true
	return builder
}

func (builder *MessageProgressBuilder) Build() *MessageProgress {
	req := &MessageProgress{}
	if builder.progressTypeFlag {
		req.ProgressType = &builder.progressType

	}
	if builder.progressItemsFlag {
		req.ProgressItems = builder.progressItems
	}
	return req
}

type MessageWithOperation struct {
	Message       *Message `json:"message,omitempty"`        // 消息内容
	OperationType *string  `json:"operation_type,omitempty"` // 操作类型
	OperationId   *string  `json:"operation_id,omitempty"`   // 操作 id
	IntentId      *string  `json:"intent_id,omitempty"`      // 产生操作的意图 id
}

type MessageWithOperationBuilder struct {
	message           *Message // 消息内容
	messageFlag       bool
	operationType     string // 操作类型
	operationTypeFlag bool
	operationId       string // 操作 id
	operationIdFlag   bool
	intentId          string // 产生操作的意图 id
	intentIdFlag      bool
}

func NewMessageWithOperationBuilder() *MessageWithOperationBuilder {
	builder := &MessageWithOperationBuilder{}
	return builder
}

// 消息内容
//
// 示例值：
func (builder *MessageWithOperationBuilder) Message(message *Message) *MessageWithOperationBuilder {
	builder.message = message
	builder.messageFlag = true
	return builder
}

// 操作类型
//
// 示例值：APPEND
func (builder *MessageWithOperationBuilder) OperationType(operationType string) *MessageWithOperationBuilder {
	builder.operationType = operationType
	builder.operationTypeFlag = true
	return builder
}

// 操作 id
//
// 示例值：7317091517491167252
func (builder *MessageWithOperationBuilder) OperationId(operationId string) *MessageWithOperationBuilder {
	builder.operationId = operationId
	builder.operationIdFlag = true
	return builder
}

// 产生操作的意图 id
//
// 示例值：7317093049367298068
func (builder *MessageWithOperationBuilder) IntentId(intentId string) *MessageWithOperationBuilder {
	builder.intentId = intentId
	builder.intentIdFlag = true
	return builder
}

func (builder *MessageWithOperationBuilder) Build() *MessageWithOperation {
	req := &MessageWithOperation{}
	if builder.messageFlag {
		req.Message = builder.message
	}
	if builder.operationTypeFlag {
		req.OperationType = &builder.operationType

	}
	if builder.operationIdFlag {
		req.OperationId = &builder.operationId

	}
	if builder.intentIdFlag {
		req.IntentId = &builder.intentId

	}
	return req
}

type ObjectSetting struct {
	DisplayName *string  `json:"display_name,omitempty"` // 数据表展示字段
	FieldOrders []string `json:"field_orders,omitempty"` // 字段顺序
}

type ObjectSettingBuilder struct {
	displayName     string // 数据表展示字段
	displayNameFlag bool
	fieldOrders     []string // 字段顺序
	fieldOrdersFlag bool
}

func NewObjectSettingBuilder() *ObjectSettingBuilder {
	builder := &ObjectSettingBuilder{}
	return builder
}

// 数据表展示字段
//
// 示例值："_id"
func (builder *ObjectSettingBuilder) DisplayName(displayName string) *ObjectSettingBuilder {
	builder.displayName = displayName
	builder.displayNameFlag = true
	return builder
}

// 字段顺序
//
// 示例值：
func (builder *ObjectSettingBuilder) FieldOrders(fieldOrders []string) *ObjectSettingBuilder {
	builder.fieldOrders = fieldOrders
	builder.fieldOrdersFlag = true
	return builder
}

func (builder *ObjectSettingBuilder) Build() *ObjectSetting {
	req := &ObjectSetting{}
	if builder.displayNameFlag {
		req.DisplayName = &builder.displayName

	}
	if builder.fieldOrdersFlag {
		req.FieldOrders = builder.fieldOrders
	}
	return req
}

type OrderCondition struct {
	Field     *string `json:"field,omitempty"`     // 字段名
	Direction *string `json:"direction,omitempty"` // 排序方式
}

type OrderConditionBuilder struct {
	field         string // 字段名
	fieldFlag     bool
	direction     string // 排序方式
	directionFlag bool
}

func NewOrderConditionBuilder() *OrderConditionBuilder {
	builder := &OrderConditionBuilder{}
	return builder
}

// 字段名
//
// 示例值：name
func (builder *OrderConditionBuilder) Field(field string) *OrderConditionBuilder {
	builder.field = field
	builder.fieldFlag = true
	return builder
}

// 排序方式
//
// 示例值：asc
func (builder *OrderConditionBuilder) Direction(direction string) *OrderConditionBuilder {
	builder.direction = direction
	builder.directionFlag = true
	return builder
}

func (builder *OrderConditionBuilder) Build() *OrderCondition {
	req := &OrderCondition{}
	if builder.fieldFlag {
		req.Field = &builder.field

	}
	if builder.directionFlag {
		req.Direction = &builder.direction

	}
	return req
}

type ProgressItem struct {
	ProgressItemState *string  `json:"progress_item_state,omitempty"` // 进度条项状态
	Content           *string  `json:"content,omitempty"`             // 进度条项内容
	SkillId           *string  `json:"skill_id,omitempty"`            // 选中的技能 id
	NodeId            *string  `json:"node_id,omitempty"`             // 节点 id
	NodeType          *string  `json:"node_type,omitempty"`           // 节点类型
	Input             *string  `json:"input,omitempty"`               // 节点输入，调试模式返回
	Output            *string  `json:"output,omitempty"`              // 节点输出，调试模式返回
	Usages            []string `json:"usages,omitempty"`              // 节点的时间以及 Token 消耗
	SkillStrategy     *string  `json:"skill_strategy,omitempty"`      // 技能选择策略
}

type ProgressItemBuilder struct {
	progressItemState     string // 进度条项状态
	progressItemStateFlag bool
	content               string // 进度条项内容
	contentFlag           bool
	skillId               string // 选中的技能 id
	skillIdFlag           bool
	nodeId                string // 节点 id
	nodeIdFlag            bool
	nodeType              string // 节点类型
	nodeTypeFlag          bool
	input                 string // 节点输入，调试模式返回
	inputFlag             bool
	output                string // 节点输出，调试模式返回
	outputFlag            bool
	usages                []string // 节点的时间以及 Token 消耗
	usagesFlag            bool
	skillStrategy         string // 技能选择策略
	skillStrategyFlag     bool
}

func NewProgressItemBuilder() *ProgressItemBuilder {
	builder := &ProgressItemBuilder{}
	return builder
}

// 进度条项状态
//
// 示例值：RUNNING
func (builder *ProgressItemBuilder) ProgressItemState(progressItemState string) *ProgressItemBuilder {
	builder.progressItemState = progressItemState
	builder.progressItemStateFlag = true
	return builder
}

// 进度条项内容
//
// 示例值：抽取字段
func (builder *ProgressItemBuilder) Content(content string) *ProgressItemBuilder {
	builder.content = content
	builder.contentFlag = true
	return builder
}

// 选中的技能 id
//
// 示例值：skill_43ec7b438a59
func (builder *ProgressItemBuilder) SkillId(skillId string) *ProgressItemBuilder {
	builder.skillId = skillId
	builder.skillIdFlag = true
	return builder
}

// 节点 id
//
// 示例值：7316877623309058067
func (builder *ProgressItemBuilder) NodeId(nodeId string) *ProgressItemBuilder {
	builder.nodeId = nodeId
	builder.nodeIdFlag = true
	return builder
}

// 节点类型
//
// 示例值：skill-selector
func (builder *ProgressItemBuilder) NodeType(nodeType string) *ProgressItemBuilder {
	builder.nodeType = nodeType
	builder.nodeTypeFlag = true
	return builder
}

// 节点输入，调试模式返回
//
// 示例值：{}
func (builder *ProgressItemBuilder) Input(input string) *ProgressItemBuilder {
	builder.input = input
	builder.inputFlag = true
	return builder
}

// 节点输出，调试模式返回
//
// 示例值：{}
func (builder *ProgressItemBuilder) Output(output string) *ProgressItemBuilder {
	builder.output = output
	builder.outputFlag = true
	return builder
}

// 节点的时间以及 Token 消耗
//
// 示例值：
func (builder *ProgressItemBuilder) Usages(usages []string) *ProgressItemBuilder {
	builder.usages = usages
	builder.usagesFlag = true
	return builder
}

// 技能选择策略
//
// 示例值：AUTO
func (builder *ProgressItemBuilder) SkillStrategy(skillStrategy string) *ProgressItemBuilder {
	builder.skillStrategy = skillStrategy
	builder.skillStrategyFlag = true
	return builder
}

func (builder *ProgressItemBuilder) Build() *ProgressItem {
	req := &ProgressItem{}
	if builder.progressItemStateFlag {
		req.ProgressItemState = &builder.progressItemState

	}
	if builder.contentFlag {
		req.Content = &builder.content

	}
	if builder.skillIdFlag {
		req.SkillId = &builder.skillId

	}
	if builder.nodeIdFlag {
		req.NodeId = &builder.nodeId

	}
	if builder.nodeTypeFlag {
		req.NodeType = &builder.nodeType

	}
	if builder.inputFlag {
		req.Input = &builder.input

	}
	if builder.outputFlag {
		req.Output = &builder.output

	}
	if builder.usagesFlag {
		req.Usages = builder.usages
	}
	if builder.skillStrategyFlag {
		req.SkillStrategy = &builder.skillStrategy

	}
	return req
}

type RecordError struct {
	Code    *string `json:"code,omitempty"`    // 内部错误码
	Message *string `json:"message,omitempty"` // 错误文本
}

type RecordErrorBuilder struct {
	code        string // 内部错误码
	codeFlag    bool
	message     string // 错误文本
	messageFlag bool
}

func NewRecordErrorBuilder() *RecordErrorBuilder {
	builder := &RecordErrorBuilder{}
	return builder
}

// 内部错误码
//
// 示例值：k_mt_ec_001000
func (builder *RecordErrorBuilder) Code(code string) *RecordErrorBuilder {
	builder.code = code
	builder.codeFlag = true
	return builder
}

// 错误文本
//
// 示例值：权限不足
func (builder *RecordErrorBuilder) Message(message string) *RecordErrorBuilder {
	builder.message = message
	builder.messageFlag = true
	return builder
}

func (builder *RecordErrorBuilder) Build() *RecordError {
	req := &RecordError{}
	if builder.codeFlag {
		req.Code = &builder.code

	}
	if builder.messageFlag {
		req.Message = &builder.message

	}
	return req
}

type RecordQueryOption struct {
	StringifyNumber     *bool `json:"stringify_number,omitempty"`      // 是否以字符串形式返回数字
	NormalizeColumnName *bool `json:"normalize_column_name,omitempty"` // 返回的列名是否去除特殊字符
}

type RecordQueryOptionBuilder struct {
	stringifyNumber         bool // 是否以字符串形式返回数字
	stringifyNumberFlag     bool
	normalizeColumnName     bool // 返回的列名是否去除特殊字符
	normalizeColumnNameFlag bool
}

func NewRecordQueryOptionBuilder() *RecordQueryOptionBuilder {
	builder := &RecordQueryOptionBuilder{}
	return builder
}

// 是否以字符串形式返回数字
//
// 示例值：false
func (builder *RecordQueryOptionBuilder) StringifyNumber(stringifyNumber bool) *RecordQueryOptionBuilder {
	builder.stringifyNumber = stringifyNumber
	builder.stringifyNumberFlag = true
	return builder
}

// 返回的列名是否去除特殊字符
//
// 示例值：false
func (builder *RecordQueryOptionBuilder) NormalizeColumnName(normalizeColumnName bool) *RecordQueryOptionBuilder {
	builder.normalizeColumnName = normalizeColumnName
	builder.normalizeColumnNameFlag = true
	return builder
}

func (builder *RecordQueryOptionBuilder) Build() *RecordQueryOption {
	req := &RecordQueryOption{}
	if builder.stringifyNumberFlag {
		req.StringifyNumber = &builder.stringifyNumber

	}
	if builder.normalizeColumnNameFlag {
		req.NormalizeColumnName = &builder.normalizeColumnName

	}
	return req
}

type RecordResult struct {
	Success         *bool          `json:"success,omitempty"`           // 是否成功
	PrimaryKeyValue *string        `json:"primary_key_value,omitempty"` // 记录失败的唯一键对应值
	Errors          []*RecordError `json:"errors,omitempty"`            // 记录失败的第一条报错
	Id              *string        `json:"_id,omitempty"`               // 记录的内部 id
}

type RecordResultBuilder struct {
	success             bool // 是否成功
	successFlag         bool
	primaryKeyValue     string // 记录失败的唯一键对应值
	primaryKeyValueFlag bool
	errors              []*RecordError // 记录失败的第一条报错
	errorsFlag          bool
	id                  string // 记录的内部 id
	idFlag              bool
}

func NewRecordResultBuilder() *RecordResultBuilder {
	builder := &RecordResultBuilder{}
	return builder
}

// 是否成功
//
// 示例值：
func (builder *RecordResultBuilder) Success(success bool) *RecordResultBuilder {
	builder.success = success
	builder.successFlag = true
	return builder
}

// 记录失败的唯一键对应值
//
// 示例值：name
func (builder *RecordResultBuilder) PrimaryKeyValue(primaryKeyValue string) *RecordResultBuilder {
	builder.primaryKeyValue = primaryKeyValue
	builder.primaryKeyValueFlag = true
	return builder
}

// 记录失败的第一条报错
//
// 示例值：
func (builder *RecordResultBuilder) Errors(errors []*RecordError) *RecordResultBuilder {
	builder.errors = errors
	builder.errorsFlag = true
	return builder
}

// 记录的内部 id
//
// 示例值：543276126389
func (builder *RecordResultBuilder) Id(id string) *RecordResultBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

func (builder *RecordResultBuilder) Build() *RecordResult {
	req := &RecordResult{}
	if builder.successFlag {
		req.Success = &builder.success

	}
	if builder.primaryKeyValueFlag {
		req.PrimaryKeyValue = &builder.primaryKeyValue

	}
	if builder.errorsFlag {
		req.Errors = builder.errors
	}
	if builder.idFlag {
		req.Id = &builder.id

	}
	return req
}

type Run struct {
	Id        *string   `json:"id,omitempty"`         // 运行 ID
	CreatedAt *string   `json:"created_at,omitempty"` // 运行的创建时间，毫秒时间戳
	AppId     *string   `json:"app_id,omitempty"`     // 应用 ID
	SessionId *string   `json:"session_id,omitempty"` // 会话 ID
	Status    *string   `json:"status,omitempty"`     // 状态
	StartedAt *string   `json:"started_at,omitempty"` // 开始时间，毫秒时间戳
	EndedAt   *string   `json:"ended_at,omitempty"`   // 结束时间，毫秒时间戳
	Error     *RunError `json:"error,omitempty"`      // 失败时的错误信息
	Metadata  *string   `json:"metadata,omitempty"`   // 其他透传信息
}

type RunBuilder struct {
	id            string // 运行 ID
	idFlag        bool
	createdAt     string // 运行的创建时间，毫秒时间戳
	createdAtFlag bool
	appId         string // 应用 ID
	appIdFlag     bool
	sessionId     string // 会话 ID
	sessionIdFlag bool
	status        string // 状态
	statusFlag    bool
	startedAt     string // 开始时间，毫秒时间戳
	startedAtFlag bool
	endedAt       string // 结束时间，毫秒时间戳
	endedAtFlag   bool
	error         *RunError // 失败时的错误信息
	errorFlag     bool
	metadata      string // 其他透传信息
	metadataFlag  bool
}

func NewRunBuilder() *RunBuilder {
	builder := &RunBuilder{}
	return builder
}

// 运行 ID
//
// 示例值：run_4dfrxvctjqzzj
func (builder *RunBuilder) Id(id string) *RunBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

// 运行的创建时间，毫秒时间戳
//
// 示例值：1711975665710
func (builder *RunBuilder) CreatedAt(createdAt string) *RunBuilder {
	builder.createdAt = createdAt
	builder.createdAtFlag = true
	return builder
}

// 应用 ID
//
// 示例值：spring_xxx__c
func (builder *RunBuilder) AppId(appId string) *RunBuilder {
	builder.appId = appId
	builder.appIdFlag = true
	return builder
}

// 会话 ID
//
// 示例值：session_4dfunz7sp1g8m
func (builder *RunBuilder) SessionId(sessionId string) *RunBuilder {
	builder.sessionId = sessionId
	builder.sessionIdFlag = true
	return builder
}

// 状态
//
// 示例值：IN_PROGRESS
func (builder *RunBuilder) Status(status string) *RunBuilder {
	builder.status = status
	builder.statusFlag = true
	return builder
}

// 开始时间，毫秒时间戳
//
// 示例值：1711975665710
func (builder *RunBuilder) StartedAt(startedAt string) *RunBuilder {
	builder.startedAt = startedAt
	builder.startedAtFlag = true
	return builder
}

// 结束时间，毫秒时间戳
//
// 示例值：1711975665710
func (builder *RunBuilder) EndedAt(endedAt string) *RunBuilder {
	builder.endedAt = endedAt
	builder.endedAtFlag = true
	return builder
}

// 失败时的错误信息
//
// 示例值：
func (builder *RunBuilder) Error(error *RunError) *RunBuilder {
	builder.error = error
	builder.errorFlag = true
	return builder
}

// 其他透传信息
//
// 示例值：{}
func (builder *RunBuilder) Metadata(metadata string) *RunBuilder {
	builder.metadata = metadata
	builder.metadataFlag = true
	return builder
}

func (builder *RunBuilder) Build() *Run {
	req := &Run{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.createdAtFlag {
		req.CreatedAt = &builder.createdAt

	}
	if builder.appIdFlag {
		req.AppId = &builder.appId

	}
	if builder.sessionIdFlag {
		req.SessionId = &builder.sessionId

	}
	if builder.statusFlag {
		req.Status = &builder.status

	}
	if builder.startedAtFlag {
		req.StartedAt = &builder.startedAt

	}
	if builder.endedAtFlag {
		req.EndedAt = &builder.endedAt

	}
	if builder.errorFlag {
		req.Error = builder.error
	}
	if builder.metadataFlag {
		req.Metadata = &builder.metadata

	}
	return req
}

type RunError struct {
	Code    *string `json:"code,omitempty"`    // 错误码
	Message *string `json:"message,omitempty"` // 错误信息
}

type RunErrorBuilder struct {
	code        string // 错误码
	codeFlag    bool
	message     string // 错误信息
	messageFlag bool
}

func NewRunErrorBuilder() *RunErrorBuilder {
	builder := &RunErrorBuilder{}
	return builder
}

// 错误码
//
// 示例值：sp_ec_sm_900101
func (builder *RunErrorBuilder) Code(code string) *RunErrorBuilder {
	builder.code = code
	builder.codeFlag = true
	return builder
}

// 错误信息
//
// 示例值：技能不存在或已删除
func (builder *RunErrorBuilder) Message(message string) *RunErrorBuilder {
	builder.message = message
	builder.messageFlag = true
	return builder
}

func (builder *RunErrorBuilder) Build() *RunError {
	req := &RunError{}
	if builder.codeFlag {
		req.Code = &builder.code

	}
	if builder.messageFlag {
		req.Message = &builder.message

	}
	return req
}

type Sender struct {
	Id         *string `json:"id,omitempty"`          // 发送人 id
	SenderType *string `json:"sender_type,omitempty"` // 发送者类型
	Name       *string `json:"name,omitempty"`        // 发送者名称
	Desc       *string `json:"desc,omitempty"`        // 发送者描述
	SenderId   *string `json:"sender_id,omitempty"`   // 发送者id
}

type SenderBuilder struct {
	id             string // 发送人 id
	idFlag         bool
	senderType     string // 发送者类型
	senderTypeFlag bool
	name           string // 发送者名称
	nameFlag       bool
	desc           string // 发送者描述
	descFlag       bool
	senderId       string // 发送者id
	senderIdFlag   bool
}

func NewSenderBuilder() *SenderBuilder {
	builder := &SenderBuilder{}
	return builder
}

// 发送人 id
//
// 示例值：1785351368700027
func (builder *SenderBuilder) Id(id string) *SenderBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

// 发送者类型
//
// 示例值：SKILL
func (builder *SenderBuilder) SenderType(senderType string) *SenderBuilder {
	builder.senderType = senderType
	builder.senderTypeFlag = true
	return builder
}

// 发送者名称
//
// 示例值：天气预报
func (builder *SenderBuilder) Name(name string) *SenderBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}

// 发送者描述
//
// 示例值：”
func (builder *SenderBuilder) Desc(desc string) *SenderBuilder {
	builder.desc = desc
	builder.descFlag = true
	return builder
}

// 发送者id
//
// 示例值：skill_43ec7b438a59
func (builder *SenderBuilder) SenderId(senderId string) *SenderBuilder {
	builder.senderId = senderId
	builder.senderIdFlag = true
	return builder
}

func (builder *SenderBuilder) Build() *Sender {
	req := &Sender{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.senderTypeFlag {
		req.SenderType = &builder.senderType

	}
	if builder.nameFlag {
		req.Name = &builder.name

	}
	if builder.descFlag {
		req.Desc = &builder.desc

	}
	if builder.senderIdFlag {
		req.SenderId = &builder.senderId

	}
	return req
}

type Session struct {
	Id             *string `json:"id,omitempty"`               // session 的唯一标识
	CreatedAt      *string `json:"created_at,omitempty"`       // session 的创建时间，毫秒时间戳
	EffectedAt     *string `json:"effected_at,omitempty"`      // session 的过期时间，毫秒时间戳
	Type           *string `json:"type,omitempty"`             // session 类型
	Status         *string `json:"status,omitempty"`           // session 状态
	ActiveIntentId *string `json:"active_intent_id,omitempty"` // 当前运行中的意图 id
	ChannelType    *string `json:"channel_type,omitempty"`     // 渠道类型
	EnableDebug    *bool   `json:"enable_debug,omitempty"`     // 是否开启调试模式
	Kvs            *string `json:"kvs,omitempty"`              // 会话中的自定义 kv 对，包括创建时传入的渠道上下文
}

type SessionBuilder struct {
	id                 string // session 的唯一标识
	idFlag             bool
	createdAt          string // session 的创建时间，毫秒时间戳
	createdAtFlag      bool
	effectedAt         string // session 的过期时间，毫秒时间戳
	effectedAtFlag     bool
	type_              string // session 类型
	typeFlag           bool
	status             string // session 状态
	statusFlag         bool
	activeIntentId     string // 当前运行中的意图 id
	activeIntentIdFlag bool
	channelType        string // 渠道类型
	channelTypeFlag    bool
	enableDebug        bool // 是否开启调试模式
	enableDebugFlag    bool
	kvs                string // 会话中的自定义 kv 对，包括创建时传入的渠道上下文
	kvsFlag            bool
}

func NewSessionBuilder() *SessionBuilder {
	builder := &SessionBuilder{}
	return builder
}

// session 的唯一标识
//
// 示例值：7316801852719906836
func (builder *SessionBuilder) Id(id string) *SessionBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

// session 的创建时间，毫秒时间戳
//
// 示例值：1703486238000
func (builder *SessionBuilder) CreatedAt(createdAt string) *SessionBuilder {
	builder.createdAt = createdAt
	builder.createdAtFlag = true
	return builder
}

// session 的过期时间，毫秒时间戳
//
// 示例值：1703486238000
func (builder *SessionBuilder) EffectedAt(effectedAt string) *SessionBuilder {
	builder.effectedAt = effectedAt
	builder.effectedAtFlag = true
	return builder
}

// session 类型
//
// 示例值：LONG-TERM
func (builder *SessionBuilder) Type(type_ string) *SessionBuilder {
	builder.type_ = type_
	builder.typeFlag = true
	return builder
}

// session 状态
//
// 示例值：VALID
func (builder *SessionBuilder) Status(status string) *SessionBuilder {
	builder.status = status
	builder.statusFlag = true
	return builder
}

// 当前运行中的意图 id
//
// 示例值：7312657247586009109
func (builder *SessionBuilder) ActiveIntentId(activeIntentId string) *SessionBuilder {
	builder.activeIntentId = activeIntentId
	builder.activeIntentIdFlag = true
	return builder
}

// 渠道类型
//
// 示例值：LARK_OPEN_API
func (builder *SessionBuilder) ChannelType(channelType string) *SessionBuilder {
	builder.channelType = channelType
	builder.channelTypeFlag = true
	return builder
}

// 是否开启调试模式
//
// 示例值：false
func (builder *SessionBuilder) EnableDebug(enableDebug bool) *SessionBuilder {
	builder.enableDebug = enableDebug
	builder.enableDebugFlag = true
	return builder
}

// 会话中的自定义 kv 对，包括创建时传入的渠道上下文
//
// 示例值：{}
func (builder *SessionBuilder) Kvs(kvs string) *SessionBuilder {
	builder.kvs = kvs
	builder.kvsFlag = true
	return builder
}

func (builder *SessionBuilder) Build() *Session {
	req := &Session{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.createdAtFlag {
		req.CreatedAt = &builder.createdAt

	}
	if builder.effectedAtFlag {
		req.EffectedAt = &builder.effectedAt

	}
	if builder.typeFlag {
		req.Type = &builder.type_

	}
	if builder.statusFlag {
		req.Status = &builder.status

	}
	if builder.activeIntentIdFlag {
		req.ActiveIntentId = &builder.activeIntentId

	}
	if builder.channelTypeFlag {
		req.ChannelType = &builder.channelType

	}
	if builder.enableDebugFlag {
		req.EnableDebug = &builder.enableDebug

	}
	if builder.kvsFlag {
		req.Kvs = &builder.kvs

	}
	return req
}

type SkillBaseInfo struct {
	Name        *string `json:"name,omitempty"`         // 技能名称
	SkillId     *string `json:"skill_id,omitempty"`     // 技能 id
	Type        *string `json:"type,omitempty"`         // 技能类型
	BuiltinType *string `json:"builtin_type,omitempty"` // 内置技能类型
}

type SkillBaseInfoBuilder struct {
	name            string // 技能名称
	nameFlag        bool
	skillId         string // 技能 id
	skillIdFlag     bool
	type_           string // 技能类型
	typeFlag        bool
	builtinType     string // 内置技能类型
	builtinTypeFlag bool
}

func NewSkillBaseInfoBuilder() *SkillBaseInfoBuilder {
	builder := &SkillBaseInfoBuilder{}
	return builder
}

// 技能名称
//
// 示例值：天气预报
func (builder *SkillBaseInfoBuilder) Name(name string) *SkillBaseInfoBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}

// 技能 id
//
// 示例值：skill_43ec7b438a59
func (builder *SkillBaseInfoBuilder) SkillId(skillId string) *SkillBaseInfoBuilder {
	builder.skillId = skillId
	builder.skillIdFlag = true
	return builder
}

// 技能类型
//
// 示例值：custom
func (builder *SkillBaseInfoBuilder) Type(type_ string) *SkillBaseInfoBuilder {
	builder.type_ = type_
	builder.typeFlag = true
	return builder
}

// 内置技能类型
//
// 示例值：qna
func (builder *SkillBaseInfoBuilder) BuiltinType(builtinType string) *SkillBaseInfoBuilder {
	builder.builtinType = builtinType
	builder.builtinTypeFlag = true
	return builder
}

func (builder *SkillBaseInfoBuilder) Build() *SkillBaseInfo {
	req := &SkillBaseInfo{}
	if builder.nameFlag {
		req.Name = &builder.name

	}
	if builder.skillIdFlag {
		req.SkillId = &builder.skillId

	}
	if builder.typeFlag {
		req.Type = &builder.type_

	}
	if builder.builtinTypeFlag {
		req.BuiltinType = &builder.builtinType

	}
	return req
}

type SkillCall struct {
	SkillCallId *string `json:"skill_call_id,omitempty"` // 中断调用 schema
	Input       *string `json:"input,omitempty"`         // 用户对中断的响应内容
	WaitingType *string `json:"waiting_type,omitempty"`  // WAITING_USER_MESSAGE or WAITING_USER_RESPOND
	InputDsl    *string `json:"input_dsl,omitempty"`     // input 的 DSL，用户可参考 DSL 来写 input
}

type SkillCallBuilder struct {
	skillCallId     string // 中断调用 schema
	skillCallIdFlag bool
	input           string // 用户对中断的响应内容
	inputFlag       bool
	waitingType     string // WAITING_USER_MESSAGE or WAITING_USER_RESPOND
	waitingTypeFlag bool
	inputDsl        string // input 的 DSL，用户可参考 DSL 来写 input
	inputDslFlag    bool
}

func NewSkillCallBuilder() *SkillCallBuilder {
	builder := &SkillCallBuilder{}
	return builder
}

// 中断调用 schema
//
// 示例值：123
func (builder *SkillCallBuilder) SkillCallId(skillCallId string) *SkillCallBuilder {
	builder.skillCallId = skillCallId
	builder.skillCallIdFlag = true
	return builder
}

// 用户对中断的响应内容
//
// 示例值：{}
func (builder *SkillCallBuilder) Input(input string) *SkillCallBuilder {
	builder.input = input
	builder.inputFlag = true
	return builder
}

// WAITING_USER_MESSAGE or WAITING_USER_RESPOND
//
// 示例值：WAITING_USER_RESPOND
func (builder *SkillCallBuilder) WaitingType(waitingType string) *SkillCallBuilder {
	builder.waitingType = waitingType
	builder.waitingTypeFlag = true
	return builder
}

// input 的 DSL，用户可参考 DSL 来写 input
//
// 示例值：{}
func (builder *SkillCallBuilder) InputDsl(inputDsl string) *SkillCallBuilder {
	builder.inputDsl = inputDsl
	builder.inputDslFlag = true
	return builder
}

func (builder *SkillCallBuilder) Build() *SkillCall {
	req := &SkillCall{}
	if builder.skillCallIdFlag {
		req.SkillCallId = &builder.skillCallId

	}
	if builder.inputFlag {
		req.Input = &builder.input

	}
	if builder.waitingTypeFlag {
		req.WaitingType = &builder.waitingType

	}
	if builder.inputDslFlag {
		req.InputDsl = &builder.inputDsl

	}
	return req
}

type SkillInstance struct {
	SkillInstanceId *string `json:"skill_instance_id,omitempty"` // skill_instance 的唯一标识
	Status          *string `json:"status,omitempty"`            // skill_instance 的状态
	Input           *string `json:"input,omitempty"`             // skill_instance 的输入，结构需要符合 skill 的 input schema
	Output          *string `json:"output,omitempty"`            // skill_instance 的输出，结构需要符合 skill 的 output schema
}

type SkillInstanceBuilder struct {
	skillInstanceId     string // skill_instance 的唯一标识
	skillInstanceIdFlag bool
	status              string // skill_instance 的状态
	statusFlag          bool
	input               string // skill_instance 的输入，结构需要符合 skill 的 input schema
	inputFlag           bool
	output              string // skill_instance 的输出，结构需要符合 skill 的 output schema
	outputFlag          bool
}

func NewSkillInstanceBuilder() *SkillInstanceBuilder {
	builder := &SkillInstanceBuilder{}
	return builder
}

// skill_instance 的唯一标识
//
// 示例值：1234567890
func (builder *SkillInstanceBuilder) SkillInstanceId(skillInstanceId string) *SkillInstanceBuilder {
	builder.skillInstanceId = skillInstanceId
	builder.skillInstanceIdFlag = true
	return builder
}

// skill_instance 的状态
//
// 示例值：success
func (builder *SkillInstanceBuilder) Status(status string) *SkillInstanceBuilder {
	builder.status = status
	builder.statusFlag = true
	return builder
}

// skill_instance 的输入，结构需要符合 skill 的 input schema
//
// 示例值：{	 "userInput": "今天天气怎么样" }
func (builder *SkillInstanceBuilder) Input(input string) *SkillInstanceBuilder {
	builder.input = input
	builder.inputFlag = true
	return builder
}

// skill_instance 的输出，结构需要符合 skill 的 output schema
//
// 示例值：{}
func (builder *SkillInstanceBuilder) Output(output string) *SkillInstanceBuilder {
	builder.output = output
	builder.outputFlag = true
	return builder
}

func (builder *SkillInstanceBuilder) Build() *SkillInstance {
	req := &SkillInstance{}
	if builder.skillInstanceIdFlag {
		req.SkillInstanceId = &builder.skillInstanceId

	}
	if builder.statusFlag {
		req.Status = &builder.status

	}
	if builder.inputFlag {
		req.Input = &builder.input

	}
	if builder.outputFlag {
		req.Output = &builder.output

	}
	return req
}

type SourceSetting struct {
	ApiId                     *string           `json:"api_id,omitempty"`                       // 分表数据源api_id
	ApiName                   *string           `json:"api_name,omitempty"`                     // 分表数据源api_name
	Label                     map[string]string `json:"label,omitempty"`                        // 分表数据源名称，国际化文本
	FromType                  *string           `json:"from_type,omitempty"`                    // 数据源具体来源
	AuthKey                   *string           `json:"auth_key,omitempty"`                     // 外部数据源的凭证key
	AuthName                  map[string]string `json:"auth_name,omitempty"`                    // 外部数据源的凭证名称，国际化文本（同上）
	DataSourceIntegrationType *string           `json:"data_source_integration_type,omitempty"` // 外部数据源和对接方式 - direct: 直连 - Import: 导入
}

type SourceSettingBuilder struct {
	apiId                         string // 分表数据源api_id
	apiIdFlag                     bool
	apiName                       string // 分表数据源api_name
	apiNameFlag                   bool
	label                         map[string]string // 分表数据源名称，国际化文本
	labelFlag                     bool
	fromType                      string // 数据源具体来源
	fromTypeFlag                  bool
	authKey                       string // 外部数据源的凭证key
	authKeyFlag                   bool
	authName                      map[string]string // 外部数据源的凭证名称，国际化文本（同上）
	authNameFlag                  bool
	dataSourceIntegrationType     string // 外部数据源和对接方式 - direct: 直连 - Import: 导入
	dataSourceIntegrationTypeFlag bool
}

func NewSourceSettingBuilder() *SourceSettingBuilder {
	builder := &SourceSettingBuilder{}
	return builder
}

// 分表数据源api_id
//
// 示例值："source_api_id"
func (builder *SourceSettingBuilder) ApiId(apiId string) *SourceSettingBuilder {
	builder.apiId = apiId
	builder.apiIdFlag = true
	return builder
}

// 分表数据源api_name
//
// 示例值："source_api_name"
func (builder *SourceSettingBuilder) ApiName(apiName string) *SourceSettingBuilder {
	builder.apiName = apiName
	builder.apiNameFlag = true
	return builder
}

// 分表数据源名称，国际化文本
//
// 示例值：
func (builder *SourceSettingBuilder) Label(label map[string]string) *SourceSettingBuilder {
	builder.label = label
	builder.labelFlag = true
	return builder
}

// 数据源具体来源
//
// 示例值："mysql"
func (builder *SourceSettingBuilder) FromType(fromType string) *SourceSettingBuilder {
	builder.fromType = fromType
	builder.fromTypeFlag = true
	return builder
}

// 外部数据源的凭证key
//
// 示例值："auth_key_001"
func (builder *SourceSettingBuilder) AuthKey(authKey string) *SourceSettingBuilder {
	builder.authKey = authKey
	builder.authKeyFlag = true
	return builder
}

// 外部数据源的凭证名称，国际化文本（同上）
//
// 示例值：
func (builder *SourceSettingBuilder) AuthName(authName map[string]string) *SourceSettingBuilder {
	builder.authName = authName
	builder.authNameFlag = true
	return builder
}

// 外部数据源和对接方式 - direct: 直连 - Import: 导入
//
// 示例值："Import"
func (builder *SourceSettingBuilder) DataSourceIntegrationType(dataSourceIntegrationType string) *SourceSettingBuilder {
	builder.dataSourceIntegrationType = dataSourceIntegrationType
	builder.dataSourceIntegrationTypeFlag = true
	return builder
}

func (builder *SourceSettingBuilder) Build() *SourceSetting {
	req := &SourceSetting{}
	if builder.apiIdFlag {
		req.ApiId = &builder.apiId

	}
	if builder.apiNameFlag {
		req.ApiName = &builder.apiName

	}
	if builder.labelFlag {
		req.Label = builder.label
	}
	if builder.fromTypeFlag {
		req.FromType = &builder.fromType

	}
	if builder.authKeyFlag {
		req.AuthKey = &builder.authKey

	}
	if builder.authNameFlag {
		req.AuthName = builder.authName
	}
	if builder.dataSourceIntegrationTypeFlag {
		req.DataSourceIntegrationType = &builder.dataSourceIntegrationType

	}
	return req
}

type Table struct {
	TableType     *string           `json:"table_type,omitempty"`     // 表类型，分为 "datatable"、"dataset"
	ApiName       *string           `json:"api_name,omitempty"`       // 数据表标识
	Label         map[string]string `json:"label,omitempty"`          // 数据表名称
	AccessItems   []string          `json:"access_items,omitempty"`   // 数据表读写权限
	AiDescription *string           `json:"ai_description,omitempty"` // 数据表描述信息
	Fields        []*Field          `json:"fields,omitempty"`         // 数据表下的字段列表，获取数据表元信息详情时才会返回
}

type TableBuilder struct {
	tableType         string // 表类型，分为 "datatable"、"dataset"
	tableTypeFlag     bool
	apiName           string // 数据表标识
	apiNameFlag       bool
	label             map[string]string // 数据表名称
	labelFlag         bool
	accessItems       []string // 数据表读写权限
	accessItemsFlag   bool
	aiDescription     string // 数据表描述信息
	aiDescriptionFlag bool
	fields            []*Field // 数据表下的字段列表，获取数据表元信息详情时才会返回
	fieldsFlag        bool
}

func NewTableBuilder() *TableBuilder {
	builder := &TableBuilder{}
	return builder
}

// 表类型，分为 "datatable"、"dataset"
//
// 示例值：datatable
func (builder *TableBuilder) TableType(tableType string) *TableBuilder {
	builder.tableType = tableType
	builder.tableTypeFlag = true
	return builder
}

// 数据表标识
//
// 示例值：object_a
func (builder *TableBuilder) ApiName(apiName string) *TableBuilder {
	builder.apiName = apiName
	builder.apiNameFlag = true
	return builder
}

// 数据表名称
//
// 示例值：
func (builder *TableBuilder) Label(label map[string]string) *TableBuilder {
	builder.label = label
	builder.labelFlag = true
	return builder
}

// 数据表读写权限
//
// 示例值：
func (builder *TableBuilder) AccessItems(accessItems []string) *TableBuilder {
	builder.accessItems = accessItems
	builder.accessItemsFlag = true
	return builder
}

// 数据表描述信息
//
// 示例值：这是一个商品的数据表
func (builder *TableBuilder) AiDescription(aiDescription string) *TableBuilder {
	builder.aiDescription = aiDescription
	builder.aiDescriptionFlag = true
	return builder
}

// 数据表下的字段列表，获取数据表元信息详情时才会返回
//
// 示例值：
func (builder *TableBuilder) Fields(fields []*Field) *TableBuilder {
	builder.fields = fields
	builder.fieldsFlag = true
	return builder
}

func (builder *TableBuilder) Build() *Table {
	req := &Table{}
	if builder.tableTypeFlag {
		req.TableType = &builder.tableType

	}
	if builder.apiNameFlag {
		req.ApiName = &builder.apiName

	}
	if builder.labelFlag {
		req.Label = builder.label
	}
	if builder.accessItemsFlag {
		req.AccessItems = builder.accessItems
	}
	if builder.aiDescriptionFlag {
		req.AiDescription = &builder.aiDescription

	}
	if builder.fieldsFlag {
		req.Fields = builder.fields
	}
	return req
}

type CreateAilySessionReqBodyBuilder struct {
	channelContext     string // 渠道上下文
	channelContextFlag bool
	metadata           string // 其他透传信息
	metadataFlag       bool
}

func NewCreateAilySessionReqBodyBuilder() *CreateAilySessionReqBodyBuilder {
	builder := &CreateAilySessionReqBodyBuilder{}
	return builder
}

// 渠道上下文
//
// 示例值：{}
func (builder *CreateAilySessionReqBodyBuilder) ChannelContext(channelContext string) *CreateAilySessionReqBodyBuilder {
	builder.channelContext = channelContext
	builder.channelContextFlag = true
	return builder
}

// 其他透传信息
//
// 示例值：{}
func (builder *CreateAilySessionReqBodyBuilder) Metadata(metadata string) *CreateAilySessionReqBodyBuilder {
	builder.metadata = metadata
	builder.metadataFlag = true
	return builder
}

func (builder *CreateAilySessionReqBodyBuilder) Build() *CreateAilySessionReqBody {
	req := &CreateAilySessionReqBody{}
	if builder.channelContextFlag {
		req.ChannelContext = &builder.channelContext
	}
	if builder.metadataFlag {
		req.Metadata = &builder.metadata
	}
	return req
}

type CreateAilySessionPathReqBodyBuilder struct {
	channelContext     string
	channelContextFlag bool
	metadata           string
	metadataFlag       bool
}

func NewCreateAilySessionPathReqBodyBuilder() *CreateAilySessionPathReqBodyBuilder {
	builder := &CreateAilySessionPathReqBodyBuilder{}
	return builder
}

// 渠道上下文
//
// 示例值：{}
func (builder *CreateAilySessionPathReqBodyBuilder) ChannelContext(channelContext string) *CreateAilySessionPathReqBodyBuilder {
	builder.channelContext = channelContext
	builder.channelContextFlag = true
	return builder
}

// 其他透传信息
//
// 示例值：{}
func (builder *CreateAilySessionPathReqBodyBuilder) Metadata(metadata string) *CreateAilySessionPathReqBodyBuilder {
	builder.metadata = metadata
	builder.metadataFlag = true
	return builder
}

func (builder *CreateAilySessionPathReqBodyBuilder) Build() (*CreateAilySessionReqBody, error) {
	req := &CreateAilySessionReqBody{}
	if builder.channelContextFlag {
		req.ChannelContext = &builder.channelContext
	}
	if builder.metadataFlag {
		req.Metadata = &builder.metadata
	}
	return req, nil
}

type CreateAilySessionReqBuilder struct {
	apiReq *larkcore.ApiReq
	body   *CreateAilySessionReqBody
}

func NewCreateAilySessionReqBuilder() *CreateAilySessionReqBuilder {
	builder := &CreateAilySessionReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 该 API 用于创建与某个飞书智能伙伴应用的一次会话（Session）。
func (builder *CreateAilySessionReqBuilder) Body(body *CreateAilySessionReqBody) *CreateAilySessionReqBuilder {
	builder.body = body
	return builder
}

func (builder *CreateAilySessionReqBuilder) Build() *CreateAilySessionReq {
	req := &CreateAilySessionReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.Body = builder.body
	return req
}

type CreateAilySessionReqBody struct {
	ChannelContext *string `json:"channel_context,omitempty"` // 渠道上下文
	Metadata       *string `json:"metadata,omitempty"`        // 其他透传信息
}

type CreateAilySessionReq struct {
	apiReq *larkcore.ApiReq
	Body   *CreateAilySessionReqBody `body:""`
}

type CreateAilySessionRespData struct {
	Session *AilySession `json:"session,omitempty"` // 创建的会话信息
}

type CreateAilySessionResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *CreateAilySessionRespData `json:"data"` // 业务数据
}

func (resp *CreateAilySessionResp) Success() bool {
	return resp.Code == 0
}

type DeleteAilySessionReqBuilder struct {
	apiReq *larkcore.ApiReq
}

func NewDeleteAilySessionReqBuilder() *DeleteAilySessionReqBuilder {
	builder := &DeleteAilySessionReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 会话 ID
//
// 示例值：session_4dfunz7sp1g8m
func (builder *DeleteAilySessionReqBuilder) AilySessionId(ailySessionId string) *DeleteAilySessionReqBuilder {
	builder.apiReq.PathParams.Set("aily_session_id", fmt.Sprint(ailySessionId))
	return builder
}

func (builder *DeleteAilySessionReqBuilder) Build() *DeleteAilySessionReq {
	req := &DeleteAilySessionReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.PathParams = builder.apiReq.PathParams
	return req
}

type DeleteAilySessionReq struct {
	apiReq *larkcore.ApiReq
}

type DeleteAilySessionResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
}

func (resp *DeleteAilySessionResp) Success() bool {
	return resp.Code == 0
}

type GetAilySessionReqBuilder struct {
	apiReq *larkcore.ApiReq
}

func NewGetAilySessionReqBuilder() *GetAilySessionReqBuilder {
	builder := &GetAilySessionReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 会话 ID
//
// 示例值：session_4dfunz7sp1g8m
func (builder *GetAilySessionReqBuilder) AilySessionId(ailySessionId string) *GetAilySessionReqBuilder {
	builder.apiReq.PathParams.Set("aily_session_id", fmt.Sprint(ailySessionId))
	return builder
}

func (builder *GetAilySessionReqBuilder) Build() *GetAilySessionReq {
	req := &GetAilySessionReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.PathParams = builder.apiReq.PathParams
	return req
}

type GetAilySessionReq struct {
	apiReq *larkcore.ApiReq
}

type GetAilySessionRespData struct {
	Session *AilySession `json:"session,omitempty"` // 会话信息
}

type GetAilySessionResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *GetAilySessionRespData `json:"data"` // 业务数据
}

func (resp *GetAilySessionResp) Success() bool {
	return resp.Code == 0
}

type UpdateAilySessionReqBodyBuilder struct {
	channelContext     string // 渠道上下文
	channelContextFlag bool
	metadata           string // 其他透传信息
	metadataFlag       bool
}

func NewUpdateAilySessionReqBodyBuilder() *UpdateAilySessionReqBodyBuilder {
	builder := &UpdateAilySessionReqBodyBuilder{}
	return builder
}

// 渠道上下文
//
// 示例值：{}
func (builder *UpdateAilySessionReqBodyBuilder) ChannelContext(channelContext string) *UpdateAilySessionReqBodyBuilder {
	builder.channelContext = channelContext
	builder.channelContextFlag = true
	return builder
}

// 其他透传信息
//
// 示例值：{}
func (builder *UpdateAilySessionReqBodyBuilder) Metadata(metadata string) *UpdateAilySessionReqBodyBuilder {
	builder.metadata = metadata
	builder.metadataFlag = true
	return builder
}

func (builder *UpdateAilySessionReqBodyBuilder) Build() *UpdateAilySessionReqBody {
	req := &UpdateAilySessionReqBody{}
	if builder.channelContextFlag {
		req.ChannelContext = &builder.channelContext
	}
	if builder.metadataFlag {
		req.Metadata = &builder.metadata
	}
	return req
}

type UpdateAilySessionPathReqBodyBuilder struct {
	channelContext     string
	channelContextFlag bool
	metadata           string
	metadataFlag       bool
}

func NewUpdateAilySessionPathReqBodyBuilder() *UpdateAilySessionPathReqBodyBuilder {
	builder := &UpdateAilySessionPathReqBodyBuilder{}
	return builder
}

// 渠道上下文
//
// 示例值：{}
func (builder *UpdateAilySessionPathReqBodyBuilder) ChannelContext(channelContext string) *UpdateAilySessionPathReqBodyBuilder {
	builder.channelContext = channelContext
	builder.channelContextFlag = true
	return builder
}

// 其他透传信息
//
// 示例值：{}
func (builder *UpdateAilySessionPathReqBodyBuilder) Metadata(metadata string) *UpdateAilySessionPathReqBodyBuilder {
	builder.metadata = metadata
	builder.metadataFlag = true
	return builder
}

func (builder *UpdateAilySessionPathReqBodyBuilder) Build() (*UpdateAilySessionReqBody, error) {
	req := &UpdateAilySessionReqBody{}
	if builder.channelContextFlag {
		req.ChannelContext = &builder.channelContext
	}
	if builder.metadataFlag {
		req.Metadata = &builder.metadata
	}
	return req, nil
}

type UpdateAilySessionReqBuilder struct {
	apiReq *larkcore.ApiReq
	body   *UpdateAilySessionReqBody
}

func NewUpdateAilySessionReqBuilder() *UpdateAilySessionReqBuilder {
	builder := &UpdateAilySessionReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 会话 ID
//
// 示例值：session_4dfunz7sp1g8m
func (builder *UpdateAilySessionReqBuilder) AilySessionId(ailySessionId string) *UpdateAilySessionReqBuilder {
	builder.apiReq.PathParams.Set("aily_session_id", fmt.Sprint(ailySessionId))
	return builder
}

// 该 API 用于更新与某个飞书智能伙伴应用的一次会话（Session）。
func (builder *UpdateAilySessionReqBuilder) Body(body *UpdateAilySessionReqBody) *UpdateAilySessionReqBuilder {
	builder.body = body
	return builder
}

func (builder *UpdateAilySessionReqBuilder) Build() *UpdateAilySessionReq {
	req := &UpdateAilySessionReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.PathParams = builder.apiReq.PathParams
	req.apiReq.Body = builder.body
	return req
}

type UpdateAilySessionReqBody struct {
	ChannelContext *string `json:"channel_context,omitempty"` // 渠道上下文
	Metadata       *string `json:"metadata,omitempty"`        // 其他透传信息
}

type UpdateAilySessionReq struct {
	apiReq *larkcore.ApiReq
	Body   *UpdateAilySessionReqBody `body:""`
}

type UpdateAilySessionRespData struct {
	Session *AilySession `json:"session,omitempty"` // 会话信息
}

type UpdateAilySessionResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *UpdateAilySessionRespData `json:"data"` // 业务数据
}

func (resp *UpdateAilySessionResp) Success() bool {
	return resp.Code == 0
}

type CreateAilySessionAilyMessageReqBodyBuilder struct {
	idempotentId       string // 幂等id，同一 session 下相同的幂等 id 算一条消息，有效期72h
	idempotentIdFlag   bool
	contentType        string // 消息内容类型
	contentTypeFlag    bool
	content            string // 消息内容
	contentFlag        bool
	fileIds            []string // 消息中包含的文件 ID 列表
	fileIdsFlag        bool
	quoteMessageId     string // 引用的消息 ID
	quoteMessageIdFlag bool
	mentions           []*AilyMention // 被@的实体
	mentionsFlag       bool
}

func NewCreateAilySessionAilyMessageReqBodyBuilder() *CreateAilySessionAilyMessageReqBodyBuilder {
	builder := &CreateAilySessionAilyMessageReqBodyBuilder{}
	return builder
}

// 幂等id，同一 session 下相同的幂等 id 算一条消息，有效期72h
//
// 示例值：idempotent_id_1
func (builder *CreateAilySessionAilyMessageReqBodyBuilder) IdempotentId(idempotentId string) *CreateAilySessionAilyMessageReqBodyBuilder {
	builder.idempotentId = idempotentId
	builder.idempotentIdFlag = true
	return builder
}

// 消息内容类型
//
// 示例值：MDX
func (builder *CreateAilySessionAilyMessageReqBodyBuilder) ContentType(contentType string) *CreateAilySessionAilyMessageReqBodyBuilder {
	builder.contentType = contentType
	builder.contentTypeFlag = true
	return builder
}

// 消息内容
//
// 示例值：你好
func (builder *CreateAilySessionAilyMessageReqBodyBuilder) Content(content string) *CreateAilySessionAilyMessageReqBodyBuilder {
	builder.content = content
	builder.contentFlag = true
	return builder
}

// 消息中包含的文件 ID 列表
//
// 示例值：
func (builder *CreateAilySessionAilyMessageReqBodyBuilder) FileIds(fileIds []string) *CreateAilySessionAilyMessageReqBodyBuilder {
	builder.fileIds = fileIds
	builder.fileIdsFlag = true
	return builder
}

// 引用的消息 ID
//
// 示例值：message_4de9bpg70qskh
func (builder *CreateAilySessionAilyMessageReqBodyBuilder) QuoteMessageId(quoteMessageId string) *CreateAilySessionAilyMessageReqBodyBuilder {
	builder.quoteMessageId = quoteMessageId
	builder.quoteMessageIdFlag = true
	return builder
}

// 被@的实体
//
// 示例值：
func (builder *CreateAilySessionAilyMessageReqBodyBuilder) Mentions(mentions []*AilyMention) *CreateAilySessionAilyMessageReqBodyBuilder {
	builder.mentions = mentions
	builder.mentionsFlag = true
	return builder
}

func (builder *CreateAilySessionAilyMessageReqBodyBuilder) Build() *CreateAilySessionAilyMessageReqBody {
	req := &CreateAilySessionAilyMessageReqBody{}
	if builder.idempotentIdFlag {
		req.IdempotentId = &builder.idempotentId
	}
	if builder.contentTypeFlag {
		req.ContentType = &builder.contentType
	}
	if builder.contentFlag {
		req.Content = &builder.content
	}
	if builder.fileIdsFlag {
		req.FileIds = builder.fileIds
	}
	if builder.quoteMessageIdFlag {
		req.QuoteMessageId = &builder.quoteMessageId
	}
	if builder.mentionsFlag {
		req.Mentions = builder.mentions
	}
	return req
}

type CreateAilySessionAilyMessagePathReqBodyBuilder struct {
	idempotentId       string
	idempotentIdFlag   bool
	contentType        string
	contentTypeFlag    bool
	content            string
	contentFlag        bool
	fileIds            []string
	fileIdsFlag        bool
	quoteMessageId     string
	quoteMessageIdFlag bool
	mentions           []*AilyMention
	mentionsFlag       bool
}

func NewCreateAilySessionAilyMessagePathReqBodyBuilder() *CreateAilySessionAilyMessagePathReqBodyBuilder {
	builder := &CreateAilySessionAilyMessagePathReqBodyBuilder{}
	return builder
}

// 幂等id，同一 session 下相同的幂等 id 算一条消息，有效期72h
//
// 示例值：idempotent_id_1
func (builder *CreateAilySessionAilyMessagePathReqBodyBuilder) IdempotentId(idempotentId string) *CreateAilySessionAilyMessagePathReqBodyBuilder {
	builder.idempotentId = idempotentId
	builder.idempotentIdFlag = true
	return builder
}

// 消息内容类型
//
// 示例值：MDX
func (builder *CreateAilySessionAilyMessagePathReqBodyBuilder) ContentType(contentType string) *CreateAilySessionAilyMessagePathReqBodyBuilder {
	builder.contentType = contentType
	builder.contentTypeFlag = true
	return builder
}

// 消息内容
//
// 示例值：你好
func (builder *CreateAilySessionAilyMessagePathReqBodyBuilder) Content(content string) *CreateAilySessionAilyMessagePathReqBodyBuilder {
	builder.content = content
	builder.contentFlag = true
	return builder
}

// 消息中包含的文件 ID 列表
//
// 示例值：
func (builder *CreateAilySessionAilyMessagePathReqBodyBuilder) FileIds(fileIds []string) *CreateAilySessionAilyMessagePathReqBodyBuilder {
	builder.fileIds = fileIds
	builder.fileIdsFlag = true
	return builder
}

// 引用的消息 ID
//
// 示例值：message_4de9bpg70qskh
func (builder *CreateAilySessionAilyMessagePathReqBodyBuilder) QuoteMessageId(quoteMessageId string) *CreateAilySessionAilyMessagePathReqBodyBuilder {
	builder.quoteMessageId = quoteMessageId
	builder.quoteMessageIdFlag = true
	return builder
}

// 被@的实体
//
// 示例值：
func (builder *CreateAilySessionAilyMessagePathReqBodyBuilder) Mentions(mentions []*AilyMention) *CreateAilySessionAilyMessagePathReqBodyBuilder {
	builder.mentions = mentions
	builder.mentionsFlag = true
	return builder
}

func (builder *CreateAilySessionAilyMessagePathReqBodyBuilder) Build() (*CreateAilySessionAilyMessageReqBody, error) {
	req := &CreateAilySessionAilyMessageReqBody{}
	if builder.idempotentIdFlag {
		req.IdempotentId = &builder.idempotentId
	}
	if builder.contentTypeFlag {
		req.ContentType = &builder.contentType
	}
	if builder.contentFlag {
		req.Content = &builder.content
	}
	if builder.fileIdsFlag {
		req.FileIds = builder.fileIds
	}
	if builder.quoteMessageIdFlag {
		req.QuoteMessageId = &builder.quoteMessageId
	}
	if builder.mentionsFlag {
		req.Mentions = builder.mentions
	}
	return req, nil
}

type CreateAilySessionAilyMessageReqBuilder struct {
	apiReq *larkcore.ApiReq
	body   *CreateAilySessionAilyMessageReqBody
}

func NewCreateAilySessionAilyMessageReqBuilder() *CreateAilySessionAilyMessageReqBuilder {
	builder := &CreateAilySessionAilyMessageReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 会话 ID
//
// 示例值：session_4dfunz7sp1g8m
func (builder *CreateAilySessionAilyMessageReqBuilder) AilySessionId(ailySessionId string) *CreateAilySessionAilyMessageReqBuilder {
	builder.apiReq.PathParams.Set("aily_session_id", fmt.Sprint(ailySessionId))
	return builder
}

// 该 API 用于向某个飞书智能伙伴应用发送一条消息（Message）。
func (builder *CreateAilySessionAilyMessageReqBuilder) Body(body *CreateAilySessionAilyMessageReqBody) *CreateAilySessionAilyMessageReqBuilder {
	builder.body = body
	return builder
}

func (builder *CreateAilySessionAilyMessageReqBuilder) Build() *CreateAilySessionAilyMessageReq {
	req := &CreateAilySessionAilyMessageReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.PathParams = builder.apiReq.PathParams
	req.apiReq.Body = builder.body
	return req
}

type CreateAilySessionAilyMessageReqBody struct {
	IdempotentId   *string        `json:"idempotent_id,omitempty"`    // 幂等id，同一 session 下相同的幂等 id 算一条消息，有效期72h
	ContentType    *string        `json:"content_type,omitempty"`     // 消息内容类型
	Content        *string        `json:"content,omitempty"`          // 消息内容
	FileIds        []string       `json:"file_ids,omitempty"`         // 消息中包含的文件 ID 列表
	QuoteMessageId *string        `json:"quote_message_id,omitempty"` // 引用的消息 ID
	Mentions       []*AilyMention `json:"mentions,omitempty"`         // 被@的实体
}

type CreateAilySessionAilyMessageReq struct {
	apiReq *larkcore.ApiReq
	Body   *CreateAilySessionAilyMessageReqBody `body:""`
}

type CreateAilySessionAilyMessageRespData struct {
	Message *AilyMessage `json:"message,omitempty"` // 消息信息
}

type CreateAilySessionAilyMessageResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *CreateAilySessionAilyMessageRespData `json:"data"` // 业务数据
}

func (resp *CreateAilySessionAilyMessageResp) Success() bool {
	return resp.Code == 0
}

type GetAilySessionAilyMessageReqBuilder struct {
	apiReq *larkcore.ApiReq
}

func NewGetAilySessionAilyMessageReqBuilder() *GetAilySessionAilyMessageReqBuilder {
	builder := &GetAilySessionAilyMessageReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 会话 ID
//
// 示例值：session_4dfunz7sp1g8m
func (builder *GetAilySessionAilyMessageReqBuilder) AilySessionId(ailySessionId string) *GetAilySessionAilyMessageReqBuilder {
	builder.apiReq.PathParams.Set("aily_session_id", fmt.Sprint(ailySessionId))
	return builder
}

// 消息 ID
//
// 示例值：message_4df45f2xknvcc
func (builder *GetAilySessionAilyMessageReqBuilder) AilyMessageId(ailyMessageId string) *GetAilySessionAilyMessageReqBuilder {
	builder.apiReq.PathParams.Set("aily_message_id", fmt.Sprint(ailyMessageId))
	return builder
}

func (builder *GetAilySessionAilyMessageReqBuilder) Build() *GetAilySessionAilyMessageReq {
	req := &GetAilySessionAilyMessageReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.PathParams = builder.apiReq.PathParams
	return req
}

type GetAilySessionAilyMessageReq struct {
	apiReq *larkcore.ApiReq
}

type GetAilySessionAilyMessageRespData struct {
	Message *AilyMessage `json:"message,omitempty"` // 消息信息
}

type GetAilySessionAilyMessageResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *GetAilySessionAilyMessageRespData `json:"data"` // 业务数据
}

func (resp *GetAilySessionAilyMessageResp) Success() bool {
	return resp.Code == 0
}

type ListAilySessionAilyMessageReqBuilder struct {
	apiReq *larkcore.ApiReq
	limit  int // 最大返回多少记录，当使用迭代器访问时才有效
}

func NewListAilySessionAilyMessageReqBuilder() *ListAilySessionAilyMessageReqBuilder {
	builder := &ListAilySessionAilyMessageReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 最大返回多少记录，当使用迭代器访问时才有效
func (builder *ListAilySessionAilyMessageReqBuilder) Limit(limit int) *ListAilySessionAilyMessageReqBuilder {
	builder.limit = limit
	return builder
}

// 会话 ID
//
// 示例值：session_4dfunz7sp1g8m
func (builder *ListAilySessionAilyMessageReqBuilder) AilySessionId(ailySessionId string) *ListAilySessionAilyMessageReqBuilder {
	builder.apiReq.PathParams.Set("aily_session_id", fmt.Sprint(ailySessionId))
	return builder
}

// 页面大小
//
// 示例值：
func (builder *ListAilySessionAilyMessageReqBuilder) PageSize(pageSize int) *ListAilySessionAilyMessageReqBuilder {
	builder.apiReq.QueryParams.Set("page_size", fmt.Sprint(pageSize))
	return builder
}

// 分页偏移量
//
// 示例值：
func (builder *ListAilySessionAilyMessageReqBuilder) PageToken(pageToken string) *ListAilySessionAilyMessageReqBuilder {
	builder.apiReq.QueryParams.Set("page_token", fmt.Sprint(pageToken))
	return builder
}

// 运行 ID
//
// 示例值：run_4dfrxvctjqzzj
func (builder *ListAilySessionAilyMessageReqBuilder) RunId(runId string) *ListAilySessionAilyMessageReqBuilder {
	builder.apiReq.QueryParams.Set("run_id", fmt.Sprint(runId))
	return builder
}

// 返回生成中的消息
//
// 示例值：false
func (builder *ListAilySessionAilyMessageReqBuilder) WithPartialMessage(withPartialMessage bool) *ListAilySessionAilyMessageReqBuilder {
	builder.apiReq.QueryParams.Set("with_partial_message", fmt.Sprint(withPartialMessage))
	return builder
}

func (builder *ListAilySessionAilyMessageReqBuilder) Build() *ListAilySessionAilyMessageReq {
	req := &ListAilySessionAilyMessageReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.Limit = builder.limit
	req.apiReq.PathParams = builder.apiReq.PathParams
	req.apiReq.QueryParams = builder.apiReq.QueryParams
	return req
}

type ListAilySessionAilyMessageReq struct {
	apiReq *larkcore.ApiReq
	Limit  int // 最多返回多少记录，只有在使用迭代器访问时，才有效

}

type ListAilySessionAilyMessageRespData struct {
	Messages  []*AilyMessage `json:"messages,omitempty"`   // 消息列表
	PageToken *string        `json:"page_token,omitempty"` // 下一页的起始偏移量
	HasMore   *bool          `json:"has_more,omitempty"`   // 是否还有更多数据
}

type ListAilySessionAilyMessageResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *ListAilySessionAilyMessageRespData `json:"data"` // 业务数据
}

func (resp *ListAilySessionAilyMessageResp) Success() bool {
	return resp.Code == 0
}

type CancelAilySessionRunReqBuilder struct {
	apiReq *larkcore.ApiReq
}

func NewCancelAilySessionRunReqBuilder() *CancelAilySessionRunReqBuilder {
	builder := &CancelAilySessionRunReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 会话 ID
//
// 示例值：session_4dfunz7sp1g8m
func (builder *CancelAilySessionRunReqBuilder) AilySessionId(ailySessionId string) *CancelAilySessionRunReqBuilder {
	builder.apiReq.PathParams.Set("aily_session_id", fmt.Sprint(ailySessionId))
	return builder
}

// 运行 ID
//
// 示例值：run_4dfrxvctjqzzj
func (builder *CancelAilySessionRunReqBuilder) RunId(runId string) *CancelAilySessionRunReqBuilder {
	builder.apiReq.PathParams.Set("run_id", fmt.Sprint(runId))
	return builder
}

func (builder *CancelAilySessionRunReqBuilder) Build() *CancelAilySessionRunReq {
	req := &CancelAilySessionRunReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.PathParams = builder.apiReq.PathParams
	return req
}

type CancelAilySessionRunReq struct {
	apiReq *larkcore.ApiReq
}

type CancelAilySessionRunRespData struct {
	Run *Run `json:"run,omitempty"` // 运行信息
}

type CancelAilySessionRunResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *CancelAilySessionRunRespData `json:"data"` // 业务数据
}

func (resp *CancelAilySessionRunResp) Success() bool {
	return resp.Code == 0
}

type CreateAilySessionRunReqBodyBuilder struct {
	appId          string // 应用 ID
	appIdFlag      bool
	skillId        string // 技能 ID
	skillIdFlag    bool
	skillInput     string // 指定技能 ID 时可以同时指定技能输入
	skillInputFlag bool
	metadata       string // 其他透传信息
	metadataFlag   bool
}

func NewCreateAilySessionRunReqBodyBuilder() *CreateAilySessionRunReqBodyBuilder {
	builder := &CreateAilySessionRunReqBodyBuilder{}
	return builder
}

// 应用 ID
//
// 示例值：spring_xxx__c
func (builder *CreateAilySessionRunReqBodyBuilder) AppId(appId string) *CreateAilySessionRunReqBodyBuilder {
	builder.appId = appId
	builder.appIdFlag = true
	return builder
}

// 技能 ID
//
// 示例值：skill_6cc6166178ca
func (builder *CreateAilySessionRunReqBodyBuilder) SkillId(skillId string) *CreateAilySessionRunReqBodyBuilder {
	builder.skillId = skillId
	builder.skillIdFlag = true
	return builder
}

// 指定技能 ID 时可以同时指定技能输入
//
// 示例值：{"key": "value"}
func (builder *CreateAilySessionRunReqBodyBuilder) SkillInput(skillInput string) *CreateAilySessionRunReqBodyBuilder {
	builder.skillInput = skillInput
	builder.skillInputFlag = true
	return builder
}

// 其他透传信息
//
// 示例值：{}
func (builder *CreateAilySessionRunReqBodyBuilder) Metadata(metadata string) *CreateAilySessionRunReqBodyBuilder {
	builder.metadata = metadata
	builder.metadataFlag = true
	return builder
}

func (builder *CreateAilySessionRunReqBodyBuilder) Build() *CreateAilySessionRunReqBody {
	req := &CreateAilySessionRunReqBody{}
	if builder.appIdFlag {
		req.AppId = &builder.appId
	}
	if builder.skillIdFlag {
		req.SkillId = &builder.skillId
	}
	if builder.skillInputFlag {
		req.SkillInput = &builder.skillInput
	}
	if builder.metadataFlag {
		req.Metadata = &builder.metadata
	}
	return req
}

type CreateAilySessionRunPathReqBodyBuilder struct {
	appId          string
	appIdFlag      bool
	skillId        string
	skillIdFlag    bool
	skillInput     string
	skillInputFlag bool
	metadata       string
	metadataFlag   bool
}

func NewCreateAilySessionRunPathReqBodyBuilder() *CreateAilySessionRunPathReqBodyBuilder {
	builder := &CreateAilySessionRunPathReqBodyBuilder{}
	return builder
}

// 应用 ID
//
// 示例值：spring_xxx__c
func (builder *CreateAilySessionRunPathReqBodyBuilder) AppId(appId string) *CreateAilySessionRunPathReqBodyBuilder {
	builder.appId = appId
	builder.appIdFlag = true
	return builder
}

// 技能 ID
//
// 示例值：skill_6cc6166178ca
func (builder *CreateAilySessionRunPathReqBodyBuilder) SkillId(skillId string) *CreateAilySessionRunPathReqBodyBuilder {
	builder.skillId = skillId
	builder.skillIdFlag = true
	return builder
}

// 指定技能 ID 时可以同时指定技能输入
//
// 示例值：{"key": "value"}
func (builder *CreateAilySessionRunPathReqBodyBuilder) SkillInput(skillInput string) *CreateAilySessionRunPathReqBodyBuilder {
	builder.skillInput = skillInput
	builder.skillInputFlag = true
	return builder
}

// 其他透传信息
//
// 示例值：{}
func (builder *CreateAilySessionRunPathReqBodyBuilder) Metadata(metadata string) *CreateAilySessionRunPathReqBodyBuilder {
	builder.metadata = metadata
	builder.metadataFlag = true
	return builder
}

func (builder *CreateAilySessionRunPathReqBodyBuilder) Build() (*CreateAilySessionRunReqBody, error) {
	req := &CreateAilySessionRunReqBody{}
	if builder.appIdFlag {
		req.AppId = &builder.appId
	}
	if builder.skillIdFlag {
		req.SkillId = &builder.skillId
	}
	if builder.skillInputFlag {
		req.SkillInput = &builder.skillInput
	}
	if builder.metadataFlag {
		req.Metadata = &builder.metadata
	}
	return req, nil
}

type CreateAilySessionRunReqBuilder struct {
	apiReq *larkcore.ApiReq
	body   *CreateAilySessionRunReqBody
}

func NewCreateAilySessionRunReqBuilder() *CreateAilySessionRunReqBuilder {
	builder := &CreateAilySessionRunReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 会话 ID
//
// 示例值：session_4dfunz7sp1g8m
func (builder *CreateAilySessionRunReqBuilder) AilySessionId(ailySessionId string) *CreateAilySessionRunReqBuilder {
	builder.apiReq.PathParams.Set("aily_session_id", fmt.Sprint(ailySessionId))
	return builder
}

// 该 API 用于启动一次运行（Run）。
func (builder *CreateAilySessionRunReqBuilder) Body(body *CreateAilySessionRunReqBody) *CreateAilySessionRunReqBuilder {
	builder.body = body
	return builder
}

func (builder *CreateAilySessionRunReqBuilder) Build() *CreateAilySessionRunReq {
	req := &CreateAilySessionRunReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.PathParams = builder.apiReq.PathParams
	req.apiReq.Body = builder.body
	return req
}

type CreateAilySessionRunReqBody struct {
	AppId      *string `json:"app_id,omitempty"`      // 应用 ID
	SkillId    *string `json:"skill_id,omitempty"`    // 技能 ID
	SkillInput *string `json:"skill_input,omitempty"` // 指定技能 ID 时可以同时指定技能输入
	Metadata   *string `json:"metadata,omitempty"`    // 其他透传信息
}

type CreateAilySessionRunReq struct {
	apiReq *larkcore.ApiReq
	Body   *CreateAilySessionRunReqBody `body:""`
}

type CreateAilySessionRunRespData struct {
	Run *Run `json:"run,omitempty"` // 运行信息
}

type CreateAilySessionRunResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *CreateAilySessionRunRespData `json:"data"` // 业务数据
}

func (resp *CreateAilySessionRunResp) Success() bool {
	return resp.Code == 0
}

type GetAilySessionRunReqBuilder struct {
	apiReq *larkcore.ApiReq
}

func NewGetAilySessionRunReqBuilder() *GetAilySessionRunReqBuilder {
	builder := &GetAilySessionRunReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 会话 ID
//
// 示例值：session_4dfunz7sp1g8m
func (builder *GetAilySessionRunReqBuilder) AilySessionId(ailySessionId string) *GetAilySessionRunReqBuilder {
	builder.apiReq.PathParams.Set("aily_session_id", fmt.Sprint(ailySessionId))
	return builder
}

// 运行 ID
//
// 示例值：run_4dfrxvctjqzzj
func (builder *GetAilySessionRunReqBuilder) RunId(runId string) *GetAilySessionRunReqBuilder {
	builder.apiReq.PathParams.Set("run_id", fmt.Sprint(runId))
	return builder
}

func (builder *GetAilySessionRunReqBuilder) Build() *GetAilySessionRunReq {
	req := &GetAilySessionRunReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.PathParams = builder.apiReq.PathParams
	return req
}

type GetAilySessionRunReq struct {
	apiReq *larkcore.ApiReq
}

type GetAilySessionRunRespData struct {
	Run *Run `json:"run,omitempty"` // 运行信息
}

type GetAilySessionRunResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *GetAilySessionRunRespData `json:"data"` // 业务数据
}

func (resp *GetAilySessionRunResp) Success() bool {
	return resp.Code == 0
}

type ListAilySessionRunReqBuilder struct {
	apiReq *larkcore.ApiReq
	limit  int // 最大返回多少记录，当使用迭代器访问时才有效
}

func NewListAilySessionRunReqBuilder() *ListAilySessionRunReqBuilder {
	builder := &ListAilySessionRunReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 最大返回多少记录，当使用迭代器访问时才有效
func (builder *ListAilySessionRunReqBuilder) Limit(limit int) *ListAilySessionRunReqBuilder {
	builder.limit = limit
	return builder
}

// 会话 ID
//
// 示例值：session_4dfunz7sp1g8m
func (builder *ListAilySessionRunReqBuilder) AilySessionId(ailySessionId string) *ListAilySessionRunReqBuilder {
	builder.apiReq.PathParams.Set("aily_session_id", fmt.Sprint(ailySessionId))
	return builder
}

// 页面大小
//
// 示例值：
func (builder *ListAilySessionRunReqBuilder) PageSize(pageSize int) *ListAilySessionRunReqBuilder {
	builder.apiReq.QueryParams.Set("page_size", fmt.Sprint(pageSize))
	return builder
}

// 分页偏移量
//
// 示例值：
func (builder *ListAilySessionRunReqBuilder) PageToken(pageToken string) *ListAilySessionRunReqBuilder {
	builder.apiReq.QueryParams.Set("page_token", fmt.Sprint(pageToken))
	return builder
}

func (builder *ListAilySessionRunReqBuilder) Build() *ListAilySessionRunReq {
	req := &ListAilySessionRunReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.Limit = builder.limit
	req.apiReq.PathParams = builder.apiReq.PathParams
	req.apiReq.QueryParams = builder.apiReq.QueryParams
	return req
}

type ListAilySessionRunReq struct {
	apiReq *larkcore.ApiReq
	Limit  int // 最多返回多少记录，只有在使用迭代器访问时，才有效

}

type ListAilySessionRunRespData struct {
	Runs      []*Run  `json:"runs,omitempty"`       // 运行列表
	PageToken *string `json:"page_token,omitempty"` // 下一页的起始偏移量
	HasMore   *bool   `json:"has_more,omitempty"`   // 是否还有更多数据
}

type ListAilySessionRunResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *ListAilySessionRunRespData `json:"data"` // 业务数据
}

func (resp *ListAilySessionRunResp) Success() bool {
	return resp.Code == 0
}

type ListAilySessionAilyMessageIterator struct {
	nextPageToken *string
	items         []*AilyMessage
	index         int
	limit         int
	ctx           context.Context
	req           *ListAilySessionAilyMessageReq
	listFunc      func(ctx context.Context, req *ListAilySessionAilyMessageReq, options ...larkcore.RequestOptionFunc) (*ListAilySessionAilyMessageResp, error)
	options       []larkcore.RequestOptionFunc
	curlNum       int
}

func (iterator *ListAilySessionAilyMessageIterator) Next() (bool, *AilyMessage, error) {
	// 达到最大量，则返回
	if iterator.limit > 0 && iterator.curlNum >= iterator.limit {
		return false, nil, nil
	}

	// 为0则拉取数据
	if iterator.index == 0 || iterator.index >= len(iterator.items) {
		if iterator.index != 0 && iterator.nextPageToken == nil {
			return false, nil, nil
		}
		if iterator.nextPageToken != nil {
			iterator.req.apiReq.QueryParams.Set("page_token", *iterator.nextPageToken)
		}
		resp, err := iterator.listFunc(iterator.ctx, iterator.req, iterator.options...)
		if err != nil {
			return false, nil, err
		}

		if resp.Code != 0 {
			return false, nil, errors.New(fmt.Sprintf("Code:%d,Msg:%s", resp.Code, resp.Msg))
		}

		if len(resp.Data.Messages) == 0 {
			return false, nil, nil
		}

		iterator.nextPageToken = resp.Data.PageToken
		iterator.items = resp.Data.Messages
		iterator.index = 0
	}

	block := iterator.items[iterator.index]
	iterator.index++
	iterator.curlNum++
	return true, block, nil
}

func (iterator *ListAilySessionAilyMessageIterator) NextPageToken() *string {
	return iterator.nextPageToken
}

type ListAilySessionRunIterator struct {
	nextPageToken *string
	items         []*Run
	index         int
	limit         int
	ctx           context.Context
	req           *ListAilySessionRunReq
	listFunc      func(ctx context.Context, req *ListAilySessionRunReq, options ...larkcore.RequestOptionFunc) (*ListAilySessionRunResp, error)
	options       []larkcore.RequestOptionFunc
	curlNum       int
}

func (iterator *ListAilySessionRunIterator) Next() (bool, *Run, error) {
	// 达到最大量，则返回
	if iterator.limit > 0 && iterator.curlNum >= iterator.limit {
		return false, nil, nil
	}

	// 为0则拉取数据
	if iterator.index == 0 || iterator.index >= len(iterator.items) {
		if iterator.index != 0 && iterator.nextPageToken == nil {
			return false, nil, nil
		}
		if iterator.nextPageToken != nil {
			iterator.req.apiReq.QueryParams.Set("page_token", *iterator.nextPageToken)
		}
		resp, err := iterator.listFunc(iterator.ctx, iterator.req, iterator.options...)
		if err != nil {
			return false, nil, err
		}

		if resp.Code != 0 {
			return false, nil, errors.New(fmt.Sprintf("Code:%d,Msg:%s", resp.Code, resp.Msg))
		}

		if len(resp.Data.Runs) == 0 {
			return false, nil, nil
		}

		iterator.nextPageToken = resp.Data.PageToken
		iterator.items = resp.Data.Runs
		iterator.index = 0
	}

	block := iterator.items[iterator.index]
	iterator.index++
	iterator.curlNum++
	return true, block, nil
}

func (iterator *ListAilySessionRunIterator) NextPageToken() *string {
	return iterator.nextPageToken
}
